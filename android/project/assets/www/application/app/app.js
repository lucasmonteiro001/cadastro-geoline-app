var require = meteorInstall({"imports":{"ui":{"public":{"entrevistas":{"add_entrevista.html":["./template.add_entrevista.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/public/entrevistas/add_entrevista.html                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.add_entrevista.js");                                                              // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"template.add_entrevista.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/public/entrevistas/template.add_entrevista.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("add_entrevista");                                                                                // 2
Template["add_entrevista"] = new Template("Template.add_entrevista", (function() {                                     // 3
  var view = this;                                                                                                     // 4
  return Blaze.If(function() {                                                                                         // 5
    return Spacebars.call(view.lookup("isCarregando"));                                                                // 6
  }, function() {                                                                                                      // 7
    return [ "\n        ", Spacebars.include(view.lookupTemplate("loading")), "\n    " ];                              // 8
  }, function() {                                                                                                      // 9
    return [ "\n        ", HTML.DIV({                                                                                  // 10
      "class": "row"                                                                                                   // 11
    }, "\n            ", HTML.DIV({                                                                                    // 12
      "class": "col-xs-6",                                                                                             // 13
      name: "selecao-informacoes-iniciais"                                                                             // 14
    }, "\n                ", HTML.TABLE({                                                                              // 15
      "class": "table table-stripped"                                                                                  // 16
    }, "\n                    ", HTML.THEAD("\n                    ", HTML.TR("\n                        ", HTML.TH("Cidades"), "\n                    "), "\n                    "), "\n                    ", HTML.TBODY("\n                    ", Blaze.Each(function() {
      return Spacebars.call(view.lookup("cidades"));                                                                   // 18
    }, function() {                                                                                                    // 19
      return [ "\n                        ", HTML.TR("\n                            ", HTML.TD({                       // 20
        name: "menu-cidade",                                                                                           // 21
        id: function() {                                                                                               // 22
          return Spacebars.mustache(view.lookup("_id"));                                                               // 23
        }                                                                                                              // 24
      }, Blaze.View("lookup:nome", function() {                                                                        // 25
        return Spacebars.mustache(view.lookup("nome"));                                                                // 26
      })), "\n                        "), "\n                    " ];                                                  // 27
    }), "\n                    "), "\n                "), "\n            "), "\n            ", HTML.DIV({              // 28
      "class": "col-xs-6",                                                                                             // 29
      name: "selecao-informacoes-iniciais"                                                                             // 30
    }, "\n                ", HTML.TABLE({                                                                              // 31
      "class": "table table-stripped tabela-bairros invisible"                                                         // 32
    }, "\n                    ", HTML.THEAD("\n                    ", HTML.TR("\n                        ", HTML.TH("Bairros"), "\n                    "), "\n                    "), "\n                    ", HTML.TBODY("\n                    ", Blaze.Each(function() {
      return Spacebars.call(view.lookup("bairros"));                                                                   // 34
    }, function() {                                                                                                    // 35
      return [ "\n                        ", HTML.TR("\n                            ", HTML.TD({                       // 36
        id: function() {                                                                                               // 37
          return Spacebars.mustache(view.lookup("id"));                                                                // 38
        },                                                                                                             // 39
        "class": "bairrosSelecionaveis"                                                                                // 40
      }, Blaze.View("lookup:bairro", function() {                                                                      // 41
        return Spacebars.mustache(view.lookup("bairro"));                                                              // 42
      })), "\n                        "), "\n                    " ];                                                  // 43
    }), "\n                    "), "\n                "), "\n            "), "\n            ", HTML.FORM({             // 44
      "class": "col-sm-12 invisible"                                                                                   // 45
    }, "\n                ", HTML.DIV({                                                                                // 46
      "class": "row"                                                                                                   // 47
    }, "\n                    ", HTML.DIV({                                                                            // 48
      "class": "col-xs-12"                                                                                             // 49
    }, "\n\n                        ", HTML.SECTION({                                                                  // 50
      "class": "active-question",                                                                                      // 51
      id: "q001"                                                                                                       // 52
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 53
      return {                                                                                                         // 54
        qn: Spacebars.call("Q1"),                                                                                      // 55
        questao: Spacebars.call("Código do imóvel"),                                                                   // 56
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 57
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 58
      };                                                                                                               // 59
    }, function() {                                                                                                    // 60
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 61
    }), "\n\n                            ", HTML.DIV({                                                                 // 62
      "class": "row"                                                                                                   // 63
    }, "\n\n                                ", Blaze._TemplateWith(function() {                                        // 64
      return {                                                                                                         // 65
        col: Spacebars.call("12"),                                                                                     // 66
        type: Spacebars.call("tel"),                                                                                   // 67
        id: Spacebars.call("q001-regiao"),                                                                             // 68
        label: Spacebars.call("Região"),                                                                               // 69
        placeholder: Spacebars.call("00"),                                                                             // 70
        value: Spacebars.call(view.lookup("regiaoCodigoSelecionada")),                                                 // 71
        disabled: Spacebars.call("disabled")                                                                           // 72
      };                                                                                                               // 73
    }, function() {                                                                                                    // 74
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 75
    }), "\n\n                                ", Blaze._TemplateWith(function() {                                       // 76
      return {                                                                                                         // 77
        col: Spacebars.call("12"),                                                                                     // 78
        type: Spacebars.call("tel"),                                                                                   // 79
        id: Spacebars.call("q001-bairro"),                                                                             // 80
        label: Spacebars.call("Bairro"),                                                                               // 81
        value: Spacebars.call(view.lookup("bairroCodigoSelecionado")),                                                 // 82
        disabled: Spacebars.call("disabled")                                                                           // 83
      };                                                                                                               // 84
    }, function() {                                                                                                    // 85
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 86
    }), "\n\n                                ", Blaze._TemplateWith(function() {                                       // 87
      return {                                                                                                         // 88
        col: Spacebars.call("12"),                                                                                     // 89
        type: Spacebars.call("tel"),                                                                                   // 90
        id: Spacebars.call("q001-quadra"),                                                                             // 91
        label: Spacebars.call("Quadra"),                                                                               // 92
        placeholder: Spacebars.call("000")                                                                             // 93
      };                                                                                                               // 94
    }, function() {                                                                                                    // 95
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 96
    }), "\n\n                                ", Blaze._TemplateWith(function() {                                       // 97
      return {                                                                                                         // 98
        col: Spacebars.call("12"),                                                                                     // 99
        type: Spacebars.call("tel"),                                                                                   // 100
        id: Spacebars.call("q001-lote"),                                                                               // 101
        label: Spacebars.call("Lote"),                                                                                 // 102
        placeholder: Spacebars.call("0000")                                                                            // 103
      };                                                                                                               // 104
    }, function() {                                                                                                    // 105
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 106
    }), "\n\n                                ", Blaze._TemplateWith(function() {                                       // 107
      return {                                                                                                         // 108
        col: Spacebars.call("12"),                                                                                     // 109
        type: Spacebars.call("tel"),                                                                                   // 110
        id: Spacebars.call("q001-edificacao"),                                                                         // 111
        label: Spacebars.call("Edificação"),                                                                           // 112
        placeholder: Spacebars.call("0000")                                                                            // 113
      };                                                                                                               // 114
    }, function() {                                                                                                    // 115
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 116
    }), "\n\n                            "), "\n\n                        "), "\n\n                        ", HTML.SECTION({
      "class": "not-active-question",                                                                                  // 118
      id: "q002"                                                                                                       // 119
    }, "\n\n\n                            ", Blaze._TemplateWith(function() {                                          // 120
      return {                                                                                                         // 121
        qn: Spacebars.call("Q2"),                                                                                      // 122
        questao: Spacebars.call("Endereço"),                                                                           // 123
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 124
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 125
      };                                                                                                               // 126
    }, function() {                                                                                                    // 127
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 128
    }), "\n\n\n                            ", Blaze._TemplateWith(function() {                                         // 129
      return {                                                                                                         // 130
        col: Spacebars.call("12"),                                                                                     // 131
        type: Spacebars.call("text"),                                                                                  // 132
        id: Spacebars.call("q002-rua"),                                                                                // 133
        label: Spacebars.call("Rua")                                                                                   // 134
      };                                                                                                               // 135
    }, function() {                                                                                                    // 136
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 137
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 138
      return {                                                                                                         // 139
        col: Spacebars.call("12"),                                                                                     // 140
        type: Spacebars.call("text"),                                                                                  // 141
        id: Spacebars.call("q002-numero"),                                                                             // 142
        label: Spacebars.call("Número")                                                                                // 143
      };                                                                                                               // 144
    }, function() {                                                                                                    // 145
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 146
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 147
      return {                                                                                                         // 148
        col: Spacebars.call("12"),                                                                                     // 149
        type: Spacebars.call("tel"),                                                                                   // 150
        id: Spacebars.call("q002-cep"),                                                                                // 151
        label: Spacebars.call("CEP"),                                                                                  // 152
        placeholder: Spacebars.call("99.999-999")                                                                      // 153
      };                                                                                                               // 154
    }, function() {                                                                                                    // 155
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 156
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 157
      return {                                                                                                         // 158
        col: Spacebars.call("12"),                                                                                     // 159
        type: Spacebars.call("text"),                                                                                  // 160
        id: Spacebars.call("q002-bairro"),                                                                             // 161
        label: Spacebars.call("Bairro"),                                                                               // 162
        value: Spacebars.call(view.lookup("bairroSelecionado"))                                                        // 163
      };                                                                                                               // 164
    }, function() {                                                                                                    // 165
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 166
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 167
      "class": "not-active-question",                                                                                  // 168
      id: "q003"                                                                                                       // 169
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 170
      return {                                                                                                         // 171
        qn: Spacebars.call("Q3"),                                                                                      // 172
        questao: Spacebars.call("Aceite"),                                                                             // 173
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 174
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 175
      };                                                                                                               // 176
    }, function() {                                                                                                    // 177
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 178
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 179
      return {                                                                                                         // 180
        col: Spacebars.call("12"),                                                                                     // 181
        id: Spacebars.call("q003-aceite"),                                                                             // 182
        label: Spacebars.call("O morador aceita participar do cadastro técnico multifinalitário?"),                    // 183
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não", "Ausente"))                  // 184
      };                                                                                                               // 185
    }, function() {                                                                                                    // 186
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 187
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 188
      "class": "not-active-question",                                                                                  // 189
      id: "q004"                                                                                                       // 190
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 191
      return {                                                                                                         // 192
        qn: Spacebars.call("Q4"),                                                                                      // 193
        questao: Spacebars.call("Dados do entrevistado"),                                                              // 194
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 195
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 196
      };                                                                                                               // 197
    }, function() {                                                                                                    // 198
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 199
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 200
      return {                                                                                                         // 201
        type: Spacebars.call("text"),                                                                                  // 202
        col: Spacebars.call("12"),                                                                                     // 203
        id: Spacebars.call("q004-nome"),                                                                               // 204
        label: Spacebars.call("Nome do entrevistado")                                                                  // 205
      };                                                                                                               // 206
    }, function() {                                                                                                    // 207
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 208
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 209
      return {                                                                                                         // 210
        type: Spacebars.call("tel"),                                                                                   // 211
        col: Spacebars.call("12"),                                                                                     // 212
        id: Spacebars.call("q004-telefone"),                                                                           // 213
        label: Spacebars.call("Telefone do entrevistado"),                                                             // 214
        placeholder: Spacebars.call("(31)99999-9999")                                                                  // 215
      };                                                                                                               // 216
    }, function() {                                                                                                    // 217
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 218
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 219
      "class": "not-active-question",                                                                                  // 220
      id: "q005"                                                                                                       // 221
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 222
      return {                                                                                                         // 223
        qn: Spacebars.call("Q5"),                                                                                      // 224
        questao: Spacebars.call("Sexo"),                                                                               // 225
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 226
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 227
      };                                                                                                               // 228
    }, function() {                                                                                                    // 229
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 230
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 231
      return {                                                                                                         // 232
        col: Spacebars.call("12"),                                                                                     // 233
        id: Spacebars.call("q005-sexo"),                                                                               // 234
        label: Spacebars.call("Sexo do entrevistado"),                                                                 // 235
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Feminino", "Masculino"))                  // 236
      };                                                                                                               // 237
    }, function() {                                                                                                    // 238
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 239
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 240
      "class": "not-active-question",                                                                                  // 241
      id: "q006"                                                                                                       // 242
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 243
      return {                                                                                                         // 244
        qn: Spacebars.call("Q6"),                                                                                      // 245
        questao: Spacebars.call("Condição de ocupação"),                                                               // 246
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 247
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 248
      };                                                                                                               // 249
    }, function() {                                                                                                    // 250
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 251
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 252
      return {                                                                                                         // 253
        col: Spacebars.call("12"),                                                                                     // 254
        id: Spacebars.call("q006-condicaoOcupacao"),                                                                   // 255
        label: Spacebars.call("Condição de ocupação"),                                                                 // 256
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Alugada", "Cedida", "Própria"))           // 257
      };                                                                                                               // 258
    }, function() {                                                                                                    // 259
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 260
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 261
      "class": "not-active-question",                                                                                  // 262
      id: "q007"                                                                                                       // 263
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 264
      return {                                                                                                         // 265
        qn: Spacebars.call("Q7"),                                                                                      // 266
        questao: Spacebars.call("Posição do entrevistado"),                                                            // 267
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 268
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 269
      };                                                                                                               // 270
    }, function() {                                                                                                    // 271
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 272
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 273
      return {                                                                                                         // 274
        col: Spacebars.call("12"),                                                                                     // 275
        id: Spacebars.call("q007-posicaoEntrevistado"),                                                                // 276
        label: Spacebars.call("Posição do entrevistado"),                                                              // 277
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Titular", "Inquilino"))                   // 278
      };                                                                                                               // 279
    }, function() {                                                                                                    // 280
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 281
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 282
      "class": "not-active-question",                                                                                  // 283
      id: "q008"                                                                                                       // 284
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 285
      return {                                                                                                         // 286
        qn: Spacebars.call("Q8"),                                                                                      // 287
        questao: Spacebars.call("Qualificação de Titular"),                                                            // 288
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 289
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 290
      };                                                                                                               // 291
    }, function() {                                                                                                    // 292
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 293
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 294
      return {                                                                                                         // 295
        type: Spacebars.call("text"),                                                                                  // 296
        col: Spacebars.call("12"),                                                                                     // 297
        id: Spacebars.call("q008-nome"),                                                                               // 298
        label: Spacebars.call("Qual a sua profissão")                                                                  // 299
      };                                                                                                               // 300
    }, function() {                                                                                                    // 301
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 302
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 303
      return {                                                                                                         // 304
        type: Spacebars.call("text"),                                                                                  // 305
        col: Spacebars.call("12"),                                                                                     // 306
        id: Spacebars.call("q008-natural"),                                                                            // 307
        label: Spacebars.call("Natural de")                                                                            // 308
      };                                                                                                               // 309
    }, function() {                                                                                                    // 310
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 311
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 312
      return {                                                                                                         // 313
        type: Spacebars.call("text"),                                                                                  // 314
        col: Spacebars.call("12"),                                                                                     // 315
        id: Spacebars.call("q008-nascimento"),                                                                         // 316
        label: Spacebars.call("Data de nascimento")                                                                    // 317
      };                                                                                                               // 318
    }, function() {                                                                                                    // 319
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 320
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 321
      return {                                                                                                         // 322
        type: Spacebars.call("tel"),                                                                                   // 323
        col: Spacebars.call("12"),                                                                                     // 324
        id: Spacebars.call("q008-cpf"),                                                                                // 325
        label: Spacebars.call("CPF"),                                                                                  // 326
        placeholder: Spacebars.call("999.999.999-99")                                                                  // 327
      };                                                                                                               // 328
    }, function() {                                                                                                    // 329
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 330
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 331
      return {                                                                                                         // 332
        type: Spacebars.call("text"),                                                                                  // 333
        col: Spacebars.call("12"),                                                                                     // 334
        id: Spacebars.call("q008-rg"),                                                                                 // 335
        label: Spacebars.call("RG")                                                                                    // 336
      };                                                                                                               // 337
    }, function() {                                                                                                    // 338
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 339
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 340
      "class": "not-active-question",                                                                                  // 341
      id: "q009"                                                                                                       // 342
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 343
      return {                                                                                                         // 344
        qn: Spacebars.call("Q9"),                                                                                      // 345
        questao: Spacebars.call("Estado civil"),                                                                       // 346
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 347
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 348
      };                                                                                                               // 349
    }, function() {                                                                                                    // 350
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 351
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 352
      return {                                                                                                         // 353
        col: Spacebars.call("12"),                                                                                     // 354
        id: Spacebars.call("q009-estadoCivil"),                                                                        // 355
        pergunta: Spacebars.call("Estado civil?"),                                                                     // 356
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Casado", "Divorciado", "Solteiro", "Viúvo"))
      };                                                                                                               // 358
    }, function() {                                                                                                    // 359
      return Spacebars.include(view.lookupTemplate("trigger"));                                                        // 360
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 361
      return {                                                                                                         // 362
        col: Spacebars.call("12"),                                                                                     // 363
        id: Spacebars.call("divorcio"),                                                                                // 364
        pergunta: Spacebars.call("O divórcio já foi averbado?"),                                                       // 365
        type: Spacebars.call("select"),                                                                                // 366
        isTriggeredBy: Spacebars.call("q009-estadoCivil"),                                                             // 367
        triggeredByValue: Spacebars.call("Divorciado"),                                                                // 368
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não")),                            // 369
        select: Spacebars.call(true)                                                                                   // 370
      };                                                                                                               // 371
    }, function() {                                                                                                    // 372
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 373
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 374
      return {                                                                                                         // 375
        col: Spacebars.call("12"),                                                                                     // 376
        id: Spacebars.call("certidaoCasamento"),                                                                       // 377
        pergunta: Spacebars.call("Possui certidão de casamento?"),                                                     // 378
        type: Spacebars.call("select"),                                                                                // 379
        isTriggeredBy: Spacebars.call("q009-estadoCivil"),                                                             // 380
        triggeredByValue: Spacebars.call("Casado"),                                                                    // 381
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não")),                            // 382
        select: Spacebars.call(true)                                                                                   // 383
      };                                                                                                               // 384
    }, function() {                                                                                                    // 385
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 386
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 387
      return {                                                                                                         // 388
        col: Spacebars.call("12"),                                                                                     // 389
        id: Spacebars.call("residenciaConjugue"),                                                                      // 390
        pergunta: Spacebars.call("Há quanto tempo reside com o cônjugue ou companheiro(a)?"),                          // 391
        type: Spacebars.call("select"),                                                                                // 392
        isTriggeredBy: Spacebars.call("q009-estadoCivil"),                                                             // 393
        triggeredByValue: Spacebars.call("Casado"),                                                                    // 394
        select: Spacebars.call(true),                                                                                  // 395
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "0 a 1 ano", "2 a 5 anos", "6 a 10 anos", "11 a 20 anos", "> 20 anos"))
      };                                                                                                               // 397
    }, function() {                                                                                                    // 398
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 399
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 400
      return {                                                                                                         // 401
        col: Spacebars.call("12"),                                                                                     // 402
        id: Spacebars.call("companheiroAjudouCompraImovel"),                                                           // 403
        pergunta: Spacebars.call("O companheiro(a) ajudou na construção/compra do imóvel?"),                           // 404
        type: Spacebars.call("select"),                                                                                // 405
        isTriggeredBy: Spacebars.call("q009-estadoCivil"),                                                             // 406
        triggeredByValue: Spacebars.call("Casado"),                                                                    // 407
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não")),                            // 408
        select: Spacebars.call(true)                                                                                   // 409
      };                                                                                                               // 410
    }, function() {                                                                                                    // 411
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 412
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 413
      return {                                                                                                         // 414
        type: Spacebars.call("text"),                                                                                  // 415
        col: Spacebars.call("12"),                                                                                     // 416
        id: Spacebars.call("nomeConjugue"),                                                                            // 417
        isTriggeredBy: Spacebars.call("q009-estadoCivil"),                                                             // 418
        triggeredByValue: Spacebars.call("Casado"),                                                                    // 419
        pergunta: Spacebars.call("Nome")                                                                               // 420
      };                                                                                                               // 421
    }, function() {                                                                                                    // 422
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 423
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 424
      return {                                                                                                         // 425
        type: Spacebars.call("text"),                                                                                  // 426
        col: Spacebars.call("12"),                                                                                     // 427
        id: Spacebars.call("profissaoConjugue"),                                                                       // 428
        isTriggeredBy: Spacebars.call("q009-estadoCivil"),                                                             // 429
        triggeredByValue: Spacebars.call("Casado"),                                                                    // 430
        pergunta: Spacebars.call("Profissão")                                                                          // 431
      };                                                                                                               // 432
    }, function() {                                                                                                    // 433
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 434
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 435
      return {                                                                                                         // 436
        type: Spacebars.call("text"),                                                                                  // 437
        col: Spacebars.call("12"),                                                                                     // 438
        id: Spacebars.call("naturalConjugue"),                                                                         // 439
        isTriggeredBy: Spacebars.call("q009-estadoCivil"),                                                             // 440
        triggeredByValue: Spacebars.call("Casado"),                                                                    // 441
        pergunta: Spacebars.call("Natural de")                                                                         // 442
      };                                                                                                               // 443
    }, function() {                                                                                                    // 444
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 445
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 446
      return {                                                                                                         // 447
        type: Spacebars.call("text"),                                                                                  // 448
        col: Spacebars.call("12"),                                                                                     // 449
        id: Spacebars.call("nacionalidadeConjugue"),                                                                   // 450
        isTriggeredBy: Spacebars.call("q009-estadoCivil"),                                                             // 451
        triggeredByValue: Spacebars.call("Casado"),                                                                    // 452
        pergunta: Spacebars.call("Nacionalidade")                                                                      // 453
      };                                                                                                               // 454
    }, function() {                                                                                                    // 455
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 456
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 457
      return {                                                                                                         // 458
        type: Spacebars.call("text"),                                                                                  // 459
        col: Spacebars.call("12"),                                                                                     // 460
        id: Spacebars.call("rgConjugue"),                                                                              // 461
        isTriggeredBy: Spacebars.call("q009-estadoCivil"),                                                             // 462
        triggeredByValue: Spacebars.call("Casado"),                                                                    // 463
        pergunta: Spacebars.call("RG")                                                                                 // 464
      };                                                                                                               // 465
    }, function() {                                                                                                    // 466
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 467
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 468
      return {                                                                                                         // 469
        type: Spacebars.call("tel"),                                                                                   // 470
        col: Spacebars.call("12"),                                                                                     // 471
        id: Spacebars.call("cpfConjugue"),                                                                             // 472
        isTriggeredBy: Spacebars.call("q009-estadoCivil"),                                                             // 473
        triggeredByValue: Spacebars.call("Casado"),                                                                    // 474
        pergunta: Spacebars.call("CPF"),                                                                               // 475
        placeholder: Spacebars.call("999.999.999-99")                                                                  // 476
      };                                                                                                               // 477
    }, function() {                                                                                                    // 478
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 479
    }), "\n\n\n                        "), "\n\n                        ", HTML.SECTION({                              // 480
      "class": "not-active-question",                                                                                  // 481
      id: "q010"                                                                                                       // 482
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 483
      return {                                                                                                         // 484
        qn: Spacebars.call("Q10"),                                                                                     // 485
        questao: Spacebars.call("Dados complementares"),                                                               // 486
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 487
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 488
      };                                                                                                               // 489
    }, function() {                                                                                                    // 490
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 491
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 492
      return {                                                                                                         // 493
        type: Spacebars.call("tel"),                                                                                   // 494
        col: Spacebars.call("12"),                                                                                     // 495
        id: Spacebars.call("q010-numeroOcupantes"),                                                                    // 496
        label: Spacebars.call("Número de ocupantes")                                                                   // 497
      };                                                                                                               // 498
    }, function() {                                                                                                    // 499
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 500
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 501
      return {                                                                                                         // 502
        type: Spacebars.call("tel"),                                                                                   // 503
        col: Spacebars.call("12"),                                                                                     // 504
        id: Spacebars.call("q010-numeroFilhos"),                                                                       // 505
        label: Spacebars.call("Número de filhos")                                                                      // 506
      };                                                                                                               // 507
    }, function() {                                                                                                    // 508
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 509
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 510
      return {                                                                                                         // 511
        type: Spacebars.call("tel"),                                                                                   // 512
        col: Spacebars.call("12"),                                                                                     // 513
        id: Spacebars.call("q010-numeroOcupantesIdadeEscolar"),                                                        // 514
        label: Spacebars.call("Número de filhos em idade escolar")                                                     // 515
      };                                                                                                               // 516
    }, function() {                                                                                                    // 517
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 518
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 519
      "class": "not-active-question",                                                                                  // 520
      id: "q011"                                                                                                       // 521
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 522
      return {                                                                                                         // 523
        qn: Spacebars.call("Q11"),                                                                                     // 524
        questao: Spacebars.call("Uso"),                                                                                // 525
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 526
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 527
      };                                                                                                               // 528
    }, function() {                                                                                                    // 529
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 530
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 531
      return {                                                                                                         // 532
        col: Spacebars.call("12"),                                                                                     // 533
        id: Spacebars.call("q011-uso"),                                                                                // 534
        label: Spacebars.call("Tipo de uso"),                                                                          // 535
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Residência unifamiliar", "Residência multifamiliar", "Comercial", "Industrial", "Serviço", "Residencial comercial", "Outro"))
      };                                                                                                               // 537
    }, function() {                                                                                                    // 538
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 539
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 540
      "class": "not-active-question",                                                                                  // 541
      id: "q012"                                                                                                       // 542
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 543
      return {                                                                                                         // 544
        qn: Spacebars.call("Q12"),                                                                                     // 545
        questao: Spacebars.call("É único proprietário?"),                                                              // 546
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 547
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 548
      };                                                                                                               // 549
    }, function() {                                                                                                    // 550
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 551
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 552
      return {                                                                                                         // 553
        col: Spacebars.call("12"),                                                                                     // 554
        id: Spacebars.call("q012-unicoProprietario"),                                                                  // 555
        pergunta: Spacebars.call("É o único proprietário?"),                                                           // 556
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 557
      };                                                                                                               // 558
    }, function() {                                                                                                    // 559
      return Spacebars.include(view.lookupTemplate("trigger"));                                                        // 560
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 561
      return {                                                                                                         // 562
        col: Spacebars.call("12"),                                                                                     // 563
        id: Spacebars.call("quantidadeProprietarios"),                                                                 // 564
        pergunta: Spacebars.call("Quantos proprietários ?"),                                                           // 565
        type: Spacebars.call("tel"),                                                                                   // 566
        isTriggeredBy: Spacebars.call("q012-unicoProprietario"),                                                       // 567
        triggeredByValue: Spacebars.call("Não")                                                                        // 568
      };                                                                                                               // 569
    }, function() {                                                                                                    // 570
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 571
    }), "\n\n\n                        "), "\n\n                        ", HTML.SECTION({                              // 572
      "class": "not-active-question",                                                                                  // 573
      id: "q013"                                                                                                       // 574
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 575
      return {                                                                                                         // 576
        qn: Spacebars.call("Q13"),                                                                                     // 577
        questao: Spacebars.call("Possui outro imóvel?"),                                                               // 578
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 579
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 580
      };                                                                                                               // 581
    }, function() {                                                                                                    // 582
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 583
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 584
      return {                                                                                                         // 585
        col: Spacebars.call("12"),                                                                                     // 586
        id: Spacebars.call("q013-possuiOutroImovel"),                                                                  // 587
        pergunta: Spacebars.call("Possui outro imóvel?"),                                                              // 588
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 589
      };                                                                                                               // 590
    }, function() {                                                                                                    // 591
      return Spacebars.include(view.lookupTemplate("trigger"));                                                        // 592
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 593
      return {                                                                                                         // 594
        col: Spacebars.call("12"),                                                                                     // 595
        id: Spacebars.call("quantosImoveis"),                                                                          // 596
        pergunta: Spacebars.call("Quantos imóveis?"),                                                                  // 597
        type: Spacebars.call("tel"),                                                                                   // 598
        isTriggeredBy: Spacebars.call("q013-possuiOutroImovel"),                                                       // 599
        triggeredByValue: Spacebars.call("Sim")                                                                        // 600
      };                                                                                                               // 601
    }, function() {                                                                                                    // 602
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 603
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 604
      return {                                                                                                         // 605
        col: Spacebars.call("12"),                                                                                     // 606
        id: Spacebars.call("localidadeOutroImovel"),                                                                   // 607
        pergunta: Spacebars.call("Qual a localidade do(s) outro(s) imóvel(is)?"),                                      // 608
        type: Spacebars.call("text"),                                                                                  // 609
        isTriggeredBy: Spacebars.call("q013-possuiOutroImovel"),                                                       // 610
        triggeredByValue: Spacebars.call("Sim")                                                                        // 611
      };                                                                                                               // 612
    }, function() {                                                                                                    // 613
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 614
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 615
      return {                                                                                                         // 616
        col: Spacebars.call("12"),                                                                                     // 617
        id: Spacebars.call("escrituraRegistro"),                                                                       // 618
        pergunta: Spacebars.call("Possui escritura ou registro?"),                                                     // 619
        type: Spacebars.call("select"),                                                                                // 620
        isTriggeredBy: Spacebars.call("q013-possuiOutroImovel"),                                                       // 621
        triggeredByValue: Spacebars.call("Sim"),                                                                       // 622
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não")),                            // 623
        select: Spacebars.call(true)                                                                                   // 624
      };                                                                                                               // 625
    }, function() {                                                                                                    // 626
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 627
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 628
      return {                                                                                                         // 629
        col: Spacebars.call("12"),                                                                                     // 630
        id: Spacebars.call("tipoDocumentoRegistroImovel"),                                                             // 631
        pergunta: Spacebars.call("Qual documento possui?"),                                                            // 632
        type: Spacebars.call("text"),                                                                                  // 633
        isTriggeredBy: Spacebars.call("escrituraRegistro"),                                                            // 634
        triggeredByValue: Spacebars.call("Não")                                                                        // 635
      };                                                                                                               // 636
    }, function() {                                                                                                    // 637
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 638
    }), "\n                            \n                        "), "\n\n                        ", HTML.SECTION({    // 639
      "class": "not-active-question",                                                                                  // 640
      id: "q014"                                                                                                       // 641
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 642
      return {                                                                                                         // 643
        qn: Spacebars.call("Q14"),                                                                                     // 644
        questao: Spacebars.call("Já foi beneficiado com legitimação de posse anteriormente?"),                         // 645
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 646
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 647
      };                                                                                                               // 648
    }, function() {                                                                                                    // 649
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 650
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 651
      return {                                                                                                         // 652
        col: Spacebars.call("12"),                                                                                     // 653
        id: Spacebars.call("q014-legitimacaoPosse"),                                                                   // 654
        label: Spacebars.call("Já foi beneficiado com legitimação de posse anteriormente?"),                           // 655
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 656
      };                                                                                                               // 657
    }, function() {                                                                                                    // 658
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 659
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 660
      "class": "not-active-question",                                                                                  // 661
      id: "q015"                                                                                                       // 662
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 663
      return {                                                                                                         // 664
        qn: Spacebars.call("Q15"),                                                                                     // 665
        questao: Spacebars.call("Trabalha?"),                                                                          // 666
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 667
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 668
      };                                                                                                               // 669
    }, function() {                                                                                                    // 670
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 671
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 672
      return {                                                                                                         // 673
        col: Spacebars.call("12"),                                                                                     // 674
        id: Spacebars.call("q015-trabalha"),                                                                           // 675
        pergunta: Spacebars.call("Trabalha?"),                                                                         // 676
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 677
      };                                                                                                               // 678
    }, function() {                                                                                                    // 679
      return Spacebars.include(view.lookupTemplate("trigger"));                                                        // 680
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 681
      return {                                                                                                         // 682
        col: Spacebars.call("12"),                                                                                     // 683
        id: Spacebars.call("formalizado"),                                                                             // 684
        pergunta: Spacebars.call("Formalizado?"),                                                                      // 685
        type: Spacebars.call("select"),                                                                                // 686
        isTriggeredBy: Spacebars.call("q015-trabalha"),                                                                // 687
        triggeredByValue: Spacebars.call("Sim"),                                                                       // 688
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não")),                            // 689
        select: Spacebars.call(true)                                                                                   // 690
      };                                                                                                               // 691
    }, function() {                                                                                                    // 692
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 693
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 694
      "class": "not-active-question",                                                                                  // 695
      id: "q016"                                                                                                       // 696
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 697
      return {                                                                                                         // 698
        qn: Spacebars.call("Q16"),                                                                                     // 699
        questao: Spacebars.call("Qual a sua principal fonte de renda?"),                                               // 700
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 701
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 702
      };                                                                                                               // 703
    }, function() {                                                                                                    // 704
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 705
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 706
      return {                                                                                                         // 707
        col: Spacebars.call("12"),                                                                                     // 708
        id: Spacebars.call("q016-fonteRenda"),                                                                         // 709
        label: Spacebars.call("Qual a sua principal fonte de renda?"),                                                 // 710
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Trabalho formal (carteira assinada)", "Trabalho autônomo", "Aluguel de imóveis", "Pensão", "Aposentadoria", "Outros"))
      };                                                                                                               // 712
    }, function() {                                                                                                    // 713
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 714
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 715
      "class": "not-active-question",                                                                                  // 716
      id: "q017"                                                                                                       // 717
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 718
      return {                                                                                                         // 719
        qn: Spacebars.call("Q17"),                                                                                     // 720
        questao: Spacebars.call("Qual é a renda familiar?"),                                                           // 721
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 722
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 723
      };                                                                                                               // 724
    }, function() {                                                                                                    // 725
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 726
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 727
      return {                                                                                                         // 728
        col: Spacebars.call("12"),                                                                                     // 729
        id: Spacebars.call("q017-rendaFamiliar"),                                                                      // 730
        label: Spacebars.call("Qual é a renda familiar?"),                                                             // 731
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Menos de 1 SM (menor que R$ 880,00)", "De 1 SM a 3 SM (entre R$ 880,01 a R$ 2.640,00)", "De 3 SM a 5 SM (entre RS 2.640,01 a R$ 4.400,00)", "De 5 SM até 10 SM (entre R$ 4.4001 a R$ 8.800,00)", "Maior que 10 SM (acima de R$ 8.800,00)", "NS/NR"))
      };                                                                                                               // 733
    }, function() {                                                                                                    // 734
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 735
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 736
      "class": "not-active-question",                                                                                  // 737
      id: "q018"                                                                                                       // 738
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 739
      return {                                                                                                         // 740
        qn: Spacebars.call("Q18"),                                                                                     // 741
        questao: Spacebars.call("Cadastro físico do imóvel"),                                                          // 742
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 743
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 744
      };                                                                                                               // 745
    }, function() {                                                                                                    // 746
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 747
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 748
      return {                                                                                                         // 749
        type: Spacebars.call("tel"),                                                                                   // 750
        col: Spacebars.call("12"),                                                                                     // 751
        id: Spacebars.call("q018-area"),                                                                               // 752
        label: Spacebars.call("Área")                                                                                  // 753
      };                                                                                                               // 754
    }, function() {                                                                                                    // 755
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 756
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 757
      return {                                                                                                         // 758
        type: Spacebars.call("tel"),                                                                                   // 759
        col: Spacebars.call("12"),                                                                                     // 760
        id: Spacebars.call("q018-areaConstruida"),                                                                     // 761
        label: Spacebars.call("Área construída")                                                                       // 762
      };                                                                                                               // 763
    }, function() {                                                                                                    // 764
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 765
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 766
      return {                                                                                                         // 767
        type: Spacebars.call("text"),                                                                                  // 768
        col: Spacebars.call("12"),                                                                                     // 769
        id: Spacebars.call("q018-perimetro"),                                                                          // 770
        label: Spacebars.call("Perímetro")                                                                             // 771
      };                                                                                                               // 772
    }, function() {                                                                                                    // 773
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 774
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 775
      return {                                                                                                         // 776
        type: Spacebars.call("tel"),                                                                                   // 777
        col: Spacebars.call("12"),                                                                                     // 778
        id: Spacebars.call("q018-edificacoesMesmoLote"),                                                               // 779
        label: Spacebars.call("Número de edificações no mesmo lote")                                                   // 780
      };                                                                                                               // 781
    }, function() {                                                                                                    // 782
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 783
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 784
      "class": "not-active-question",                                                                                  // 785
      id: "q019"                                                                                                       // 786
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 787
      return {                                                                                                         // 788
        qn: Spacebars.call("Q19"),                                                                                     // 789
        questao: Spacebars.call("Estado da edificação"),                                                               // 790
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 791
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 792
      };                                                                                                               // 793
    }, function() {                                                                                                    // 794
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 795
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 796
      return {                                                                                                         // 797
        col: Spacebars.call("12"),                                                                                     // 798
        id: Spacebars.call("q019-estadoEdificacao"),                                                                   // 799
        label: Spacebars.call("Estado da edificação"),                                                                 // 800
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Muito bom", "Bom", "Razoável", "Ruim"))   // 801
      };                                                                                                               // 802
    }, function() {                                                                                                    // 803
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 804
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 805
      "class": "not-active-question",                                                                                  // 806
      id: "q020"                                                                                                       // 807
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 808
      return {                                                                                                         // 809
        qn: Spacebars.call("Q20"),                                                                                     // 810
        questao: Spacebars.call("Tipo de construção"),                                                                 // 811
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 812
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 813
      };                                                                                                               // 814
    }, function() {                                                                                                    // 815
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 816
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 817
      return {                                                                                                         // 818
        col: Spacebars.call("12"),                                                                                     // 819
        id: Spacebars.call("q020-tipoConstrucao"),                                                                     // 820
        label: Spacebars.call("Tipo de construção"),                                                                   // 821
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Alvenaria", "Madeira", "Estuque", "Outros"))
      };                                                                                                               // 823
    }, function() {                                                                                                    // 824
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 825
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 826
      "class": "not-active-question",                                                                                  // 827
      id: "q021"                                                                                                       // 828
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 829
      return {                                                                                                         // 830
        qn: Spacebars.call("Q21"),                                                                                     // 831
        questao: Spacebars.call("Número de pavimentos que ocupa?"),                                                    // 832
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 833
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 834
      };                                                                                                               // 835
    }, function() {                                                                                                    // 836
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 837
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 838
      return {                                                                                                         // 839
        type: Spacebars.call("tel"),                                                                                   // 840
        col: Spacebars.call("12"),                                                                                     // 841
        id: Spacebars.call("q021-numeroPavimentos"),                                                                   // 842
        label: Spacebars.call("Número de pavimentos que ocupa?")                                                       // 843
      };                                                                                                               // 844
    }, function() {                                                                                                    // 845
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 846
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 847
      "class": "not-active-question",                                                                                  // 848
      id: "q022"                                                                                                       // 849
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 850
      return {                                                                                                         // 851
        qn: Spacebars.call("Q22"),                                                                                     // 852
        questao: Spacebars.call("O acesso é"),                                                                         // 853
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 854
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 855
      };                                                                                                               // 856
    }, function() {                                                                                                    // 857
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 858
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 859
      return {                                                                                                         // 860
        col: Spacebars.call("12"),                                                                                     // 861
        id: Spacebars.call("q022-tipoAcesso"),                                                                         // 862
        label: Spacebars.call("O acesso é"),                                                                           // 863
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Comum a mais de um morador", "Individual/Particular"))
      };                                                                                                               // 865
    }, function() {                                                                                                    // 866
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 867
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 868
      "class": "not-active-question",                                                                                  // 869
      id: "q023"                                                                                                       // 870
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 871
      return {                                                                                                         // 872
        qn: Spacebars.call("Q23"),                                                                                     // 873
        questao: Spacebars.call("Entrada da para"),                                                                    // 874
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 875
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 876
      };                                                                                                               // 877
    }, function() {                                                                                                    // 878
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 879
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 880
      return {                                                                                                         // 881
        col: Spacebars.call("12"),                                                                                     // 882
        id: Spacebars.call("q023-tipoAcesso"),                                                                         // 883
        label: Spacebars.call("Entrada da para"),                                                                      // 884
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Beco", "Rua sem saída", "Rua principal", "Avenida", "Outros"))
      };                                                                                                               // 886
    }, function() {                                                                                                    // 887
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 888
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 889
      "class": "not-active-question",                                                                                  // 890
      id: "q024"                                                                                                       // 891
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 892
      return {                                                                                                         // 893
        qn: Spacebars.call("Q24"),                                                                                     // 894
        questao: Spacebars.call("Possui área livre?"),                                                                 // 895
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 896
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 897
      };                                                                                                               // 898
    }, function() {                                                                                                    // 899
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 900
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 901
      return {                                                                                                         // 902
        col: Spacebars.call("12"),                                                                                     // 903
        id: Spacebars.call("q024-possuiAreaLivre"),                                                                    // 904
        pergunta: Spacebars.call("Possui área livre?"),                                                                // 905
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 906
      };                                                                                                               // 907
    }, function() {                                                                                                    // 908
      return Spacebars.include(view.lookupTemplate("trigger"));                                                        // 909
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 910
      return {                                                                                                         // 911
        col: Spacebars.call("12"),                                                                                     // 912
        id: Spacebars.call("tipoAreaLivre"),                                                                           // 913
        pergunta: Spacebars.call("Qual tipo?"),                                                                        // 914
        type: Spacebars.call("select"),                                                                                // 915
        isTriggeredBy: Spacebars.call("q024-possuiAreaLivre"),                                                         // 916
        triggeredByValue: Spacebars.call("Sim"),                                                                       // 917
        select: Spacebars.call(true),                                                                                  // 918
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Quintal", "Quintal frente", "Quintal fundos", "Laje com cobertura", "Laje semi-aberta", "Laje semi-coberta", "Área de serviço", "Jardim da frente", "Jardim nos fundos", "Outros"))
      };                                                                                                               // 920
    }, function() {                                                                                                    // 921
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 922
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 923
      "class": "not-active-question",                                                                                  // 924
      id: "q025"                                                                                                       // 925
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 926
      return {                                                                                                         // 927
        qn: Spacebars.call("Q25"),                                                                                     // 928
        questao: Spacebars.call("Histórico da posse"),                                                                 // 929
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 930
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 931
      };                                                                                                               // 932
    }, function() {                                                                                                    // 933
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 934
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 935
      return {                                                                                                         // 936
        type: Spacebars.call("text"),                                                                                  // 937
        col: Spacebars.call("12"),                                                                                     // 938
        id: Spacebars.call("q025-deQuemComprou"),                                                                      // 939
        label: Spacebars.call("De quem comprou?")                                                                      // 940
      };                                                                                                               // 941
    }, function() {                                                                                                    // 942
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 943
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 944
      return {                                                                                                         // 945
        type: Spacebars.call("text"),                                                                                  // 946
        col: Spacebars.call("12"),                                                                                     // 947
        id: Spacebars.call("q025-quandoComprou"),                                                                      // 948
        label: Spacebars.call("Quando comprou?")                                                                       // 949
      };                                                                                                               // 950
    }, function() {                                                                                                    // 951
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 952
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 953
      return {                                                                                                         // 954
        type: Spacebars.call("text"),                                                                                  // 955
        col: Spacebars.call("12"),                                                                                     // 956
        id: Spacebars.call("q025-comoOcupou"),                                                                         // 957
        label: Spacebars.call("Como ocupou?")                                                                          // 958
      };                                                                                                               // 959
    }, function() {                                                                                                    // 960
      return Spacebars.include(view.lookupTemplate("input"));                                                          // 961
    }), "\n\n\n                        "), "\n\n                        ", HTML.SECTION({                              // 962
      "class": "not-active-question",                                                                                  // 963
      id: "q026"                                                                                                       // 964
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 965
      return {                                                                                                         // 966
        qn: Spacebars.call("Q26"),                                                                                     // 967
        questao: Spacebars.call("Possui contrato de compra e venda ou outro documento?"),                              // 968
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 969
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 970
      };                                                                                                               // 971
    }, function() {                                                                                                    // 972
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 973
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 974
      return {                                                                                                         // 975
        col: Spacebars.call("12"),                                                                                     // 976
        id: Spacebars.call("q026-possuiContratoCompraVenda"),                                                          // 977
        pergunta: Spacebars.call("Possui contrato de compra e venda ou outro documento?"),                             // 978
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 979
      };                                                                                                               // 980
    }, function() {                                                                                                    // 981
      return Spacebars.include(view.lookupTemplate("trigger"));                                                        // 982
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 983
      return {                                                                                                         // 984
        col: Spacebars.call("12"),                                                                                     // 985
        id: Spacebars.call("contratoCompraVenda"),                                                                     // 986
        pergunta: Spacebars.call("Qual tipo de contrato?"),                                                            // 987
        type: Spacebars.call("text"),                                                                                  // 988
        isTriggeredBy: Spacebars.call("q026-possuiContratoCompraVenda"),                                               // 989
        triggeredByValue: Spacebars.call("Sim")                                                                        // 990
      };                                                                                                               // 991
    }, function() {                                                                                                    // 992
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 993
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 994
      "class": "not-active-question",                                                                                  // 995
      id: "q027"                                                                                                       // 996
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 997
      return {                                                                                                         // 998
        qn: Spacebars.call("Q27"),                                                                                     // 999
        questao: Spacebars.call("Paga IPTU do imóvel?"),                                                               // 1000
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1001
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1002
      };                                                                                                               // 1003
    }, function() {                                                                                                    // 1004
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 1005
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1006
      return {                                                                                                         // 1007
        col: Spacebars.call("12"),                                                                                     // 1008
        id: Spacebars.call("q027-pagaIptuImovel"),                                                                     // 1009
        pergunta: Spacebars.call("Paga IPTU do imóvel?"),                                                              // 1010
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 1011
      };                                                                                                               // 1012
    }, function() {                                                                                                    // 1013
      return Spacebars.include(view.lookupTemplate("trigger"));                                                        // 1014
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1015
      return {                                                                                                         // 1016
        col: Spacebars.call("12"),                                                                                     // 1017
        id: Spacebars.call("pagaIptuImovel"),                                                                          // 1018
        pergunta: Spacebars.call("Desde quando?"),                                                                     // 1019
        type: Spacebars.call("text"),                                                                                  // 1020
        isTriggeredBy: Spacebars.call("q027-pagaIptuImovel"),                                                          // 1021
        triggeredByValue: Spacebars.call("Sim")                                                                        // 1022
      };                                                                                                               // 1023
    }, function() {                                                                                                    // 1024
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 1025
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 1026
      "class": "not-active-question",                                                                                  // 1027
      id: "q028"                                                                                                       // 1028
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 1029
      return {                                                                                                         // 1030
        qn: Spacebars.call("Q28"),                                                                                     // 1031
        questao: Spacebars.call("Infraestrutura básica - abastecimento de água"),                                      // 1032
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1033
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1034
      };                                                                                                               // 1035
    }, function() {                                                                                                    // 1036
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 1037
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1038
      return {                                                                                                         // 1039
        col: Spacebars.call("12"),                                                                                     // 1040
        id: Spacebars.call("q028-abastecimentoAgua"),                                                                  // 1041
        label: Spacebars.call("Infraestrutura básica - abastecimento de água"),                                        // 1042
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Copasa", "Poço artesiano", "Nascente ou curso d'água", "Cisterna", "Outros"))
      };                                                                                                               // 1044
    }, function() {                                                                                                    // 1045
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 1046
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 1047
      "class": "not-active-question",                                                                                  // 1048
      id: "q029"                                                                                                       // 1049
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 1050
      return {                                                                                                         // 1051
        qn: Spacebars.call("Q29"),                                                                                     // 1052
        questao: Spacebars.call("Esgotamento sanitário"),                                                              // 1053
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1054
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1055
      };                                                                                                               // 1056
    }, function() {                                                                                                    // 1057
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 1058
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1059
      return {                                                                                                         // 1060
        col: Spacebars.call("12"),                                                                                     // 1061
        id: Spacebars.call("q029-esgotamentoSanitario"),                                                               // 1062
        label: Spacebars.call("Esgotamento sanitário"),                                                                // 1063
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 1064
      };                                                                                                               // 1065
    }, function() {                                                                                                    // 1066
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 1067
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 1068
      "class": "not-active-question",                                                                                  // 1069
      id: "q030"                                                                                                       // 1070
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 1071
      return {                                                                                                         // 1072
        qn: Spacebars.call("Q30"),                                                                                     // 1073
        questao: Spacebars.call("Coleta de lixo"),                                                                     // 1074
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1075
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1076
      };                                                                                                               // 1077
    }, function() {                                                                                                    // 1078
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 1079
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1080
      return {                                                                                                         // 1081
        col: Spacebars.call("12"),                                                                                     // 1082
        id: Spacebars.call("q030-coletaLixo"),                                                                         // 1083
        pergunta: Spacebars.call("Coleta de lixo"),                                                                    // 1084
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 1085
      };                                                                                                               // 1086
    }, function() {                                                                                                    // 1087
      return Spacebars.include(view.lookupTemplate("trigger"));                                                        // 1088
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1089
      return {                                                                                                         // 1090
        col: Spacebars.call("12"),                                                                                     // 1091
        id: Spacebars.call("pagaIptuImovel"),                                                                          // 1092
        pergunta: Spacebars.call("Quantas vezes por semana?"),                                                         // 1093
        type: Spacebars.call("tel"),                                                                                   // 1094
        isTriggeredBy: Spacebars.call("q030-coletaLixo"),                                                              // 1095
        triggeredByValue: Spacebars.call("Sim")                                                                        // 1096
      };                                                                                                               // 1097
    }, function() {                                                                                                    // 1098
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 1099
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 1100
      "class": "not-active-question",                                                                                  // 1101
      id: "q031"                                                                                                       // 1102
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 1103
      return {                                                                                                         // 1104
        qn: Spacebars.call("Q31"),                                                                                     // 1105
        questao: Spacebars.call("Transporte público"),                                                                 // 1106
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1107
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1108
      };                                                                                                               // 1109
    }, function() {                                                                                                    // 1110
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 1111
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1112
      return {                                                                                                         // 1113
        col: Spacebars.call("12"),                                                                                     // 1114
        id: Spacebars.call("q031-transportePublico"),                                                                  // 1115
        pergunta: Spacebars.call("Transporte público"),                                                                // 1116
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 1117
      };                                                                                                               // 1118
    }, function() {                                                                                                    // 1119
      return Spacebars.include(view.lookupTemplate("trigger"));                                                        // 1120
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1121
      return {                                                                                                         // 1122
        col: Spacebars.call("12"),                                                                                     // 1123
        id: Spacebars.call("transportePublico"),                                                                       // 1124
        pergunta: Spacebars.call("Quantas linhas de ônibus?"),                                                         // 1125
        type: Spacebars.call("tel"),                                                                                   // 1126
        isTriggeredBy: Spacebars.call("q031-transportePublico"),                                                       // 1127
        triggeredByValue: Spacebars.call("Sim")                                                                        // 1128
      };                                                                                                               // 1129
    }, function() {                                                                                                    // 1130
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 1131
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 1132
      "class": "not-active-question",                                                                                  // 1133
      id: "q032"                                                                                                       // 1134
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 1135
      return {                                                                                                         // 1136
        qn: Spacebars.call("Q32"),                                                                                     // 1137
        questao: Spacebars.call("Qual avaliação faz do transporte público?"),                                          // 1138
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1139
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1140
      };                                                                                                               // 1141
    }, function() {                                                                                                    // 1142
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 1143
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1144
      return {                                                                                                         // 1145
        col: Spacebars.call("12"),                                                                                     // 1146
        id: Spacebars.call("q032-avaliacaoTransportePublico"),                                                         // 1147
        label: Spacebars.call("Qual avaliação faz do transporte público?"),                                            // 1148
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Suficiente", "Ineficiente"))              // 1149
      };                                                                                                               // 1150
    }, function() {                                                                                                    // 1151
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 1152
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 1153
      "class": "not-active-question",                                                                                  // 1154
      id: "q033"                                                                                                       // 1155
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 1156
      return {                                                                                                         // 1157
        qn: Spacebars.call("Q33"),                                                                                     // 1158
        questao: Spacebars.call("Iluminação pública"),                                                                 // 1159
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1160
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1161
      };                                                                                                               // 1162
    }, function() {                                                                                                    // 1163
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 1164
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1165
      return {                                                                                                         // 1166
        col: Spacebars.call("12"),                                                                                     // 1167
        id: Spacebars.call("q033-iluminacaoPublica"),                                                                  // 1168
        pergunta: Spacebars.call("Iluminação pública"),                                                                // 1169
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 1170
      };                                                                                                               // 1171
    }, function() {                                                                                                    // 1172
      return Spacebars.include(view.lookupTemplate("trigger"));                                                        // 1173
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1174
      return {                                                                                                         // 1175
        col: Spacebars.call("12"),                                                                                     // 1176
        id: Spacebars.call("avaliacaoIluminacaoPublica"),                                                              // 1177
        pergunta: Spacebars.call("Qual avaliação faz da iluminação pública?"),                                         // 1178
        type: Spacebars.call("select"),                                                                                // 1179
        isTriggeredBy: Spacebars.call("q033-iluminacaoPublica"),                                                       // 1180
        triggeredByValue: Spacebars.call("Sim"),                                                                       // 1181
        select: Spacebars.call(true),                                                                                  // 1182
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Suficiente", "Ineficiente"))              // 1183
      };                                                                                                               // 1184
    }, function() {                                                                                                    // 1185
      return Spacebars.include(view.lookupTemplate("isTriggeredBy"));                                                  // 1186
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 1187
      "class": "not-active-question",                                                                                  // 1188
      id: "q034"                                                                                                       // 1189
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 1190
      return {                                                                                                         // 1191
        qn: Spacebars.call("Q34"),                                                                                     // 1192
        questao: Spacebars.call("Iluminação domiciliar"),                                                              // 1193
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1194
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1195
      };                                                                                                               // 1196
    }, function() {                                                                                                    // 1197
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 1198
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1199
      return {                                                                                                         // 1200
        col: Spacebars.call("12"),                                                                                     // 1201
        id: Spacebars.call("q034-iluminacaoDomiciliar"),                                                               // 1202
        label: Spacebars.call("Iluminação domiciliar"),                                                                // 1203
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 1204
      };                                                                                                               // 1205
    }, function() {                                                                                                    // 1206
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 1207
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 1208
      "class": "not-active-question",                                                                                  // 1209
      id: "q035"                                                                                                       // 1210
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 1211
      return {                                                                                                         // 1212
        qn: Spacebars.call("Q35"),                                                                                     // 1213
        questao: Spacebars.call("Drenagem pluvial"),                                                                   // 1214
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1215
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1216
      };                                                                                                               // 1217
    }, function() {                                                                                                    // 1218
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 1219
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1220
      return {                                                                                                         // 1221
        col: Spacebars.call("12"),                                                                                     // 1222
        id: Spacebars.call("q035-drenagemPluvial"),                                                                    // 1223
        label: Spacebars.call("Drenagem pluvial"),                                                                     // 1224
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 1225
      };                                                                                                               // 1226
    }, function() {                                                                                                    // 1227
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 1228
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 1229
      "class": "not-active-question",                                                                                  // 1230
      id: "q036"                                                                                                       // 1231
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 1232
      return {                                                                                                         // 1233
        qn: Spacebars.call("Q36"),                                                                                     // 1234
        questao: Spacebars.call("Tipo de pavimentação"),                                                               // 1235
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1236
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1237
      };                                                                                                               // 1238
    }, function() {                                                                                                    // 1239
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 1240
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1241
      return {                                                                                                         // 1242
        col: Spacebars.call("12"),                                                                                     // 1243
        id: Spacebars.call("q036-tipoPavimentacao"),                                                                   // 1244
        label: Spacebars.call("Tipo de pavimentação"),                                                                 // 1245
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Pavimentação asfáltica", "Pavimento poliédrico", "Não possui pavimentação", "Outros"))
      };                                                                                                               // 1247
    }, function() {                                                                                                    // 1248
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 1249
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 1250
      "class": "not-active-question",                                                                                  // 1251
      id: "q037"                                                                                                       // 1252
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 1253
      return {                                                                                                         // 1254
        qn: Spacebars.call("Q37"),                                                                                     // 1255
        questao: Spacebars.call("O bairro possui unidade de saúde?"),                                                  // 1256
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1257
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1258
      };                                                                                                               // 1259
    }, function() {                                                                                                    // 1260
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 1261
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1262
      return {                                                                                                         // 1263
        col: Spacebars.call("12"),                                                                                     // 1264
        id: Spacebars.call("q037-unidadeSaude"),                                                                       // 1265
        label: Spacebars.call("O bairro possui unidade de saúde?"),                                                    // 1266
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 1267
      };                                                                                                               // 1268
    }, function() {                                                                                                    // 1269
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 1270
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 1271
      "class": "not-active-question",                                                                                  // 1272
      id: "q038"                                                                                                       // 1273
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 1274
      return {                                                                                                         // 1275
        qn: Spacebars.call("Q38"),                                                                                     // 1276
        questao: Spacebars.call("O bairro possui unidade de ensino?"),                                                 // 1277
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1278
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1279
      };                                                                                                               // 1280
    }, function() {                                                                                                    // 1281
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 1282
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1283
      return {                                                                                                         // 1284
        col: Spacebars.call("12"),                                                                                     // 1285
        id: Spacebars.call("q038-unidadeEnsino"),                                                                      // 1286
        label: Spacebars.call("O bairro possui unidade de ensino?"),                                                   // 1287
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 1288
      };                                                                                                               // 1289
    }, function() {                                                                                                    // 1290
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 1291
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 1292
      "class": "not-active-question",                                                                                  // 1293
      id: "q039"                                                                                                       // 1294
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 1295
      return {                                                                                                         // 1296
        qn: Spacebars.call("Q39"),                                                                                     // 1297
        questao: Spacebars.call("O bairro possui associação dos moradores?"),                                          // 1298
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1299
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1300
      };                                                                                                               // 1301
    }, function() {                                                                                                    // 1302
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 1303
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1304
      return {                                                                                                         // 1305
        col: Spacebars.call("12"),                                                                                     // 1306
        id: Spacebars.call("q039-associacaoMoradores"),                                                                // 1307
        label: Spacebars.call("O bairro possui associação dos moradores?"),                                            // 1308
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 1309
      };                                                                                                               // 1310
    }, function() {                                                                                                    // 1311
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 1312
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 1313
      "class": "not-active-question",                                                                                  // 1314
      id: "q040"                                                                                                       // 1315
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 1316
      return {                                                                                                         // 1317
        qn: Spacebars.call("Q40"),                                                                                     // 1318
        questao: Spacebars.call("O bairro possui posto policial?"),                                                    // 1319
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1320
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1321
      };                                                                                                               // 1322
    }, function() {                                                                                                    // 1323
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 1324
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1325
      return {                                                                                                         // 1326
        col: Spacebars.call("12"),                                                                                     // 1327
        id: Spacebars.call("q040-postoPolicial"),                                                                      // 1328
        label: Spacebars.call("O bairro possui posto policial?"),                                                      // 1329
        values: Spacebars.call(Spacebars.dataMustache(view.lookup("array"), "Sim", "Não"))                             // 1330
      };                                                                                                               // 1331
    }, function() {                                                                                                    // 1332
      return Spacebars.include(view.lookupTemplate("inputSelect"));                                                    // 1333
    }), "\n\n                        "), "\n\n                        ", HTML.SECTION({                                // 1334
      "class": "not-active-question",                                                                                  // 1335
      id: "q041"                                                                                                       // 1336
    }, "\n\n                            ", Blaze._TemplateWith(function() {                                            // 1337
      return {                                                                                                         // 1338
        qn: Spacebars.call("Q41"),                                                                                     // 1339
        questao: Spacebars.call("Observações"),                                                                        // 1340
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1341
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1342
      };                                                                                                               // 1343
    }, function() {                                                                                                    // 1344
      return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                   // 1345
    }), "\n\n                            ", Blaze._TemplateWith(function() {                                           // 1346
      return {                                                                                                         // 1347
        col: Spacebars.call("12"),                                                                                     // 1348
        id: Spacebars.call("q041-observaoces"),                                                                        // 1349
        label: Spacebars.call("Observações")                                                                           // 1350
      };                                                                                                               // 1351
    }, function() {                                                                                                    // 1352
      return Spacebars.include(view.lookupTemplate("inputTextArea"));                                                  // 1353
    }), "\n\n                        "), "\n\n                        ", Blaze._TemplateWith(function() {              // 1354
      return {                                                                                                         // 1355
        bairros: Spacebars.call(view.lookup("bairros")),                                                               // 1356
        cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                           // 1357
        bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                            // 1358
      };                                                                                                               // 1359
    }, function() {                                                                                                    // 1360
      return Spacebars.include(view.lookupTemplate("confirmacao"));                                                    // 1361
    }), "\n\n                    "), "\n                "), "\n            "), "\n        "), "\n    " ];              // 1362
  });                                                                                                                  // 1363
}));                                                                                                                   // 1364
                                                                                                                       // 1365
Template.__checkName("controles");                                                                                     // 1366
Template["controles"] = new Template("Template.controles", (function() {                                               // 1367
  var view = this;                                                                                                     // 1368
  return HTML.Raw('<div class="col-xs-12">\n        <div class="row">\n            <hr>\n            <span style="float: right">\n                <button id="prev" type="button" class="btn btn-default">\n                    <span class="fa fa-arrow-circle-left" style="color: red;font-size: large;padding-right: 5px"></span>Anterior\n                </button>\n                <button id="next" type="button" class="btn btn-default">\n                    Próximo<span style="color: green;font-size: large;padding-left: 5px" class="fa fa-arrow-circle-right"></span>\n                </button>\n            </span>\n        </div>\n    </div>');
}));                                                                                                                   // 1370
                                                                                                                       // 1371
Template.__checkName("linhaQuestao");                                                                                  // 1372
Template["linhaQuestao"] = new Template("Template.linhaQuestao", (function() {                                         // 1373
  var view = this;                                                                                                     // 1374
  return HTML.DIV({                                                                                                    // 1375
    "class": "row text-center"                                                                                         // 1376
  }, "\n        ", HTML.DIV({                                                                                          // 1377
    "class": "col-xs-6 text-left"                                                                                      // 1378
  }, "\n            ", HTML.H5(Blaze.View("lookup:cidadeSelecionada", function() {                                     // 1379
    return Spacebars.mustache(view.lookup("cidadeSelecionada"));                                                       // 1380
  }), ", ", Blaze.View("lookup:bairroSelecionado", function() {                                                        // 1381
    return Spacebars.mustache(view.lookup("bairroSelecionado"));                                                       // 1382
  })), "\n        "), HTML.Raw('\n        <div class="col-xs-6 text-right">\n            <span>\n                <button id="prev" type="button" class="btn btn-default">\n                    <span class="fa fa-arrow-circle-left" style="color: red;font-size: large;padding-right: 5px"></span>Anterior\n                </button>\n                <button id="next" type="button" class="btn btn-default">\n                    Próximo<span style="color: green;font-size: large;padding-left: 5px" class="fa fa-arrow-circle-right"></span>\n                </button>\n            </span>\n        </div>\n        <!--separador-->\n        <div class="col-xs-12">\n                <hr>\n        </div>\n        '), HTML.DIV({
    "class": "col-xs-12 text-center question-title"                                                                    // 1384
  }, "\n            ", HTML.H4({                                                                                       // 1385
    id: "inserir"                                                                                                      // 1386
  }, HTML.SPAN({                                                                                                       // 1387
    "class": "question-order"                                                                                          // 1388
  }, Blaze.View("lookup:qn", function() {                                                                              // 1389
    return Spacebars.mustache(view.lookup("qn"));                                                                      // 1390
  })), Blaze.View("lookup:questao", function() {                                                                       // 1391
    return Spacebars.mustache(view.lookup("questao"));                                                                 // 1392
  })), "\n        "), "\n    ");                                                                                       // 1393
}));                                                                                                                   // 1394
                                                                                                                       // 1395
Template.__checkName("input");                                                                                         // 1396
Template["input"] = new Template("Template.input", (function() {                                                       // 1397
  var view = this;                                                                                                     // 1398
  return HTML.FIELDSET({                                                                                               // 1399
    "class": function() {                                                                                              // 1400
      return [ "form-group col-xs-", Spacebars.mustache(view.lookup("col")) ];                                         // 1401
    }                                                                                                                  // 1402
  }, "\n        ", HTML.LABEL({                                                                                        // 1403
    "for": function() {                                                                                                // 1404
      return Spacebars.mustache(view.lookup("id"));                                                                    // 1405
    }                                                                                                                  // 1406
  }, Blaze.View("lookup:label", function() {                                                                           // 1407
    return Spacebars.mustache(view.lookup("label"));                                                                   // 1408
  })), "\n        ", HTML.INPUT({                                                                                      // 1409
    type: function() {                                                                                                 // 1410
      return Spacebars.mustache(view.lookup("type"));                                                                  // 1411
    },                                                                                                                 // 1412
    "class": "form-control",                                                                                           // 1413
    id: function() {                                                                                                   // 1414
      return Spacebars.mustache(view.lookup("id"));                                                                    // 1415
    },                                                                                                                 // 1416
    name: function() {                                                                                                 // 1417
      return Spacebars.mustache(view.lookup("id"));                                                                    // 1418
    },                                                                                                                 // 1419
    placeholder: function() {                                                                                          // 1420
      return Spacebars.mustache(view.lookup("placeholder"));                                                           // 1421
    },                                                                                                                 // 1422
    value: function() {                                                                                                // 1423
      return Spacebars.mustache(view.lookup("value"));                                                                 // 1424
    },                                                                                                                 // 1425
    disabled: function() {                                                                                             // 1426
      return Spacebars.mustache(view.lookup("disabled"));                                                              // 1427
    }                                                                                                                  // 1428
  }), "\n    ");                                                                                                       // 1429
}));                                                                                                                   // 1430
                                                                                                                       // 1431
Template.__checkName("inputTextArea");                                                                                 // 1432
Template["inputTextArea"] = new Template("Template.inputTextArea", (function() {                                       // 1433
  var view = this;                                                                                                     // 1434
  return HTML.FIELDSET({                                                                                               // 1435
    "class": function() {                                                                                              // 1436
      return [ "form-group col-xs-", Spacebars.mustache(view.lookup("col")) ];                                         // 1437
    }                                                                                                                  // 1438
  }, "\n        ", HTML.LABEL({                                                                                        // 1439
    "for": function() {                                                                                                // 1440
      return Spacebars.mustache(view.lookup("id"));                                                                    // 1441
    }                                                                                                                  // 1442
  }, Blaze.View("lookup:label", function() {                                                                           // 1443
    return Spacebars.mustache(view.lookup("label"));                                                                   // 1444
  })), "\n        ", HTML.INPUT({                                                                                      // 1445
    type: "text",                                                                                                      // 1446
    "class": "form-control",                                                                                           // 1447
    id: function() {                                                                                                   // 1448
      return Spacebars.mustache(view.lookup("id"));                                                                    // 1449
    },                                                                                                                 // 1450
    name: function() {                                                                                                 // 1451
      return Spacebars.mustache(view.lookup("id"));                                                                    // 1452
    },                                                                                                                 // 1453
    placeholder: function() {                                                                                          // 1454
      return Spacebars.mustache(view.lookup("placeholder"));                                                           // 1455
    },                                                                                                                 // 1456
    value: function() {                                                                                                // 1457
      return Spacebars.mustache(view.lookup("value"));                                                                 // 1458
    },                                                                                                                 // 1459
    disabled: function() {                                                                                             // 1460
      return Spacebars.mustache(view.lookup("disabled"));                                                              // 1461
    }                                                                                                                  // 1462
  }), "\n    ");                                                                                                       // 1463
}));                                                                                                                   // 1464
                                                                                                                       // 1465
Template.__checkName("inputSelect");                                                                                   // 1466
Template["inputSelect"] = new Template("Template.inputSelect", (function() {                                           // 1467
  var view = this;                                                                                                     // 1468
  return HTML.FIELDSET({                                                                                               // 1469
    "class": function() {                                                                                              // 1470
      return [ "form-group col-xs-", Spacebars.mustache(view.lookup("col")) ];                                         // 1471
    }                                                                                                                  // 1472
  }, "\n        ", HTML.LABEL({                                                                                        // 1473
    "for": function() {                                                                                                // 1474
      return Spacebars.mustache(view.lookup("id"));                                                                    // 1475
    }                                                                                                                  // 1476
  }, Blaze.View("lookup:label", function() {                                                                           // 1477
    return Spacebars.mustache(view.lookup("label"));                                                                   // 1478
  })), "\n        ", HTML.SELECT({                                                                                     // 1479
    id: function() {                                                                                                   // 1480
      return Spacebars.mustache(view.lookup("id"));                                                                    // 1481
    },                                                                                                                 // 1482
    name: function() {                                                                                                 // 1483
      return Spacebars.mustache(view.lookup("id"));                                                                    // 1484
    },                                                                                                                 // 1485
    "class": "form-control"                                                                                            // 1486
  }, "\n            ", HTML.Raw('<option selected="selected" value="-1" disabled="">-</option>'), "\n            ", Blaze.Each(function() {
    return Spacebars.call(view.lookup("values"));                                                                      // 1488
  }, function() {                                                                                                      // 1489
    return [ "\n                ", HTML.OPTION(Blaze.View("lookup:.", function() {                                     // 1490
      return Spacebars.mustache(view.lookup("."));                                                                     // 1491
    })), "\n            " ];                                                                                           // 1492
  }), "\n        "), "\n    ");                                                                                        // 1493
}));                                                                                                                   // 1494
                                                                                                                       // 1495
Template.__checkName("triggeredBy");                                                                                   // 1496
Template["triggeredBy"] = new Template("Template.triggeredBy", (function() {                                           // 1497
  var view = this;                                                                                                     // 1498
  return [ HTML.FIELDSET({                                                                                             // 1499
    "class": function() {                                                                                              // 1500
      return [ "form-group col-xs-", Spacebars.mustache(view.lookup("col")) ];                                         // 1501
    }                                                                                                                  // 1502
  }, "\n        ", HTML.LABEL({                                                                                        // 1503
    "for": function() {                                                                                                // 1504
      return Spacebars.mustache(view.lookup("id"));                                                                    // 1505
    }                                                                                                                  // 1506
  }, Blaze.View("lookup:pergunta", function() {                                                                        // 1507
    return Spacebars.mustache(view.lookup("pergunta"));                                                                // 1508
  })), "\n        ", HTML.SELECT({                                                                                     // 1509
    id: function() {                                                                                                   // 1510
      return Spacebars.mustache(view.lookup("id"));                                                                    // 1511
    },                                                                                                                 // 1512
    "data-toggle": function() {                                                                                        // 1513
      return Spacebars.mustache(view.lookup("toggleId"));                                                              // 1514
    },                                                                                                                 // 1515
    triggeredby: function() {                                                                                          // 1516
      return Spacebars.mustache(view.lookup("triggeredByValue"));                                                      // 1517
    },                                                                                                                 // 1518
    name: function() {                                                                                                 // 1519
      return Spacebars.mustache(view.lookup("id"));                                                                    // 1520
    },                                                                                                                 // 1521
    "class": "form-control"                                                                                            // 1522
  }, "\n            ", HTML.Raw('<option selected="selected" value="-1" disabled="">-</option>'), "\n            ", Blaze.Each(function() {
    return Spacebars.call(view.lookup("values"));                                                                      // 1524
  }, function() {                                                                                                      // 1525
    return [ "\n                ", HTML.OPTION(Blaze.View("lookup:.", function() {                                     // 1526
      return Spacebars.mustache(view.lookup("."));                                                                     // 1527
    })), "\n            " ];                                                                                           // 1528
  }), "\n        "), "\n    "), "\n\n    ", HTML.FIELDSET({                                                            // 1529
    "class": function() {                                                                                              // 1530
      return [ "form-group col-xs-", Spacebars.mustache(view.lookup("col")), " invisible" ];                           // 1531
    }                                                                                                                  // 1532
  }, "\n        ", HTML.LABEL({                                                                                        // 1533
    "for": function() {                                                                                                // 1534
      return Spacebars.mustache(view.lookup("toggleId"));                                                              // 1535
    }                                                                                                                  // 1536
  }, Blaze.View("lookup:togglePergunta", function() {                                                                  // 1537
    return Spacebars.mustache(view.lookup("togglePergunta"));                                                          // 1538
  })), "\n        ", HTML.INPUT({                                                                                      // 1539
    id: function() {                                                                                                   // 1540
      return Spacebars.mustache(view.lookup("toggleId"));                                                              // 1541
    },                                                                                                                 // 1542
    type: function() {                                                                                                 // 1543
      return Spacebars.mustache(view.lookup("triggeredByType"));                                                       // 1544
    },                                                                                                                 // 1545
    "class": "form-control",                                                                                           // 1546
    placeholder: function() {                                                                                          // 1547
      return Spacebars.mustache(view.lookup("togglePergunta"));                                                        // 1548
    }                                                                                                                  // 1549
  }), "\n    ") ];                                                                                                     // 1550
}));                                                                                                                   // 1551
                                                                                                                       // 1552
Template.__checkName("trigger");                                                                                       // 1553
Template["trigger"] = new Template("Template.trigger", (function() {                                                   // 1554
  var view = this;                                                                                                     // 1555
  return HTML.FIELDSET({                                                                                               // 1556
    "class": function() {                                                                                              // 1557
      return [ "form-group col-xs-", Spacebars.mustache(view.lookup("col")) ];                                         // 1558
    }                                                                                                                  // 1559
  }, "\n        ", HTML.LABEL({                                                                                        // 1560
    "for": function() {                                                                                                // 1561
      return Spacebars.mustache(view.lookup("id"));                                                                    // 1562
    }                                                                                                                  // 1563
  }, Blaze.View("lookup:pergunta", function() {                                                                        // 1564
    return Spacebars.mustache(view.lookup("pergunta"));                                                                // 1565
  })), "\n        ", HTML.SELECT({                                                                                     // 1566
    id: function() {                                                                                                   // 1567
      return Spacebars.mustache(view.lookup("id"));                                                                    // 1568
    },                                                                                                                 // 1569
    name: function() {                                                                                                 // 1570
      return Spacebars.mustache(view.lookup("id"));                                                                    // 1571
    },                                                                                                                 // 1572
    "class": "form-control"                                                                                            // 1573
  }, "\n            ", HTML.Raw('<option selected="selected" value="-1" disabled="">-</option>'), "\n            ", Blaze.Each(function() {
    return Spacebars.call(view.lookup("values"));                                                                      // 1575
  }, function() {                                                                                                      // 1576
    return [ "\n                ", HTML.OPTION(Blaze.View("lookup:.", function() {                                     // 1577
      return Spacebars.mustache(view.lookup("."));                                                                     // 1578
    })), "\n            " ];                                                                                           // 1579
  }), "\n        "), "\n    ");                                                                                        // 1580
}));                                                                                                                   // 1581
                                                                                                                       // 1582
Template.__checkName("isTriggeredBy");                                                                                 // 1583
Template["isTriggeredBy"] = new Template("Template.isTriggeredBy", (function() {                                       // 1584
  var view = this;                                                                                                     // 1585
  return Blaze.If(function() {                                                                                         // 1586
    return Spacebars.call(view.lookup("select"));                                                                      // 1587
  }, function() {                                                                                                      // 1588
    return [ "\n        ", HTML.FIELDSET({                                                                             // 1589
      "class": function() {                                                                                            // 1590
        return [ "form-group col-xs-", Spacebars.mustache(view.lookup("col")), " invisible" ];                         // 1591
      }                                                                                                                // 1592
    }, "\n            ", HTML.LABEL({                                                                                  // 1593
      "for": function() {                                                                                              // 1594
        return Spacebars.mustache(view.lookup("id"));                                                                  // 1595
      }                                                                                                                // 1596
    }, Blaze.View("lookup:pergunta", function() {                                                                      // 1597
      return Spacebars.mustache(view.lookup("pergunta"));                                                              // 1598
    })), "\n            ", HTML.SELECT({                                                                               // 1599
      id: function() {                                                                                                 // 1600
        return Spacebars.mustache(view.lookup("id"));                                                                  // 1601
      },                                                                                                               // 1602
      name: function() {                                                                                               // 1603
        return Spacebars.mustache(view.lookup("id"));                                                                  // 1604
      },                                                                                                               // 1605
      "class": "form-control",                                                                                         // 1606
      istriggeredby: function() {                                                                                      // 1607
        return Spacebars.mustache(view.lookup("isTriggeredBy"));                                                       // 1608
      },                                                                                                               // 1609
      triggeredbyvalue: function() {                                                                                   // 1610
        return Spacebars.mustache(view.lookup("triggeredByValue"));                                                    // 1611
      }                                                                                                                // 1612
    }, "\n                ", HTML.OPTION({                                                                             // 1613
      selected: "selected",                                                                                            // 1614
      value: "-1",                                                                                                     // 1615
      disabled: ""                                                                                                     // 1616
    }, "-"), "\n                ", Blaze.Each(function() {                                                             // 1617
      return Spacebars.call(view.lookup("values"));                                                                    // 1618
    }, function() {                                                                                                    // 1619
      return [ "\n                    ", HTML.OPTION(Blaze.View("lookup:.", function() {                               // 1620
        return Spacebars.mustache(view.lookup("."));                                                                   // 1621
      })), "\n                " ];                                                                                     // 1622
    }), "\n            "), "\n        "), "\n    " ];                                                                  // 1623
  }, function() {                                                                                                      // 1624
    return [ "\n        ", HTML.FIELDSET({                                                                             // 1625
      "class": function() {                                                                                            // 1626
        return [ "form-group col-xs-", Spacebars.mustache(view.lookup("col")), " invisible" ];                         // 1627
      }                                                                                                                // 1628
    }, "\n            ", HTML.LABEL({                                                                                  // 1629
      "for": function() {                                                                                              // 1630
        return Spacebars.mustache(view.lookup("id"));                                                                  // 1631
      }                                                                                                                // 1632
    }, Blaze.View("lookup:pergunta", function() {                                                                      // 1633
      return Spacebars.mustache(view.lookup("pergunta"));                                                              // 1634
    })), "\n            ", HTML.INPUT({                                                                                // 1635
      id: function() {                                                                                                 // 1636
        return Spacebars.mustache(view.lookup("id"));                                                                  // 1637
      },                                                                                                               // 1638
      type: function() {                                                                                               // 1639
        return Spacebars.mustache(view.lookup("type"));                                                                // 1640
      },                                                                                                               // 1641
      istriggeredby: function() {                                                                                      // 1642
        return Spacebars.mustache(view.lookup("isTriggeredBy"));                                                       // 1643
      },                                                                                                               // 1644
      triggeredbyvalue: function() {                                                                                   // 1645
        return Spacebars.mustache(view.lookup("triggeredByValue"));                                                    // 1646
      },                                                                                                               // 1647
      "class": "form-control",                                                                                         // 1648
      name: function() {                                                                                               // 1649
        return Spacebars.mustache(view.lookup("id"));                                                                  // 1650
      },                                                                                                               // 1651
      placeholder: function() {                                                                                        // 1652
        return Spacebars.mustache(view.lookup("placeholder"));                                                         // 1653
      }                                                                                                                // 1654
    }), "\n        "), "\n    " ];                                                                                     // 1655
  });                                                                                                                  // 1656
}));                                                                                                                   // 1657
                                                                                                                       // 1658
Template.__checkName("confirmacao");                                                                                   // 1659
Template["confirmacao"] = new Template("Template.confirmacao", (function() {                                           // 1660
  var view = this;                                                                                                     // 1661
  return HTML.SECTION({                                                                                                // 1662
    "class": "not-active-question",                                                                                    // 1663
    id: "last"                                                                                                         // 1664
  }, "\n\n        ", Blaze._TemplateWith(function() {                                                                  // 1665
    return {                                                                                                           // 1666
      questao: Spacebars.call("Deseja finalizar?"),                                                                    // 1667
      cidadeSelecionada: Spacebars.call(view.lookup("cidadeSelecionada")),                                             // 1668
      bairroSelecionado: Spacebars.call(view.lookup("bairroSelecionado"))                                              // 1669
    };                                                                                                                 // 1670
  }, function() {                                                                                                      // 1671
    return Spacebars.include(view.lookupTemplate("linhaQuestao"));                                                     // 1672
  }), "\n\n        ", HTML.DIV({                                                                                       // 1673
    "class": "row text-center"                                                                                         // 1674
  }, "\n            ", HTML.DIV({                                                                                      // 1675
    "class": "col-md-12"                                                                                               // 1676
  }, "\n                ", HTML.DIV({                                                                                  // 1677
    "class": "row"                                                                                                     // 1678
  }, "\n                    ", HTML.DIV({                                                                              // 1679
    "class": "col-xs-4 col-xs-offset-4"                                                                                // 1680
  }, "\n                        ", HTML.Raw('<label for="bairro">Bairro da pesquisa</label>'), "\n                        ", HTML.DIV({
    "class": "form-group"                                                                                              // 1682
  }, "\n                            ", HTML.SELECT({                                                                   // 1683
    id: "bairro",                                                                                                      // 1684
    "class": "form-control"                                                                                            // 1685
  }, "\n                                ", Blaze.Each(function() {                                                     // 1686
    return Spacebars.call(view.lookup("bairros"));                                                                     // 1687
  }, function() {                                                                                                      // 1688
    return [ "\n                                    ", HTML.OPTION({                                                   // 1689
      selected: function() {                                                                                           // 1690
        return Spacebars.mustache(view.lookup("ehBairroSelecionado"), view.lookup("bairro"), Spacebars.dot(view.lookup(".."), "bairroSelecionado"));
      }                                                                                                                // 1692
    }, Blaze.View("lookup:bairro", function() {                                                                        // 1693
      return Spacebars.mustache(view.lookup("bairro"));                                                                // 1694
    })), "\n                                " ];                                                                       // 1695
  }), "\n                            "), "\n                        "), "\n\n                    "), "\n                "), "\n            "), "\n        "), HTML.Raw('\n        <div class="row text-center">\n            <button id="finalizarQuestionario" class="btn btn-primary">Finalizar questionário</button>\n        </div>\n    '));
}));                                                                                                                   // 1697
                                                                                                                       // 1698
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"add_entrevista.js":["./add_entrevista.html","../../globals/loading.html","../../../api/pesquisas/pesquisas","meteor/momentjs:moment",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/public/entrevistas/add_entrevista.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.import('./add_entrevista.html');module.import('../../globals/loading.html');var Pesquisas;module.import('../../../api/pesquisas/pesquisas',{"Pesquisas":function(v){Pesquisas=v}});var moment;module.import('meteor/momentjs:moment',{"moment":function(v){moment=v}});/**
 * Created by lucas on 7/22/16.                                                                                        //
 */                                                                                                                    //
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       //
                                                                                                                       // 7
                                                                                                                       // 8
                                                                                                                       //
moment.locale('pt-br');                                                                                                // 10
                                                                                                                       //
_ = lodash;                                                                                                            // 12
                                                                                                                       //
var NAO_RESPONDIDO = "-",                                                                                              // 14
    AUSENTE = "Ausente",                                                                                               // 14
    NAO = "Não";                                                                                                       // 14
                                                                                                                       //
var template = void 0;                                                                                                 // 18
                                                                                                                       //
Template.add_entrevista.onCreated(function () {                                                                        // 20
                                                                                                                       //
    template = Template.instance();                                                                                    // 22
                                                                                                                       //
    var handle = template.subscribe('Pesquisas');                                                                      // 24
                                                                                                                       //
    template.pesquisa = new ReactiveVar();                                                                             // 26
    template.bairros = new ReactiveVar([]);                                                                            // 27
    template.cidadeSelecionada = new ReactiveVar();                                                                    // 28
    template.regiaoSelecionada = new ReactiveVar();                                                                    // 29
    template.bairroSelecionado = new ReactiveVar();                                                                    // 30
    template.regiaoCodigoSelecionada = new ReactiveVar();                                                              // 31
    template.bairroCodigoSelecionado = new ReactiveVar();                                                              // 32
    template.isCarregando = new ReactiveVar(true);                                                                     // 33
    template.numQuestoes = new ReactiveVar(0);                                                                         // 34
    template.idUltimaQuestao = new ReactiveVar("#");                                                                   // 35
                                                                                                                       //
    template.autorun(function () {                                                                                     // 37
                                                                                                                       //
        if (handle) {                                                                                                  // 39
            template.pesquisas = function () {                                                                         // 40
                return Pesquisas.find();                                                                               // 41
            };                                                                                                         // 42
                                                                                                                       //
            template.cidades = function () {                                                                           // 44
                return Pesquisas.find().fetch().map(function (pesquisa) {                                              // 45
                    return { nome: pesquisa.cidade, _id: pesquisa._id };                                               // 46
                });                                                                                                    // 47
            };                                                                                                         // 48
                                                                                                                       //
            // Coloca o icone de loading para uma melhor experiencia de usuario                                        //
            setTimeout(function () {                                                                                   // 51
                template.isCarregando.set(false);                                                                      // 52
            }, 500);                                                                                                   // 53
        }                                                                                                              // 55
    });                                                                                                                // 57
});                                                                                                                    // 59
                                                                                                                       //
Template.add_entrevista.helpers({                                                                                      // 61
                                                                                                                       //
    'cidades': function cidades() {                                                                                    // 63
        return template.cidades();                                                                                     // 64
    },                                                                                                                 // 65
    'bairros': function bairros() {                                                                                    // 66
        return template.bairros.get();                                                                                 // 67
    },                                                                                                                 // 68
    'cidadeSelecionada': function cidadeSelecionada() {                                                                // 69
        return template.cidadeSelecionada.get();                                                                       // 70
    },                                                                                                                 // 71
    'regiaoSelecionada': function regiaoSelecionada() {                                                                // 72
        return template.regiaoSelecionada.get();                                                                       // 73
    },                                                                                                                 // 74
    'bairroSelecionado': function bairroSelecionado() {                                                                // 75
        return template.bairroSelecionado.get();                                                                       // 76
    },                                                                                                                 // 77
    'regiaoCodigoSelecionada': function regiaoCodigoSelecionada() {                                                    // 78
        return template.regiaoCodigoSelecionada.get();                                                                 // 79
    },                                                                                                                 // 80
    'bairroCodigoSelecionado': function bairroCodigoSelecionado() {                                                    // 81
        return template.bairroCodigoSelecionado.get();                                                                 // 82
    },                                                                                                                 // 83
    'ehBairroSelecionado': function ehBairroSelecionado(bairro) {                                                      // 84
        return bairro === template.bairroSelecionado.get();                                                            // 85
    },                                                                                                                 // 86
    'isCarregando': function isCarregando() {                                                                          // 87
                                                                                                                       //
        if (template.isCarregando.get()) {                                                                             // 89
            $('body').css('pointer-events', 'none');                                                                   // 90
        } else {                                                                                                       // 91
            $('body').css('pointer-events', 'auto');                                                                   // 93
        }                                                                                                              // 94
                                                                                                                       //
        setTimeout(function () {                                                                                       // 96
            // Eh necessario aplicar novamente as funcoes da mascara, pois elas se perdem quando o formulario          //
            // eh re-renderizado                                                                                       //
            aplicarMascaras();                                                                                         // 99
        }, 1000);                                                                                                      // 100
                                                                                                                       //
        return template.isCarregando.get();                                                                            // 102
    },                                                                                                                 // 103
    'idUltimaQuestao': function idUltimaQuestao() {                                                                    // 104
        return template.idUltimaQuestao.get();                                                                         // 105
    }                                                                                                                  // 106
                                                                                                                       //
});                                                                                                                    // 61
                                                                                                                       //
Template.add_entrevista.onRendered(function () {                                                                       // 110
                                                                                                                       //
    setTimeout(function () {                                                                                           // 112
                                                                                                                       //
        // descobre o numero de questoes                                                                               //
        var numQuestoes = $('section').length - 1;                                                                     // 115
                                                                                                                       //
        template.numQuestoes.set(numQuestoes);                                                                         // 117
        template.idUltimaQuestao.set("q" + numQuestoes.pad(3));                                                        // 118
                                                                                                                       //
        aplicarValidacoes();                                                                                           // 120
                                                                                                                       //
        aplicarEventosCondicionais();                                                                                  // 122
                                                                                                                       //
        aplicarMascaras();                                                                                             // 124
                                                                                                                       //
        $('#q008-nascimento').datepicker({                                                                             // 126
            language: 'pt-BR',                                                                                         // 127
            disableTouchKeyboard: true,                                                                                // 128
            autoclose: true,                                                                                           // 129
            clearBtn: true,                                                                                            // 130
            startDate: '01/01/1900',                                                                                   // 131
            endDate: 'today',                                                                                          // 132
            maxViewMode: 'years',                                                                                      // 133
            orientation: 'left bottom'                                                                                 // 134
        });                                                                                                            // 126
    }, 1000);                                                                                                          // 137
});                                                                                                                    // 139
                                                                                                                       //
Template.add_entrevista.events({                                                                                       // 141
    'click #next': function clickNext(event) {                                                                         // 143
                                                                                                                       //
        event.preventDefault();                                                                                        // 145
                                                                                                                       //
        var active = $('.active-question');                                                                            // 147
                                                                                                                       //
        // Obtem o id da questao atual                                                                                 //
        var id = $(active).attr("id");                                                                                 // 150
                                                                                                                       //
        // Se id for da ultima questao, nao faz nada                                                                   //
        if (id === "last") {                                                                                           // 153
            return;                                                                                                    // 154
        }                                                                                                              // 155
                                                                                                                       //
        // Descobre proxima questao                                                                                    //
        var active_next = "q" + (Number(id.substring(1)) + 1).pad(3);                                                  // 158
                                                                                                                       //
        // Se questao atual eh a ultima, encaminha para questao last                                                   //
        if (id === template.idUltimaQuestao.get()) {                                                                   // 161
            active_next = "last";                                                                                      // 162
        }                                                                                                              // 163
                                                                                                                       //
        // somente se for a primeira questao eh que verifica se a entrevista ja foi realizada antes                    //
        if (id === "q001") {                                                                                           // 166
                                                                                                                       //
            var regiao = $('#q001-regiao').val(),                                                                      // 168
                bairro = $('#q001-bairro').val(),                                                                      // 168
                quadra = $('#q001-quadra').val(),                                                                      // 168
                lote = $('#q001-lote').val(),                                                                          // 168
                edificacao = $('#q001-edificacao').val();                                                              // 168
                                                                                                                       //
            var pesquisa = template.pesquisa.get(),                                                                    // 174
                entrevistas = pesquisa.entrevistas;                                                                    // 174
                                                                                                                       //
            // Se a pesquisa possui entrevistas                                                                        //
            if (entrevistas) {                                                                                         // 178
                                                                                                                       //
                // Checa se uma entrevista para a mesma regiao, bairro, quadra, lote e edificacao ja nao foi realizada
                for (var i = 0; i < entrevistas.length; i++) {                                                         // 181
                                                                                                                       //
                    var entrevista = entrevistas[i],                                                                   // 183
                        respostas = entrevista.respostas,                                                              // 183
                        subPerguntas = respostas[0].subPerguntas,                                                      // 183
                        aceite = respostas[2].subPerguntas[0].resposta;                                                // 183
                                                                                                                       //
                    // FIXME Critico, depende da ordem das perguntas no HTML                                           //
                    var subPerguntaRegiao = subPerguntas[0].resposta,                                                  // 189
                        subPerguntaBairro = subPerguntas[1].resposta,                                                  // 189
                        subPerguntaQuadra = subPerguntas[2].resposta,                                                  // 189
                        subPerguntaLote = subPerguntas[3].resposta,                                                    // 189
                        subPerguntaEdificacao = subPerguntas[4].resposta;                                              // 189
                                                                                                                       //
                    if (regiao === subPerguntaRegiao && bairro === subPerguntaBairro && quadra === subPerguntaQuadra && lote === subPerguntaLote && edificao === subPerguntaEdificacao) {
                                                                                                                       //
                        // somente se a entrevista ja foi realizada, mas o morador estava Ausente, eh que sera         //
                        // permitido continuar                                                                         //
                        if (aceite !== AUSENTE) {                                                                      // 200
                            Bert.alert('Entrevista já realizada para essa mesma Região, Bairro, Quadra, Lote e Edificação', 'danger');
                            return;                                                                                    // 202
                        }                                                                                              // 203
                    }                                                                                                  // 204
                }                                                                                                      // 206
            }                                                                                                          // 207
                                                                                                                       //
            // Também verifica se essa entrevista já foi realizada em outra sincronizacao (dados vindos do servidor)   //
            var entrevistasRealizadas = pesquisa.entrevistasRealizadas;                                                // 210
                                                                                                                       //
            for (var _i = 0; _i < entrevistasRealizadas.length; _i++) {                                                // 212
                                                                                                                       //
                var _entrevista = entrevistasRealizadas[_i];                                                           // 214
                                                                                                                       //
                if (_entrevista.regiao === regiao && _entrevista.bairro === bairro && _entrevista.quadra === quadra && _entrevista.lote === lote && _entrevista.edificacao === edificacao && _entrevista.aceite !== AUSENTE) {
                                                                                                                       //
                    Bert.alert('Entrevista já realizada para essa mesma Região, Bairro, Quadra, Lote e Edificação', 'danger');
                    return;                                                                                            // 221
                }                                                                                                      // 222
            }                                                                                                          // 223
        }                                                                                                              // 225
                                                                                                                       //
        var validForm = $('form').valid();                                                                             // 227
                                                                                                                       //
        if (!validForm) {                                                                                              // 229
            Bert.alert('O formulário contém erro(s)', 'danger', 'growl-bottom-right');                                 // 230
            return;                                                                                                    // 231
        }                                                                                                              // 232
                                                                                                                       //
        // da um scroll pro comeco da pagina novamente                                                                 //
        window.scrollTo(0, 0);                                                                                         // 235
                                                                                                                       //
        $(active).removeClass('active-question').addClass('not-active-question');                                      // 237
        $('#' + active_next).removeClass('not-active-question').addClass('active-question');                           // 238
                                                                                                                       //
        focarPrimeiroCampo();                                                                                          // 240
    },                                                                                                                 // 242
    'click #prev': function clickPrev(event) {                                                                         // 243
                                                                                                                       //
        event.preventDefault();                                                                                        // 245
                                                                                                                       //
        // da um scroll pro comeco da pagina novamente                                                                 //
        window.scrollTo(0, 0);                                                                                         // 248
                                                                                                                       //
        var active = $('.active-question');                                                                            // 250
                                                                                                                       //
        // Obtem o id da questao atual                                                                                 //
        var id = $(active).attr("id");                                                                                 // 253
                                                                                                                       //
        // Se for a primeira questao, nao faz nada                                                                     //
        if (id.indexOf("q001") !== -1) {                                                                               // 256
            return;                                                                                                    // 257
        }                                                                                                              // 258
                                                                                                                       //
        // Descobre questao anterior                                                                                   //
        var active_prev = "q" + (Number(id.substring(1)) - 1).pad(3);                                                  // 261
                                                                                                                       //
        // Se a questao atual eh da section last, retorna para a ultima questao                                        //
        if (id === "last") {                                                                                           // 264
            active_prev = template.idUltimaQuestao.get();                                                              // 265
        }                                                                                                              // 266
                                                                                                                       //
        $(active).removeClass('active-question').addClass('not-active-question');                                      // 268
        $('#' + active_prev).removeClass('not-active-question').addClass('active-question');                           // 269
                                                                                                                       //
        focarPrimeiroCampo();                                                                                          // 271
    },                                                                                                                 // 273
    'click #finalizarQuestionario': function clickFinalizarQuestionario(event) {                                       // 274
                                                                                                                       //
        event.preventDefault();                                                                                        // 276
                                                                                                                       //
        template.isCarregando.set(true);                                                                               // 278
                                                                                                                       //
        salvarQuestionario(template);                                                                                  // 280
    },                                                                                                                 // 281
    'click [name="menu-cidade"]': function clickNameMenuCidade(event) {                                                // 282
                                                                                                                       //
        event.preventDefault();                                                                                        // 284
                                                                                                                       //
        // se elemento possui classe selecionada, des-seleciona ele                                                    //
        if ($(event.target).hasClass('selected')) {                                                                    // 287
            $('.tabela-bairros').addClass('invisible');                                                                // 288
            $(event.target).removeClass('selected');                                                                   // 289
            return;                                                                                                    // 290
        }                                                                                                              // 291
                                                                                                                       //
        // seleciona a nova cidade                                                                                     //
        $('.selected').removeClass('selected');                                                                        // 294
        $(event.target).addClass('selected');                                                                          // 295
                                                                                                                       //
        var cidade = event.target.innerHTML;                                                                           // 297
                                                                                                                       //
        template.pesquisa.set(Pesquisas.findOne({ _id: event.target.id }));                                            // 299
                                                                                                                       //
        var bairros = Pesquisas.findOne({ cidade: cidade }).bairros;                                                   // 301
                                                                                                                       //
        // Pega somente o nome dos bairros                                                                             //
        bairros = bairros.map(function (bairro) {                                                                      // 304
            return bairro.bairro;                                                                                      // 305
        });                                                                                                            // 306
                                                                                                                       //
        // substitui espacos                                                                                           //
        cidade = cidade.replace(/ /g, '-');                                                                            // 309
                                                                                                                       //
        bairros = bairros.map(function (bairro) {                                                                      // 311
            return { id: cidade + '--' + bairro.replace(/ /g, '-'), cidade: cidade, bairro: bairro };                  // 312
        });                                                                                                            // 313
                                                                                                                       //
        // ordena os bairros alfabeticamente                                                                           //
        bairros.sort(function (a, b) {                                                                                 // 316
            if (a.bairro < b.bairro) {                                                                                 // 317
                return -1;                                                                                             // 318
            } else if (a.bairro > b.bairro) {                                                                          // 319
                return 1;                                                                                              // 321
            } else {                                                                                                   // 322
                return 0;                                                                                              // 324
            }                                                                                                          // 325
        });                                                                                                            // 326
                                                                                                                       //
        Template.instance().bairros.set(bairros);                                                                      // 328
                                                                                                                       //
        // coloca a tabela de bairros visível                                                                          //
        $('.tabela-bairros').removeClass('invisible');                                                                 // 331
    },                                                                                                                 // 332
    'click .bairrosSelecionaveis': function clickBairrosSelecionaveis(event) {                                         // 333
                                                                                                                       //
        event.preventDefault();                                                                                        // 335
                                                                                                                       //
        var bairro = event.target,                                                                                     // 337
            info = bairro.id.split('--'),                                                                              // 337
            bairroNome = info[1].replace(/-/g, ' '),                                                                   // 337
            cidadeNome = info[0].replace(/-/g, ' ');                                                                   // 337
                                                                                                                       //
        // esconde a selecao de bairro e cidade                                                                        //
        $('[name="selecao-informacoes-iniciais"]').addClass('invisible');                                              // 343
                                                                                                                       //
        // habilita o preenchimento do formulario                                                                      //
        $('form').removeClass('invisible');                                                                            // 346
                                                                                                                       //
        focarPrimeiroCampo();                                                                                          // 348
                                                                                                                       //
        bairro = getBairroByNome(bairroNome, Pesquisas.findOne({ cidade: cidadeNome }));                               // 350
                                                                                                                       //
        template.bairroSelecionado.set(bairro.bairro);                                                                 // 353
        template.bairroCodigoSelecionado.set(bairro.codigoBairro);                                                     // 354
        template.cidadeSelecionada.set(cidadeNome);                                                                    // 355
        template.regiaoSelecionada.set(bairro.regiao);                                                                 // 356
        template.regiaoCodigoSelecionada.set(bairro.codigoRegiao);                                                     // 357
                                                                                                                       //
        // inicio da entrevista                                                                                        //
        template.inicio = Date.now();                                                                                  // 360
    },                                                                                                                 // 362
    'change #bairro': function changeBairro(event) {                                                                   // 363
                                                                                                                       //
        var bairroNome = event.target.value,                                                                           // 365
            bairro = getBairroByNome(bairroNome, template.pesquisa.get());                                             // 365
                                                                                                                       //
        template.bairroSelecionado.set(bairro.bairro);                                                                 // 368
                                                                                                                       //
        template.bairroCodigoSelecionado.set(bairro.codigoBairro);                                                     // 370
                                                                                                                       //
        template.regiaoSelecionada.set(bairro.regiao);                                                                 // 372
                                                                                                                       //
        template.regiaoCodigoSelecionada.set(bairro.codigoRegiao);                                                     // 374
    },                                                                                                                 // 377
                                                                                                                       //
    'change #q003-aceite': function changeQ003Aceite(event) {                                                          // 378
                                                                                                                       //
        var aceite = $('#q003-aceite option:selected').val();                                                          // 380
                                                                                                                       //
        if (aceite === NAO || aceite === AUSENTE) {                                                                    // 382
                                                                                                                       //
            var res = confirm('Deseja finalizar a entrevista?');                                                       // 384
                                                                                                                       //
            if (res) {                                                                                                 // 386
                salvarQuestionario(template);                                                                          // 387
            } else {                                                                                                   // 388
                // Retira a resposta do campo                                                                          //
                limparSelect('q003-aceite');                                                                           // 391
            }                                                                                                          // 392
        }                                                                                                              // 394
    },                                                                                                                 // 396
    'change #q006-condicaoOcupacao': function changeQ006CondicaoOcupacao(event) {                                      // 397
                                                                                                                       //
        var aceite = $('#q006-condicaoOcupacao option:selected').val();                                                // 399
                                                                                                                       //
        if (aceite === "Alugada") {                                                                                    // 401
                                                                                                                       //
            var res = confirm('Você tem a opção de terminar a entrevista. Deseja finalizá-la agora?');                 // 403
                                                                                                                       //
            // Se deseja finalizar a entrevista                                                                        //
            if (res) {                                                                                                 // 406
                salvarQuestionario(template);                                                                          // 407
            }                                                                                                          // 408
        }                                                                                                              // 410
    },                                                                                                                 // 412
    'focus #q008-nascimento': function focusQ008Nascimento(event) {                                                    // 413
        $('#q008-nascimento').datepicker('show');                                                                      // 414
    },                                                                                                                 // 415
    // Qualquer campo do tipo tel soh deve aceitar numeros                                                             //
    'keypress [type="tel"]': function keypressTypeTel(event) {                                                         // 417
        return event.charCode >= 48 && event.charCode <= 57;                                                           // 418
    }                                                                                                                  // 419
});                                                                                                                    // 141
                                                                                                                       //
/**                                                                                                                    //
 * Aplica a validação para todos os campos                                                                             //
 */                                                                                                                    //
var aplicarValidacoes = function aplicarValidacoes() {                                                                 // 425
                                                                                                                       //
    $.validator.addMethod("valueNotEquals", function (value, element, arg) {                                           // 427
                                                                                                                       //
        var resposta = $(element).find('option:selected').val();                                                       // 429
                                                                                                                       //
        return resposta != arg;                                                                                        // 431
    }, "Opção selecionada não é válida.");                                                                             // 433
                                                                                                                       //
    var numQuestoes = template.numQuestoes.get(),                                                                      // 435
        questoesOpcionais = [41],                                                                                      // 435
        // numero da questao que nao eh obrigatoria                                                                    // 435
    questoesObrigatorias = [];                                                                                         // 437
                                                                                                                       //
    for (var i = 1; i <= numQuestoes; i++) {                                                                           // 439
                                                                                                                       //
        // Se a questao for for obrigatoria                                                                            //
        if (questoesOpcionais.indexOf(i) === -1) {                                                                     // 442
                                                                                                                       //
            var num = i.pad(3);                                                                                        // 444
                                                                                                                       //
            $('[id^="q' + num + '-"]').map(function (i, el) {                                                          // 446
                return questoesObrigatorias.push(el.id);                                                               // 446
            });                                                                                                        // 446
        }                                                                                                              // 448
    }                                                                                                                  // 449
                                                                                                                       //
    var rules = {};                                                                                                    // 451
                                                                                                                       //
    // constroi o objeto de questoes obrigatorias                                                                      //
    questoesObrigatorias.map(function (questaoId) {                                                                    // 454
        rules[questaoId] = {                                                                                           // 455
            required: true                                                                                             // 456
        };                                                                                                             // 455
    });                                                                                                                // 458
                                                                                                                       //
    // Instancia o objeto para validação                                                                               //
    $('form').validate({                                                                                               // 461
        rules: rules                                                                                                   // 462
    });                                                                                                                // 461
};                                                                                                                     // 465
                                                                                                                       //
/**                                                                                                                    //
 * Aplica uma mascara para inputs que precisam                                                                         //
 */                                                                                                                    //
var aplicarMascaras = function aplicarMascaras() {                                                                     // 470
                                                                                                                       //
    $('#q001-regiao').mask('99');                                                                                      // 472
    $('#q001-quadra').mask('999');                                                                                     // 473
    $('#q001-lote').mask('9999');                                                                                      // 474
    $('#q001-edificacao').mask('9999');                                                                                // 475
                                                                                                                       //
    $('#q002-cep').mask('99.999-999');                                                                                 // 477
                                                                                                                       //
    $('#q004-telefone').mask('(99)99999-9999');                                                                        // 479
                                                                                                                       //
    $('#q008-cpf').mask('999.999.999.99');                                                                             // 481
                                                                                                                       //
    $('#cpfConjugue').mask('999.999.999.99');                                                                          // 483
};                                                                                                                     // 485
                                                                                                                       //
/**                                                                                                                    //
 * Dado o nome de um bairro, obtém o seu código                                                                        //
 * @param bairroNome                                                                                                   //
 * @param pesquisa                                                                                                     //
 * @returns {*}                                                                                                        //
 */                                                                                                                    //
var getBairroByNome = function getBairroByNome(bairroNome, pesquisa) {                                                 // 493
                                                                                                                       //
    var bairros = pesquisa.bairros;                                                                                    // 495
                                                                                                                       //
    for (var i = 0; i < bairros.length; i++) {                                                                         // 497
        if (bairros[i].bairro === bairroNome) {                                                                        // 498
            return bairros[i];                                                                                         // 499
        }                                                                                                              // 500
    }                                                                                                                  // 501
                                                                                                                       //
    return "ERRO!";                                                                                                    // 503
};                                                                                                                     // 505
                                                                                                                       //
/**                                                                                                                    //
 * Foca no primeiro campo de input da tela                                                                             //
 */                                                                                                                    //
var focarPrimeiroCampo = function focarPrimeiroCampo() {                                                               // 510
    // Coloca o foco no primeiro campo de input que esteja habilitado                                                  //
    $($('section.active-question input:enabled')[0]).focus();                                                          // 512
};                                                                                                                     // 513
                                                                                                                       //
/**                                                                                                                    //
 * Registra o evento do triggeredBy para todos os elementos que possuem a condicao data-toggle                         //
 */                                                                                                                    //
var aplicarEventosCondicionais = function aplicarEventosCondicionais() {                                               // 518
                                                                                                                       //
    var num_questoes = $('section').length - 1; // Subtrai-se um pois ignora a ultima seção, que não contém pergunta   // 520
                                                                                                                       //
    var removeInvisible = function removeInvisible(select, el) {                                                       // 522
                                                                                                                       //
        $($(el).parents('fieldset')[0]).removeClass('invisible');                                                      // 524
        $(el).val('');                                                                                                 // 525
                                                                                                                       //
        // coloca os dependentes do select como required                                                               //
        var id = $(select).attr('id');                                                                                 // 528
                                                                                                                       //
        var arr = $('[isTriggeredBy="' + id + '"]');                                                                   // 530
                                                                                                                       //
        if (arr.length > 0) {                                                                                          // 532
                                                                                                                       //
            arr.map(function (i, element) {                                                                            // 534
                                                                                                                       //
                if ($(select).val() === $(element).attr('triggeredByValue')) {                                         // 536
                    $(element).rules('add', { required: true });                                                       // 537
                }                                                                                                      // 538
            });                                                                                                        // 539
        }                                                                                                              // 540
    };                                                                                                                 // 542
                                                                                                                       //
    var addInvisible = function addInvisible(select, el, opcaoSelecionada) {                                           // 544
                                                                                                                       //
        var id = el.id;                                                                                                // 546
                                                                                                                       //
        $($(el).parents('fieldset')[0]).addClass('invisible');                                                         // 548
        $(el).val(opcaoSelecionada);                                                                                   // 549
                                                                                                                       //
        // coloca os filhos e seus filhos como invisiveis                                                              //
        // obtem todos as questoes que sao vinculadas a questao atual                                                  //
        var arr = $('[isTriggeredBy="' + id + '"]');                                                                   // 553
                                                                                                                       //
        if (arr.length > 0) {                                                                                          // 555
                                                                                                                       //
            arr.map(function (i, element) {                                                                            // 557
                                                                                                                       //
                if ($(select).val() !== $(element).attr('triggeredByValue')) {                                         // 559
                    addInvisible(el, element, "");                                                                     // 560
                } else {                                                                                               // 561
                    $(element).rules('add', { required: true });                                                       // 563
                }                                                                                                      // 564
            });                                                                                                        // 565
        }                                                                                                              // 566
    };                                                                                                                 // 567
                                                                                                                       //
    $('select').change(function (evt) {                                                                                // 569
                                                                                                                       //
        var opcaoSelecionada = $(evt.target).find('option:selected').val();                                            // 571
                                                                                                                       //
        var deps = $('[isTriggeredBy="' + evt.target.id + '"]');                                                       // 573
                                                                                                                       //
        // obtem todos os campos com dependencia do campo que foi mudado                                               //
        deps.map(function (i, el) {                                                                                    // 576
                                                                                                                       //
            // se o valor que ele depende eh igual                                                                     //
            if ($(el).attr('triggeredByValue') === opcaoSelecionada) {                                                 // 579
                                                                                                                       //
                removeInvisible(evt.target, el);                                                                       // 581
            } else {                                                                                                   // 582
                                                                                                                       //
                addInvisible(evt.target, el, opcaoSelecionada);                                                        // 585
            }                                                                                                          // 586
        });                                                                                                            // 588
    });                                                                                                                // 589
};                                                                                                                     // 591
                                                                                                                       //
/**                                                                                                                    //
 * Limpa (seleciona -1) no campo de select                                                                             //
 * @param id                                                                                                           //
 */                                                                                                                    //
var limparSelect = function limparSelect(id) {                                                                         // 597
                                                                                                                       //
    var NAO_RESPONDIDO = -1; // Simbolo que indica que um select box ainda deve ser respondido                         // 599
                                                                                                                       //
    $('#' + id).find('option[value="' + NAO_RESPONDIDO + '"]').prop('selected', true);                                 // 601
};                                                                                                                     // 603
                                                                                                                       //
/**                                                                                                                    //
 * Calcula todas as respostas que foram preenchida no formulario dada um numero de questoes                            //
 * @param NUM_QUESTOES                                                                                                 //
 * @returns {Array}                                                                                                    //
 */                                                                                                                    //
var obterRespostas = function obterRespostas(NUM_QUESTOES) {                                                           // 610
                                                                                                                       //
    var SECTION_TAG = 'h4';                                                                                            // 612
                                                                                                                       //
    var respostas = [];                                                                                                // 614
                                                                                                                       //
    // PERGUNTAS DEVEM SER SEQUENCIAIS NO FORMATO q001, q002 ...                                                       //
    // Abaixo, pego as respostas de todas as pergutnas                                                                 //
                                                                                                                       //
    var _loop = function _loop(i) {                                                                                    // 610
                                                                                                                       //
        // Como pergunta tem o codigo com 3 digitos DDD, faz o padding de i                                            //
        var num = i.pad(3);                                                                                            // 621
                                                                                                                       //
        // pega os elementos de uma determinada questao i                                                              //
        var $section = $('[id^=q' + num + ']'),                                                                        // 624
            questao_i = $section.find('input, select'),                                                                // 624
            obj = {};                                                                                                  // 624
                                                                                                                       //
        // preenche a pergunta principal                                                                               //
        var pergunta = $($section.find(SECTION_TAG)[0]).html();                                                        // 629
                                                                                                                       //
        // Pega a pergunta o descarta o que pertence ao <span>                                                         //
        pergunta = pergunta.substring(pergunta.indexOf('</span>') + "<span/>".length);                                 // 632
                                                                                                                       //
        obj.pergunta = pergunta;                                                                                       // 634
        obj.subPerguntas = [];                                                                                         // 635
                                                                                                                       //
        // Percorre o elementos da section                                                                             //
        questao_i.map(function (i, el) {                                                                               // 638
                                                                                                                       //
            // Se tiver a classe error, veio do jquery validate, entao ignora                                          //
            if (el.className === "error" || el.id.indexOf('-error') !== -1) return;                                    // 641
                                                                                                                       //
            // obtem a pergunta referente ao input                                                                     //
            var pergunta = $('[for=' + el.id + ']').text(),                                                            // 645
                resposta = $(el).val() || $(el).find('option:selected').val() || ""; // Considera campo texto ou select
                                                                                                                       //
            // Se a pergunta não foi respondida, seta uma nova resposta                                                //
            if (resposta === undefined || resposta === null || resposta === "" || resposta == -1) {                    // 649
                resposta = NAO_RESPONDIDO;                                                                             // 650
            }                                                                                                          // 651
                                                                                                                       //
            // Nao considera elementos selecionados vazios, pois o jquery validate copia a id original                 //
            if (pergunta === undefined || pergunta === null || pergunta === "-") {                                     // 654
                return;                                                                                                // 655
            }                                                                                                          // 656
                                                                                                                       //
            obj.subPerguntas.push({                                                                                    // 658
                pergunta: pergunta,                                                                                    // 659
                resposta: resposta                                                                                     // 660
            });                                                                                                        // 658
        });                                                                                                            // 663
                                                                                                                       //
        respostas.push(obj);                                                                                           // 665
    };                                                                                                                 // 610
                                                                                                                       //
    for (var i = 1; i <= NUM_QUESTOES; i++) {                                                                          // 618
        _loop(i);                                                                                                      // 618
    };                                                                                                                 // 666
                                                                                                                       //
    // Retorna um array com todas as respostas obtidas por questao                                                     //
    return respostas;                                                                                                  // 669
};                                                                                                                     // 671
                                                                                                                       //
/**                                                                                                                    //
 * Salva o questionario no localStorage                                                                                //
 * @param template                                                                                                     //
 */                                                                                                                    //
var salvarQuestionario = function salvarQuestionario(template) {                                                       // 677
                                                                                                                       //
    template.isCarregando.set(true);                                                                                   // 679
                                                                                                                       //
    // Descobre quanto tempo gastou para realizar a entrevista                                                         //
    var fimEntrevista = (Date.now() - template.inicio) / 1000; // Em segundos                                          // 682
                                                                                                                       //
    template.duracao = fimEntrevista;                                                                                  // 684
                                                                                                                       //
    var bairro = template.bairroCodigoSelecionado.get(),                                                               // 686
        NUM_QUESTOES = $('section').length - 1; // Subtrai-se um pois ignora a ultima seção, que não contém pergunta   // 686
                                                                                                                       //
    var respostas = obterRespostas(NUM_QUESTOES);                                                                      // 689
                                                                                                                       //
    var entrevista = {                                                                                                 // 691
        duracao: template.duracao,                                                                                     // 692
        bairro: bairro,                                                                                                // 693
        respostas: respostas,                                                                                          // 694
        dataHora: moment().format(),                                                                                   // 695
        localizacao: Geolocation.latLng() || { lat: 0, lng: 0 }                                                        // 696
    };                                                                                                                 // 691
                                                                                                                       //
    var pesquisa = template.pesquisa.get();                                                                            // 699
                                                                                                                       //
    // FIXME NAO FUNCIONA MAIS                                                                                         //
    var salvarAchouPosicao = function salvarAchouPosicao(loc) {                                                        // 702
                                                                                                                       //
        entrevista.localizacao = { lat: loc.coords.latitude, lng: loc.coords.longitude };                              // 704
                                                                                                                       //
        salvarEntrevistaEmPesquisa(pesquisa._id, entrevista);                                                          // 706
    };                                                                                                                 // 708
                                                                                                                       //
    var salvarNaoAchouPosicao = function salvarNaoAchouPosicao(err) {                                                  // 710
                                                                                                                       //
        salvarEntrevistaEmPesquisa(pesquisa._id, entrevista);                                                          // 712
    };                                                                                                                 // 714
                                                                                                                       //
    // Salva quando obter a localizacao                                                                                //
    navigator.geolocation.getCurrentPosition(salvarAchouPosicao, salvarNaoAchouPosicao, { timeout: 3000 });            // 717
};                                                                                                                     // 719
                                                                                                                       //
var salvarEntrevistaEmPesquisa = function salvarEntrevistaEmPesquisa(id, entrevista) {                                 // 721
                                                                                                                       //
    Pesquisas.update({ _id: id }, { $push: { entrevistas: entrevista } }, function (error) {                           // 723
                                                                                                                       //
        if (error) {                                                                                                   // 725
            Bert.alert(error, 'danger');                                                                               // 726
        } else {                                                                                                       // 727
            Bert.alert('Entrevista salva com sucesso!', 'success');                                                    // 729
                                                                                                                       //
            template.isCarregando.set(false);                                                                          // 731
        }                                                                                                              // 732
    });                                                                                                                // 733
};                                                                                                                     // 734
                                                                                                                       //
Template.confirmacao.helpers({                                                                                         // 736
                                                                                                                       //
    'ehBairroSelecionado': function ehBairroSelecionado(bairro, bairroSelecionado) {                                   // 738
        return bairro === bairroSelecionado;                                                                           // 739
    }                                                                                                                  // 740
                                                                                                                       //
});                                                                                                                    // 736
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"sincronizar":{"sincronizar.html":["./template.sincronizar.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/public/sincronizar/sincronizar.html                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.sincronizar.js");                                                                 // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"template.sincronizar.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/public/sincronizar/template.sincronizar.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("sincronizar");                                                                                   // 2
Template["sincronizar"] = new Template("Template.sincronizar", (function() {                                           // 3
  var view = this;                                                                                                     // 4
  return Blaze.If(function() {                                                                                         // 5
    return Spacebars.call(view.lookup("buscandoDados"));                                                               // 6
  }, function() {                                                                                                      // 7
    return [ "\n        ", Spacebars.include(view.lookupTemplate("loading")), "\n    " ];                              // 8
  }, function() {                                                                                                      // 9
    return [ "\n        ", HTML.Comment("Se existe alguma entrevista relizada"), "\n        ", Blaze.If(function() {   // 10
      return Spacebars.call(Spacebars.dot(view.lookup("entrevistasPorBairro"), "length"));                             // 11
    }, function() {                                                                                                    // 12
      return [ "\n            ", HTML.TABLE({                                                                          // 13
        "class": "table table-striped"                                                                                 // 14
      }, "\n                ", HTML.THEAD("\n                ", HTML.TR("\n                    ", HTML.TH("Bairro"), "\n                    ", HTML.TH("Quantidade de entrevistas\n                        ", Blaze.If(function() {
        return Spacebars.call(view.lookup("estaConectado"));                                                           // 16
      }, function() {                                                                                                  // 17
        return [ "\n                            ", HTML.SPAN({                                                         // 18
          "class": "sinc",                                                                                             // 19
          id: "sincronizar"                                                                                            // 20
        }, "\n                            ", HTML.I({                                                                  // 21
          "class": "fa fa-refresh",                                                                                    // 22
          "aria-hidden": "true"                                                                                        // 23
        })), "\n                        " ];                                                                           // 24
      }, function() {                                                                                                  // 25
        return [ "\n                            ", HTML.SPAN({                                                         // 26
          "class": "sinc disabled"                                                                                     // 27
        }, HTML.I({                                                                                                    // 28
          "class": "fa fa-refresh",                                                                                    // 29
          "aria-hidden": "true"                                                                                        // 30
        })), "\n                        " ];                                                                           // 31
      }), "\n                    "), "\n                "), "\n                "), "\n                ", HTML.TBODY("\n                ", Blaze.Each(function() {
        return Spacebars.call(view.lookup("entrevistasPorBairro"));                                                    // 33
      }, function() {                                                                                                  // 34
        return [ "\n                    ", HTML.TR("\n                        ", HTML.TD(Blaze.View("lookup:bairro", function() {
          return Spacebars.mustache(view.lookup("bairro"));                                                            // 36
        })), "\n                        ", HTML.TD(Blaze.View("lookup:qut", function() {                               // 37
          return Spacebars.mustache(view.lookup("qut"));                                                               // 38
        })), "\n                    "), "\n                " ];                                                        // 39
      }), "\n                "), "\n            "), "\n        " ];                                                    // 40
    }, function() {                                                                                                    // 41
      return [ "\n            ", HTML.DIV({                                                                            // 42
        "class": "row text-center"                                                                                     // 43
      }, "\n                ", HTML.DIV({                                                                              // 44
        "class": "col-md-12"                                                                                           // 45
      }, "\n                    ", HTML.H4("\n                        Nenhum dado a ser sincronizado!\n                        ", Blaze.If(function() {
        return Spacebars.call(view.lookup("estaConectado"));                                                           // 47
      }, function() {                                                                                                  // 48
        return [ "\n                            ", HTML.SPAN({                                                         // 49
          "class": "sinc",                                                                                             // 50
          id: "sincronizar"                                                                                            // 51
        }, "\n                            ", HTML.I({                                                                  // 52
          "class": "fa fa-refresh",                                                                                    // 53
          "aria-hidden": "true"                                                                                        // 54
        })), "\n                        " ];                                                                           // 55
      }, function() {                                                                                                  // 56
        return [ "\n                            ", HTML.SPAN({                                                         // 57
          "class": "sinc disabled"                                                                                     // 58
        }, HTML.I({                                                                                                    // 59
          "class": "fa fa-refresh",                                                                                    // 60
          "aria-hidden": "true"                                                                                        // 61
        })), "\n                        " ];                                                                           // 62
      }), "\n                    "), "\n                "), "\n            "), "\n        " ];                         // 63
    }), "\n    " ];                                                                                                    // 64
  });                                                                                                                  // 65
}));                                                                                                                   // 66
                                                                                                                       // 67
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sincronizar.js":["./sincronizar.html","../../globals/loading.html","../../../api/pesquisas/pesquisas","../../../api/token/token","meteor/http",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/public/sincronizar/sincronizar.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.import('./sincronizar.html');module.import('../../globals/loading.html');var Pesquisas;module.import('../../../api/pesquisas/pesquisas',{"Pesquisas":function(v){Pesquisas=v}});var Token;module.import('../../../api/token/token',{"Token":function(v){Token=v}});var HTTP;module.import('meteor/http',{"HTTP":function(v){HTTP=v}});/**
 * Created by lucas on 7/24/16.                                                                                        //
 */                                                                                                                    //
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       // 8
                                                                                                                       //
var API = Meteor.settings['public'].api;                                                                               // 10
                                                                                                                       //
var URLS = {                                                                                                           // 12
    login: API.login,                                                                                                  // 13
    salvar_entrevista: API.salvar_entrevista,                                                                          // 14
    pesquisas: API.pesquisas                                                                                           // 15
};                                                                                                                     // 12
                                                                                                                       //
var template = void 0;                                                                                                 // 18
                                                                                                                       //
Template.sincronizar.onCreated(function () {                                                                           // 20
                                                                                                                       //
    template = Template.instance();                                                                                    // 22
                                                                                                                       //
    // tenta conectar ao servidor se nao esta conectado                                                                //
    setInterval(function () {                                                                                          // 25
        Meteor.reconnect();                                                                                            // 26
    }, 15 * 1000); // 15 segundos                                                                                      // 27
                                                                                                                       //
    // faz o controle do icone de carregando                                                                           //
    template.buscandoDados = new ReactiveVar(false);                                                                   // 30
                                                                                                                       //
    template.subscribe('Pesquisas');                                                                                   // 32
    template.subscribe('Token');                                                                                       // 33
                                                                                                                       //
    template.pesquisas = function () {                                                                                 // 35
        return Pesquisas.find({});                                                                                     // 36
    };                                                                                                                 // 37
                                                                                                                       //
    template.entrevistasPorBairro = function () {                                                                      // 39
                                                                                                                       //
        var pesquisas = Pesquisas.find({}).fetch(),                                                                    // 41
            obj = {},                                                                                                  // 41
            arr = [],                                                                                                  // 41
            bairros = [];                                                                                              // 41
                                                                                                                       //
        // Calcula o número de entrevistas realizadas                                                                  //
        pesquisas.map(function (pesquisa) {                                                                            // 45
                                                                                                                       //
            // Se existe alguma entrevista relacionada à pesquisa                                                      //
            if (pesquisa.entrevistas) {                                                                                // 48
                                                                                                                       //
                // salva todos os bairros em um hash                                                                   //
                pesquisa.bairros.map(function (bairro) {                                                               // 51
                    bairros[pesquisa._id + bairro.codigoBairro] = bairro;                                              // 52
                });                                                                                                    // 53
                                                                                                                       //
                pesquisa.entrevistas.map(function (e) {                                                                // 55
                    // e => eh a entrevista                                                                            //
                                                                                                                       //
                    var cod = pesquisa._id + e.bairro;                                                                 // 57
                                                                                                                       //
                    obj[cod] = obj[cod] + 1 || 1;                                                                      // 59
                });                                                                                                    // 60
            }                                                                                                          // 61
        });                                                                                                            // 62
                                                                                                                       //
        // Monta o array que deve conter o nome do bairro e a quantidade de entrevistas para ele                       //
        for (prop in obj) {                                                                                            // 65
            arr.push({ bairro: bairros[prop].bairro, qut: obj[prop] });                                                // 66
        }                                                                                                              // 67
                                                                                                                       //
        return arr;                                                                                                    // 69
    };                                                                                                                 // 70
});                                                                                                                    // 72
                                                                                                                       //
Template.sincronizar.helpers({                                                                                         // 74
                                                                                                                       //
    'entrevistasPorBairro': function entrevistasPorBairro() {                                                          // 76
                                                                                                                       //
        return template.entrevistasPorBairro();                                                                        // 78
    },                                                                                                                 // 80
    'estaConectado': function estaConectado() {                                                                        // 81
                                                                                                                       //
        return Meteor.status().status === 'connected';                                                                 // 83
    },                                                                                                                 // 84
    'buscandoDados': function buscandoDados() {                                                                        // 85
                                                                                                                       //
        return template.buscandoDados.get();                                                                           // 87
    }                                                                                                                  // 88
                                                                                                                       //
});                                                                                                                    // 74
                                                                                                                       //
Template.sincronizar.events({                                                                                          // 92
    'click #sincronizar': function clickSincronizar(event) {                                                           // 94
                                                                                                                       //
        event.preventDefault();                                                                                        // 96
                                                                                                                       //
        template.buscandoDados.set(true);                                                                              // 98
                                                                                                                       //
        var tokenObj = Token.findOne();                                                                                // 100
                                                                                                                       //
        if (!tokenObj) {                                                                                               // 102
            Bert.alert('Registre um token antes de sincronizar!', 'danger');                                           // 103
            template.buscandoDados.set(false);                                                                         // 104
            return;                                                                                                    // 105
        }                                                                                                              // 106
                                                                                                                       //
        var token = tokenObj.token;                                                                                    // 108
                                                                                                                       //
        var options = {                                                                                                // 110
            data: {                                                                                                    // 111
                token: token                                                                                           // 112
            }                                                                                                          // 111
        };                                                                                                             // 110
                                                                                                                       //
        Meteor.call('sincronizarPesquisas', { url: URLS.pesquisas, options: options }, function (error, data) {        // 116
                                                                                                                       //
            if (error) {                                                                                               // 118
                Bert.alert(error.reason, 'danger');                                                                    // 119
                template.buscandoDados.set(false);                                                                     // 120
                return;                                                                                                // 121
            }                                                                                                          // 122
                                                                                                                       //
            var status = data.data.status,                                                                             // 124
                msg = data.data.msg;                                                                                   // 124
                                                                                                                       //
            if (data.statusCode !== 200 || status === 404) {                                                           // 127
                Bert.alert(msg, 'danger');                                                                             // 128
                template.buscandoDados.set(false);                                                                     // 129
                return;                                                                                                // 130
            }                                                                                                          // 131
                                                                                                                       //
            var pesquisasLocais = Pesquisas.find({}).fetch(),                                                          // 133
                pesquisasServidor = data.data || [];                                                                   // 133
                                                                                                                       //
            // Insere localmente as pesquias obtidas do servidor                                                       //
            inserirPesquisasLocalmente(pesquisasServidor);                                                             // 137
                                                                                                                       //
            // Numero de entrevistas que devem ser salvas no servidor                                                  //
            var entrevistasASalvar = getNumEntrevistasASalvar(pesquisasLocais);                                        // 140
                                                                                                                       //
            // Se não é necessário sincronizar as entrevistas                                                          //
            if (entrevistasASalvar === 0) {                                                                            // 143
                                                                                                                       //
                var _msg = 'Nenhuma entrevista necessita de ser sincronizada!';                                        // 145
                                                                                                                       //
                if (pesquisasServidor.length > 0) {                                                                    // 147
                    _msg += '\nEntretanto, foram obtidadas <b>' + pesquisasServidor.length + '</b> pesquisas!';        // 148
                }                                                                                                      // 149
                                                                                                                       //
                Bert.alert(_msg, 'info', 'growl-top-right');                                                           // 151
                                                                                                                       //
                template.buscandoDados.set(false);                                                                     // 153
                                                                                                                       //
                return;                                                                                                // 155
            }                                                                                                          // 156
                                                                                                                       //
            // Se eh necessario sincronizar entrevistas                                                                //
            sincronizarEntrevistas(template, pesquisasLocais, token);                                                  // 159
        });                                                                                                            // 162
                                                                                                                       //
        return;                                                                                                        // 164
        // Obtem as pesquisas                                                                                          //
        HTTP.post(URLS.pesquisas, options, function (error, data) {                                                    // 166
                                                                                                                       //
            if (error) {                                                                                               // 168
                Bert.alert(error, 'danger');                                                                           // 169
                template.buscandoDados.set(false);                                                                     // 170
                return;                                                                                                // 171
            }                                                                                                          // 172
                                                                                                                       //
            var status = data.data.status,                                                                             // 174
                msg = data.data.msg;                                                                                   // 174
                                                                                                                       //
            if (status === 404) {                                                                                      // 177
                Bert.alert(msg, 'danger');                                                                             // 178
                template.buscandoDados.set(false);                                                                     // 179
                return;                                                                                                // 180
            }                                                                                                          // 181
                                                                                                                       //
            var pesquisasLocais = Pesquisas.find({}).fetch(),                                                          // 183
                pesquisasServidor = data.data || [];                                                                   // 183
                                                                                                                       //
            // Insere localmente as pesquias obtidas do servidor                                                       //
            inserirPesquisasLocalmente(pesquisasServidor);                                                             // 187
                                                                                                                       //
            // Numero de entrevistas que devem ser salvas no servidor                                                  //
            var entrevistasASalvar = getNumEntrevistasASalvar(pesquisasLocais);                                        // 190
                                                                                                                       //
            // Se não é necessário sincronizar as entrevistas                                                          //
            if (entrevistasASalvar === 0) {                                                                            // 193
                                                                                                                       //
                var _msg2 = 'Nenhuma entrevista necessita de ser sincronizada!';                                       // 195
                                                                                                                       //
                if (pesquisasServidor.length > 0) {                                                                    // 197
                    _msg2 += '\nEntretanto, foram obtidadas <b>' + pesquisasServidor.length + '</b> pesquisas!';       // 198
                }                                                                                                      // 199
                                                                                                                       //
                Bert.alert(_msg2, 'info', 'growl-top-right');                                                          // 201
                                                                                                                       //
                template.buscandoDados.set(false);                                                                     // 203
                                                                                                                       //
                return;                                                                                                // 205
            }                                                                                                          // 206
                                                                                                                       //
            // Se eh necessario sincronizar entrevistas                                                                //
            sincronizarEntrevistas(template, pesquisasLocais, token);                                                  // 209
        });                                                                                                            // 211
    },                                                                                                                 // 213
    'click .sinc.disabled': function clickSincDisabled() {                                                             // 214
        Bert.alert('É necessário estar conectado à internet para sincronizar!', 'info', 'growl-top-right');            // 215
    }                                                                                                                  // 216
});                                                                                                                    // 92
                                                                                                                       //
/**                                                                                                                    //
 * Envia as entrevistas locais para o servidor                                                                         //
 * @param template                                                                                                     //
 * @param pesquisasLocais                                                                                              //
 * @param token                                                                                                        //
 */                                                                                                                    //
var sincronizarEntrevistas = function sincronizarEntrevistas(template, pesquisasLocais, token) {                       // 226
                                                                                                                       //
    // clona o objeto                                                                                                  //
    var _pesquisasLocais = JSON.parse(JSON.stringify(pesquisasLocais));                                                // 229
                                                                                                                       //
    // Retira a propriedade entrevistasRealizadas                                                                      //
    delete _pesquisasLocais.entrevistasRealizadas;                                                                     // 232
                                                                                                                       //
    var options = {                                                                                                    // 234
        data: {                                                                                                        // 235
            pesquisas: JSON.stringify(_pesquisasLocais),                                                               // 236
            token: token                                                                                               // 237
        }                                                                                                              // 235
    };                                                                                                                 // 234
                                                                                                                       //
    Meteor.call('sincronizarSalvarEntrevistas', { url: URLS.salvar_entrevista, options: options }, function (error, data) {
                                                                                                                       //
        if (error) {                                                                                                   // 243
                                                                                                                       //
            Bert.alert('Erro de sincronização dos dados', 'danger');                                                   // 245
                                                                                                                       //
            // Restaura os dados                                                                                       //
            inserirPesquisasLocalmente(pesquisasLocais);                                                               // 248
        } else {                                                                                                       // 250
                                                                                                                       //
            var status = data.data.status,                                                                             // 253
                msg = data.data.msg,                                                                                   // 253
                pesquisas = data.data.pesquisas;                                                                       // 253
                                                                                                                       //
            if (status === 404) {                                                                                      // 257
                                                                                                                       //
                Bert.alert(msg, 'danger');                                                                             // 259
                                                                                                                       //
                // Restaura os dados                                                                                   //
                inserirPesquisasLocalmente(pesquisasLocais);                                                           // 262
                                                                                                                       //
                return;                                                                                                // 264
            }                                                                                                          // 265
                                                                                                                       //
            inserirPesquisasLocalmente(pesquisas);                                                                     // 267
                                                                                                                       //
            Bert.alert('Dados sincronizados com sucesso!', 'success');                                                 // 269
        }                                                                                                              // 270
                                                                                                                       //
        template.buscandoDados.set(false);                                                                             // 272
    });                                                                                                                // 274
};                                                                                                                     // 276
                                                                                                                       //
/**                                                                                                                    //
 * Insere as pesquisas no localStorage                                                                                 //
 * @param pesquisas                                                                                                    //
 */                                                                                                                    //
var inserirPesquisasLocalmente = function inserirPesquisasLocalmente(pesquisas) {                                      // 282
                                                                                                                       //
    // Limpa a collection local                                                                                        //
    Pesquisas.clear();                                                                                                 // 285
                                                                                                                       //
    // Insere as pesquisas obtidas do servidor                                                                         //
    pesquisas.map(function (pesquisa) {                                                                                // 288
        Pesquisas.insert(pesquisa);                                                                                    // 289
    });                                                                                                                // 290
};                                                                                                                     // 292
                                                                                                                       //
/**                                                                                                                    //
 * Obtém a quantidade total de entrevistas locais contidas nas pesquisas                                               //
 * @param pesquisas                                                                                                    //
 */                                                                                                                    //
var getNumEntrevistasASalvar = function getNumEntrevistasASalvar(pesquisas) {                                          // 298
                                                                                                                       //
    var entrevistasASalvar = 0;                                                                                        // 300
                                                                                                                       //
    pesquisas.map(function (pesquisa) {                                                                                // 302
                                                                                                                       //
        // verifica se existe entrevistas                                                                              //
        if (pesquisa.entrevistas) {                                                                                    // 305
            entrevistasASalvar += pesquisa.entrevistas.length;                                                         // 306
        }                                                                                                              // 307
    });                                                                                                                // 308
                                                                                                                       //
    return entrevistasASalvar;                                                                                         // 310
};                                                                                                                     // 312
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"token":{"token.html":["./template.token.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/public/token/token.html                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.token.js");                                                                       // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"template.token.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/public/token/template.token.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("token");                                                                                         // 2
Template["token"] = new Template("Template.token", (function() {                                                       // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    "class": "row"                                                                                                     // 6
  }, "\n        ", HTML.DIV({                                                                                          // 7
    "class": "col-sm-12"                                                                                               // 8
  }, "\n            Token:\n            ", HTML.INPUT({                                                                // 9
    id: "tokenValue",                                                                                                  // 10
    type: "text",                                                                                                      // 11
    value: function() {                                                                                                // 12
      return Spacebars.mustache(Spacebars.dot(view.lookup("token"), "token"));                                         // 13
    },                                                                                                                 // 14
    placeholder: "Insira um token"                                                                                     // 15
  }), "\n            ", HTML.INPUT({                                                                                   // 16
    id: "_id",                                                                                                         // 17
    type: "hidden",                                                                                                    // 18
    value: function() {                                                                                                // 19
      return Spacebars.mustache(Spacebars.dot(view.lookup("token"), "_id"));                                           // 20
    }                                                                                                                  // 21
  }), "\n            ", HTML.SPAN({                                                                                    // 22
    id: "feedback",                                                                                                    // 23
    "class": function() {                                                                                              // 24
      return Spacebars.mustache(view.lookup("msgClass"));                                                              // 25
    }                                                                                                                  // 26
  }, Blaze.View("lookup:msg", function() {                                                                             // 27
    return Spacebars.mustache(view.lookup("msg"));                                                                     // 28
  })), "\n        "), "\n    ");                                                                                       // 29
}));                                                                                                                   // 30
                                                                                                                       // 31
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"token.js":["./token.html","../../../api/token/token",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/public/token/token.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.import('./token.html');var Token;module.import('../../../api/token/token',{"Token":function(v){Token=v}});/**   //
 * Created by lucas on 8/14/16.                                                                                        //
 */                                                                                                                    //
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       //
var template = void 0;                                                                                                 // 7
                                                                                                                       //
Template.token.onCreated(function () {                                                                                 // 9
                                                                                                                       //
    template = Template.instance();                                                                                    // 11
                                                                                                                       //
    template.subscribe('Token');                                                                                       // 13
                                                                                                                       //
    template.msg = new ReactiveVar("Sem alterações");                                                                  // 15
    template.msgClass = new ReactiveVar('');                                                                           // 16
});                                                                                                                    // 18
                                                                                                                       //
Template.token.helpers({                                                                                               // 20
                                                                                                                       //
    'token': function token() {                                                                                        // 22
        return Token.findOne({});                                                                                      // 23
    },                                                                                                                 // 24
    'msg': function msg() {                                                                                            // 25
        return template.msg.get();                                                                                     // 26
    },                                                                                                                 // 27
    'msgClass': function msgClass() {                                                                                  // 28
        return template.msgClass.get();                                                                                // 29
    }                                                                                                                  // 30
                                                                                                                       //
});                                                                                                                    // 20
                                                                                                                       //
Template.token.events({                                                                                                // 34
                                                                                                                       //
    'keyup #tokenValue': function keyupTokenValue() {                                                                  // 36
                                                                                                                       //
        template.msg.set('Salvando...');                                                                               // 38
        template.msgClass.set('msg-default');                                                                          // 39
                                                                                                                       //
        var _id = $('#_id').val(),                                                                                     // 41
            token = $('#tokenValue').val();                                                                            // 41
                                                                                                                       //
        // Se nao há token salvo                                                                                       //
        if (_id === "") {                                                                                              // 45
            Token.insert({ token: token });                                                                            // 46
        } else {                                                                                                       // 47
            Token.update({ _id: _id }, { $set: { token: token } }, function (err) {                                    // 49
                                                                                                                       //
                if (err) {                                                                                             // 51
                    template.msg.set('Não foi possível salvar suas alterações');                                       // 52
                    template.msgClass.set('msg-danger');                                                               // 53
                    return;                                                                                            // 54
                }                                                                                                      // 55
                                                                                                                       //
                setTimeout(function () {                                                                               // 57
                    template.msg.set('Alterações salvas com sucesso!');                                                // 58
                    template.msgClass.set('msg-success');                                                              // 59
                }, 300);                                                                                               // 60
            });                                                                                                        // 62
        }                                                                                                              // 63
    }                                                                                                                  // 64
                                                                                                                       //
});                                                                                                                    // 34
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"index.html":["./template.index.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/public/index.html                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.index.js");                                                                       // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"template.index.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/public/template.index.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("index");                                                                                         // 2
Template["index"] = new Template("Template.index", (function() {                                                       // 3
  var view = this;                                                                                                     // 4
  return HTML.Raw('<div class="row">\n        <div class="col-md-12">\n            Página inicial!\n        </div>\n    </div>');
}));                                                                                                                   // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":["meteor/templating","./index.html",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/public/index.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Template;module.import('meteor/templating',{"Template":function(v){Template=v}});module.import('./index.html');    // 1
                                                                                                                       // 2
                                                                                                                       //
Template.index.onRendered(function () {                                                                                // 4
    //Modules.client.login( { form: "#login", template: Template.instance() } );                                       //
    console.log("tela de index");                                                                                      // 6
});                                                                                                                    // 7
                                                                                                                       //
Template.index.events({});                                                                                             // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"globals":{"connection.html":["./template.connection.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/globals/connection.html                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.connection.js");                                                                  // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"template.connection.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/globals/template.connection.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("connection");                                                                                    // 2
Template["connection"] = new Template("Template.connection", (function() {                                             // 3
  var view = this;                                                                                                     // 4
  return HTML.Raw('<div class="row statusRow">\n        <!--Client connection status: <b>--><!--</b>-->\n        <i id="connect" class="fa fa-power-off" aria-hidden="true"></i>\n    </div>');
}));                                                                                                                   // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"footer.html":["./template.footer.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/globals/footer.html                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.footer.js");                                                                      // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"template.footer.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/globals/template.footer.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("footer");                                                                                        // 2
Template["footer"] = new Template("Template.footer", (function() {                                                     // 3
  var view = this;                                                                                                     // 4
  return HTML.Raw('<div class="rodape">\n        <img src="/img/rodape-geoline.png" alt="">\n    </div>');             // 5
}));                                                                                                                   // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"header.html":["./template.header.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/globals/header.html                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.header.js");                                                                      // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"template.header.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/globals/template.header.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("header");                                                                                        // 2
Template["header"] = new Template("Template.header", (function() {                                                     // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    "class": "row"                                                                                                     // 6
  }, "\n        ", HTML.DIV({                                                                                          // 7
    "class": "col-md-12"                                                                                               // 8
  }, "\n            ", HTML.NAV({                                                                                      // 9
    "class": "navbar navbar-default"                                                                                   // 10
  }, "\n                ", HTML.DIV({                                                                                  // 11
    "class": "container-fluid"                                                                                         // 12
  }, "\n                    ", HTML.Raw('<div class="navbar-header">\n                        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">\n                            <span class="sr-only">Abrir menu</span>\n                            <span class="icon-bar"></span>\n                            <span class="icon-bar"></span>\n                            <span class="icon-bar"></span>\n                        </button>\n                        <a class="navbar-brand" style="pointer-events: none">Cadastro multifinalitário</a>\n                    </div>'), "\n                    ", HTML.DIV({
    id: "navbar",                                                                                                      // 14
    "class": "navbar-collapse collapse"                                                                                // 15
  }, "\n                        ", HTML.UL({                                                                           // 16
    "class": "nav navbar-nav"                                                                                          // 17
  }, "\n                            ", Blaze.If(function() {                                                           // 18
    return Spacebars.call(view.lookup("existePesquisa"));                                                              // 19
  }, function() {                                                                                                      // 20
    return [ "\n                                ", HTML.LI({                                                           // 21
      "class": function() {                                                                                            // 22
        return Spacebars.mustache(view.lookup("currentRoute"), "novaEntrevista");                                      // 23
      }                                                                                                                // 24
    }, "\n                                    ", HTML.A({                                                              // 25
      href: function() {                                                                                               // 26
        return Spacebars.mustache(view.lookup("pathFor"), "novaEntrevista");                                           // 27
      },                                                                                                               // 28
      "class": "novaEntrevista"                                                                                        // 29
    }, "\n                                        ", HTML.SPAN({                                                       // 30
      "class": "nav-label novaEntrevista"                                                                              // 31
    }, "Nova Entrevista"), "\n                                    "), "\n                                "), "\n                            " ];
  }), "\n                            ", HTML.LI({                                                                      // 33
    id: "token",                                                                                                       // 34
    "class": function() {                                                                                              // 35
      return Spacebars.mustache(view.lookup("currentRoute"), "token");                                                 // 36
    }                                                                                                                  // 37
  }, HTML.Raw('<a href="#"><span class="nav-label">Gerenciar token</span></a>')), "\n\n                        "), "\n                        ", HTML.UL({
    "class": "nav navbar-nav navbar-right"                                                                             // 39
  }, "\n                            ", HTML.Raw('<!--<li class="active"><a href="./">Default <span class="sr-only">(current)</span></a></li>-->'), "\n                            ", HTML.LI({
    "class": function() {                                                                                              // 41
      return Spacebars.mustache(view.lookup("currentRoute"), "sincronizar");                                           // 42
    }                                                                                                                  // 43
  }, HTML.A({                                                                                                          // 44
    href: function() {                                                                                                 // 45
      return Spacebars.mustache(view.lookup("pathFor"), "sincronizar");                                                // 46
    }                                                                                                                  // 47
  }, "Sincronizar ", HTML.B("(", Blaze.View("lookup:numEntrevistasNaoSinc", function() {                               // 48
    return Spacebars.mustache(view.lookup("numEntrevistasNaoSinc"));                                                   // 49
  }), ")"))), "\n                        "), "\n                    "), HTML.Raw("<!--/.nav-collapse -->"), "\n                "), HTML.Raw("<!--/.container-fluid -->"), "\n            "), "\n        "), "\n    ");
}));                                                                                                                   // 51
                                                                                                                       // 52
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"loading.html":["./template.loading.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/globals/loading.html                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.loading.js");                                                                     // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"template.loading.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/globals/template.loading.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("loading");                                                                                       // 2
Template["loading"] = new Template("Template.loading", (function() {                                                   // 3
  var view = this;                                                                                                     // 4
  return HTML.SVG({                                                                                                    // 5
    version: "1.1",                                                                                                    // 6
    id: "loader-1",                                                                                                    // 7
    xmlns: "http://www.w3.org/2000/svg",                                                                               // 8
    "xmlns:xlink": "http://www.w3.org/1999/xlink",                                                                     // 9
    x: "0px",                                                                                                          // 10
    y: "0px",                                                                                                          // 11
    width: "40px",                                                                                                     // 12
    height: "40px",                                                                                                    // 13
    viewBox: "0 0 40 40",                                                                                              // 14
    "enable-background": "new 0 0 40 40",                                                                              // 15
    "xml:space": "preserve"                                                                                            // 16
  }, "\n    ", HTML.PATH({                                                                                             // 17
    opacity: "1.0",                                                                                                    // 18
    fill: "#eee",                                                                                                      // 19
    d: "M20.201,5.169c-8.254,0-14.946,6.692-14.946,14.946c0,8.255,6.692,14.946,14.946,14.946\n    s14.946-6.691,14.946-14.946C35.146,11.861,28.455,5.169,20.201,5.169z M20.201,31.749c-6.425,0-11.634-5.208-11.634-11.634\n    c0-6.425,5.209-11.634,11.634-11.634c6.425,0,11.633,5.209,11.633,11.634C31.834,26.541,26.626,31.749,20.201,31.749z"
  }), "\n    ", HTML.PATH({                                                                                            // 21
    fill: "#da5347",                                                                                                   // 22
    d: "M26.013,10.047l1.654-2.866c-2.198-1.272-4.743-2.012-7.466-2.012h0v3.312h0\n    C22.32,8.481,24.301,9.057,26.013,10.047z"
  }, "\n    ", HTML.ANIMATETRANSFORM({                                                                                 // 24
    attributeType: "xml",                                                                                              // 25
    attributeName: "transform",                                                                                        // 26
    type: "rotate",                                                                                                    // 27
    from: "0 20 20",                                                                                                   // 28
    to: "360 20 20",                                                                                                   // 29
    dur: "0.5s",                                                                                                       // 30
    repeatCount: "indefinite"                                                                                          // 31
  }), "\n"), "\n");                                                                                                    // 32
}));                                                                                                                   // 33
                                                                                                                       // 34
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"not-found.html":["./template.not-found.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/globals/not-found.html                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.not-found.js");                                                                   // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"template.not-found.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/globals/template.not-found.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("notFound");                                                                                      // 2
Template["notFound"] = new Template("Template.notFound", (function() {                                                 // 3
  var view = this;                                                                                                     // 4
  return HTML.Raw("<h1>404 &mdash; Not Found.</h1>");                                                                  // 5
}));                                                                                                                   // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"connection.js":["./connection.html",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/globals/connection.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.import('./connection.html');/**                                                                                 //
 * Created by lucas on 7/24/16.                                                                                        //
 */                                                                                                                    //
                                                                                                                       // 4
                                                                                                                       //
Template.connection.onCreated(function () {                                                                            // 6
                                                                                                                       //
    Template.instance().status = function () {                                                                         // 8
        return Meteor.status().status;                                                                                 // 9
    };                                                                                                                 // 10
});                                                                                                                    // 12
                                                                                                                       //
Template.connection.onRendered(function () {                                                                           // 14
                                                                                                                       //
    var template = Template.instance();                                                                                // 16
                                                                                                                       //
    template.autorun(function () {                                                                                     // 18
        if (template.status() === "connected") {                                                                       // 19
                                                                                                                       //
            $('#connect').attr('status', 'online').addClass('online').removeClass('offline');                          // 21
        } else {                                                                                                       // 24
                                                                                                                       //
            $('#connect').attr('status', 'offline').addClass('offline').removeClass('online');                         // 27
        }                                                                                                              // 30
    });                                                                                                                // 31
});                                                                                                                    // 33
                                                                                                                       //
Template.connection.events({                                                                                           // 35
                                                                                                                       //
    "click #connect": function clickConnect() {                                                                        // 37
                                                                                                                       //
        if ($('#connect').attr('status') === "offline") {                                                              // 39
            return Meteor.reconnect();                                                                                 // 40
        } else {                                                                                                       // 41
            return Meteor.disconnect();                                                                                // 43
        }                                                                                                              // 44
    }                                                                                                                  // 45
});                                                                                                                    // 35
                                                                                                                       //
Template.connection.helpers({                                                                                          // 48
                                                                                                                       //
    status: function status() {                                                                                        // 50
        return Template.instance().status();                                                                           // 51
    }                                                                                                                  // 52
                                                                                                                       //
});                                                                                                                    // 48
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"footer.js":["./footer.html",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/globals/footer.js                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.import('./footer.html');                                                                                        // 1
                                                                                                                       //
Template.footer.rendered = function () {                                                                               // 3
                                                                                                                       //
    // FIXED FOOTER                                                                                                    //
    // Uncomment this if you want to have fixed footer or add 'fixed' class to footer element in html code             //
    // $('.footer').addClass('fixed');                                                                                 //
                                                                                                                       //
};                                                                                                                     // 9
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"header.js":["meteor/templating","../../api/pesquisas/pesquisas","./header.html",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/globals/header.js                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Template;module.import('meteor/templating',{"Template":function(v){Template=v}});var Pesquisas;module.import('../../api/pesquisas/pesquisas',{"Pesquisas":function(v){Pesquisas=v}});module.import('./header.html');
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
Template.header.onCreated(function () {                                                                                // 5
                                                                                                                       //
    var template = Template.instance();                                                                                // 7
                                                                                                                       //
    template.subscribe('Pesquisas');                                                                                   // 9
                                                                                                                       //
    template.pesquisas = function () {                                                                                 // 11
        return Pesquisas.find({});                                                                                     // 12
    };                                                                                                                 // 13
                                                                                                                       //
    template.numEntrevistas = function () {                                                                            // 15
                                                                                                                       //
        var pesquisas = Pesquisas.find({}).fetch();                                                                    // 17
                                                                                                                       //
        var totalEntrevistas = 0;                                                                                      // 19
                                                                                                                       //
        // Calcula o número de entrevistas realizadas                                                                  //
        pesquisas.map(function (pesquisa) {                                                                            // 22
                                                                                                                       //
            // se existe entrevista                                                                                    //
            if (pesquisa.entrevistas) {                                                                                // 25
                totalEntrevistas += pesquisa.entrevistas.length;                                                       // 26
            }                                                                                                          // 27
        });                                                                                                            // 28
                                                                                                                       //
        return totalEntrevistas;                                                                                       // 30
    };                                                                                                                 // 31
});                                                                                                                    // 33
                                                                                                                       //
Template.header.helpers({                                                                                              // 35
    'existePesquisa': function existePesquisa() {                                                                      // 37
        return Template.instance().pesquisas().count() > 0;                                                            // 38
    },                                                                                                                 // 39
    'numEntrevistasNaoSinc': function numEntrevistasNaoSinc() {                                                        // 40
        return Template.instance().numEntrevistas();                                                                   // 41
    }                                                                                                                  // 42
});                                                                                                                    // 35
                                                                                                                       //
Template.header.events({                                                                                               // 46
                                                                                                                       //
    'click #token': function clickToken(evt) {                                                                         // 48
                                                                                                                       //
        evt.preventDefault();                                                                                          // 50
                                                                                                                       //
        var res = confirm('Tem certeza que deseja alterar o token?');                                                  // 52
                                                                                                                       //
        if (res) {                                                                                                     // 54
            FlowRouter.go('token');                                                                                    // 55
        }                                                                                                              // 56
    },                                                                                                                 // 58
    'click nav a': function clickNavA(evt) {                                                                           // 59
                                                                                                                       //
        var rota = FlowRouter.current().route.name;                                                                    // 61
                                                                                                                       //
        if (rota === "add_entrevista" && $('form').length > 0) {                                                       // 63
                                                                                                                       //
            if (evt.target.className.indexOf("novaEntrevista") >= 0) {                                                 // 65
                return false;                                                                                          // 66
            }                                                                                                          // 67
                                                                                                                       //
            var cancelar = confirm('Deseja cancelar a entrevista atual?');                                             // 69
                                                                                                                       //
            if (!cancelar) {                                                                                           // 71
                evt.preventDefault();                                                                                  // 72
                return false;                                                                                          // 73
            }                                                                                                          // 74
        }                                                                                                              // 75
    }                                                                                                                  // 76
});                                                                                                                    // 46
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"layouts":{"default3.html":["./template.default3.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/default3.html                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("./template.default3.js");                                                                    // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"template.default3.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/template.default3.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("default3");                                                                                      // 2
Template["default3"] = new Template("Template.default3", (function() {                                                 // 3
  var view = this;                                                                                                     // 4
  return HTML.DIV({                                                                                                    // 5
    "class": "container"                                                                                               // 6
  }, "\n\n        ", Spacebars.include(view.lookupTemplate("header")), "\n\n        ", HTML.DIV({                      // 7
    id: "main"                                                                                                         // 8
  }, "\n            ", Blaze._TemplateWith(function() {                                                                // 9
    return {                                                                                                           // 10
      template: Spacebars.call(view.lookup("yield"))                                                                   // 11
    };                                                                                                                 // 12
  }, function() {                                                                                                      // 13
    return Spacebars.include(function() {                                                                              // 14
      return Spacebars.call(Template.__dynamic);                                                                       // 15
    });                                                                                                                // 16
  }), "\n        "), "\n\n        ", Spacebars.include(view.lookupTemplate("connection")), "\n\n        \n\n    ");    // 17
}));                                                                                                                   // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"default3.js":["./default3.html","../globals/header","../globals/connection","../globals/footer",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/layouts/default3.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.import('./default3.html');module.import('../globals/header');module.import('../globals/connection');module.import('../globals/footer');/**
 * Created by lucas on 7/23/16.                                                                                        //
 */                                                                                                                    //
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       // 7
                                                                                                                       //
Template.default3.onRendered(function () {                                                                             // 9
                                                                                                                       //
    // $(document).ready(function () {                                                                                 //
    //                                                                                                                 //
    //     window.addEventListener("orientationchange", recalcular_posicao_rodape, true);                              //
    // });                                                                                                             //
                                                                                                                       //
});                                                                                                                    // 16
                                                                                                                       //
Template.default3.events({                                                                                             // 18
    /*'change .container': () => {                                                                                     //
        recalcular_posicao_rodape();                                                                                   //
    },                                                                                                                 //
    'click button': () => {                                                                                            //
        recalcular_posicao_rodape();                                                                                   //
    },                                                                                                                 //
    'click .bairrosSelecionaveis': () => {                                                                             //
        recalcular_posicao_rodape();                                                                                   //
    },*/                                                                                                               //
});                                                                                                                    // 18
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"startup":{"client":{"routes":{"authenticated.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/client/routes/authenticated.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"configure.js":["meteor/kadira:flow-router","../../../ui/globals/not-found",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/client/routes/configure.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var FlowRouter;module.import('meteor/kadira:flow-router',{"FlowRouter":function(v){FlowRouter=v}});module.import('../../../ui/globals/not-found');
                                                                                                                       // 2
                                                                                                                       //
FlowRouter.notFound = {                                                                                                // 4
  action: function action() {                                                                                          // 5
    BlazeLayout.render('notFound');                                                                                    // 6
  }                                                                                                                    // 7
};                                                                                                                     // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"index.js":["./authenticated.js","./configure.js","./public.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/client/routes/index.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.import('./authenticated.js');module.import('./configure.js');module.import('./public.js');                      // 1
                                                                                                                       // 2
                                                                                                                       // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"public.js":["meteor/kadira:flow-router","../../../ui/public/index","../../../ui/layouts/default3","../../../ui/public/entrevistas/add_entrevista","../../../ui/public/sincronizar/sincronizar","../../../ui/public/token/token",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/client/routes/public.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var FlowRouter;module.import('meteor/kadira:flow-router',{"FlowRouter":function(v){FlowRouter=v}});module.import('../../../ui/public/index');module.import('../../../ui/layouts/default3');module.import('../../../ui/public/entrevistas/add_entrevista');module.import('../../../ui/public/sincronizar/sincronizar');module.import('../../../ui/public/token/token');
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       // 4
                                                                                                                       // 5
                                                                                                                       // 6
                                                                                                                       //
var publicRoutes = FlowRouter.group({                                                                                  // 10
    name: 'public'                                                                                                     // 11
});                                                                                                                    // 10
                                                                                                                       //
publicRoutes.route('/', {                                                                                              // 14
    name: 'index',                                                                                                     // 15
    action: function action() {                                                                                        // 16
        BlazeLayout.render('default3', { 'yield': 'index' });                                                          // 17
    }                                                                                                                  // 18
});                                                                                                                    // 14
                                                                                                                       //
publicRoutes.route('/novaEntrevista', {                                                                                // 21
    name: 'add_entrevista',                                                                                            // 22
    action: function action() {                                                                                        // 23
        BlazeLayout.render('default3', { 'yield': 'add_entrevista' });                                                 // 24
    }                                                                                                                  // 25
});                                                                                                                    // 21
                                                                                                                       //
publicRoutes.route('/sincronizar', {                                                                                   // 28
    name: 'sincronizar',                                                                                               // 29
    action: function action() {                                                                                        // 30
        BlazeLayout.render('default3', { 'yield': 'sincronizar' });                                                    // 31
    }                                                                                                                  // 32
});                                                                                                                    // 28
                                                                                                                       //
publicRoutes.route('/token', {                                                                                         // 35
    name: 'token',                                                                                                     // 36
    action: function action() {                                                                                        // 37
        BlazeLayout.render('default3', { 'yield': 'token' });                                                          // 38
    }                                                                                                                  // 39
});                                                                                                                    // 35
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"index.js":["./routes/",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/client/index.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.import('./routes/');//import 'bootstrap/dist/css/bootstrap.min.css';                                            //
//import 'bootstrap/dist/js/bootstrap.min.js';                                                                         //
                                                                                                                       // 3
                                                                                                                       //
Number.prototype.pad = function pad(width, z) {                                                                        // 5
    var n = this;                                                                                                      // 6
    z = z || '0';                                                                                                      // 7
    n = n + '';                                                                                                        // 8
    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;                                        // 9
};                                                                                                                     // 10
                                                                                                                       //
//Bert.defaults.style = 'growl-top-right';                                                                             //
                                                                                                                       //
var traduzFrasesJqueryValidation = function traduzFrasesJqueryValidation() {                                           // 15
    /*                                                                                                                 //
     * Translated default messages for the jQuery validation plugin.                                                   //
     * Locale: PT (Portuguese; português)                                                                              //
     * Region: BR (Brazil)                                                                                             //
     */                                                                                                                //
    $.extend($.validator.messages, {                                                                                   // 21
                                                                                                                       //
        // Core                                                                                                        //
        required: "Este campo &eacute; obrigatório.",                                                                  // 24
        remote: "Por favor, corrija este campo.",                                                                      // 25
        email: "Por favor, forne&ccedil;a um endere&ccedil;o de email v&aacute;lido.",                                 // 26
        url: "Por favor, forne&ccedil;a uma URL v&aacute;lida.",                                                       // 27
        date: "Por favor, forne&ccedil;a uma data v&aacute;lida.",                                                     // 28
        dateISO: "Por favor, forne&ccedil;a uma data v&aacute;lida (ISO).",                                            // 29
        number: "Por favor, forne&ccedil;a um n&uacute;mero v&aacute;lido.",                                           // 30
        digits: "Por favor, forne&ccedil;a somente d&iacute;gitos.",                                                   // 31
        creditcard: "Por favor, forne&ccedil;a um cart&atilde;o de cr&eacute;dito v&aacute;lido.",                     // 32
        equalTo: "Por favor, forne&ccedil;a o mesmo valor novamente.",                                                 // 33
        maxlength: $.validator.format("Por favor, forne&ccedil;a n&atilde;o mais que {0} caracteres."),                // 34
        minlength: $.validator.format("Por favor, forne&ccedil;a ao menos {0} caracteres."),                           // 35
        rangelength: $.validator.format("Por favor, forne&ccedil;a um valor entre {0} e {1} caracteres de comprimento."),
        range: $.validator.format("Por favor, forne&ccedil;a um valor entre {0} e {1}."),                              // 37
        max: $.validator.format("Por favor, forne&ccedil;a um valor menor ou igual a {0}."),                           // 38
        min: $.validator.format("Por favor, forne&ccedil;a um valor maior ou igual a {0}."),                           // 39
                                                                                                                       //
        // Metodos Adicionais                                                                                          //
        maxWords: $.validator.format("Por favor, forne&ccedil;a com {0} palavras ou menos."),                          // 42
        minWords: $.validator.format("Por favor, forne&ccedil;a pelo menos {0} palavras."),                            // 43
        rangeWords: $.validator.format("Por favor, forne&ccedil;a entre {0} e {1} palavras."),                         // 44
        accept: "Por favor, forne&ccedil;a um tipo v&aacute;lido.",                                                    // 45
        alphanumeric: "Por favor, forne&ccedil;a somente com letras, n&uacute;meros e sublinhados.",                   // 46
        bankaccountNL: "Por favor, forne&ccedil;a com um n&uacute;mero de conta banc&aacute;ria v&aacute;lida.",       // 47
        bankorgiroaccountNL: "Por favor, forne&ccedil;a um banco v&aacute;lido ou n&uacute;mero de conta.",            // 48
        bic: "Por favor, forne&ccedil;a um c&oacute;digo BIC v&aacute;lido.",                                          // 49
        cifES: "Por favor, forne&ccedil;a um c&oacute;digo CIF v&aacute;lido.",                                        // 50
        creditcardtypes: "Por favor, forne&ccedil;a um n&uacute;mero de cart&atilde;o de cr&eacute;dito v&aacute;lido.",
        currency: "Por favor, forne&ccedil;a uma moeda v&aacute;lida.",                                                // 52
        dateFA: "Por favor, forne&ccedil;a uma data correta.",                                                         // 53
        dateITA: "Por favor, forne&ccedil;a uma data correta.",                                                        // 54
        dateNL: "Por favor, forne&ccedil;a uma data correta.",                                                         // 55
        extension: "Por favor, forne&ccedil;a um valor com uma extens&atilde;o v&aacute;lida.",                        // 56
        giroaccountNL: "Por favor, forne&ccedil;a um n&uacute;mero de conta corrente v&aacute;lido.",                  // 57
        iban: "Por favor, forne&ccedil;a um c&oacute;digo IBAN v&aacute;lido.",                                        // 58
        integer: "Por favor, forne&ccedil;a um n&uacute;mero n&atilde;o decimal.",                                     // 59
        ipv4: "Por favor, forne&ccedil;a um IPv4 v&aacute;lido.",                                                      // 60
        ipv6: "Por favor, forne&ccedil;a um IPv6 v&aacute;lido.",                                                      // 61
        lettersonly: "Por favor, forne&ccedil;a apenas com letras.",                                                   // 62
        letterswithbasicpunc: "Por favor, forne&ccedil;a apenas letras ou pontua&ccedil;ões.",                         // 63
        mobileNL: "Por favor, fornece&ccedil;a um n&uacute;mero v&aacute;lido de telefone.",                           // 64
        mobileUK: "Por favor, fornece&ccedil;a um n&uacute;mero v&aacute;lido de telefone.",                           // 65
        nieES: "Por favor, forne&ccedil;a um NIE v&aacute;lido.",                                                      // 66
        nifES: "Por favor, forne&ccedil;a um NIF v&aacute;lido.",                                                      // 67
        nowhitespace: "Por favor, n&atilde;o utilize espa&ccedil;os em branco.",                                       // 68
        pattern: "O formato fornenecido &eacute; inv&aacute;lido.",                                                    // 69
        phoneNL: "Por favor, fornece&ccedil;a um n&uacute;mero de telefone v&aacute;lido.",                            // 70
        phoneUK: "Por favor, fornece&ccedil;a um n&uacute;mero de telefone v&aacute;lido.",                            // 71
        phoneUS: "Por favor, fornece&ccedil;a um n&uacute;mero de telefone v&aacute;lido.",                            // 72
        phonesUK: "Por favor, fornece&ccedil;a um n&uacute;mero de telefone v&aacute;lido.",                           // 73
        postalCodeCA: "Por favor, fornece&ccedil;a um n&uacute;mero de c&oacute;digo postal v&aacute;lido.",           // 74
        postalcodeIT: "Por favor, fornece&ccedil;a um n&uacute;mero de c&oacute;digo postal v&aacute;lido.",           // 75
        postalcodeNL: "Por favor, fornece&ccedil;a um n&uacute;mero de c&oacute;digo postal v&aacute;lido.",           // 76
        postcodeUK: "Por favor, fornece&ccedil;a um n&uacute;mero de c&oacute;digo postal v&aacute;lido.",             // 77
        postalcodeBR: "Por favor, forne&ccedil;a um CEP v&aacute;lido.",                                               // 78
        require_from_group: $.validator.format("Por favor, forne&ccedil;a pelo menos {0} destes campos."),             // 79
        skip_or_fill_minimum: $.validator.format("Por favor, optar entre ignorar esses campos ou preencher pelo menos {0} deles."),
        stateUS: "Por favor, forne&ccedil;a um estado v&aacute;lido.",                                                 // 81
        strippedminlength: $.validator.format("Por favor, forne&ccedil;a pelo menos {0} caracteres."),                 // 82
        time: "Por favor, forne&ccedil;a um hor&aacute;rio v&aacute;lido, no intervado de 00:00 e 23:59.",             // 83
        time12h: "Por favor, forne&ccedil;a um hor&aacute;rio v&aacute;lido, no intervado de 01:00 e 12:59 am/pm.",    // 84
        url2: "Por favor, fornece&ccedil;a uma URL v&aacute;lida.",                                                    // 85
        vinUS: "O n&uacute;mero de identifica&ccedil;&atilde;o de ve&iacute;culo informada (VIN) &eacute; inv&aacute;lido.",
        zipcodeUS: "Por favor, fornece&ccedil;a um c&oacute;digo postal americano v&aacute;lido.",                     // 87
        ziprange: "O c&oacute;digo postal deve estar entre 902xx-xxxx e 905xx-xxxx",                                   // 88
        cpfBR: "Por favor, forne&ccedil;a um CPF v&aacute;lido."                                                       // 89
    });                                                                                                                // 21
};                                                                                                                     // 92
                                                                                                                       //
traduzFrasesJqueryValidation();                                                                                        // 94
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},"api":{"pesquisas":{"pesquisas.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/pesquisas/pesquisas.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({Pesquisas:function(){return Pesquisas}});var Pesquisas = new Ground.Collection('pesquisas', { connection: null });
                                                                                                                       //
// var Api = new Restivus({                                                                                            //
//     useDefaultAuth: true,                                                                                           //
//     prettyJson: true                                                                                                //
// });                                                                                                                 //
                                                                                                                       //
// Deny all client-side updates on the Cliente collection                                                              //
Pesquisas.deny({                                                                                                       // 10
    insert: function insert() {                                                                                        // 11
        return false;                                                                                                  // 11
    },                                                                                                                 // 11
    // permite insert                                                                                                  //
    update: function update() {                                                                                        // 12
        return false;                                                                                                  // 12
    },                                                                                                                 // 12
    remove: function remove() {                                                                                        // 13
        return false;                                                                                                  // 13
    }                                                                                                                  // 13
});                                                                                                                    // 10
Pesquisas.allow({                                                                                                      // 15
    insert: function insert() {                                                                                        // 16
        return true;                                                                                                   // 16
    },                                                                                                                 // 16
    update: function update() {                                                                                        // 17
        return true;                                                                                                   // 17
    },                                                                                                                 // 17
    remove: function remove() {                                                                                        // 18
        return true;                                                                                                   // 18
    }                                                                                                                  // 18
});                                                                                                                    // 15
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"token":{"token.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/token/token.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({Token:function(){return Token}});/**                                                                    //
 * Created by lucas on 8/14/16.                                                                                        //
 */                                                                                                                    //
var Token = new Ground.Collection('token', { connection: null });                                                      // 4
                                                                                                                       //
// Deny all client-side updates on the Cliente collection                                                              //
Token.deny({                                                                                                           // 7
    insert: function insert() {                                                                                        // 8
        return false;                                                                                                  // 8
    },                                                                                                                 // 8
    // permite insert                                                                                                  //
    update: function update() {                                                                                        // 9
        return false;                                                                                                  // 9
    },                                                                                                                 // 9
    remove: function remove() {                                                                                        // 10
        return false;                                                                                                  // 10
    }                                                                                                                  // 10
});                                                                                                                    // 7
Token.allow({                                                                                                          // 12
    insert: function insert() {                                                                                        // 13
        return true;                                                                                                   // 13
    },                                                                                                                 // 13
    update: function update() {                                                                                        // 14
        return true;                                                                                                   // 14
    },                                                                                                                 // 14
    remove: function remove() {                                                                                        // 15
        return true;                                                                                                   // 15
    }                                                                                                                  // 15
});                                                                                                                    // 12
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"client":{"dist":{"datepicker":{"js":{"bootstrap-datepicker.js":["babel-runtime/helpers/typeof","jquery",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/dist/datepicker/js/bootstrap-datepicker.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof;module.import("babel-runtime/helpers/typeof",{"default":function(v){_typeof=v}});                          //
/*!                                                                                                                    //
 * Datepicker for Bootstrap v1.7.0-dev (https://github.com/eternicode/bootstrap-datepicker)                            //
 *                                                                                                                     //
 * Copyright 2012 Stefan Petre                                                                                         //
 * Improvements by Andrew Rowls                                                                                        //
 * Licensed under the Apache License v2.0 (http://www.apache.org/licenses/LICENSE-2.0)                                 //
 */                                                                                                                    //
                                                                                                                       //
(function (factory) {                                                                                                  // 9
	if (typeof define === "function" && define.amd) {                                                                     // 10
		define(["jquery"], factory);                                                                                         // 11
	} else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') {                          // 12
		factory(require('jquery'));                                                                                          // 13
	} else {                                                                                                              // 14
		factory(jQuery);                                                                                                     // 15
	}                                                                                                                     // 16
})(function ($, undefined) {                                                                                           // 17
                                                                                                                       //
	function UTCDate() {                                                                                                  // 19
		return new Date(Date.UTC.apply(Date, arguments));                                                                    // 20
	}                                                                                                                     // 21
	function UTCToday() {                                                                                                 // 22
		var today = new Date();                                                                                              // 23
		return UTCDate(today.getFullYear(), today.getMonth(), today.getDate());                                              // 24
	}                                                                                                                     // 25
	function isUTCEquals(date1, date2) {                                                                                  // 26
		return date1.getUTCFullYear() === date2.getUTCFullYear() && date1.getUTCMonth() === date2.getUTCMonth() && date1.getUTCDate() === date2.getUTCDate();
	}                                                                                                                     // 32
	function alias(method) {                                                                                              // 33
		return function () {                                                                                                 // 34
			return this[method].apply(this, arguments);                                                                         // 35
		};                                                                                                                   // 36
	}                                                                                                                     // 37
	function isValidDate(d) {                                                                                             // 38
		return d && !isNaN(d.getTime());                                                                                     // 39
	}                                                                                                                     // 40
                                                                                                                       //
	var DateArray = function () {                                                                                         // 42
		var extras = {                                                                                                       // 43
			get: function get(i) {                                                                                              // 44
				return this.slice(i)[0];                                                                                           // 45
			},                                                                                                                  // 46
			contains: function contains(d) {                                                                                    // 47
				// Array.indexOf is not cross-browser;                                                                             //
				// $.inArray doesn't work with Dates                                                                               //
				var val = d && d.valueOf();                                                                                        // 50
				for (var i = 0, l = this.length; i < l; i++) {                                                                     // 51
					// Use date arithmetic to allow dates with different times to match                                               //
					if (0 <= this[i].valueOf() - val && this[i].valueOf() - val < 1000 * 60 * 60 * 24) return i;                      // 53
				}return -1;                                                                                                        // 51
			},                                                                                                                  // 56
			remove: function remove(i) {                                                                                        // 57
				this.splice(i, 1);                                                                                                 // 58
			},                                                                                                                  // 59
			replace: function replace(new_array) {                                                                              // 60
				if (!new_array) return;                                                                                            // 61
				if (!$.isArray(new_array)) new_array = [new_array];                                                                // 63
				this.clear();                                                                                                      // 65
				this.push.apply(this, new_array);                                                                                  // 66
			},                                                                                                                  // 67
			clear: function clear() {                                                                                           // 68
				this.length = 0;                                                                                                   // 69
			},                                                                                                                  // 70
			copy: function copy() {                                                                                             // 71
				var a = new DateArray();                                                                                           // 72
				a.replace(this);                                                                                                   // 73
				return a;                                                                                                          // 74
			}                                                                                                                   // 75
		};                                                                                                                   // 43
                                                                                                                       //
		return function () {                                                                                                 // 78
			var a = [];                                                                                                         // 79
			a.push.apply(a, arguments);                                                                                         // 80
			$.extend(a, extras);                                                                                                // 81
			return a;                                                                                                           // 82
		};                                                                                                                   // 83
	}();                                                                                                                  // 84
                                                                                                                       //
	// Picker object                                                                                                      //
                                                                                                                       //
	var Datepicker = function Datepicker(element, options) {                                                              // 89
		$.data(element, 'datepicker', this);                                                                                 // 90
		this._process_options(options);                                                                                      // 91
                                                                                                                       //
		this.dates = new DateArray();                                                                                        // 93
		this.viewDate = this.o.defaultViewDate;                                                                              // 94
		this.focusDate = null;                                                                                               // 95
                                                                                                                       //
		this.element = $(element);                                                                                           // 97
		this.isInput = this.element.is('input');                                                                             // 98
		this.inputField = this.isInput ? this.element : this.element.find('input');                                          // 99
		this.component = this.element.hasClass('date') ? this.element.find('.add-on, .input-group-addon, .btn') : false;     // 100
		if (this.component && this.component.length === 0) this.component = false;                                           // 101
		this.isInline = !this.component && this.element.is('div');                                                           // 103
                                                                                                                       //
		this.picker = $(DPGlobal.template);                                                                                  // 105
                                                                                                                       //
		// Checking templates and inserting                                                                                  //
		if (this._check_template(this.o.templates.leftArrow)) {                                                              // 108
			this.picker.find('.prev').html(this.o.templates.leftArrow);                                                         // 109
		}                                                                                                                    // 110
                                                                                                                       //
		if (this._check_template(this.o.templates.rightArrow)) {                                                             // 112
			this.picker.find('.next').html(this.o.templates.rightArrow);                                                        // 113
		}                                                                                                                    // 114
                                                                                                                       //
		this._buildEvents();                                                                                                 // 116
		this._attachEvents();                                                                                                // 117
                                                                                                                       //
		if (this.isInline) {                                                                                                 // 119
			this.picker.addClass('datepicker-inline').appendTo(this.element);                                                   // 120
		} else {                                                                                                             // 121
			this.picker.addClass('datepicker-dropdown dropdown-menu');                                                          // 123
		}                                                                                                                    // 124
                                                                                                                       //
		if (this.o.rtl) {                                                                                                    // 126
			this.picker.addClass('datepicker-rtl');                                                                             // 127
		}                                                                                                                    // 128
                                                                                                                       //
		if (this.o.calendarWeeks) {                                                                                          // 130
			this.picker.find('.datepicker-days .datepicker-switch, thead .datepicker-title, tfoot .today, tfoot .clear').attr('colspan', function (i, val) {
				return Number(val) + 1;                                                                                            // 133
			});                                                                                                                 // 134
		}                                                                                                                    // 135
                                                                                                                       //
		this._allow_update = false;                                                                                          // 137
                                                                                                                       //
		this.setStartDate(this._o.startDate);                                                                                // 139
		this.setEndDate(this._o.endDate);                                                                                    // 140
		this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);                                                               // 141
		this.setDaysOfWeekHighlighted(this.o.daysOfWeekHighlighted);                                                         // 142
		this.setDatesDisabled(this.o.datesDisabled);                                                                         // 143
                                                                                                                       //
		this.setViewMode(this.o.startView);                                                                                  // 145
		this.fillDow();                                                                                                      // 146
		this.fillMonths();                                                                                                   // 147
                                                                                                                       //
		this._allow_update = true;                                                                                           // 149
                                                                                                                       //
		this.update();                                                                                                       // 151
                                                                                                                       //
		if (this.isInline) {                                                                                                 // 153
			this.show();                                                                                                        // 154
		}                                                                                                                    // 155
	};                                                                                                                    // 156
                                                                                                                       //
	Datepicker.prototype = {                                                                                              // 158
		constructor: Datepicker,                                                                                             // 159
                                                                                                                       //
		_resolveViewName: function _resolveViewName(view) {                                                                  // 161
			$.each(DPGlobal.viewModes, function (i, viewMode) {                                                                 // 162
				if (view === i || $.inArray(view, viewMode.names) !== -1) {                                                        // 163
					view = i;                                                                                                         // 164
					return false;                                                                                                     // 165
				}                                                                                                                  // 166
			});                                                                                                                 // 167
                                                                                                                       //
			return view;                                                                                                        // 169
		},                                                                                                                   // 170
                                                                                                                       //
		_resolveDaysOfWeek: function _resolveDaysOfWeek(daysOfWeek) {                                                        // 172
			if (!$.isArray(daysOfWeek)) daysOfWeek = daysOfWeek.split(/[,\s]*/);                                                // 173
			return $.map(daysOfWeek, Number);                                                                                   // 175
		},                                                                                                                   // 176
                                                                                                                       //
		_check_template: function _check_template(tmp) {                                                                     // 178
			try {                                                                                                               // 179
				// If empty                                                                                                        //
				if (tmp === undefined || tmp === "") {                                                                             // 181
					return false;                                                                                                     // 182
				}                                                                                                                  // 183
				// If no html, everything ok                                                                                       //
				if ((tmp.match(/[<>]/g) || []).length <= 0) {                                                                      // 185
					return true;                                                                                                      // 186
				}                                                                                                                  // 187
				// Checking if html is fine                                                                                        //
				var jDom = $(tmp);                                                                                                 // 189
				return jDom.length > 0;                                                                                            // 190
			} catch (ex) {                                                                                                      // 191
				return false;                                                                                                      // 193
			}                                                                                                                   // 194
		},                                                                                                                   // 195
                                                                                                                       //
		_process_options: function _process_options(opts) {                                                                  // 197
			// Store raw options for reference                                                                                  //
			this._o = $.extend({}, this._o, opts);                                                                              // 199
			// Processed options                                                                                                //
			var o = this.o = $.extend({}, this._o);                                                                             // 201
                                                                                                                       //
			// Check if "de-DE" style date is available, if not language should                                                 //
			// fallback to 2 letter code eg "de"                                                                                //
			var lang = o.language;                                                                                              // 205
			if (!dates[lang]) {                                                                                                 // 206
				lang = lang.split('-')[0];                                                                                         // 207
				if (!dates[lang]) lang = defaults.language;                                                                        // 208
			}                                                                                                                   // 210
			o.language = lang;                                                                                                  // 211
                                                                                                                       //
			// Retrieve view index from any aliases                                                                             //
			o.startView = this._resolveViewName(o.startView);                                                                   // 214
			o.minViewMode = this._resolveViewName(o.minViewMode);                                                               // 215
			o.maxViewMode = this._resolveViewName(o.maxViewMode);                                                               // 216
                                                                                                                       //
			// Check view is between min and max                                                                                //
			o.startView = Math.max(this.o.minViewMode, Math.min(this.o.maxViewMode, o.startView));                              // 219
                                                                                                                       //
			// true, false, or Number > 0                                                                                       //
			if (o.multidate !== true) {                                                                                         // 222
				o.multidate = Number(o.multidate) || false;                                                                        // 223
				if (o.multidate !== false) o.multidate = Math.max(0, o.multidate);                                                 // 224
			}                                                                                                                   // 226
			o.multidateSeparator = String(o.multidateSeparator);                                                                // 227
                                                                                                                       //
			o.weekStart %= 7;                                                                                                   // 229
			o.weekEnd = (o.weekStart + 6) % 7;                                                                                  // 230
                                                                                                                       //
			var format = DPGlobal.parseFormat(o.format);                                                                        // 232
			if (o.startDate !== -Infinity) {                                                                                    // 233
				if (!!o.startDate) {                                                                                               // 234
					if (o.startDate instanceof Date) o.startDate = this._local_to_utc(this._zero_time(o.startDate));else o.startDate = DPGlobal.parseDate(o.startDate, format, o.language, o.assumeNearbyYear);
				} else {                                                                                                           // 239
					o.startDate = -Infinity;                                                                                          // 241
				}                                                                                                                  // 242
			}                                                                                                                   // 243
			if (o.endDate !== Infinity) {                                                                                       // 244
				if (!!o.endDate) {                                                                                                 // 245
					if (o.endDate instanceof Date) o.endDate = this._local_to_utc(this._zero_time(o.endDate));else o.endDate = DPGlobal.parseDate(o.endDate, format, o.language, o.assumeNearbyYear);
				} else {                                                                                                           // 250
					o.endDate = Infinity;                                                                                             // 252
				}                                                                                                                  // 253
			}                                                                                                                   // 254
                                                                                                                       //
			o.daysOfWeekDisabled = this._resolveDaysOfWeek(o.daysOfWeekDisabled || []);                                         // 256
			o.daysOfWeekHighlighted = this._resolveDaysOfWeek(o.daysOfWeekHighlighted || []);                                   // 257
                                                                                                                       //
			o.datesDisabled = o.datesDisabled || [];                                                                            // 259
			if (!$.isArray(o.datesDisabled)) {                                                                                  // 260
				o.datesDisabled = o.datesDisabled.split(',');                                                                      // 261
			}                                                                                                                   // 262
			o.datesDisabled = $.map(o.datesDisabled, function (d) {                                                             // 263
				return DPGlobal.parseDate(d, format, o.language, o.assumeNearbyYear);                                              // 264
			});                                                                                                                 // 265
                                                                                                                       //
			var plc = String(o.orientation).toLowerCase().split(/\s+/g),                                                        // 267
			    _plc = o.orientation.toLowerCase();                                                                             // 267
			plc = $.grep(plc, function (word) {                                                                                 // 269
				return (/^auto|left|right|top|bottom$/.test(word)                                                                  // 270
				);                                                                                                                 // 270
			});                                                                                                                 // 271
			o.orientation = { x: 'auto', y: 'auto' };                                                                           // 272
			if (!_plc || _plc === 'auto') ; // no action                                                                        // 273
			else if (plc.length === 1) {                                                                                        // 273
					switch (plc[0]) {                                                                                                 // 276
						case 'top':                                                                                                      // 277
						case 'bottom':                                                                                                   // 278
							o.orientation.y = plc[0];                                                                                       // 279
							break;                                                                                                          // 280
						case 'left':                                                                                                     // 281
						case 'right':                                                                                                    // 282
							o.orientation.x = plc[0];                                                                                       // 283
							break;                                                                                                          // 284
					}                                                                                                                 // 276
				} else {                                                                                                           // 286
					_plc = $.grep(plc, function (word) {                                                                              // 288
						return (/^left|right$/.test(word)                                                                                // 289
						);                                                                                                               // 289
					});                                                                                                               // 290
					o.orientation.x = _plc[0] || 'auto';                                                                              // 291
                                                                                                                       //
					_plc = $.grep(plc, function (word) {                                                                              // 293
						return (/^top|bottom$/.test(word)                                                                                // 294
						);                                                                                                               // 294
					});                                                                                                               // 295
					o.orientation.y = _plc[0] || 'auto';                                                                              // 296
				}                                                                                                                  // 297
			if (o.defaultViewDate) {                                                                                            // 298
				var year = o.defaultViewDate.year || new Date().getFullYear();                                                     // 299
				var month = o.defaultViewDate.month || 0;                                                                          // 300
				var day = o.defaultViewDate.day || 1;                                                                              // 301
				o.defaultViewDate = UTCDate(year, month, day);                                                                     // 302
			} else {                                                                                                            // 303
				o.defaultViewDate = UTCToday();                                                                                    // 304
			}                                                                                                                   // 305
		},                                                                                                                   // 306
		_events: [],                                                                                                         // 307
		_secondaryEvents: [],                                                                                                // 308
		_applyEvents: function _applyEvents(evs) {                                                                           // 309
			for (var i = 0, el, ch, ev; i < evs.length; i++) {                                                                  // 310
				el = evs[i][0];                                                                                                    // 311
				if (evs[i].length === 2) {                                                                                         // 312
					ch = undefined;                                                                                                   // 313
					ev = evs[i][1];                                                                                                   // 314
				} else if (evs[i].length === 3) {                                                                                  // 315
					ch = evs[i][1];                                                                                                   // 316
					ev = evs[i][2];                                                                                                   // 317
				}                                                                                                                  // 318
				el.on(ev, ch);                                                                                                     // 319
			}                                                                                                                   // 320
		},                                                                                                                   // 321
		_unapplyEvents: function _unapplyEvents(evs) {                                                                       // 322
			for (var i = 0, el, ev, ch; i < evs.length; i++) {                                                                  // 323
				el = evs[i][0];                                                                                                    // 324
				if (evs[i].length === 2) {                                                                                         // 325
					ch = undefined;                                                                                                   // 326
					ev = evs[i][1];                                                                                                   // 327
				} else if (evs[i].length === 3) {                                                                                  // 328
					ch = evs[i][1];                                                                                                   // 329
					ev = evs[i][2];                                                                                                   // 330
				}                                                                                                                  // 331
				el.off(ev, ch);                                                                                                    // 332
			}                                                                                                                   // 333
		},                                                                                                                   // 334
		_buildEvents: function _buildEvents() {                                                                              // 335
			var events = {                                                                                                      // 336
				keyup: $.proxy(function (e) {                                                                                      // 337
					if ($.inArray(e.keyCode, [27, 37, 39, 38, 40, 32, 13, 9]) === -1) this.update();                                  // 338
				}, this),                                                                                                          // 340
				keydown: $.proxy(this.keydown, this),                                                                              // 341
				paste: $.proxy(this.paste, this)                                                                                   // 342
			};                                                                                                                  // 336
                                                                                                                       //
			if (this.o.showOnFocus === true) {                                                                                  // 345
				events.focus = $.proxy(this.show, this);                                                                           // 346
			}                                                                                                                   // 347
                                                                                                                       //
			if (this.isInput) {                                                                                                 // 349
				// single input                                                                                                    //
				this._events = [[this.element, events]];                                                                           // 350
			}                                                                                                                   // 353
			// component: input + button                                                                                        //
			else if (this.component && this.inputField.length) {                                                                // 349
					this._events = [                                                                                                  // 356
					// For components that are not readonly, allow keyboard nav                                                       //
					[this.inputField, events], [this.component, {                                                                     // 358
						click: $.proxy(this.show, this)                                                                                  // 360
					}]];                                                                                                              // 359
				} else {                                                                                                           // 363
					this._events = [[this.element, {                                                                                  // 365
						click: $.proxy(this.show, this),                                                                                 // 367
						keydown: $.proxy(this.keydown, this)                                                                             // 368
					}]];                                                                                                              // 366
				}                                                                                                                  // 371
			this._events.push(                                                                                                  // 372
			// Component: listen for blur on element descendants                                                                //
			[this.element, '*', {                                                                                               // 374
				blur: $.proxy(function (e) {                                                                                       // 375
					this._focused_from = e.target;                                                                                    // 376
				}, this)                                                                                                           // 377
			}],                                                                                                                 // 374
			// Input: listen for blur on element                                                                                //
			[this.element, {                                                                                                    // 380
				blur: $.proxy(function (e) {                                                                                       // 381
					this._focused_from = e.target;                                                                                    // 382
				}, this)                                                                                                           // 383
			}]);                                                                                                                // 380
                                                                                                                       //
			if (this.o.immediateUpdates) {                                                                                      // 387
				// Trigger input updates immediately on changed year/month                                                         //
				this._events.push([this.element, {                                                                                 // 389
					'changeYear changeMonth': $.proxy(function (e) {                                                                  // 390
						this.update(e.date);                                                                                             // 391
					}, this)                                                                                                          // 392
				}]);                                                                                                               // 389
			}                                                                                                                   // 394
                                                                                                                       //
			this._secondaryEvents = [[this.picker, {                                                                            // 396
				click: $.proxy(this.click, this)                                                                                   // 398
			}], [this.picker, '.prev, .next', {                                                                                 // 397
				click: $.proxy(this.navArrowsClick, this)                                                                          // 401
			}], [$(window), {                                                                                                   // 400
				resize: $.proxy(this.place, this)                                                                                  // 404
			}], [$(document), {                                                                                                 // 403
				'mousedown touchstart': $.proxy(function (e) {                                                                     // 407
					// Clicked outside the datepicker, hide it                                                                        //
					if (!(this.element.is(e.target) || this.element.find(e.target).length || this.picker.is(e.target) || this.picker.find(e.target).length || this.isInline)) {
						this.hide();                                                                                                     // 416
					}                                                                                                                 // 417
				}, this)                                                                                                           // 418
			}]];                                                                                                                // 406
		},                                                                                                                   // 421
		_attachEvents: function _attachEvents() {                                                                            // 422
			this._detachEvents();                                                                                               // 423
			this._applyEvents(this._events);                                                                                    // 424
		},                                                                                                                   // 425
		_detachEvents: function _detachEvents() {                                                                            // 426
			this._unapplyEvents(this._events);                                                                                  // 427
		},                                                                                                                   // 428
		_attachSecondaryEvents: function _attachSecondaryEvents() {                                                          // 429
			this._detachSecondaryEvents();                                                                                      // 430
			this._applyEvents(this._secondaryEvents);                                                                           // 431
		},                                                                                                                   // 432
		_detachSecondaryEvents: function _detachSecondaryEvents() {                                                          // 433
			this._unapplyEvents(this._secondaryEvents);                                                                         // 434
		},                                                                                                                   // 435
		_trigger: function _trigger(event, altdate) {                                                                        // 436
			var date = altdate || this.dates.get(-1),                                                                           // 437
			    local_date = this._utc_to_local(date);                                                                          // 437
                                                                                                                       //
			this.element.trigger({                                                                                              // 440
				type: event,                                                                                                       // 441
				date: local_date,                                                                                                  // 442
				viewMode: this.viewMode,                                                                                           // 443
				dates: $.map(this.dates, this._utc_to_local),                                                                      // 444
				format: $.proxy(function (ix, format) {                                                                            // 445
					if (arguments.length === 0) {                                                                                     // 446
						ix = this.dates.length - 1;                                                                                      // 447
						format = this.o.format;                                                                                          // 448
					} else if (typeof ix === 'string') {                                                                              // 449
						format = ix;                                                                                                     // 450
						ix = this.dates.length - 1;                                                                                      // 451
					}                                                                                                                 // 452
					format = format || this.o.format;                                                                                 // 453
					var date = this.dates.get(ix);                                                                                    // 454
					return DPGlobal.formatDate(date, format, this.o.language);                                                        // 455
				}, this)                                                                                                           // 456
			});                                                                                                                 // 440
		},                                                                                                                   // 458
                                                                                                                       //
		show: function show() {                                                                                              // 460
			if (this.inputField.prop('disabled') || this.inputField.prop('readonly') && this.o.enableOnReadonly === false) return;
			if (!this.isInline) this.picker.appendTo(this.o.container);                                                         // 463
			this.place();                                                                                                       // 465
			this.picker.show();                                                                                                 // 466
			this._attachSecondaryEvents();                                                                                      // 467
			this._trigger('show');                                                                                              // 468
			if ((window.navigator.msMaxTouchPoints || 'ontouchstart' in document) && this.o.disableTouchKeyboard) {             // 469
				$(this.element).blur();                                                                                            // 470
			}                                                                                                                   // 471
			return this;                                                                                                        // 472
		},                                                                                                                   // 473
                                                                                                                       //
		hide: function hide() {                                                                                              // 475
			if (this.isInline || !this.picker.is(':visible')) return this;                                                      // 476
			this.focusDate = null;                                                                                              // 478
			this.picker.hide().detach();                                                                                        // 479
			this._detachSecondaryEvents();                                                                                      // 480
			this.setViewMode(this.o.startView);                                                                                 // 481
                                                                                                                       //
			if (this.o.forceParse && this.inputField.val()) this.setValue();                                                    // 483
			this._trigger('hide');                                                                                              // 485
			return this;                                                                                                        // 486
		},                                                                                                                   // 487
                                                                                                                       //
		destroy: function destroy() {                                                                                        // 489
			this.hide();                                                                                                        // 490
			this._detachEvents();                                                                                               // 491
			this._detachSecondaryEvents();                                                                                      // 492
			this.picker.remove();                                                                                               // 493
			delete this.element.data().datepicker;                                                                              // 494
			if (!this.isInput) {                                                                                                // 495
				delete this.element.data().date;                                                                                   // 496
			}                                                                                                                   // 497
			return this;                                                                                                        // 498
		},                                                                                                                   // 499
                                                                                                                       //
		paste: function paste(e) {                                                                                           // 501
			var dateString;                                                                                                     // 502
			if (e.originalEvent.clipboardData && e.originalEvent.clipboardData.types && $.inArray('text/plain', e.originalEvent.clipboardData.types) !== -1) {
				dateString = e.originalEvent.clipboardData.getData('text/plain');                                                  // 505
			} else if (window.clipboardData) {                                                                                  // 506
				dateString = window.clipboardData.getData('Text');                                                                 // 507
			} else {                                                                                                            // 508
				return;                                                                                                            // 509
			}                                                                                                                   // 510
			this.setDate(dateString);                                                                                           // 511
			this.update();                                                                                                      // 512
			e.preventDefault();                                                                                                 // 513
		},                                                                                                                   // 514
                                                                                                                       //
		_utc_to_local: function _utc_to_local(utc) {                                                                         // 516
			return utc && new Date(utc.getTime() + utc.getTimezoneOffset() * 60000);                                            // 517
		},                                                                                                                   // 518
		_local_to_utc: function _local_to_utc(local) {                                                                       // 519
			return local && new Date(local.getTime() - local.getTimezoneOffset() * 60000);                                      // 520
		},                                                                                                                   // 521
		_zero_time: function _zero_time(local) {                                                                             // 522
			return local && new Date(local.getFullYear(), local.getMonth(), local.getDate());                                   // 523
		},                                                                                                                   // 524
		_zero_utc_time: function _zero_utc_time(utc) {                                                                       // 525
			return utc && UTCDate(utc.getUTCFullYear(), utc.getUTCMonth(), utc.getUTCDate());                                   // 526
		},                                                                                                                   // 527
                                                                                                                       //
		getDates: function getDates() {                                                                                      // 529
			return $.map(this.dates, this._utc_to_local);                                                                       // 530
		},                                                                                                                   // 531
                                                                                                                       //
		getUTCDates: function getUTCDates() {                                                                                // 533
			return $.map(this.dates, function (d) {                                                                             // 534
				return new Date(d);                                                                                                // 535
			});                                                                                                                 // 536
		},                                                                                                                   // 537
                                                                                                                       //
		getDate: function getDate() {                                                                                        // 539
			return this._utc_to_local(this.getUTCDate());                                                                       // 540
		},                                                                                                                   // 541
                                                                                                                       //
		getUTCDate: function getUTCDate() {                                                                                  // 543
			var selected_date = this.dates.get(-1);                                                                             // 544
			if (selected_date !== undefined) {                                                                                  // 545
				return new Date(selected_date);                                                                                    // 546
			} else {                                                                                                            // 547
				return null;                                                                                                       // 548
			}                                                                                                                   // 549
		},                                                                                                                   // 550
                                                                                                                       //
		clearDates: function clearDates() {                                                                                  // 552
			this.inputField.val('');                                                                                            // 553
			this.update();                                                                                                      // 554
			this._trigger('changeDate');                                                                                        // 555
                                                                                                                       //
			if (this.o.autoclose) {                                                                                             // 557
				this.hide();                                                                                                       // 558
			}                                                                                                                   // 559
		},                                                                                                                   // 560
                                                                                                                       //
		setDates: function setDates() {                                                                                      // 562
			var args = $.isArray(arguments[0]) ? arguments[0] : arguments;                                                      // 563
			this.update.apply(this, args);                                                                                      // 564
			this._trigger('changeDate');                                                                                        // 565
			this.setValue();                                                                                                    // 566
			return this;                                                                                                        // 567
		},                                                                                                                   // 568
                                                                                                                       //
		setUTCDates: function setUTCDates() {                                                                                // 570
			var args = $.isArray(arguments[0]) ? arguments[0] : arguments;                                                      // 571
			this.setDates.apply(this, $.map(args, this._utc_to_local));                                                         // 572
			return this;                                                                                                        // 573
		},                                                                                                                   // 574
                                                                                                                       //
		setDate: alias('setDates'),                                                                                          // 576
		setUTCDate: alias('setUTCDates'),                                                                                    // 577
		remove: alias('destroy'),                                                                                            // 578
                                                                                                                       //
		setValue: function setValue() {                                                                                      // 580
			var formatted = this.getFormattedDate();                                                                            // 581
			this.inputField.val(formatted);                                                                                     // 582
			return this;                                                                                                        // 583
		},                                                                                                                   // 584
                                                                                                                       //
		getFormattedDate: function getFormattedDate(format) {                                                                // 586
			if (format === undefined) format = this.o.format;                                                                   // 587
                                                                                                                       //
			var lang = this.o.language;                                                                                         // 590
			return $.map(this.dates, function (d) {                                                                             // 591
				return DPGlobal.formatDate(d, format, lang);                                                                       // 592
			}).join(this.o.multidateSeparator);                                                                                 // 593
		},                                                                                                                   // 594
                                                                                                                       //
		getStartDate: function getStartDate() {                                                                              // 596
			return this.o.startDate;                                                                                            // 597
		},                                                                                                                   // 598
                                                                                                                       //
		setStartDate: function setStartDate(startDate) {                                                                     // 600
			this._process_options({ startDate: startDate });                                                                    // 601
			this.update();                                                                                                      // 602
			this.updateNavArrows();                                                                                             // 603
			return this;                                                                                                        // 604
		},                                                                                                                   // 605
                                                                                                                       //
		getEndDate: function getEndDate() {                                                                                  // 607
			return this.o.endDate;                                                                                              // 608
		},                                                                                                                   // 609
                                                                                                                       //
		setEndDate: function setEndDate(endDate) {                                                                           // 611
			this._process_options({ endDate: endDate });                                                                        // 612
			this.update();                                                                                                      // 613
			this.updateNavArrows();                                                                                             // 614
			return this;                                                                                                        // 615
		},                                                                                                                   // 616
                                                                                                                       //
		setDaysOfWeekDisabled: function setDaysOfWeekDisabled(daysOfWeekDisabled) {                                          // 618
			this._process_options({ daysOfWeekDisabled: daysOfWeekDisabled });                                                  // 619
			this.update();                                                                                                      // 620
			return this;                                                                                                        // 621
		},                                                                                                                   // 622
                                                                                                                       //
		setDaysOfWeekHighlighted: function setDaysOfWeekHighlighted(daysOfWeekHighlighted) {                                 // 624
			this._process_options({ daysOfWeekHighlighted: daysOfWeekHighlighted });                                            // 625
			this.update();                                                                                                      // 626
			return this;                                                                                                        // 627
		},                                                                                                                   // 628
                                                                                                                       //
		setDatesDisabled: function setDatesDisabled(datesDisabled) {                                                         // 630
			this._process_options({ datesDisabled: datesDisabled });                                                            // 631
			this.update();                                                                                                      // 632
			return this;                                                                                                        // 633
		},                                                                                                                   // 634
                                                                                                                       //
		place: function place() {                                                                                            // 636
			if (this.isInline) return this;                                                                                     // 637
			var calendarWidth = this.picker.outerWidth(),                                                                       // 639
			    calendarHeight = this.picker.outerHeight(),                                                                     // 639
			    visualPadding = 10,                                                                                             // 639
			    container = $(this.o.container),                                                                                // 639
			    windowWidth = container.width(),                                                                                // 639
			    scrollTop = this.o.container === 'body' ? $(document).scrollTop() : container.scrollTop(),                      // 639
			    appendOffset = container.offset();                                                                              // 639
                                                                                                                       //
			var parentsZindex = [];                                                                                             // 647
			this.element.parents().each(function () {                                                                           // 648
				var itemZIndex = $(this).css('z-index');                                                                           // 649
				if (itemZIndex !== 'auto' && itemZIndex !== 0) parentsZindex.push(parseInt(itemZIndex));                           // 650
			});                                                                                                                 // 651
			var zIndex = Math.max.apply(Math, parentsZindex) + this.o.zIndexOffset;                                             // 652
			var offset = this.component ? this.component.parent().offset() : this.element.offset();                             // 653
			var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(false);                   // 654
			var width = this.component ? this.component.outerWidth(true) : this.element.outerWidth(false);                      // 655
			var left = offset.left - appendOffset.left,                                                                         // 656
			    top = offset.top - appendOffset.top;                                                                            // 656
                                                                                                                       //
			if (this.o.container !== 'body') {                                                                                  // 659
				top += scrollTop;                                                                                                  // 660
			}                                                                                                                   // 661
                                                                                                                       //
			this.picker.removeClass('datepicker-orient-top datepicker-orient-bottom ' + 'datepicker-orient-right datepicker-orient-left');
                                                                                                                       //
			if (this.o.orientation.x !== 'auto') {                                                                              // 668
				this.picker.addClass('datepicker-orient-' + this.o.orientation.x);                                                 // 669
				if (this.o.orientation.x === 'right') left -= calendarWidth - width;                                               // 670
			}                                                                                                                   // 672
			// auto x orientation is best-placement: if it crosses a window                                                     //
			// edge, fudge it sideways                                                                                          //
			else {                                                                                                              // 668
					if (offset.left < 0) {                                                                                            // 676
						// component is outside the window on the left side. Move it into visible range                                  //
						this.picker.addClass('datepicker-orient-left');                                                                  // 678
						left -= offset.left - visualPadding;                                                                             // 679
					} else if (left + calendarWidth > windowWidth) {                                                                  // 680
						// the calendar passes the widow right edge. Align it to component right side                                    //
						this.picker.addClass('datepicker-orient-right');                                                                 // 682
						left += width - calendarWidth;                                                                                   // 683
					} else {                                                                                                          // 684
						if (this.o.rtl) {                                                                                                // 685
							// Default to right                                                                                             //
							this.picker.addClass('datepicker-orient-right');                                                                // 687
						} else {                                                                                                         // 688
							// Default to left                                                                                              //
							this.picker.addClass('datepicker-orient-left');                                                                 // 690
						}                                                                                                                // 691
					}                                                                                                                 // 692
				}                                                                                                                  // 693
                                                                                                                       //
			// auto y orientation is best-situation: top or bottom, no fudging,                                                 //
			// decision based on which shows more of the calendar                                                               //
			var yorient = this.o.orientation.y,                                                                                 // 697
			    top_overflow;                                                                                                   // 697
			if (yorient === 'auto') {                                                                                           // 699
				top_overflow = -scrollTop + top - calendarHeight;                                                                  // 700
				yorient = top_overflow < 0 ? 'bottom' : 'top';                                                                     // 701
			}                                                                                                                   // 702
                                                                                                                       //
			this.picker.addClass('datepicker-orient-' + yorient);                                                               // 704
			if (yorient === 'top') top -= calendarHeight + parseInt(this.picker.css('padding-top'));else top += height;         // 705
                                                                                                                       //
			if (this.o.rtl) {                                                                                                   // 710
				var right = windowWidth - (left + width);                                                                          // 711
				this.picker.css({                                                                                                  // 712
					top: top,                                                                                                         // 713
					right: right,                                                                                                     // 714
					zIndex: zIndex                                                                                                    // 715
				});                                                                                                                // 712
			} else {                                                                                                            // 717
				this.picker.css({                                                                                                  // 718
					top: top,                                                                                                         // 719
					left: left,                                                                                                       // 720
					zIndex: zIndex                                                                                                    // 721
				});                                                                                                                // 718
			}                                                                                                                   // 723
			return this;                                                                                                        // 724
		},                                                                                                                   // 725
                                                                                                                       //
		_allow_update: true,                                                                                                 // 727
		update: function update() {                                                                                          // 728
			if (!this._allow_update) return this;                                                                               // 729
                                                                                                                       //
			var oldDates = this.dates.copy(),                                                                                   // 732
			    dates = [],                                                                                                     // 732
			    fromArgs = false;                                                                                               // 732
			if (arguments.length) {                                                                                             // 735
				$.each(arguments, $.proxy(function (i, date) {                                                                     // 736
					if (date instanceof Date) date = this._local_to_utc(date);                                                        // 737
					dates.push(date);                                                                                                 // 739
				}, this));                                                                                                         // 740
				fromArgs = true;                                                                                                   // 741
			} else {                                                                                                            // 742
				dates = this.isInput ? this.element.val() : this.element.data('date') || this.inputField.val();                    // 743
				if (dates && this.o.multidate) dates = dates.split(this.o.multidateSeparator);else dates = [dates];                // 746
				delete this.element.data().date;                                                                                   // 750
			}                                                                                                                   // 751
                                                                                                                       //
			dates = $.map(dates, $.proxy(function (date) {                                                                      // 753
				return DPGlobal.parseDate(date, this.o.format, this.o.language, this.o.assumeNearbyYear);                          // 754
			}, this));                                                                                                          // 755
			dates = $.grep(dates, $.proxy(function (date) {                                                                     // 756
				return !this.dateWithinRange(date) || !date;                                                                       // 757
			}, this), true);                                                                                                    // 761
			this.dates.replace(dates);                                                                                          // 762
                                                                                                                       //
			if (this.dates.length) this.viewDate = new Date(this.dates.get(-1));else if (this.viewDate < this.o.startDate) this.viewDate = new Date(this.o.startDate);else if (this.viewDate > this.o.endDate) this.viewDate = new Date(this.o.endDate);else this.viewDate = this.o.defaultViewDate;
                                                                                                                       //
			if (fromArgs) {                                                                                                     // 773
				// setting date by clicking                                                                                        //
				this.setValue();                                                                                                   // 775
				this.element.change();                                                                                             // 776
			} else if (this.dates.length) {                                                                                     // 777
				// setting date by typing                                                                                          //
				if (String(oldDates) !== String(this.dates) && fromArgs) {                                                         // 780
					this._trigger('changeDate');                                                                                      // 781
					this.element.change();                                                                                            // 782
				}                                                                                                                  // 783
			}                                                                                                                   // 784
			if (!this.dates.length && oldDates.length) {                                                                        // 785
				this._trigger('clearDate');                                                                                        // 786
				this.element.change();                                                                                             // 787
			}                                                                                                                   // 788
                                                                                                                       //
			this.fill();                                                                                                        // 790
			return this;                                                                                                        // 791
		},                                                                                                                   // 792
                                                                                                                       //
		fillDow: function fillDow() {                                                                                        // 794
			var dowCnt = this.o.weekStart,                                                                                      // 795
			    html = '<tr>';                                                                                                  // 795
			if (this.o.calendarWeeks) {                                                                                         // 797
				html += '<th class="cw">&#160;</th>';                                                                              // 798
			}                                                                                                                   // 799
			while (dowCnt < this.o.weekStart + 7) {                                                                             // 800
				html += '<th class="dow';                                                                                          // 801
				if ($.inArray(dowCnt, this.o.daysOfWeekDisabled) !== -1) html += ' disabled';                                      // 802
				html += '">' + dates[this.o.language].daysMin[dowCnt++ % 7] + '</th>';                                             // 804
			}                                                                                                                   // 805
			html += '</tr>';                                                                                                    // 806
			this.picker.find('.datepicker-days thead').append(html);                                                            // 807
		},                                                                                                                   // 808
                                                                                                                       //
		fillMonths: function fillMonths() {                                                                                  // 810
			var localDate = this._utc_to_local(this.viewDate);                                                                  // 811
			var html = '',                                                                                                      // 812
			    i = 0;                                                                                                          // 812
			while (i < 12) {                                                                                                    // 814
				var focused = localDate && localDate.getMonth() === i ? ' focused' : '';                                           // 815
				html += '<span class="month' + focused + '">' + dates[this.o.language].monthsShort[i++] + '</span>';               // 816
			}                                                                                                                   // 817
			this.picker.find('.datepicker-months td').html(html);                                                               // 818
		},                                                                                                                   // 819
                                                                                                                       //
		setRange: function setRange(range) {                                                                                 // 821
			if (!range || !range.length) delete this.range;else this.range = $.map(range, function (d) {                        // 822
				return d.valueOf();                                                                                                // 826
			});                                                                                                                 // 827
			this.fill();                                                                                                        // 828
		},                                                                                                                   // 829
                                                                                                                       //
		getClassNames: function getClassNames(date) {                                                                        // 831
			var cls = [],                                                                                                       // 832
			    year = this.viewDate.getUTCFullYear(),                                                                          // 832
			    month = this.viewDate.getUTCMonth(),                                                                            // 832
			    today = UTCToday();                                                                                             // 832
			if (date.getUTCFullYear() < year || date.getUTCFullYear() === year && date.getUTCMonth() < month) {                 // 836
				cls.push('old');                                                                                                   // 837
			} else if (date.getUTCFullYear() > year || date.getUTCFullYear() === year && date.getUTCMonth() > month) {          // 838
				cls.push('new');                                                                                                   // 839
			}                                                                                                                   // 840
			if (this.focusDate && date.valueOf() === this.focusDate.valueOf()) cls.push('focused');                             // 841
			// Compare internal UTC date with UTC today, not local today                                                        //
			if (this.o.todayHighlight && isUTCEquals(date, today)) {                                                            // 844
				cls.push('today');                                                                                                 // 845
			}                                                                                                                   // 846
			if (this.dates.contains(date) !== -1) cls.push('active');                                                           // 847
			if (!this.dateWithinRange(date)) {                                                                                  // 849
				cls.push('disabled');                                                                                              // 850
			}                                                                                                                   // 851
			if (this.dateIsDisabled(date)) {                                                                                    // 852
				cls.push('disabled', 'disabled-date');                                                                             // 853
			}                                                                                                                   // 854
			if ($.inArray(date.getUTCDay(), this.o.daysOfWeekHighlighted) !== -1) {                                             // 855
				cls.push('highlighted');                                                                                           // 856
			}                                                                                                                   // 857
                                                                                                                       //
			if (this.range) {                                                                                                   // 859
				if (date > this.range[0] && date < this.range[this.range.length - 1]) {                                            // 860
					cls.push('range');                                                                                                // 861
				}                                                                                                                  // 862
				if ($.inArray(date.valueOf(), this.range) !== -1) {                                                                // 863
					cls.push('selected');                                                                                             // 864
				}                                                                                                                  // 865
				if (date.valueOf() === this.range[0]) {                                                                            // 866
					cls.push('range-start');                                                                                          // 867
				}                                                                                                                  // 868
				if (date.valueOf() === this.range[this.range.length - 1]) {                                                        // 869
					cls.push('range-end');                                                                                            // 870
				}                                                                                                                  // 871
			}                                                                                                                   // 872
			return cls;                                                                                                         // 873
		},                                                                                                                   // 874
                                                                                                                       //
		_fill_yearsView: function _fill_yearsView(selector, cssClass, factor, step, currentYear, startYear, endYear, callback) {
			var html, view, year, steps, startStep, endStep, thisYear, i, classes, tooltip, before;                             // 877
                                                                                                                       //
			html = '';                                                                                                          // 879
			view = this.picker.find(selector);                                                                                  // 880
			year = parseInt(currentYear / factor, 10) * factor;                                                                 // 881
			startStep = parseInt(startYear / step, 10) * step;                                                                  // 882
			endStep = parseInt(endYear / step, 10) * step;                                                                      // 883
			steps = $.map(this.dates, function (d) {                                                                            // 884
				return parseInt(d.getUTCFullYear() / step, 10) * step;                                                             // 885
			});                                                                                                                 // 886
                                                                                                                       //
			view.find('.datepicker-switch').text(year + '-' + (year + step * 9));                                               // 888
                                                                                                                       //
			thisYear = year - step;                                                                                             // 890
			for (i = -1; i < 11; i += 1) {                                                                                      // 891
				classes = [cssClass];                                                                                              // 892
				tooltip = null;                                                                                                    // 893
                                                                                                                       //
				if (i === -1) {                                                                                                    // 895
					classes.push('old');                                                                                              // 896
				} else if (i === 10) {                                                                                             // 897
					classes.push('new');                                                                                              // 898
				}                                                                                                                  // 899
				if ($.inArray(thisYear, steps) !== -1) {                                                                           // 900
					classes.push('active');                                                                                           // 901
				}                                                                                                                  // 902
				if (thisYear < startStep || thisYear > endStep) {                                                                  // 903
					classes.push('disabled');                                                                                         // 904
				}                                                                                                                  // 905
				if (thisYear === this.viewDate.getFullYear()) {                                                                    // 906
					classes.push('focused');                                                                                          // 907
				}                                                                                                                  // 908
                                                                                                                       //
				if (callback !== $.noop) {                                                                                         // 910
					before = callback(new Date(thisYear, 0, 1));                                                                      // 911
					if (before === undefined) {                                                                                       // 912
						before = {};                                                                                                     // 913
					} else if (typeof before === 'boolean') {                                                                         // 914
						before = { enabled: before };                                                                                    // 915
					} else if (typeof before === 'string') {                                                                          // 916
						before = { classes: before };                                                                                    // 917
					}                                                                                                                 // 918
					if (before.enabled === false) {                                                                                   // 919
						classes.push('disabled');                                                                                        // 920
					}                                                                                                                 // 921
					if (before.classes) {                                                                                             // 922
						classes = classes.concat(before.classes.split(/\s+/));                                                           // 923
					}                                                                                                                 // 924
					if (before.tooltip) {                                                                                             // 925
						tooltip = before.tooltip;                                                                                        // 926
					}                                                                                                                 // 927
				}                                                                                                                  // 928
                                                                                                                       //
				html += '<span class="' + classes.join(' ') + '"' + (tooltip ? ' title="' + tooltip + '"' : '') + '>' + thisYear + '</span>';
				thisYear += step;                                                                                                  // 931
			}                                                                                                                   // 932
			view.find('td').html(html);                                                                                         // 933
		},                                                                                                                   // 934
                                                                                                                       //
		fill: function fill() {                                                                                              // 936
			var d = new Date(this.viewDate),                                                                                    // 937
			    year = d.getUTCFullYear(),                                                                                      // 937
			    month = d.getUTCMonth(),                                                                                        // 937
			    startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,                     // 937
			    startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,                       // 937
			    endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,                             // 937
			    endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,                               // 937
			    todaytxt = dates[this.o.language].today || dates['en'].today || '',                                             // 937
			    cleartxt = dates[this.o.language].clear || dates['en'].clear || '',                                             // 937
			    titleFormat = dates[this.o.language].titleFormat || dates['en'].titleFormat,                                    // 937
			    tooltip,                                                                                                        // 937
			    before;                                                                                                         // 937
			if (isNaN(year) || isNaN(month)) return;                                                                            // 949
			this.picker.find('.datepicker-days .datepicker-switch').text(DPGlobal.formatDate(d, titleFormat, this.o.language));
			this.picker.find('tfoot .today').text(todaytxt).toggle(this.o.todayBtn !== false);                                  // 953
			this.picker.find('tfoot .clear').text(cleartxt).toggle(this.o.clearBtn !== false);                                  // 956
			this.picker.find('thead .datepicker-title').text(this.o.title).toggle(this.o.title !== '');                         // 959
			this.updateNavArrows();                                                                                             // 962
			this.fillMonths();                                                                                                  // 963
			var prevMonth = UTCDate(year, month, 0),                                                                            // 964
			    day = prevMonth.getUTCDate();                                                                                   // 964
			prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7) % 7);                                     // 966
			var nextMonth = new Date(prevMonth);                                                                                // 967
			if (prevMonth.getUTCFullYear() < 100) {                                                                             // 968
				nextMonth.setUTCFullYear(prevMonth.getUTCFullYear());                                                              // 969
			}                                                                                                                   // 970
			nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);                                                                  // 971
			nextMonth = nextMonth.valueOf();                                                                                    // 972
			var html = [];                                                                                                      // 973
			var weekDay, clsName;                                                                                               // 974
			while (prevMonth.valueOf() < nextMonth) {                                                                           // 975
				weekDay = prevMonth.getUTCDay();                                                                                   // 976
				if (weekDay === this.o.weekStart) {                                                                                // 977
					html.push('<tr>');                                                                                                // 978
					if (this.o.calendarWeeks) {                                                                                       // 979
						// ISO 8601: First week contains first thursday.                                                                 //
						// ISO also states week starts on Monday, but we can be more abstract here.                                      //
						var                                                                                                              // 982
						// Start of current week: based on weekstart/current date                                                        //
						ws = new Date(+prevMonth + (this.o.weekStart - weekDay - 7) % 7 * 864e5),                                        // 984
                                                                                                                       // 982
						// Thursday of this week                                                                                         //
						th = new Date(Number(ws) + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),                                                // 986
                                                                                                                       // 982
						// First Thursday of year, year from thursday                                                                    //
						yth = new Date(Number(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay()) % 7 * 864e5),        // 988
                                                                                                                       // 982
						// Calendar week: ms between thursdays, div ms per day, div 7 days                                               //
						calWeek = (th - yth) / 864e5 / 7 + 1;                                                                            // 990
						html.push('<td class="cw">' + calWeek + '</td>');                                                                // 991
					}                                                                                                                 // 992
				}                                                                                                                  // 993
				clsName = this.getClassNames(prevMonth);                                                                           // 994
				clsName.push('day');                                                                                               // 995
                                                                                                                       //
				if (this.o.beforeShowDay !== $.noop) {                                                                             // 997
					before = this.o.beforeShowDay(this._utc_to_local(prevMonth));                                                     // 998
					if (before === undefined) before = {};else if (typeof before === 'boolean') before = { enabled: before };else if (typeof before === 'string') before = { classes: before };
					if (before.enabled === false) clsName.push('disabled');                                                           // 1005
					if (before.classes) clsName = clsName.concat(before.classes.split(/\s+/));                                        // 1007
					if (before.tooltip) tooltip = before.tooltip;                                                                     // 1009
				}                                                                                                                  // 1011
                                                                                                                       //
				//Check if uniqueSort exists (supported by jquery >=1.12 and >=2.2)                                                //
				//Fallback to unique function for older jquery versions                                                            //
				if ($.isFunction($.uniqueSort)) {                                                                                  // 1015
					clsName = $.uniqueSort(clsName);                                                                                  // 1016
				} else {                                                                                                           // 1017
					clsName = $.unique(clsName);                                                                                      // 1018
				}                                                                                                                  // 1019
                                                                                                                       //
				html.push('<td class="' + clsName.join(' ') + '"' + (tooltip ? ' title="' + tooltip + '"' : '') + (this.o.dateCells ? ' data-date="' + prevMonth.getTime().toString() + '"' : '') + '>' + prevMonth.getUTCDate() + '</td>');
				tooltip = null;                                                                                                    // 1022
				if (weekDay === this.o.weekEnd) {                                                                                  // 1023
					html.push('</tr>');                                                                                               // 1024
				}                                                                                                                  // 1025
				prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);                                                                  // 1026
			}                                                                                                                   // 1027
			this.picker.find('.datepicker-days tbody').html(html.join(''));                                                     // 1028
                                                                                                                       //
			var monthsTitle = dates[this.o.language].monthsTitle || dates['en'].monthsTitle || 'Months';                        // 1030
			var months = this.picker.find('.datepicker-months').find('.datepicker-switch').text(this.o.maxViewMode < 2 ? monthsTitle : year).end().find('tbody span').removeClass('active');
                                                                                                                       //
			$.each(this.dates, function (i, d) {                                                                                // 1037
				if (d.getUTCFullYear() === year) months.eq(d.getUTCMonth()).addClass('active');                                    // 1038
			});                                                                                                                 // 1040
                                                                                                                       //
			if (year < startYear || year > endYear) {                                                                           // 1042
				months.addClass('disabled');                                                                                       // 1043
			}                                                                                                                   // 1044
			if (year === startYear) {                                                                                           // 1045
				months.slice(0, startMonth).addClass('disabled');                                                                  // 1046
			}                                                                                                                   // 1047
			if (year === endYear) {                                                                                             // 1048
				months.slice(endMonth + 1).addClass('disabled');                                                                   // 1049
			}                                                                                                                   // 1050
                                                                                                                       //
			if (this.o.beforeShowMonth !== $.noop) {                                                                            // 1052
				var that = this;                                                                                                   // 1053
				$.each(months, function (i, month) {                                                                               // 1054
					var moDate = new Date(year, i, 1);                                                                                // 1055
					var before = that.o.beforeShowMonth(moDate);                                                                      // 1056
					if (before === undefined) before = {};else if (typeof before === 'boolean') before = { enabled: before };else if (typeof before === 'string') before = { classes: before };
					if (before.enabled === false && !$(month).hasClass('disabled')) $(month).addClass('disabled');                    // 1063
					if (before.classes) $(month).addClass(before.classes);                                                            // 1065
					if (before.tooltip) $(month).prop('title', before.tooltip);                                                       // 1067
				});                                                                                                                // 1069
			}                                                                                                                   // 1070
                                                                                                                       //
			// Generating decade/years picker                                                                                   //
			this._fill_yearsView('.datepicker-years', 'year', 10, 1, year, startYear, endYear, this.o.beforeShowYear);          // 1073
                                                                                                                       //
			// Generating century/decades picker                                                                                //
			this._fill_yearsView('.datepicker-decades', 'decade', 100, 10, year, startYear, endYear, this.o.beforeShowDecade);  // 1085
                                                                                                                       //
			// Generating millennium/centuries picker                                                                           //
			this._fill_yearsView('.datepicker-centuries', 'century', 1000, 100, year, startYear, endYear, this.o.beforeShowCentury);
		},                                                                                                                   // 1107
                                                                                                                       //
		updateNavArrows: function updateNavArrows() {                                                                        // 1109
			if (!this._allow_update) return;                                                                                    // 1110
                                                                                                                       //
			var d = new Date(this.viewDate),                                                                                    // 1113
			    year = d.getUTCFullYear(),                                                                                      // 1113
			    month = d.getUTCMonth(),                                                                                        // 1113
			    prevState,                                                                                                      // 1113
			    nextState;                                                                                                      // 1113
			switch (this.viewMode) {                                                                                            // 1118
				case 0:                                                                                                            // 1119
					prevState = this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth();
                                                                                                                       //
					nextState = this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth();
					break;                                                                                                            // 1131
				case 1:                                                                                                            // 1132
				case 2:                                                                                                            // 1133
				case 3:                                                                                                            // 1134
				case 4:                                                                                                            // 1135
					prevState = this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear();                          // 1136
                                                                                                                       //
					nextState = this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear();                               // 1141
					break;                                                                                                            // 1145
			}                                                                                                                   // 1118
                                                                                                                       //
			this.picker.find('.prev').toggleClass('disabled', prevState);                                                       // 1148
			this.picker.find('.next').toggleClass('disabled', nextState);                                                       // 1149
		},                                                                                                                   // 1150
                                                                                                                       //
		click: function click(e) {                                                                                           // 1152
			e.preventDefault();                                                                                                 // 1153
			e.stopPropagation();                                                                                                // 1154
                                                                                                                       //
			var target, dir, day, year, month;                                                                                  // 1156
			target = $(e.target);                                                                                               // 1157
                                                                                                                       //
			// Clicked on the switch                                                                                            //
			if (target.hasClass('datepicker-switch') && this.viewMode !== this.o.maxViewMode) {                                 // 1160
				this.setViewMode(this.viewMode + 1);                                                                               // 1161
			}                                                                                                                   // 1162
                                                                                                                       //
			// Clicked on today button                                                                                          //
			if (target.hasClass('today') && !target.hasClass('day')) {                                                          // 1165
				this.setViewMode(0);                                                                                               // 1166
				this._setDate(UTCToday(), this.o.todayBtn === 'linked' ? null : 'view');                                           // 1167
			}                                                                                                                   // 1168
                                                                                                                       //
			// Clicked on clear button                                                                                          //
			if (target.hasClass('clear')) {                                                                                     // 1171
				this.clearDates();                                                                                                 // 1172
			}                                                                                                                   // 1173
                                                                                                                       //
			if (!target.hasClass('disabled')) {                                                                                 // 1175
				// Clicked on a day                                                                                                //
				if (target.hasClass('day')) {                                                                                      // 1177
					day = Number(target.text());                                                                                      // 1178
					year = this.viewDate.getUTCFullYear();                                                                            // 1179
					month = this.viewDate.getUTCMonth();                                                                              // 1180
                                                                                                                       //
					if (target.hasClass('old') || target.hasClass('new')) {                                                           // 1182
						dir = target.hasClass('old') ? -1 : 1;                                                                           // 1183
						month = (month + dir + 12) % 12;                                                                                 // 1184
						if (dir === -1 && month === 11 || dir === 1 && month === 0) {                                                    // 1185
							year += dir;                                                                                                    // 1186
							this._trigger('changeYear', this.viewDate);                                                                     // 1187
						}                                                                                                                // 1188
						this._trigger('changeMonth', this.viewDate);                                                                     // 1189
					}                                                                                                                 // 1190
					this._setDate(UTCDate(year, month, day));                                                                         // 1191
				}                                                                                                                  // 1192
                                                                                                                       //
				// Clicked on a month, year, decade, century                                                                       //
				if (target.hasClass('month') || target.hasClass('year') || target.hasClass('decade') || target.hasClass('century')) {
					this.viewDate.setUTCDate(1);                                                                                      // 1199
                                                                                                                       //
					day = 1;                                                                                                          // 1201
					if (this.viewMode === 1) {                                                                                        // 1202
						month = target.parent().find('span').index(target);                                                              // 1203
						year = this.viewDate.getUTCFullYear();                                                                           // 1204
						this.viewDate.setUTCMonth(month);                                                                                // 1205
					} else {                                                                                                          // 1206
						month = 0;                                                                                                       // 1207
						year = Number(target.text());                                                                                    // 1208
						this.viewDate.setUTCFullYear(year);                                                                              // 1209
					}                                                                                                                 // 1210
                                                                                                                       //
					this._trigger(DPGlobal.viewModes[this.viewMode - 1].e, this.viewDate);                                            // 1212
                                                                                                                       //
					if (this.viewMode === this.o.minViewMode) {                                                                       // 1214
						this._setDate(UTCDate(year, month, day));                                                                        // 1215
					} else {                                                                                                          // 1216
						this.setViewMode(this.viewMode - 1);                                                                             // 1217
						this.fill();                                                                                                     // 1218
					}                                                                                                                 // 1219
				}                                                                                                                  // 1220
			}                                                                                                                   // 1221
                                                                                                                       //
			if (this.picker.is(':visible') && this._focused_from) {                                                             // 1223
				this._focused_from.focus();                                                                                        // 1224
			}                                                                                                                   // 1225
			delete this._focused_from;                                                                                          // 1226
		},                                                                                                                   // 1227
                                                                                                                       //
		// Clicked on prev or next                                                                                           //
		navArrowsClick: function navArrowsClick(e) {                                                                         // 1230
			var target = $(e.target);                                                                                           // 1231
			var dir = target.hasClass('prev') ? -1 : 1;                                                                         // 1232
			if (this.viewMode !== 0) {                                                                                          // 1233
				dir *= DPGlobal.viewModes[this.viewMode].navStep * 12;                                                             // 1234
			}                                                                                                                   // 1235
			this.viewDate = this.moveMonth(this.viewDate, dir);                                                                 // 1236
			this._trigger(DPGlobal.viewModes[this.viewMode].e, this.viewDate);                                                  // 1237
			this.fill();                                                                                                        // 1238
		},                                                                                                                   // 1239
                                                                                                                       //
		_toggle_multidate: function _toggle_multidate(date) {                                                                // 1241
			var ix = this.dates.contains(date);                                                                                 // 1242
			if (!date) {                                                                                                        // 1243
				this.dates.clear();                                                                                                // 1244
			}                                                                                                                   // 1245
                                                                                                                       //
			if (ix !== -1) {                                                                                                    // 1247
				if (this.o.multidate === true || this.o.multidate > 1 || this.o.toggleActive) {                                    // 1248
					this.dates.remove(ix);                                                                                            // 1249
				}                                                                                                                  // 1250
			} else if (this.o.multidate === false) {                                                                            // 1251
				this.dates.clear();                                                                                                // 1252
				this.dates.push(date);                                                                                             // 1253
			} else {                                                                                                            // 1254
				this.dates.push(date);                                                                                             // 1256
			}                                                                                                                   // 1257
                                                                                                                       //
			if (typeof this.o.multidate === 'number') while (this.dates.length > this.o.multidate) {                            // 1259
				this.dates.remove(0);                                                                                              // 1261
			}                                                                                                                   // 1260
		},                                                                                                                   // 1262
                                                                                                                       //
		_setDate: function _setDate(date, which) {                                                                           // 1264
			if (!which || which === 'date') this._toggle_multidate(date && new Date(date));                                     // 1265
			if (!which || which === 'view') this.viewDate = date && new Date(date);                                             // 1267
                                                                                                                       //
			this.fill();                                                                                                        // 1270
			this.setValue();                                                                                                    // 1271
			if (!which || which !== 'view') {                                                                                   // 1272
				this._trigger('changeDate');                                                                                       // 1273
			}                                                                                                                   // 1274
			this.inputField.trigger('change');                                                                                  // 1275
			if (this.o.autoclose && (!which || which === 'date')) {                                                             // 1276
				this.hide();                                                                                                       // 1277
			}                                                                                                                   // 1278
		},                                                                                                                   // 1279
                                                                                                                       //
		moveDay: function moveDay(date, dir) {                                                                               // 1281
			var newDate = new Date(date);                                                                                       // 1282
			newDate.setUTCDate(date.getUTCDate() + dir);                                                                        // 1283
                                                                                                                       //
			return newDate;                                                                                                     // 1285
		},                                                                                                                   // 1286
                                                                                                                       //
		moveWeek: function moveWeek(date, dir) {                                                                             // 1288
			return this.moveDay(date, dir * 7);                                                                                 // 1289
		},                                                                                                                   // 1290
                                                                                                                       //
		moveMonth: function moveMonth(date, dir) {                                                                           // 1292
			if (!isValidDate(date)) return this.o.defaultViewDate;                                                              // 1293
			if (!dir) return date;                                                                                              // 1295
			var new_date = new Date(date.valueOf()),                                                                            // 1297
			    day = new_date.getUTCDate(),                                                                                    // 1297
			    month = new_date.getUTCMonth(),                                                                                 // 1297
			    mag = Math.abs(dir),                                                                                            // 1297
			    new_month,                                                                                                      // 1297
			    test;                                                                                                           // 1297
			dir = dir > 0 ? 1 : -1;                                                                                             // 1302
			if (mag === 1) {                                                                                                    // 1303
				test = dir === -1                                                                                                  // 1304
				// If going back one month, make sure month is not current month                                                   //
				// (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)                                                                    //
				? function () {                                                                                                    // 1304
					return new_date.getUTCMonth() === month;                                                                          // 1308
				}                                                                                                                  // 1309
				// If going forward one month, make sure month is as expected                                                      //
				// (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)                                                                    //
				: function () {                                                                                                    // 1304
					return new_date.getUTCMonth() !== new_month;                                                                      // 1313
				};                                                                                                                 // 1314
				new_month = month + dir;                                                                                           // 1315
				new_date.setUTCMonth(new_month);                                                                                   // 1316
				// Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11                                               //
				new_month = (new_month + 12) % 12;                                                                                 // 1318
			} else {                                                                                                            // 1319
				// For magnitudes >1, move one month at a time...                                                                  //
				for (var i = 0; i < mag; i++) {                                                                                    // 1322
					// ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...                                                 //
					new_date = this.moveMonth(new_date, dir);                                                                         // 1324
				} // ...then reset the day, keeping it in the new month                                                            // 1322
				new_month = new_date.getUTCMonth();                                                                                // 1326
				new_date.setUTCDate(day);                                                                                          // 1327
				test = function test() {                                                                                           // 1328
					return new_month !== new_date.getUTCMonth();                                                                      // 1329
				};                                                                                                                 // 1330
			}                                                                                                                   // 1331
			// Common date-resetting loop -- if date is beyond end of month, make it                                            //
			// end of month                                                                                                     //
			while (test()) {                                                                                                    // 1334
				new_date.setUTCDate(--day);                                                                                        // 1335
				new_date.setUTCMonth(new_month);                                                                                   // 1336
			}                                                                                                                   // 1337
			return new_date;                                                                                                    // 1338
		},                                                                                                                   // 1339
                                                                                                                       //
		moveYear: function moveYear(date, dir) {                                                                             // 1341
			return this.moveMonth(date, dir * 12);                                                                              // 1342
		},                                                                                                                   // 1343
                                                                                                                       //
		moveAvailableDate: function moveAvailableDate(date, dir, fn) {                                                       // 1345
			do {                                                                                                                // 1346
				date = this[fn](date, dir);                                                                                        // 1347
                                                                                                                       //
				if (!this.dateWithinRange(date)) return false;                                                                     // 1349
                                                                                                                       //
				fn = 'moveDay';                                                                                                    // 1352
			} while (this.dateIsDisabled(date));                                                                                // 1353
                                                                                                                       //
			return date;                                                                                                        // 1356
		},                                                                                                                   // 1357
                                                                                                                       //
		weekOfDateIsDisabled: function weekOfDateIsDisabled(date) {                                                          // 1359
			return $.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1;                                               // 1360
		},                                                                                                                   // 1361
                                                                                                                       //
		dateIsDisabled: function dateIsDisabled(date) {                                                                      // 1363
			return this.weekOfDateIsDisabled(date) || $.grep(this.o.datesDisabled, function (d) {                               // 1364
				return isUTCEquals(date, d);                                                                                       // 1367
			}).length > 0;                                                                                                      // 1368
		},                                                                                                                   // 1370
                                                                                                                       //
		dateWithinRange: function dateWithinRange(date) {                                                                    // 1372
			return date >= this.o.startDate && date <= this.o.endDate;                                                          // 1373
		},                                                                                                                   // 1374
                                                                                                                       //
		keydown: function keydown(e) {                                                                                       // 1376
			if (!this.picker.is(':visible')) {                                                                                  // 1377
				if (e.keyCode === 40 || e.keyCode === 27) {                                                                        // 1378
					// allow down to re-show picker                                                                                   //
					this.show();                                                                                                      // 1379
					e.stopPropagation();                                                                                              // 1380
				}                                                                                                                  // 1381
				return;                                                                                                            // 1382
			}                                                                                                                   // 1383
			var dateChanged = false,                                                                                            // 1384
			    dir,                                                                                                            // 1384
			    newViewDate,                                                                                                    // 1384
			    focusDate = this.focusDate || this.viewDate;                                                                    // 1384
			switch (e.keyCode) {                                                                                                // 1387
				case 27:                                                                                                           // 1388
					// escape                                                                                                         //
					if (this.focusDate) {                                                                                             // 1389
						this.focusDate = null;                                                                                           // 1390
						this.viewDate = this.dates.get(-1) || this.viewDate;                                                             // 1391
						this.fill();                                                                                                     // 1392
					} else this.hide();                                                                                               // 1393
					e.preventDefault();                                                                                               // 1396
					e.stopPropagation();                                                                                              // 1397
					break;                                                                                                            // 1398
				case 37: // left                                                                                                   // 1399
				case 38: // up                                                                                                     // 1400
				case 39: // right                                                                                                  // 1401
				case 40:                                                                                                           // 1402
					// down                                                                                                           //
					if (!this.o.keyboardNavigation || this.o.daysOfWeekDisabled.length === 7) break;                                  // 1403
					dir = e.keyCode === 37 || e.keyCode === 38 ? -1 : 1;                                                              // 1405
					if (this.viewMode === 0) {                                                                                        // 1406
						if (e.ctrlKey) {                                                                                                 // 1407
							newViewDate = this.moveAvailableDate(focusDate, dir, 'moveYear');                                               // 1408
                                                                                                                       //
							if (newViewDate) this._trigger('changeYear', this.viewDate);                                                    // 1410
						} else if (e.shiftKey) {                                                                                         // 1412
							newViewDate = this.moveAvailableDate(focusDate, dir, 'moveMonth');                                              // 1413
                                                                                                                       //
							if (newViewDate) this._trigger('changeMonth', this.viewDate);                                                   // 1415
						} else if (e.keyCode === 37 || e.keyCode === 39) {                                                               // 1417
							newViewDate = this.moveAvailableDate(focusDate, dir, 'moveDay');                                                // 1418
						} else if (!this.weekOfDateIsDisabled(focusDate)) {                                                              // 1419
							newViewDate = this.moveAvailableDate(focusDate, dir, 'moveWeek');                                               // 1420
						}                                                                                                                // 1421
					} else if (this.viewMode === 1) {                                                                                 // 1422
						if (e.keyCode === 38 || e.keyCode === 40) {                                                                      // 1423
							dir = dir * 4;                                                                                                  // 1424
						}                                                                                                                // 1425
						newViewDate = this.moveAvailableDate(focusDate, dir, 'moveMonth');                                               // 1426
					} else if (this.viewMode === 2) {                                                                                 // 1427
						if (e.keyCode === 38 || e.keyCode === 40) {                                                                      // 1428
							dir = dir * 4;                                                                                                  // 1429
						}                                                                                                                // 1430
						newViewDate = this.moveAvailableDate(focusDate, dir, 'moveYear');                                                // 1431
					}                                                                                                                 // 1432
					if (newViewDate) {                                                                                                // 1433
						this.focusDate = this.viewDate = newViewDate;                                                                    // 1434
						this.setValue();                                                                                                 // 1435
						this.fill();                                                                                                     // 1436
						e.preventDefault();                                                                                              // 1437
					}                                                                                                                 // 1438
					break;                                                                                                            // 1439
				case 13:                                                                                                           // 1440
					// enter                                                                                                          //
					if (!this.o.forceParse) break;                                                                                    // 1441
					focusDate = this.focusDate || this.dates.get(-1) || this.viewDate;                                                // 1443
					if (this.o.keyboardNavigation) {                                                                                  // 1444
						this._toggle_multidate(focusDate);                                                                               // 1445
						dateChanged = true;                                                                                              // 1446
					}                                                                                                                 // 1447
					this.focusDate = null;                                                                                            // 1448
					this.viewDate = this.dates.get(-1) || this.viewDate;                                                              // 1449
					this.setValue();                                                                                                  // 1450
					this.fill();                                                                                                      // 1451
					if (this.picker.is(':visible')) {                                                                                 // 1452
						e.preventDefault();                                                                                              // 1453
						e.stopPropagation();                                                                                             // 1454
						if (this.o.autoclose) this.hide();                                                                               // 1455
					}                                                                                                                 // 1457
					break;                                                                                                            // 1458
				case 9:                                                                                                            // 1459
					// tab                                                                                                            //
					this.focusDate = null;                                                                                            // 1460
					this.viewDate = this.dates.get(-1) || this.viewDate;                                                              // 1461
					this.fill();                                                                                                      // 1462
					this.hide();                                                                                                      // 1463
					break;                                                                                                            // 1464
			}                                                                                                                   // 1387
			if (dateChanged) {                                                                                                  // 1466
				if (this.dates.length) this._trigger('changeDate');else this._trigger('clearDate');                                // 1467
				this.inputField.trigger('change');                                                                                 // 1471
			}                                                                                                                   // 1472
		},                                                                                                                   // 1473
                                                                                                                       //
		setViewMode: function setViewMode(viewMode) {                                                                        // 1475
			this.viewMode = viewMode;                                                                                           // 1476
			this.picker.children('div').hide().filter('.datepicker-' + DPGlobal.viewModes[this.viewMode].clsName).show();       // 1477
			this.updateNavArrows();                                                                                             // 1482
			this._trigger('changeViewMode', new Date(this.viewDate));                                                           // 1483
		}                                                                                                                    // 1484
	};                                                                                                                    // 158
                                                                                                                       //
	var DateRangePicker = function DateRangePicker(element, options) {                                                    // 1487
		$.data(element, 'datepicker', this);                                                                                 // 1488
		this.element = $(element);                                                                                           // 1489
		this.inputs = $.map(options.inputs, function (i) {                                                                   // 1490
			return i.jquery ? i[0] : i;                                                                                         // 1491
		});                                                                                                                  // 1492
		delete options.inputs;                                                                                               // 1493
                                                                                                                       //
		this.keepEmptyValues = options.keepEmptyValues;                                                                      // 1495
		delete options.keepEmptyValues;                                                                                      // 1496
                                                                                                                       //
		datepickerPlugin.call($(this.inputs), options).on('changeDate', $.proxy(this.dateUpdated, this));                    // 1498
                                                                                                                       //
		this.pickers = $.map(this.inputs, function (i) {                                                                     // 1501
			return $.data(i, 'datepicker');                                                                                     // 1502
		});                                                                                                                  // 1503
		this.updateDates();                                                                                                  // 1504
	};                                                                                                                    // 1505
	DateRangePicker.prototype = {                                                                                         // 1506
		updateDates: function updateDates() {                                                                                // 1507
			this.dates = $.map(this.pickers, function (i) {                                                                     // 1508
				return i.getUTCDate();                                                                                             // 1509
			});                                                                                                                 // 1510
			this.updateRanges();                                                                                                // 1511
		},                                                                                                                   // 1512
		updateRanges: function updateRanges() {                                                                              // 1513
			var range = $.map(this.dates, function (d) {                                                                        // 1514
				return d.valueOf();                                                                                                // 1515
			});                                                                                                                 // 1516
			$.each(this.pickers, function (i, p) {                                                                              // 1517
				p.setRange(range);                                                                                                 // 1518
			});                                                                                                                 // 1519
		},                                                                                                                   // 1520
		dateUpdated: function dateUpdated(e) {                                                                               // 1521
			// `this.updating` is a workaround for preventing infinite recursion                                                //
			// between `changeDate` triggering and `setUTCDate` calling.  Until                                                 //
			// there is a better mechanism.                                                                                     //
			if (this.updating) return;                                                                                          // 1525
			this.updating = true;                                                                                               // 1527
                                                                                                                       //
			var dp = $.data(e.target, 'datepicker');                                                                            // 1529
                                                                                                                       //
			if (dp === undefined) {                                                                                             // 1531
				return;                                                                                                            // 1532
			}                                                                                                                   // 1533
                                                                                                                       //
			var new_date = dp.getUTCDate(),                                                                                     // 1535
			    keep_empty_values = this.keepEmptyValues,                                                                       // 1535
			    i = $.inArray(e.target, this.inputs),                                                                           // 1535
			    j = i - 1,                                                                                                      // 1535
			    k = i + 1,                                                                                                      // 1535
			    l = this.inputs.length;                                                                                         // 1535
			if (i === -1) return;                                                                                               // 1541
                                                                                                                       //
			$.each(this.pickers, function (i, p) {                                                                              // 1544
				if (!p.getUTCDate() && (p === dp || !keep_empty_values)) p.setUTCDate(new_date);                                   // 1545
			});                                                                                                                 // 1547
                                                                                                                       //
			if (new_date < this.dates[j]) {                                                                                     // 1549
				// Date being moved earlier/left                                                                                   //
				while (j >= 0 && new_date < this.dates[j]) {                                                                       // 1551
					this.pickers[j--].setUTCDate(new_date);                                                                           // 1552
				}                                                                                                                  // 1553
			} else if (new_date > this.dates[k]) {                                                                              // 1554
				// Date being moved later/right                                                                                    //
				while (k < l && new_date > this.dates[k]) {                                                                        // 1556
					this.pickers[k++].setUTCDate(new_date);                                                                           // 1557
				}                                                                                                                  // 1558
			}                                                                                                                   // 1559
			this.updateDates();                                                                                                 // 1560
                                                                                                                       //
			delete this.updating;                                                                                               // 1562
		},                                                                                                                   // 1563
		destroy: function destroy() {                                                                                        // 1564
			$.map(this.pickers, function (p) {                                                                                  // 1565
				p.destroy();                                                                                                       // 1565
			});                                                                                                                 // 1565
			$(this.inputs).off('changeDate', this.dateUpdated);                                                                 // 1566
			delete this.element.data().datepicker;                                                                              // 1567
		},                                                                                                                   // 1568
		remove: alias('destroy')                                                                                             // 1569
	};                                                                                                                    // 1506
                                                                                                                       //
	function opts_from_el(el, prefix) {                                                                                   // 1572
		// Derive options from element data-attrs                                                                            //
		var data = $(el).data(),                                                                                             // 1574
		    out = {},                                                                                                        // 1574
		    inkey,                                                                                                           // 1574
		    replace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])');                                                    // 1574
		prefix = new RegExp('^' + prefix.toLowerCase());                                                                     // 1577
		function re_lower(_, a) {                                                                                            // 1578
			return a.toLowerCase();                                                                                             // 1579
		}                                                                                                                    // 1580
		for (var key in data) {                                                                                              // 1581
			if (prefix.test(key)) {                                                                                             // 1582
				inkey = key.replace(replace, re_lower);                                                                            // 1583
				out[inkey] = data[key];                                                                                            // 1584
			}                                                                                                                   // 1585
		}return out;                                                                                                         // 1581
	}                                                                                                                     // 1587
                                                                                                                       //
	function opts_from_locale(lang) {                                                                                     // 1589
		// Derive options from locale plugins                                                                                //
		var out = {};                                                                                                        // 1591
		// Check if "de-DE" style date is available, if not language should                                                  //
		// fallback to 2 letter code eg "de"                                                                                 //
		if (!dates[lang]) {                                                                                                  // 1594
			lang = lang.split('-')[0];                                                                                          // 1595
			if (!dates[lang]) return;                                                                                           // 1596
		}                                                                                                                    // 1598
		var d = dates[lang];                                                                                                 // 1599
		$.each(locale_opts, function (i, k) {                                                                                // 1600
			if (k in d) out[k] = d[k];                                                                                          // 1601
		});                                                                                                                  // 1603
		return out;                                                                                                          // 1604
	}                                                                                                                     // 1605
                                                                                                                       //
	var old = $.fn.datepicker;                                                                                            // 1607
	var datepickerPlugin = function datepickerPlugin(option) {                                                            // 1608
		var args = Array.apply(null, arguments);                                                                             // 1609
		args.shift();                                                                                                        // 1610
		var internal_return;                                                                                                 // 1611
		this.each(function () {                                                                                              // 1612
			var $this = $(this),                                                                                                // 1613
			    data = $this.data('datepicker'),                                                                                // 1613
			    options = (typeof option === "undefined" ? "undefined" : _typeof(option)) === 'object' && option;               // 1613
			if (!data) {                                                                                                        // 1616
				var elopts = opts_from_el(this, 'date'),                                                                           // 1617
                                                                                                                       // 1617
				// Preliminary otions                                                                                              //
				xopts = $.extend({}, defaults, elopts, options),                                                                   // 1619
				    locopts = opts_from_locale(xopts.language),                                                                    // 1617
                                                                                                                       // 1617
				// Options priority: js args, data-attrs, locales, defaults                                                        //
				opts = $.extend({}, defaults, locopts, elopts, options);                                                           // 1622
				if ($this.hasClass('input-daterange') || opts.inputs) {                                                            // 1623
					$.extend(opts, {                                                                                                  // 1624
						inputs: opts.inputs || $this.find('input').toArray()                                                             // 1625
					});                                                                                                               // 1624
					data = new DateRangePicker(this, opts);                                                                           // 1627
				} else {                                                                                                           // 1628
					data = new Datepicker(this, opts);                                                                                // 1630
				}                                                                                                                  // 1631
				$this.data('datepicker', data);                                                                                    // 1632
			}                                                                                                                   // 1633
			if (typeof option === 'string' && typeof data[option] === 'function') {                                             // 1634
				internal_return = data[option].apply(data, args);                                                                  // 1635
			}                                                                                                                   // 1636
		});                                                                                                                  // 1637
                                                                                                                       //
		if (internal_return === undefined || internal_return instanceof Datepicker || internal_return instanceof DateRangePicker) return this;
                                                                                                                       //
		if (this.length > 1) throw new Error('Using only allowed for the collection of a single element (' + option + ' function)');else return internal_return;
	};                                                                                                                    // 1650
	$.fn.datepicker = datepickerPlugin;                                                                                   // 1651
                                                                                                                       //
	var defaults = $.fn.datepicker.defaults = {                                                                           // 1653
		assumeNearbyYear: false,                                                                                             // 1654
		autoclose: false,                                                                                                    // 1655
		beforeShowDay: $.noop,                                                                                               // 1656
		beforeShowMonth: $.noop,                                                                                             // 1657
		beforeShowYear: $.noop,                                                                                              // 1658
		beforeShowDecade: $.noop,                                                                                            // 1659
		beforeShowCentury: $.noop,                                                                                           // 1660
		calendarWeeks: false,                                                                                                // 1661
		clearBtn: false,                                                                                                     // 1662
		toggleActive: false,                                                                                                 // 1663
		daysOfWeekDisabled: [],                                                                                              // 1664
		daysOfWeekHighlighted: [],                                                                                           // 1665
		datesDisabled: [],                                                                                                   // 1666
		endDate: Infinity,                                                                                                   // 1667
		forceParse: true,                                                                                                    // 1668
		format: 'mm/dd/yyyy',                                                                                                // 1669
		keepEmptyValues: false,                                                                                              // 1670
		keyboardNavigation: true,                                                                                            // 1671
		language: 'en',                                                                                                      // 1672
		minViewMode: 0,                                                                                                      // 1673
		maxViewMode: 4,                                                                                                      // 1674
		multidate: false,                                                                                                    // 1675
		multidateSeparator: ',',                                                                                             // 1676
		orientation: "auto",                                                                                                 // 1677
		rtl: false,                                                                                                          // 1678
		startDate: -Infinity,                                                                                                // 1679
		startView: 0,                                                                                                        // 1680
		todayBtn: false,                                                                                                     // 1681
		todayHighlight: false,                                                                                               // 1682
		weekStart: 0,                                                                                                        // 1683
		disableTouchKeyboard: false,                                                                                         // 1684
		enableOnReadonly: true,                                                                                              // 1685
		showOnFocus: true,                                                                                                   // 1686
		zIndexOffset: 10,                                                                                                    // 1687
		container: 'body',                                                                                                   // 1688
		immediateUpdates: false,                                                                                             // 1689
		dateCells: false,                                                                                                    // 1690
		title: '',                                                                                                           // 1691
		templates: {                                                                                                         // 1692
			leftArrow: '&laquo;',                                                                                               // 1693
			rightArrow: '&raquo;'                                                                                               // 1694
		}                                                                                                                    // 1692
	};                                                                                                                    // 1653
	var locale_opts = $.fn.datepicker.locale_opts = ['format', 'rtl', 'weekStart'];                                       // 1697
	$.fn.datepicker.Constructor = Datepicker;                                                                             // 1702
	var dates = $.fn.datepicker.dates = {                                                                                 // 1703
		en: {                                                                                                                // 1704
			days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],                               // 1705
			daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],                                                       // 1706
			daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],                                                                // 1707
			months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
			monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],                  // 1709
			today: "Today",                                                                                                     // 1710
			clear: "Clear",                                                                                                     // 1711
			titleFormat: "MM yyyy"                                                                                              // 1712
		}                                                                                                                    // 1704
	};                                                                                                                    // 1703
                                                                                                                       //
	var DPGlobal = {                                                                                                      // 1716
		viewModes: [{                                                                                                        // 1717
			names: ['days', 'month'],                                                                                           // 1719
			clsName: 'days',                                                                                                    // 1720
			e: 'changeMonth'                                                                                                    // 1721
		}, {                                                                                                                 // 1718
			names: ['months', 'year'],                                                                                          // 1724
			clsName: 'months',                                                                                                  // 1725
			e: 'changeYear',                                                                                                    // 1726
			navStep: 1                                                                                                          // 1727
		}, {                                                                                                                 // 1723
			names: ['years', 'decade'],                                                                                         // 1730
			clsName: 'years',                                                                                                   // 1731
			e: 'changeDecade',                                                                                                  // 1732
			navStep: 10                                                                                                         // 1733
		}, {                                                                                                                 // 1729
			names: ['decades', 'century'],                                                                                      // 1736
			clsName: 'decades',                                                                                                 // 1737
			e: 'changeCentury',                                                                                                 // 1738
			navStep: 100                                                                                                        // 1739
		}, {                                                                                                                 // 1735
			names: ['centuries', 'millennium'],                                                                                 // 1742
			clsName: 'centuries',                                                                                               // 1743
			e: 'changeMillennium',                                                                                              // 1744
			navStep: 1000                                                                                                       // 1745
		}],                                                                                                                  // 1741
		validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,                                                                            // 1748
		nonpunctuation: /[^ -\/:-@\u5e74\u6708\u65e5\[-`{-~\t\n\r]+/g,                                                       // 1749
		parseFormat: function parseFormat(format) {                                                                          // 1750
			if (typeof format.toValue === 'function' && typeof format.toDisplay === 'function') return format;                  // 1751
			// IE treats \0 as a string end in inputs (truncating the value),                                                   //
			// so it's a bad format delimiter, anyway                                                                           //
			var separators = format.replace(this.validParts, '\0').split('\0'),                                                 // 1755
			    parts = format.match(this.validParts);                                                                          // 1755
			if (!separators || !separators.length || !parts || parts.length === 0) {                                            // 1757
				throw new Error("Invalid date format.");                                                                           // 1758
			}                                                                                                                   // 1759
			return { separators: separators, parts: parts };                                                                    // 1760
		},                                                                                                                   // 1761
		parseDate: function parseDate(date, format, language, assumeNearby) {                                                // 1762
			if (!date) return undefined;                                                                                        // 1763
			if (date instanceof Date) return date;                                                                              // 1765
			if (typeof format === 'string') format = DPGlobal.parseFormat(format);                                              // 1767
			if (format.toValue) return format.toValue(date, format, language);                                                  // 1769
			var fn_map = {                                                                                                      // 1771
				d: 'moveDay',                                                                                                      // 1772
				m: 'moveMonth',                                                                                                    // 1773
				w: 'moveWeek',                                                                                                     // 1774
				y: 'moveYear'                                                                                                      // 1775
			},                                                                                                                  // 1771
			    dateAliases = {                                                                                                 // 1771
				yesterday: '-1d',                                                                                                  // 1778
				today: '+0d',                                                                                                      // 1779
				tomorrow: '+1d'                                                                                                    // 1780
			},                                                                                                                  // 1777
			    parts,                                                                                                          // 1771
			    part,                                                                                                           // 1771
			    dir,                                                                                                            // 1771
			    i,                                                                                                              // 1771
			    fn;                                                                                                             // 1771
			if (date in dateAliases) {                                                                                          // 1783
				date = dateAliases[date];                                                                                          // 1784
			}                                                                                                                   // 1785
			if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/i.test(date)) {                                                        // 1786
				parts = date.match(/([\-+]\d+)([dmwy])/gi);                                                                        // 1787
				date = new Date();                                                                                                 // 1788
				for (i = 0; i < parts.length; i++) {                                                                               // 1789
					part = parts[i].match(/([\-+]\d+)([dmwy])/i);                                                                     // 1790
					dir = Number(part[1]);                                                                                            // 1791
					fn = fn_map[part[2].toLowerCase()];                                                                               // 1792
					date = Datepicker.prototype[fn](date, dir);                                                                       // 1793
				}                                                                                                                  // 1794
				return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());                                      // 1795
			}                                                                                                                   // 1796
                                                                                                                       //
			parts = date && date.match(this.nonpunctuation) || [];                                                              // 1798
			date = new Date();                                                                                                  // 1799
                                                                                                                       //
			function applyNearbyYear(year, threshold) {                                                                         // 1801
				if (threshold === true) threshold = 10;                                                                            // 1802
                                                                                                                       //
				// if year is 2 digits or less, than the user most likely is trying to get a recent century                        //
				if (year < 100) {                                                                                                  // 1806
					year += 2000;                                                                                                     // 1807
					// if the new year is more than threshold years in advance, use last century                                      //
					if (year > new Date().getFullYear() + threshold) {                                                                // 1809
						year -= 100;                                                                                                     // 1810
					}                                                                                                                 // 1811
				}                                                                                                                  // 1812
                                                                                                                       //
				return year;                                                                                                       // 1814
			}                                                                                                                   // 1815
                                                                                                                       //
			var parsed = {},                                                                                                    // 1817
			    setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],                                                // 1817
			    setters_map = {                                                                                                 // 1817
				yyyy: function yyyy(d, v) {                                                                                        // 1820
					return d.setUTCFullYear(assumeNearby ? applyNearbyYear(v, assumeNearby) : v);                                     // 1821
				},                                                                                                                 // 1822
				m: function m(d, v) {                                                                                              // 1823
					if (isNaN(d)) return d;                                                                                           // 1824
					v -= 1;                                                                                                           // 1826
					while (v < 0) {                                                                                                   // 1827
						v += 12;                                                                                                         // 1827
					}v %= 12;                                                                                                         // 1827
					d.setUTCMonth(v);                                                                                                 // 1829
					while (d.getUTCMonth() !== v) {                                                                                   // 1830
						d.setUTCDate(d.getUTCDate() - 1);                                                                                // 1831
					}return d;                                                                                                        // 1830
				},                                                                                                                 // 1833
				d: function d(_d, v) {                                                                                             // 1834
					return _d.setUTCDate(v);                                                                                          // 1835
				}                                                                                                                  // 1836
			},                                                                                                                  // 1819
			    val,                                                                                                            // 1817
			    filtered;                                                                                                       // 1817
			setters_map['yy'] = setters_map['yyyy'];                                                                            // 1839
			setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];                                        // 1840
			setters_map['dd'] = setters_map['d'];                                                                               // 1841
			date = UTCToday();                                                                                                  // 1842
			var fparts = format.parts.slice();                                                                                  // 1843
			// Remove noop parts                                                                                                //
			if (parts.length !== fparts.length) {                                                                               // 1845
				fparts = $(fparts).filter(function (i, p) {                                                                        // 1846
					return $.inArray(p, setters_order) !== -1;                                                                        // 1847
				}).toArray();                                                                                                      // 1848
			}                                                                                                                   // 1849
			// Process remainder                                                                                                //
			function match_part() {                                                                                             // 1851
				var m = this.slice(0, parts[i].length),                                                                            // 1852
				    p = parts[i].slice(0, m.length);                                                                               // 1852
				return m.toLowerCase() === p.toLowerCase();                                                                        // 1854
			}                                                                                                                   // 1855
			if (parts.length === fparts.length) {                                                                               // 1856
				var cnt;                                                                                                           // 1857
				for (i = 0, cnt = fparts.length; i < cnt; i++) {                                                                   // 1858
					val = parseInt(parts[i], 10);                                                                                     // 1859
					part = fparts[i];                                                                                                 // 1860
					if (isNaN(val)) {                                                                                                 // 1861
						switch (part) {                                                                                                  // 1862
							case 'MM':                                                                                                      // 1863
								filtered = $(dates[language].months).filter(match_part);                                                       // 1864
								val = $.inArray(filtered[0], dates[language].months) + 1;                                                      // 1865
								break;                                                                                                         // 1866
							case 'M':                                                                                                       // 1867
								filtered = $(dates[language].monthsShort).filter(match_part);                                                  // 1868
								val = $.inArray(filtered[0], dates[language].monthsShort) + 1;                                                 // 1869
								break;                                                                                                         // 1870
						}                                                                                                                // 1862
					}                                                                                                                 // 1872
					parsed[part] = val;                                                                                               // 1873
				}                                                                                                                  // 1874
				var _date, s;                                                                                                      // 1875
				for (i = 0; i < setters_order.length; i++) {                                                                       // 1876
					s = setters_order[i];                                                                                             // 1877
					if (s in parsed && !isNaN(parsed[s])) {                                                                           // 1878
						_date = new Date(date);                                                                                          // 1879
						setters_map[s](_date, parsed[s]);                                                                                // 1880
						if (!isNaN(_date)) date = _date;                                                                                 // 1881
					}                                                                                                                 // 1883
				}                                                                                                                  // 1884
			}                                                                                                                   // 1885
			return date;                                                                                                        // 1886
		},                                                                                                                   // 1887
		formatDate: function formatDate(date, format, language) {                                                            // 1888
			if (!date) return '';                                                                                               // 1889
			if (typeof format === 'string') format = DPGlobal.parseFormat(format);                                              // 1891
			if (format.toDisplay) return format.toDisplay(date, format, language);                                              // 1893
			var val = {                                                                                                         // 1895
				d: date.getUTCDate(),                                                                                              // 1896
				D: dates[language].daysShort[date.getUTCDay()],                                                                    // 1897
				DD: dates[language].days[date.getUTCDay()],                                                                        // 1898
				m: date.getUTCMonth() + 1,                                                                                         // 1899
				M: dates[language].monthsShort[date.getUTCMonth()],                                                                // 1900
				MM: dates[language].months[date.getUTCMonth()],                                                                    // 1901
				yy: date.getUTCFullYear().toString().substring(2),                                                                 // 1902
				yyyy: date.getUTCFullYear()                                                                                        // 1903
			};                                                                                                                  // 1895
			val.dd = (val.d < 10 ? '0' : '') + val.d;                                                                           // 1905
			val.mm = (val.m < 10 ? '0' : '') + val.m;                                                                           // 1906
			date = [];                                                                                                          // 1907
			var seps = $.extend([], format.separators);                                                                         // 1908
			for (var i = 0, cnt = format.parts.length; i <= cnt; i++) {                                                         // 1909
				if (seps.length) date.push(seps.shift());                                                                          // 1910
				date.push(val[format.parts[i]]);                                                                                   // 1912
			}                                                                                                                   // 1913
			return date.join('');                                                                                               // 1914
		},                                                                                                                   // 1915
		headTemplate: '<thead>' + '<tr>' + '<th colspan="7" class="datepicker-title"></th>' + '</tr>' + '<tr>' + '<th class="prev">&laquo;</th>' + '<th colspan="5" class="datepicker-switch"></th>' + '<th class="next">&raquo;</th>' + '</tr>' + '</thead>',
		contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',                                                       // 1926
		footTemplate: '<tfoot>' + '<tr>' + '<th colspan="7" class="today"></th>' + '</tr>' + '<tr>' + '<th colspan="7" class="clear"></th>' + '</tr>' + '</tfoot>'
	};                                                                                                                    // 1716
	DPGlobal.template = '<div class="datepicker">' + '<div class="datepicker-days">' + '<table class="table-condensed">' + DPGlobal.headTemplate + '<tbody></tbody>' + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-months">' + '<table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-years">' + '<table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-decades">' + '<table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-centuries">' + '<table class="table-condensed">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '</div>';
                                                                                                                       //
	$.fn.datepicker.DPGlobal = DPGlobal;                                                                                  // 1974
                                                                                                                       //
	/* DATEPICKER NO CONFLICT                                                                                             //
 * =================== */                                                                                              //
                                                                                                                       //
	$.fn.datepicker.noConflict = function () {                                                                            // 1980
		$.fn.datepicker = old;                                                                                               // 1981
		return this;                                                                                                         // 1982
	};                                                                                                                    // 1983
                                                                                                                       //
	/* DATEPICKER VERSION                                                                                                 //
  * =================== */                                                                                             //
	$.fn.datepicker.version = '1.7.0-dev';                                                                                // 1987
                                                                                                                       //
	/* DATEPICKER DATA-API                                                                                                //
 * ================== */                                                                                               //
                                                                                                                       //
	$(document).on('focus.datepicker.data-api click.datepicker.data-api', '[data-provide="datepicker"]', function (e) {   // 1992
		var $this = $(this);                                                                                                 // 1996
		if ($this.data('datepicker')) return;                                                                                // 1997
		e.preventDefault();                                                                                                  // 1999
		// component click requires us to explicitly show it                                                                 //
		datepickerPlugin.call($this, 'show');                                                                                // 2001
	});                                                                                                                   // 2002
	$(function () {                                                                                                       // 2004
		datepickerPlugin.call($('[data-provide="datepicker-inline"]'));                                                      // 2005
	});                                                                                                                   // 2006
});                                                                                                                    // 2008
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"locales":{"bootstrap-datepicker.pt-BR.min.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/dist/datepicker/locales/bootstrap-datepicker.pt-BR.min.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
!function(a){a.fn.datepicker.dates["pt-BR"]={days:["Domingo","Segunda","Terça","Quarta","Quinta","Sexta","Sábado"],daysShort:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],daysMin:["Do","Se","Te","Qu","Qu","Se","Sa"],months:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],monthsShort:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],today:"Hoje",monthsTitle:"Meses",clear:"Limpar",format:"dd/mm/yyyy"}}(jQuery);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"additional-methods.js":["babel-runtime/helpers/typeof","jquery",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/dist/additional-methods.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof;module.import("babel-runtime/helpers/typeof",{"default":function(v){_typeof=v}});                          //
/*!                                                                                                                    //
 * jQuery Validation Plugin v1.15.0                                                                                    //
 *                                                                                                                     //
 * http://jqueryvalidation.org/                                                                                        //
 *                                                                                                                     //
 * Copyright (c) 2016 Jörn Zaefferer                                                                                   //
 * Released under the MIT license                                                                                      //
 */                                                                                                                    //
(function (factory) {                                                                                                  // 9
	if (typeof define === "function" && define.amd) {                                                                     // 10
		define(["jquery", "./jquery.validate"], factory);                                                                    // 11
	} else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && module.exports) {          // 12
		module.exports = factory(require("jquery"));                                                                         // 13
	} else {                                                                                                              // 14
		factory(jQuery);                                                                                                     // 15
	}                                                                                                                     // 16
})(function ($) {                                                                                                      // 17
                                                                                                                       //
	(function () {                                                                                                        // 19
                                                                                                                       //
		function stripHtml(value) {                                                                                          // 21
                                                                                                                       //
			// Remove html tags and space chars                                                                                 //
			return value.replace(/<.[^<>]*?>/g, " ").replace(/&nbsp;|&#160;/gi, " ")                                            // 24
                                                                                                                       //
			// Remove punctuation                                                                                               //
			.replace(/[.(),;:!?%#$'\"_+=\/\-“”’]*/g, "");                                                                       // 24
		}                                                                                                                    // 28
                                                                                                                       //
		$.validator.addMethod("maxWords", function (value, element, params) {                                                // 30
			return this.optional(element) || stripHtml(value).match(/\b\w+\b/g).length <= params;                               // 31
		}, $.validator.format("Please enter {0} words or less."));                                                           // 32
                                                                                                                       //
		$.validator.addMethod("minWords", function (value, element, params) {                                                // 34
			return this.optional(element) || stripHtml(value).match(/\b\w+\b/g).length >= params;                               // 35
		}, $.validator.format("Please enter at least {0} words."));                                                          // 36
                                                                                                                       //
		$.validator.addMethod("rangeWords", function (value, element, params) {                                              // 38
			var valueStripped = stripHtml(value),                                                                               // 39
			    regex = /\b\w+\b/g;                                                                                             // 39
			return this.optional(element) || valueStripped.match(regex).length >= params[0] && valueStripped.match(regex).length <= params[1];
		}, $.validator.format("Please enter between {0} and {1} words."));                                                   // 42
	})();                                                                                                                 // 44
                                                                                                                       //
	// Accept a value from a file input based on a required mimetype                                                      //
	$.validator.addMethod("accept", function (value, element, param) {                                                    // 47
                                                                                                                       //
		// Split mime on commas in case we have multiple types we can accept                                                 //
		var typeParam = typeof param === "string" ? param.replace(/\s/g, "") : "image/*",                                    // 50
		    optionalValue = this.optional(element),                                                                          // 50
		    i,                                                                                                               // 50
		    file,                                                                                                            // 50
		    regex;                                                                                                           // 50
                                                                                                                       //
		// Element is optional                                                                                               //
		if (optionalValue) {                                                                                                 // 55
			return optionalValue;                                                                                               // 56
		}                                                                                                                    // 57
                                                                                                                       //
		if ($(element).attr("type") === "file") {                                                                            // 59
                                                                                                                       //
			// Escape string to be used in the regex                                                                            //
			// see: http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex                        //
			// Escape also "/*" as "/.*" as a wildcard                                                                          //
			typeParam = typeParam.replace(/[\-\[\]\/\{\}\(\)\+\?\.\\\^\$\|]/g, "\\$&").replace(/,/g, "|").replace("\/*", "/.*");
                                                                                                                       //
			// Check if the element has a FileList before checking each file                                                    //
			if (element.files && element.files.length) {                                                                        // 67
				regex = new RegExp(".?(" + typeParam + ")$", "i");                                                                 // 68
				for (i = 0; i < element.files.length; i++) {                                                                       // 69
					file = element.files[i];                                                                                          // 70
                                                                                                                       //
					// Grab the mimetype from the loaded file, verify it matches                                                      //
					if (!file.type.match(regex)) {                                                                                    // 73
						return false;                                                                                                    // 74
					}                                                                                                                 // 75
				}                                                                                                                  // 76
			}                                                                                                                   // 77
		}                                                                                                                    // 78
                                                                                                                       //
		// Either return true because we've validated each file, or because the                                              //
		// browser does not support element.files and the FileList feature                                                   //
		return true;                                                                                                         // 82
	}, $.validator.format("Please enter a value with a valid mimetype."));                                                // 83
                                                                                                                       //
	$.validator.addMethod("alphanumeric", function (value, element) {                                                     // 85
		return this.optional(element) || /^\w+$/i.test(value);                                                               // 86
	}, "Letters, numbers, and underscores only please");                                                                  // 87
                                                                                                                       //
	/*                                                                                                                    //
  * Dutch bank account numbers (not 'giro' numbers) have 9 digits                                                      //
  * and pass the '11 check'.                                                                                           //
  * We accept the notation with spaces, as that is common.                                                             //
  * acceptable: 123456789 or 12 34 56 789                                                                              //
  */                                                                                                                   //
	$.validator.addMethod("bankaccountNL", function (value, element) {                                                    // 95
		if (this.optional(element)) {                                                                                        // 96
			return true;                                                                                                        // 97
		}                                                                                                                    // 98
		if (!/^[0-9]{9}|([0-9]{2} ){3}[0-9]{3}$/.test(value)) {                                                              // 99
			return false;                                                                                                       // 100
		}                                                                                                                    // 101
                                                                                                                       //
		// Now '11 check'                                                                                                    //
		var account = value.replace(/ /g, ""),                                                                               // 104
		    // Remove spaces                                                                                                 // 104
		sum = 0,                                                                                                             // 105
		    len = account.length,                                                                                            // 104
		    pos,                                                                                                             // 104
		    factor,                                                                                                          // 104
		    digit;                                                                                                           // 104
		for (pos = 0; pos < len; pos++) {                                                                                    // 108
			factor = len - pos;                                                                                                 // 109
			digit = account.substring(pos, pos + 1);                                                                            // 110
			sum = sum + factor * digit;                                                                                         // 111
		}                                                                                                                    // 112
		return sum % 11 === 0;                                                                                               // 113
	}, "Please specify a valid bank account number");                                                                     // 114
                                                                                                                       //
	$.validator.addMethod("bankorgiroaccountNL", function (value, element) {                                              // 116
		return this.optional(element) || $.validator.methods.bankaccountNL.call(this, value, element) || $.validator.methods.giroaccountNL.call(this, value, element);
	}, "Please specify a valid bank or giro account number");                                                             // 120
                                                                                                                       //
	/**                                                                                                                   //
  * BIC is the business identifier code (ISO 9362). This BIC check is not a guarantee for authenticity.                //
  *                                                                                                                    //
  * BIC pattern: BBBBCCLLbbb (8 or 11 characters long; bbb is optional)                                                //
  *                                                                                                                    //
  * Validation is case-insensitive. Please make sure to normalize input yourself.                                      //
  *                                                                                                                    //
  * BIC definition in detail:                                                                                          //
  * - First 4 characters - bank code (only letters)                                                                    //
  * - Next 2 characters - ISO 3166-1 alpha-2 country code (only letters)                                               //
  * - Next 2 characters - location code (letters and digits)                                                           //
  *   a. shall not start with '0' or '1'                                                                               //
  *   b. second character must be a letter ('O' is not allowed) or digit ('0' for test (therefore not allowed), '1' denoting passive participant, '2' typically reverse-billing)
  * - Last 3 characters - branch code, optional (shall not start with 'X' except in case of 'XXX' for primary office) (letters and digits)
  */                                                                                                                   //
	$.validator.addMethod("bic", function (value, element) {                                                              // 137
		return this.optional(element) || /^([A-Z]{6}[A-Z2-9][A-NP-Z1-9])(X{3}|[A-WY-Z0-9][A-Z0-9]{2})?$/.test(value.toUpperCase());
	}, "Please specify a valid BIC code");                                                                                // 139
                                                                                                                       //
	/*                                                                                                                    //
  * Código de identificación fiscal ( CIF ) is the tax identification code for Spanish legal entities                  //
  * Further rules can be found in Spanish on http://es.wikipedia.org/wiki/C%C3%B3digo_de_identificaci%C3%B3n_fiscal    //
  */                                                                                                                   //
	$.validator.addMethod("cifES", function (value) {                                                                     // 145
		"use strict";                                                                                                        // 146
                                                                                                                       //
		var num = [],                                                                                                        // 148
		    controlDigit,                                                                                                    // 148
		    sum,                                                                                                             // 148
		    i,                                                                                                               // 148
		    count,                                                                                                           // 148
		    tmp,                                                                                                             // 148
		    secondDigit;                                                                                                     // 148
                                                                                                                       //
		value = value.toUpperCase();                                                                                         // 151
                                                                                                                       //
		// Quick format test                                                                                                 //
		if (!value.match("((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)")) {                      // 154
			return false;                                                                                                       // 155
		}                                                                                                                    // 156
                                                                                                                       //
		for (i = 0; i < 9; i++) {                                                                                            // 158
			num[i] = parseInt(value.charAt(i), 10);                                                                             // 159
		}                                                                                                                    // 160
                                                                                                                       //
		// Algorithm for checking CIF codes                                                                                  //
		sum = num[2] + num[4] + num[6];                                                                                      // 163
		for (count = 1; count < 8; count += 2) {                                                                             // 164
			tmp = (2 * num[count]).toString();                                                                                  // 165
			secondDigit = tmp.charAt(1);                                                                                        // 166
                                                                                                                       //
			sum += parseInt(tmp.charAt(0), 10) + (secondDigit === "" ? 0 : parseInt(secondDigit, 10));                          // 168
		}                                                                                                                    // 169
                                                                                                                       //
		/* The first (position 1) is a letter following the following criteria:                                              //
   *	A. Corporations                                                                                                   //
   *	B. LLCs                                                                                                           //
   *	C. General partnerships                                                                                           //
   *	D. Companies limited partnerships                                                                                 //
   *	E. Communities of goods                                                                                           //
   *	F. Cooperative Societies                                                                                          //
   *	G. Associations                                                                                                   //
   *	H. Communities of homeowners in horizontal property regime                                                        //
   *	J. Civil Societies                                                                                                //
   *	K. Old format                                                                                                     //
   *	L. Old format                                                                                                     //
   *	M. Old format                                                                                                     //
   *	N. Nonresident entities                                                                                           //
   *	P. Local authorities                                                                                              //
   *	Q. Autonomous bodies, state or not, and the like, and congregations and religious institutions                    //
   *	R. Congregations and religious institutions (since 2008 ORDER EHA/451/2008)                                       //
   *	S. Organs of State Administration and regions                                                                     //
   *	V. Agrarian Transformation                                                                                        //
   *	W. Permanent establishments of non-resident in Spain                                                              //
   */                                                                                                                  //
		if (/^[ABCDEFGHJNPQRSUVW]{1}/.test(value)) {                                                                         // 192
			sum += "";                                                                                                          // 193
			controlDigit = 10 - parseInt(sum.charAt(sum.length - 1), 10);                                                       // 194
			value += controlDigit;                                                                                              // 195
			return num[8].toString() === String.fromCharCode(64 + controlDigit) || num[8].toString() === value.charAt(value.length - 1);
		}                                                                                                                    // 197
                                                                                                                       //
		return false;                                                                                                        // 199
	}, "Please specify a valid CIF number.");                                                                             // 201
                                                                                                                       //
	/*                                                                                                                    //
  * Brazillian CPF number (Cadastrado de Pessoas Físicas) is the equivalent of a Brazilian tax registration number.    //
  * CPF numbers have 11 digits in total: 9 numbers followed by 2 check numbers that are being used for validation.     //
  */                                                                                                                   //
	$.validator.addMethod("cpfBR", function (value) {                                                                     // 207
                                                                                                                       //
		// Removing special characters from value                                                                            //
		value = value.replace(/([~!@#$%^&*()_+=`{}\[\]\-|\\:;'<>,.\/? ])+/g, "");                                            // 210
                                                                                                                       //
		// Checking value to have 11 digits only                                                                             //
		if (value.length !== 11) {                                                                                           // 213
			return false;                                                                                                       // 214
		}                                                                                                                    // 215
                                                                                                                       //
		var sum = 0,                                                                                                         // 217
		    firstCN,                                                                                                         // 217
		    secondCN,                                                                                                        // 217
		    checkResult,                                                                                                     // 217
		    i;                                                                                                               // 217
                                                                                                                       //
		firstCN = parseInt(value.substring(9, 10), 10);                                                                      // 220
		secondCN = parseInt(value.substring(10, 11), 10);                                                                    // 221
                                                                                                                       //
		checkResult = function checkResult(sum, cn) {                                                                        // 223
			var result = sum * 10 % 11;                                                                                         // 224
			if (result === 10 || result === 11) {                                                                               // 225
				result = 0;                                                                                                        // 226
			}                                                                                                                   // 227
			return result === cn;                                                                                               // 228
		};                                                                                                                   // 229
                                                                                                                       //
		// Checking for dump data                                                                                            //
		if (value === "" || value === "00000000000" || value === "11111111111" || value === "22222222222" || value === "33333333333" || value === "44444444444" || value === "55555555555" || value === "66666666666" || value === "77777777777" || value === "88888888888" || value === "99999999999") {
			return false;                                                                                                       // 244
		}                                                                                                                    // 245
                                                                                                                       //
		// Step 1 - using first Check Number:                                                                                //
		for (i = 1; i <= 9; i++) {                                                                                           // 248
			sum = sum + parseInt(value.substring(i - 1, i), 10) * (11 - i);                                                     // 249
		}                                                                                                                    // 250
                                                                                                                       //
		// If first Check Number (CN) is valid, move to Step 2 - using second Check Number:                                  //
		if (checkResult(sum, firstCN)) {                                                                                     // 253
			sum = 0;                                                                                                            // 254
			for (i = 1; i <= 10; i++) {                                                                                         // 255
				sum = sum + parseInt(value.substring(i - 1, i), 10) * (12 - i);                                                    // 256
			}                                                                                                                   // 257
			return checkResult(sum, secondCN);                                                                                  // 258
		}                                                                                                                    // 259
		return false;                                                                                                        // 260
	}, "Please specify a valid CPF number");                                                                              // 262
                                                                                                                       //
	// http://jqueryvalidation.org/creditcard-method/                                                                     //
	// based on http://en.wikipedia.org/wiki/Luhn_algorithm                                                               //
	$.validator.addMethod("creditcard", function (value, element) {                                                       // 266
		if (this.optional(element)) {                                                                                        // 267
			return "dependency-mismatch";                                                                                       // 268
		}                                                                                                                    // 269
                                                                                                                       //
		// Accept only spaces, digits and dashes                                                                             //
		if (/[^0-9 \-]+/.test(value)) {                                                                                      // 272
			return false;                                                                                                       // 273
		}                                                                                                                    // 274
                                                                                                                       //
		var nCheck = 0,                                                                                                      // 276
		    nDigit = 0,                                                                                                      // 276
		    bEven = false,                                                                                                   // 276
		    n,                                                                                                               // 276
		    cDigit;                                                                                                          // 276
                                                                                                                       //
		value = value.replace(/\D/g, "");                                                                                    // 281
                                                                                                                       //
		// Basing min and max length on                                                                                      //
		// http://developer.ean.com/general_info/Valid_Credit_Card_Types                                                     //
		if (value.length < 13 || value.length > 19) {                                                                        // 285
			return false;                                                                                                       // 286
		}                                                                                                                    // 287
                                                                                                                       //
		for (n = value.length - 1; n >= 0; n--) {                                                                            // 289
			cDigit = value.charAt(n);                                                                                           // 290
			nDigit = parseInt(cDigit, 10);                                                                                      // 291
			if (bEven) {                                                                                                        // 292
				if ((nDigit *= 2) > 9) {                                                                                           // 293
					nDigit -= 9;                                                                                                      // 294
				}                                                                                                                  // 295
			}                                                                                                                   // 296
                                                                                                                       //
			nCheck += nDigit;                                                                                                   // 298
			bEven = !bEven;                                                                                                     // 299
		}                                                                                                                    // 300
                                                                                                                       //
		return nCheck % 10 === 0;                                                                                            // 302
	}, "Please enter a valid credit card number.");                                                                       // 303
                                                                                                                       //
	/* NOTICE: Modified version of Castle.Components.Validator.CreditCardValidator                                        //
  * Redistributed under the the Apache License 2.0 at http://www.apache.org/licenses/LICENSE-2.0                       //
  * Valid Types: mastercard, visa, amex, dinersclub, enroute, discover, jcb, unknown, all (overrides all other settings)
  */                                                                                                                   //
	$.validator.addMethod("creditcardtypes", function (value, element, param) {                                           // 309
		if (/[^0-9\-]+/.test(value)) {                                                                                       // 310
			return false;                                                                                                       // 311
		}                                                                                                                    // 312
                                                                                                                       //
		value = value.replace(/\D/g, "");                                                                                    // 314
                                                                                                                       //
		var validTypes = 0x0000;                                                                                             // 316
                                                                                                                       //
		if (param.mastercard) {                                                                                              // 318
			validTypes |= 0x0001;                                                                                               // 319
		}                                                                                                                    // 320
		if (param.visa) {                                                                                                    // 321
			validTypes |= 0x0002;                                                                                               // 322
		}                                                                                                                    // 323
		if (param.amex) {                                                                                                    // 324
			validTypes |= 0x0004;                                                                                               // 325
		}                                                                                                                    // 326
		if (param.dinersclub) {                                                                                              // 327
			validTypes |= 0x0008;                                                                                               // 328
		}                                                                                                                    // 329
		if (param.enroute) {                                                                                                 // 330
			validTypes |= 0x0010;                                                                                               // 331
		}                                                                                                                    // 332
		if (param.discover) {                                                                                                // 333
			validTypes |= 0x0020;                                                                                               // 334
		}                                                                                                                    // 335
		if (param.jcb) {                                                                                                     // 336
			validTypes |= 0x0040;                                                                                               // 337
		}                                                                                                                    // 338
		if (param.unknown) {                                                                                                 // 339
			validTypes |= 0x0080;                                                                                               // 340
		}                                                                                                                    // 341
		if (param.all) {                                                                                                     // 342
			validTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;                                 // 343
		}                                                                                                                    // 344
		if (validTypes & 0x0001 && /^(5[12345])/.test(value)) {                                                              // 345
			// Mastercard                                                                                                       //
			return value.length === 16;                                                                                         // 346
		}                                                                                                                    // 347
		if (validTypes & 0x0002 && /^(4)/.test(value)) {                                                                     // 348
			// Visa                                                                                                             //
			return value.length === 16;                                                                                         // 349
		}                                                                                                                    // 350
		if (validTypes & 0x0004 && /^(3[47])/.test(value)) {                                                                 // 351
			// Amex                                                                                                             //
			return value.length === 15;                                                                                         // 352
		}                                                                                                                    // 353
		if (validTypes & 0x0008 && /^(3(0[012345]|[68]))/.test(value)) {                                                     // 354
			// Dinersclub                                                                                                       //
			return value.length === 14;                                                                                         // 355
		}                                                                                                                    // 356
		if (validTypes & 0x0010 && /^(2(014|149))/.test(value)) {                                                            // 357
			// Enroute                                                                                                          //
			return value.length === 15;                                                                                         // 358
		}                                                                                                                    // 359
		if (validTypes & 0x0020 && /^(6011)/.test(value)) {                                                                  // 360
			// Discover                                                                                                         //
			return value.length === 16;                                                                                         // 361
		}                                                                                                                    // 362
		if (validTypes & 0x0040 && /^(3)/.test(value)) {                                                                     // 363
			// Jcb                                                                                                              //
			return value.length === 16;                                                                                         // 364
		}                                                                                                                    // 365
		if (validTypes & 0x0040 && /^(2131|1800)/.test(value)) {                                                             // 366
			// Jcb                                                                                                              //
			return value.length === 15;                                                                                         // 367
		}                                                                                                                    // 368
		if (validTypes & 0x0080) {                                                                                           // 369
			// Unknown                                                                                                          //
			return true;                                                                                                        // 370
		}                                                                                                                    // 371
		return false;                                                                                                        // 372
	}, "Please enter a valid credit card number.");                                                                       // 373
                                                                                                                       //
	/**                                                                                                                   //
  * Validates currencies with any given symbols by @jameslouiz                                                         //
  * Symbols can be optional or required. Symbols required by default                                                   //
  *                                                                                                                    //
  * Usage examples:                                                                                                    //
  *  currency: ["£", false] - Use false for soft currency validation                                                   //
  *  currency: ["$", false]                                                                                            //
  *  currency: ["RM", false] - also works with text based symbols such as "RM" - Malaysia Ringgit etc                  //
  *                                                                                                                    //
  *  <input class="currencyInput" name="currencyInput">                                                                //
  *                                                                                                                    //
  * Soft symbol checking                                                                                               //
  *  currencyInput: {                                                                                                  //
  *     currency: ["$", false]                                                                                         //
  *  }                                                                                                                 //
  *                                                                                                                    //
  * Strict symbol checking (default)                                                                                   //
  *  currencyInput: {                                                                                                  //
  *     currency: "$"                                                                                                  //
  *     //OR                                                                                                           //
  *     currency: ["$", true]                                                                                          //
  *  }                                                                                                                 //
  *                                                                                                                    //
  * Multiple Symbols                                                                                                   //
  *  currencyInput: {                                                                                                  //
  *     currency: "$,£,¢"                                                                                              //
  *  }                                                                                                                 //
  */                                                                                                                   //
	$.validator.addMethod("currency", function (value, element, param) {                                                  // 403
		var isParamString = typeof param === "string",                                                                       // 404
		    symbol = isParamString ? param : param[0],                                                                       // 404
		    soft = isParamString ? true : param[1],                                                                          // 404
		    regex;                                                                                                           // 404
                                                                                                                       //
		symbol = symbol.replace(/,/g, "");                                                                                   // 409
		symbol = soft ? symbol + "]" : symbol + "]?";                                                                        // 410
		regex = "^[" + symbol + "([1-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$";
		regex = new RegExp(regex);                                                                                           // 412
		return this.optional(element) || regex.test(value);                                                                  // 413
	}, "Please specify a valid currency");                                                                                // 415
                                                                                                                       //
	$.validator.addMethod("dateFA", function (value, element) {                                                           // 417
		return this.optional(element) || /^[1-4]\d{3}\/((0?[1-6]\/((3[0-1])|([1-2][0-9])|(0?[1-9])))|((1[0-2]|(0?[7-9]))\/(30|([1-2][0-9])|(0?[1-9]))))$/.test(value);
	}, $.validator.messages.date);                                                                                        // 419
                                                                                                                       //
	/**                                                                                                                   //
  * Return true, if the value is a valid date, also making this formal check dd/mm/yyyy.                               //
  *                                                                                                                    //
  * @example $.validator.methods.date("01/01/1900")                                                                    //
  * @result true                                                                                                       //
  *                                                                                                                    //
  * @example $.validator.methods.date("01/13/1990")                                                                    //
  * @result false                                                                                                      //
  *                                                                                                                    //
  * @example $.validator.methods.date("01.01.1900")                                                                    //
  * @result false                                                                                                      //
  *                                                                                                                    //
  * @example <input name="pippo" class="{dateITA:true}" />                                                             //
  * @desc Declares an optional input element whose value must be a valid date.                                         //
  *                                                                                                                    //
  * @name $.validator.methods.dateITA                                                                                  //
  * @type Boolean                                                                                                      //
  * @cat Plugins/Validate/Methods                                                                                      //
  */                                                                                                                   //
	$.validator.addMethod("dateITA", function (value, element) {                                                          // 440
		var check = false,                                                                                                   // 441
		    re = /^\d{1,2}\/\d{1,2}\/\d{4}$/,                                                                                // 441
		    adata,                                                                                                           // 441
		    gg,                                                                                                              // 441
		    mm,                                                                                                              // 441
		    aaaa,                                                                                                            // 441
		    xdata;                                                                                                           // 441
		if (re.test(value)) {                                                                                                // 444
			adata = value.split("/");                                                                                           // 445
			gg = parseInt(adata[0], 10);                                                                                        // 446
			mm = parseInt(adata[1], 10);                                                                                        // 447
			aaaa = parseInt(adata[2], 10);                                                                                      // 448
			xdata = new Date(Date.UTC(aaaa, mm - 1, gg, 12, 0, 0, 0));                                                          // 449
			if (xdata.getUTCFullYear() === aaaa && xdata.getUTCMonth() === mm - 1 && xdata.getUTCDate() === gg) {               // 450
				check = true;                                                                                                      // 451
			} else {                                                                                                            // 452
				check = false;                                                                                                     // 453
			}                                                                                                                   // 454
		} else {                                                                                                             // 455
			check = false;                                                                                                      // 456
		}                                                                                                                    // 457
		return this.optional(element) || check;                                                                              // 458
	}, $.validator.messages.date);                                                                                        // 459
                                                                                                                       //
	$.validator.addMethod("dateNL", function (value, element) {                                                           // 461
		return this.optional(element) || /^(0?[1-9]|[12]\d|3[01])[\.\/\-](0?[1-9]|1[012])[\.\/\-]([12]\d)?(\d\d)$/.test(value);
	}, $.validator.messages.date);                                                                                        // 463
                                                                                                                       //
	// Older "accept" file extension method. Old docs: http://docs.jquery.com/Plugins/Validation/Methods/accept           //
	$.validator.addMethod("extension", function (value, element, param) {                                                 // 466
		param = typeof param === "string" ? param.replace(/,/g, "|") : "png|jpe?g|gif";                                      // 467
		return this.optional(element) || value.match(new RegExp("\\.(" + param + ")$", "i"));                                // 468
	}, $.validator.format("Please enter a value with a valid extension."));                                               // 469
                                                                                                                       //
	/**                                                                                                                   //
  * Dutch giro account numbers (not bank numbers) have max 7 digits                                                    //
  */                                                                                                                   //
	$.validator.addMethod("giroaccountNL", function (value, element) {                                                    // 474
		return this.optional(element) || /^[0-9]{1,7}$/.test(value);                                                         // 475
	}, "Please specify a valid giro account number");                                                                     // 476
                                                                                                                       //
	/**                                                                                                                   //
  * IBAN is the international bank account number.                                                                     //
  * It has a country - specific format, that is checked here too                                                       //
  *                                                                                                                    //
  * Validation is case-insensitive. Please make sure to normalize input yourself.                                      //
  */                                                                                                                   //
	$.validator.addMethod("iban", function (value, element) {                                                             // 484
                                                                                                                       //
		// Some quick simple tests to prevent needless work                                                                  //
		if (this.optional(element)) {                                                                                        // 487
			return true;                                                                                                        // 488
		}                                                                                                                    // 489
                                                                                                                       //
		// Remove spaces and to upper case                                                                                   //
		var iban = value.replace(/ /g, "").toUpperCase(),                                                                    // 492
		    ibancheckdigits = "",                                                                                            // 492
		    leadingZeroes = true,                                                                                            // 492
		    cRest = "",                                                                                                      // 492
		    cOperator = "",                                                                                                  // 492
		    countrycode,                                                                                                     // 492
		    ibancheck,                                                                                                       // 492
		    charAt,                                                                                                          // 492
		    cChar,                                                                                                           // 492
		    bbanpattern,                                                                                                     // 492
		    bbancountrypatterns,                                                                                             // 492
		    ibanregexp,                                                                                                      // 492
		    i,                                                                                                               // 492
		    p;                                                                                                               // 492
                                                                                                                       //
		// Check the country code and find the country specific format                                                       //
		countrycode = iban.substring(0, 2);                                                                                  // 500
		bbancountrypatterns = {                                                                                              // 501
			"AL": "\\d{8}[\\dA-Z]{16}",                                                                                         // 502
			"AD": "\\d{8}[\\dA-Z]{12}",                                                                                         // 503
			"AT": "\\d{16}",                                                                                                    // 504
			"AZ": "[\\dA-Z]{4}\\d{20}",                                                                                         // 505
			"BE": "\\d{12}",                                                                                                    // 506
			"BH": "[A-Z]{4}[\\dA-Z]{14}",                                                                                       // 507
			"BA": "\\d{16}",                                                                                                    // 508
			"BR": "\\d{23}[A-Z][\\dA-Z]",                                                                                       // 509
			"BG": "[A-Z]{4}\\d{6}[\\dA-Z]{8}",                                                                                  // 510
			"CR": "\\d{17}",                                                                                                    // 511
			"HR": "\\d{17}",                                                                                                    // 512
			"CY": "\\d{8}[\\dA-Z]{16}",                                                                                         // 513
			"CZ": "\\d{20}",                                                                                                    // 514
			"DK": "\\d{14}",                                                                                                    // 515
			"DO": "[A-Z]{4}\\d{20}",                                                                                            // 516
			"EE": "\\d{16}",                                                                                                    // 517
			"FO": "\\d{14}",                                                                                                    // 518
			"FI": "\\d{14}",                                                                                                    // 519
			"FR": "\\d{10}[\\dA-Z]{11}\\d{2}",                                                                                  // 520
			"GE": "[\\dA-Z]{2}\\d{16}",                                                                                         // 521
			"DE": "\\d{18}",                                                                                                    // 522
			"GI": "[A-Z]{4}[\\dA-Z]{15}",                                                                                       // 523
			"GR": "\\d{7}[\\dA-Z]{16}",                                                                                         // 524
			"GL": "\\d{14}",                                                                                                    // 525
			"GT": "[\\dA-Z]{4}[\\dA-Z]{20}",                                                                                    // 526
			"HU": "\\d{24}",                                                                                                    // 527
			"IS": "\\d{22}",                                                                                                    // 528
			"IE": "[\\dA-Z]{4}\\d{14}",                                                                                         // 529
			"IL": "\\d{19}",                                                                                                    // 530
			"IT": "[A-Z]\\d{10}[\\dA-Z]{12}",                                                                                   // 531
			"KZ": "\\d{3}[\\dA-Z]{13}",                                                                                         // 532
			"KW": "[A-Z]{4}[\\dA-Z]{22}",                                                                                       // 533
			"LV": "[A-Z]{4}[\\dA-Z]{13}",                                                                                       // 534
			"LB": "\\d{4}[\\dA-Z]{20}",                                                                                         // 535
			"LI": "\\d{5}[\\dA-Z]{12}",                                                                                         // 536
			"LT": "\\d{16}",                                                                                                    // 537
			"LU": "\\d{3}[\\dA-Z]{13}",                                                                                         // 538
			"MK": "\\d{3}[\\dA-Z]{10}\\d{2}",                                                                                   // 539
			"MT": "[A-Z]{4}\\d{5}[\\dA-Z]{18}",                                                                                 // 540
			"MR": "\\d{23}",                                                                                                    // 541
			"MU": "[A-Z]{4}\\d{19}[A-Z]{3}",                                                                                    // 542
			"MC": "\\d{10}[\\dA-Z]{11}\\d{2}",                                                                                  // 543
			"MD": "[\\dA-Z]{2}\\d{18}",                                                                                         // 544
			"ME": "\\d{18}",                                                                                                    // 545
			"NL": "[A-Z]{4}\\d{10}",                                                                                            // 546
			"NO": "\\d{11}",                                                                                                    // 547
			"PK": "[\\dA-Z]{4}\\d{16}",                                                                                         // 548
			"PS": "[\\dA-Z]{4}\\d{21}",                                                                                         // 549
			"PL": "\\d{24}",                                                                                                    // 550
			"PT": "\\d{21}",                                                                                                    // 551
			"RO": "[A-Z]{4}[\\dA-Z]{16}",                                                                                       // 552
			"SM": "[A-Z]\\d{10}[\\dA-Z]{12}",                                                                                   // 553
			"SA": "\\d{2}[\\dA-Z]{18}",                                                                                         // 554
			"RS": "\\d{18}",                                                                                                    // 555
			"SK": "\\d{20}",                                                                                                    // 556
			"SI": "\\d{15}",                                                                                                    // 557
			"ES": "\\d{20}",                                                                                                    // 558
			"SE": "\\d{20}",                                                                                                    // 559
			"CH": "\\d{5}[\\dA-Z]{12}",                                                                                         // 560
			"TN": "\\d{20}",                                                                                                    // 561
			"TR": "\\d{5}[\\dA-Z]{17}",                                                                                         // 562
			"AE": "\\d{3}\\d{16}",                                                                                              // 563
			"GB": "[A-Z]{4}\\d{14}",                                                                                            // 564
			"VG": "[\\dA-Z]{4}\\d{16}"                                                                                          // 565
		};                                                                                                                   // 501
                                                                                                                       //
		bbanpattern = bbancountrypatterns[countrycode];                                                                      // 568
                                                                                                                       //
		// As new countries will start using IBAN in the                                                                     //
		// future, we only check if the countrycode is known.                                                                //
		// This prevents false negatives, while almost all                                                                   //
		// false positives introduced by this, will be caught                                                                //
		// by the checksum validation below anyway.                                                                          //
		// Strict checking should return FALSE for unknown                                                                   //
		// countries.                                                                                                        //
		if (typeof bbanpattern !== "undefined") {                                                                            // 577
			ibanregexp = new RegExp("^[A-Z]{2}\\d{2}" + bbanpattern + "$", "");                                                 // 578
			if (!ibanregexp.test(iban)) {                                                                                       // 579
				return false; // Invalid country specific format                                                                   // 580
			}                                                                                                                   // 581
		}                                                                                                                    // 582
                                                                                                                       //
		// Now check the checksum, first convert to digits                                                                   //
		ibancheck = iban.substring(4, iban.length) + iban.substring(0, 4);                                                   // 585
		for (i = 0; i < ibancheck.length; i++) {                                                                             // 586
			charAt = ibancheck.charAt(i);                                                                                       // 587
			if (charAt !== "0") {                                                                                               // 588
				leadingZeroes = false;                                                                                             // 589
			}                                                                                                                   // 590
			if (!leadingZeroes) {                                                                                               // 591
				ibancheckdigits += "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(charAt);                                         // 592
			}                                                                                                                   // 593
		}                                                                                                                    // 594
                                                                                                                       //
		// Calculate the result of: ibancheckdigits % 97                                                                     //
		for (p = 0; p < ibancheckdigits.length; p++) {                                                                       // 597
			cChar = ibancheckdigits.charAt(p);                                                                                  // 598
			cOperator = "" + cRest + "" + cChar;                                                                                // 599
			cRest = cOperator % 97;                                                                                             // 600
		}                                                                                                                    // 601
		return cRest === 1;                                                                                                  // 602
	}, "Please specify a valid IBAN");                                                                                    // 603
                                                                                                                       //
	$.validator.addMethod("integer", function (value, element) {                                                          // 605
		return this.optional(element) || /^-?\d+$/.test(value);                                                              // 606
	}, "A positive or negative non-decimal number please");                                                               // 607
                                                                                                                       //
	$.validator.addMethod("ipv4", function (value, element) {                                                             // 609
		return this.optional(element) || /^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i.test(value);
	}, "Please enter a valid IP v4 address.");                                                                            // 611
                                                                                                                       //
	$.validator.addMethod("ipv6", function (value, element) {                                                             // 613
		return this.optional(element) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);
	}, "Please enter a valid IP v6 address.");                                                                            // 615
                                                                                                                       //
	$.validator.addMethod("lettersonly", function (value, element) {                                                      // 617
		return this.optional(element) || /^[a-z]+$/i.test(value);                                                            // 618
	}, "Letters only please");                                                                                            // 619
                                                                                                                       //
	$.validator.addMethod("letterswithbasicpunc", function (value, element) {                                             // 621
		return this.optional(element) || /^[a-z\-.,()'"\s]+$/i.test(value);                                                  // 622
	}, "Letters or punctuation only please");                                                                             // 623
                                                                                                                       //
	$.validator.addMethod("mobileNL", function (value, element) {                                                         // 625
		return this.optional(element) || /^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)6((\s|\s?\-\s?)?[0-9]){8}$/.test(value);
	}, "Please specify a valid mobile number");                                                                           // 627
                                                                                                                       //
	/* For UK phone functions, do the following server side processing:                                                   //
  * Compare original input with this RegEx pattern:                                                                    //
  * ^\(?(?:(?:00\)?[\s\-]?\(?|\+)(44)\)?[\s\-]?\(?(?:0\)?[\s\-]?\(?)?|0)([1-9]\d{1,4}\)?[\s\d\-]+)$                    //
  * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'                             //
  * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.                    //
  * A number of very detailed GB telephone number RegEx patterns can also be found at:                                 //
  * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers     //
  */                                                                                                                   //
	$.validator.addMethod("mobileUK", function (phone_number, element) {                                                  // 637
		phone_number = phone_number.replace(/\(|\)|\s+|-/g, "");                                                             // 638
		return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(?:(?:(?:00\s?|\+)44\s?|0)7(?:[1345789]\d{2}|624)\s?\d{3}\s?\d{3})$/);
	}, "Please specify a valid mobile number");                                                                           // 641
                                                                                                                       //
	/*                                                                                                                    //
  * The número de identidad de extranjero ( NIE )is a code used to identify the non-nationals in Spain                 //
  */                                                                                                                   //
	$.validator.addMethod("nieES", function (value) {                                                                     // 646
		"use strict";                                                                                                        // 647
                                                                                                                       //
		value = value.toUpperCase();                                                                                         // 649
                                                                                                                       //
		// Basic format test                                                                                                 //
		if (!value.match("((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)")) {                      // 652
			return false;                                                                                                       // 653
		}                                                                                                                    // 654
                                                                                                                       //
		// Test NIE                                                                                                          //
		//T                                                                                                                  //
		if (/^[T]{1}/.test(value)) {                                                                                         // 658
			return value[8] === /^[T]{1}[A-Z0-9]{8}$/.test(value);                                                              // 659
		}                                                                                                                    // 660
                                                                                                                       //
		//XYZ                                                                                                                //
		if (/^[XYZ]{1}/.test(value)) {                                                                                       // 663
			return value[8] === "TRWAGMYFPDXBNJZSQVHLCKE".charAt(value.replace("X", "0").replace("Y", "1").replace("Z", "2").substring(0, 8) % 23);
		}                                                                                                                    // 672
                                                                                                                       //
		return false;                                                                                                        // 674
	}, "Please specify a valid NIE number.");                                                                             // 676
                                                                                                                       //
	/*                                                                                                                    //
  * The Número de Identificación Fiscal ( NIF ) is the way tax identification used in Spain for individuals            //
  */                                                                                                                   //
	$.validator.addMethod("nifES", function (value) {                                                                     // 681
		"use strict";                                                                                                        // 682
                                                                                                                       //
		value = value.toUpperCase();                                                                                         // 684
                                                                                                                       //
		// Basic format test                                                                                                 //
		if (!value.match("((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)")) {                      // 687
			return false;                                                                                                       // 688
		}                                                                                                                    // 689
                                                                                                                       //
		// Test NIF                                                                                                          //
		if (/^[0-9]{8}[A-Z]{1}$/.test(value)) {                                                                              // 692
			return "TRWAGMYFPDXBNJZSQVHLCKE".charAt(value.substring(8, 0) % 23) === value.charAt(8);                            // 693
		}                                                                                                                    // 694
                                                                                                                       //
		// Test specials NIF (starts with K, L or M)                                                                         //
		if (/^[KLM]{1}/.test(value)) {                                                                                       // 697
			return value[8] === String.fromCharCode(64);                                                                        // 698
		}                                                                                                                    // 699
                                                                                                                       //
		return false;                                                                                                        // 701
	}, "Please specify a valid NIF number.");                                                                             // 703
                                                                                                                       //
	jQuery.validator.addMethod("notEqualTo", function (value, element, param) {                                           // 705
		return this.optional(element) || !$.validator.methods.equalTo.call(this, value, element, param);                     // 706
	}, "Please enter a different value, values must not be the same.");                                                   // 707
                                                                                                                       //
	$.validator.addMethod("nowhitespace", function (value, element) {                                                     // 709
		return this.optional(element) || /^\S+$/i.test(value);                                                               // 710
	}, "No white space please");                                                                                          // 711
                                                                                                                       //
	/**                                                                                                                   //
 * Return true if the field value matches the given format RegExp                                                      //
 *                                                                                                                     //
 * @example $.validator.methods.pattern("AR1004",element,/^AR\d{4}$/)                                                  //
 * @result true                                                                                                        //
 *                                                                                                                     //
 * @example $.validator.methods.pattern("BR1004",element,/^AR\d{4}$/)                                                  //
 * @result false                                                                                                       //
 *                                                                                                                     //
 * @name $.validator.methods.pattern                                                                                   //
 * @type Boolean                                                                                                       //
 * @cat Plugins/Validate/Methods                                                                                       //
 */                                                                                                                    //
	$.validator.addMethod("pattern", function (value, element, param) {                                                   // 726
		if (this.optional(element)) {                                                                                        // 727
			return true;                                                                                                        // 728
		}                                                                                                                    // 729
		if (typeof param === "string") {                                                                                     // 730
			param = new RegExp("^(?:" + param + ")$");                                                                          // 731
		}                                                                                                                    // 732
		return param.test(value);                                                                                            // 733
	}, "Invalid format.");                                                                                                // 734
                                                                                                                       //
	/**                                                                                                                   //
  * Dutch phone numbers have 10 digits (or 11 and start with +31).                                                     //
  */                                                                                                                   //
	$.validator.addMethod("phoneNL", function (value, element) {                                                          // 739
		return this.optional(element) || /^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)[1-9]((\s|\s?\-\s?)?[0-9]){8}$/.test(value);
	}, "Please specify a valid phone number.");                                                                           // 741
                                                                                                                       //
	/* For UK phone functions, do the following server side processing:                                                   //
  * Compare original input with this RegEx pattern:                                                                    //
  * ^\(?(?:(?:00\)?[\s\-]?\(?|\+)(44)\)?[\s\-]?\(?(?:0\)?[\s\-]?\(?)?|0)([1-9]\d{1,4}\)?[\s\d\-]+)$                    //
  * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'                             //
  * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.                    //
  * A number of very detailed GB telephone number RegEx patterns can also be found at:                                 //
  * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers     //
  */                                                                                                                   //
	$.validator.addMethod("phoneUK", function (phone_number, element) {                                                   // 751
		phone_number = phone_number.replace(/\(|\)|\s+|-/g, "");                                                             // 752
		return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(?:(?:(?:00\s?|\+)44\s?)|(?:\(?0))(?:\d{2}\)?\s?\d{4}\s?\d{4}|\d{3}\)?\s?\d{3}\s?\d{3,4}|\d{4}\)?\s?(?:\d{5}|\d{3}\s?\d{3})|\d{5}\)?\s?\d{4,5})$/);
	}, "Please specify a valid phone number");                                                                            // 755
                                                                                                                       //
	/**                                                                                                                   //
  * Matches US phone number format                                                                                     //
  *                                                                                                                    //
  * where the area code may not start with 1 and the prefix may not start with 1                                       //
  * allows '-' or ' ' as a separator and allows parens around area code                                                //
  * some people may want to put a '1' in front of their number                                                         //
  *                                                                                                                    //
  * 1(212)-999-2345 or                                                                                                 //
  * 212 999 2344 or                                                                                                    //
  * 212-999-0983                                                                                                       //
  *                                                                                                                    //
  * but not                                                                                                            //
  * 111-123-5434                                                                                                       //
  * and not                                                                                                            //
  * 212 123 4567                                                                                                       //
  */                                                                                                                   //
	$.validator.addMethod("phoneUS", function (phone_number, element) {                                                   // 773
		phone_number = phone_number.replace(/\s+/g, "");                                                                     // 774
		return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(\+?1-?)?(\([2-9]([02-9]\d|1[02-9])\)|[2-9]([02-9]\d|1[02-9]))-?[2-9]([02-9]\d|1[02-9])-?\d{4}$/);
	}, "Please specify a valid phone number");                                                                            // 777
                                                                                                                       //
	/* For UK phone functions, do the following server side processing:                                                   //
  * Compare original input with this RegEx pattern:                                                                    //
  * ^\(?(?:(?:00\)?[\s\-]?\(?|\+)(44)\)?[\s\-]?\(?(?:0\)?[\s\-]?\(?)?|0)([1-9]\d{1,4}\)?[\s\d\-]+)$                    //
  * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'                             //
  * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.                    //
  * A number of very detailed GB telephone number RegEx patterns can also be found at:                                 //
  * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers     //
  */                                                                                                                   //
                                                                                                                       //
	// Matches UK landline + mobile, accepting only 01-3 for landline or 07 for mobile to exclude many premium numbers    //
	$.validator.addMethod("phonesUK", function (phone_number, element) {                                                  // 789
		phone_number = phone_number.replace(/\(|\)|\s+|-/g, "");                                                             // 790
		return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(?:(?:(?:00\s?|\+)44\s?|0)(?:1\d{8,9}|[23]\d{9}|7(?:[1345789]\d{8}|624\d{6})))$/);
	}, "Please specify a valid uk phone number");                                                                         // 793
                                                                                                                       //
	/**                                                                                                                   //
  * Matches a valid Canadian Postal Code                                                                               //
  *                                                                                                                    //
  * @example jQuery.validator.methods.postalCodeCA( "H0H 0H0", element )                                               //
  * @result true                                                                                                       //
  *                                                                                                                    //
  * @example jQuery.validator.methods.postalCodeCA( "H0H0H0", element )                                                //
  * @result false                                                                                                      //
  *                                                                                                                    //
  * @name jQuery.validator.methods.postalCodeCA                                                                        //
  * @type Boolean                                                                                                      //
  * @cat Plugins/Validate/Methods                                                                                      //
  */                                                                                                                   //
	$.validator.addMethod("postalCodeCA", function (value, element) {                                                     // 808
		return this.optional(element) || /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJKLMNPRSTVWXYZ] *\d[ABCEGHJKLMNPRSTVWXYZ]\d$/i.test(value);
	}, "Please specify a valid postal code");                                                                             // 810
                                                                                                                       //
	/*                                                                                                                    //
 * Valida CEPs do brasileiros:                                                                                         //
 *                                                                                                                     //
 * Formatos aceitos:                                                                                                   //
 * 99999-999                                                                                                           //
 * 99.999-999                                                                                                          //
 * 99999999                                                                                                            //
 */                                                                                                                    //
	$.validator.addMethod("postalcodeBR", function (cep_value, element) {                                                 // 820
		return this.optional(element) || /^\d{2}.\d{3}-\d{3}?$|^\d{5}-?\d{3}?$/.test(cep_value);                             // 821
	}, "Informe um CEP válido.");                                                                                         // 822
                                                                                                                       //
	/* Matches Italian postcode (CAP) */                                                                                  //
	$.validator.addMethod("postalcodeIT", function (value, element) {                                                     // 825
		return this.optional(element) || /^\d{5}$/.test(value);                                                              // 826
	}, "Please specify a valid postal code");                                                                             // 827
                                                                                                                       //
	$.validator.addMethod("postalcodeNL", function (value, element) {                                                     // 829
		return this.optional(element) || /^[1-9][0-9]{3}\s?[a-zA-Z]{2}$/.test(value);                                        // 830
	}, "Please specify a valid postal code");                                                                             // 831
                                                                                                                       //
	// Matches UK postcode. Does not match to UK Channel Islands that have their own postcodes (non standard UK)          //
	$.validator.addMethod("postcodeUK", function (value, element) {                                                       // 834
		return this.optional(element) || /^((([A-PR-UWYZ][0-9])|([A-PR-UWYZ][0-9][0-9])|([A-PR-UWYZ][A-HK-Y][0-9])|([A-PR-UWYZ][A-HK-Y][0-9][0-9])|([A-PR-UWYZ][0-9][A-HJKSTUW])|([A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRVWXY]))\s?([0-9][ABD-HJLNP-UW-Z]{2})|(GIR)\s?(0AA))$/i.test(value);
	}, "Please specify a valid UK postcode");                                                                             // 836
                                                                                                                       //
	/*                                                                                                                    //
  * Lets you say "at least X inputs that match selector Y must be filled."                                             //
  *                                                                                                                    //
  * The end result is that neither of these inputs:                                                                    //
  *                                                                                                                    //
  *	<input class="productinfo" name="partnumber">                                                                      //
  *	<input class="productinfo" name="description">                                                                     //
  *                                                                                                                    //
  *	...will validate unless at least one of them is filled.                                                            //
  *                                                                                                                    //
  * partnumber:	{require_from_group: [1,".productinfo"]},                                                              //
  * description: {require_from_group: [1,".productinfo"]}                                                              //
  *                                                                                                                    //
  * options[0]: number of fields that must be filled in the group                                                      //
  * options[1]: CSS selector that defines the group of conditionally required fields                                   //
  */                                                                                                                   //
	$.validator.addMethod("require_from_group", function (value, element, options) {                                      // 854
		var $fields = $(options[1], element.form),                                                                           // 855
		    $fieldsFirst = $fields.eq(0),                                                                                    // 855
		    validator = $fieldsFirst.data("valid_req_grp") ? $fieldsFirst.data("valid_req_grp") : $.extend({}, this),        // 855
		    isValid = $fields.filter(function () {                                                                           // 855
			return validator.elementValue(this);                                                                                // 859
		}).length >= options[0];                                                                                             // 860
                                                                                                                       //
		// Store the cloned validator for future validation                                                                  //
		$fieldsFirst.data("valid_req_grp", validator);                                                                       // 863
                                                                                                                       //
		// If element isn't being validated, run each require_from_group field's validation rules                            //
		if (!$(element).data("being_validated")) {                                                                           // 866
			$fields.data("being_validated", true);                                                                              // 867
			$fields.each(function () {                                                                                          // 868
				validator.element(this);                                                                                           // 869
			});                                                                                                                 // 870
			$fields.data("being_validated", false);                                                                             // 871
		}                                                                                                                    // 872
		return isValid;                                                                                                      // 873
	}, $.validator.format("Please fill at least {0} of these fields."));                                                  // 874
                                                                                                                       //
	/*                                                                                                                    //
  * Lets you say "either at least X inputs that match selector Y must be filled,                                       //
  * OR they must all be skipped (left blank)."                                                                         //
  *                                                                                                                    //
  * The end result, is that none of these inputs:                                                                      //
  *                                                                                                                    //
  *	<input class="productinfo" name="partnumber">                                                                      //
  *	<input class="productinfo" name="description">                                                                     //
  *	<input class="productinfo" name="color">                                                                           //
  *                                                                                                                    //
  *	...will validate unless either at least two of them are filled,                                                    //
  *	OR none of them are.                                                                                               //
  *                                                                                                                    //
  * partnumber:	{skip_or_fill_minimum: [2,".productinfo"]},                                                            //
  * description: {skip_or_fill_minimum: [2,".productinfo"]},                                                           //
  * color:		{skip_or_fill_minimum: [2,".productinfo"]}                                                                 //
  *                                                                                                                    //
  * options[0]: number of fields that must be filled in the group                                                      //
  * options[1]: CSS selector that defines the group of conditionally required fields                                   //
  *                                                                                                                    //
  */                                                                                                                   //
	$.validator.addMethod("skip_or_fill_minimum", function (value, element, options) {                                    // 897
		var $fields = $(options[1], element.form),                                                                           // 898
		    $fieldsFirst = $fields.eq(0),                                                                                    // 898
		    validator = $fieldsFirst.data("valid_skip") ? $fieldsFirst.data("valid_skip") : $.extend({}, this),              // 898
		    numberFilled = $fields.filter(function () {                                                                      // 898
			return validator.elementValue(this);                                                                                // 902
		}).length,                                                                                                           // 903
		    isValid = numberFilled === 0 || numberFilled >= options[0];                                                      // 898
                                                                                                                       //
		// Store the cloned validator for future validation                                                                  //
		$fieldsFirst.data("valid_skip", validator);                                                                          // 907
                                                                                                                       //
		// If element isn't being validated, run each skip_or_fill_minimum field's validation rules                          //
		if (!$(element).data("being_validated")) {                                                                           // 910
			$fields.data("being_validated", true);                                                                              // 911
			$fields.each(function () {                                                                                          // 912
				validator.element(this);                                                                                           // 913
			});                                                                                                                 // 914
			$fields.data("being_validated", false);                                                                             // 915
		}                                                                                                                    // 916
		return isValid;                                                                                                      // 917
	}, $.validator.format("Please either skip these fields or fill at least {0} of them."));                              // 918
                                                                                                                       //
	/* Validates US States and/or Territories by @jdforsythe                                                              //
  * Can be case insensitive or require capitalization - default is case insensitive                                    //
  * Can include US Territories or not - default does not                                                               //
  * Can include US Military postal abbreviations (AA, AE, AP) - default does not                                       //
  *                                                                                                                    //
  * Note: "States" always includes DC (District of Colombia)                                                           //
  *                                                                                                                    //
  * Usage examples:                                                                                                    //
  *                                                                                                                    //
  *  This is the default - case insensitive, no territories, no military zones                                         //
  *  stateInput: {                                                                                                     //
  *     caseSensitive: false,                                                                                          //
  *     includeTerritories: false,                                                                                     //
  *     includeMilitary: false                                                                                         //
  *  }                                                                                                                 //
  *                                                                                                                    //
  *  Only allow capital letters, no territories, no military zones                                                     //
  *  stateInput: {                                                                                                     //
  *     caseSensitive: false                                                                                           //
  *  }                                                                                                                 //
  *                                                                                                                    //
  *  Case insensitive, include territories but not military zones                                                      //
  *  stateInput: {                                                                                                     //
  *     includeTerritories: true                                                                                       //
  *  }                                                                                                                 //
  *                                                                                                                    //
  *  Only allow capital letters, include territories and military zones                                                //
  *  stateInput: {                                                                                                     //
  *     caseSensitive: true,                                                                                           //
  *     includeTerritories: true,                                                                                      //
  *     includeMilitary: true                                                                                          //
  *  }                                                                                                                 //
  *                                                                                                                    //
  */                                                                                                                   //
	$.validator.addMethod("stateUS", function (value, element, options) {                                                 // 954
		var isDefault = typeof options === "undefined",                                                                      // 955
		    caseSensitive = isDefault || typeof options.caseSensitive === "undefined" ? false : options.caseSensitive,       // 955
		    includeTerritories = isDefault || typeof options.includeTerritories === "undefined" ? false : options.includeTerritories,
		    includeMilitary = isDefault || typeof options.includeMilitary === "undefined" ? false : options.includeMilitary,
		    regex;                                                                                                           // 955
                                                                                                                       //
		if (!includeTerritories && !includeMilitary) {                                                                       // 961
			regex = "^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$";
		} else if (includeTerritories && includeMilitary) {                                                                  // 963
			regex = "^(A[AEKLPRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$";
		} else if (includeTerritories) {                                                                                     // 965
			regex = "^(A[KLRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$";
		} else {                                                                                                             // 967
			regex = "^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$";
		}                                                                                                                    // 969
                                                                                                                       //
		regex = caseSensitive ? new RegExp(regex) : new RegExp(regex, "i");                                                  // 971
		return this.optional(element) || regex.test(value);                                                                  // 972
	}, "Please specify a valid state");                                                                                   // 973
                                                                                                                       //
	// TODO check if value starts with <, otherwise don't try stripping anything                                          //
	$.validator.addMethod("strippedminlength", function (value, element, param) {                                         // 976
		return $(value).text().length >= param;                                                                              // 977
	}, $.validator.format("Please enter at least {0} characters"));                                                       // 978
                                                                                                                       //
	$.validator.addMethod("time", function (value, element) {                                                             // 980
		return this.optional(element) || /^([01]\d|2[0-3]|[0-9])(:[0-5]\d){1,2}$/.test(value);                               // 981
	}, "Please enter a valid time, between 00:00 and 23:59");                                                             // 982
                                                                                                                       //
	$.validator.addMethod("time12h", function (value, element) {                                                          // 984
		return this.optional(element) || /^((0?[1-9]|1[012])(:[0-5]\d){1,2}(\ ?[AP]M))$/i.test(value);                       // 985
	}, "Please enter a valid time in 12-hour am/pm format");                                                              // 986
                                                                                                                       //
	// Same as url, but TLD is optional                                                                                   //
	$.validator.addMethod("url2", function (value, element) {                                                             // 989
		return this.optional(element) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)*(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
	}, $.validator.messages.url);                                                                                         // 991
                                                                                                                       //
	/**                                                                                                                   //
  * Return true, if the value is a valid vehicle identification number (VIN).                                          //
  *                                                                                                                    //
  * Works with all kind of text inputs.                                                                                //
  *                                                                                                                    //
  * @example <input type="text" size="20" name="VehicleID" class="{required:true,vinUS:true}" />                       //
  * @desc Declares a required input element whose value must be a valid vehicle identification number.                 //
  *                                                                                                                    //
  * @name $.validator.methods.vinUS                                                                                    //
  * @type Boolean                                                                                                      //
  * @cat Plugins/Validate/Methods                                                                                      //
  */                                                                                                                   //
	$.validator.addMethod("vinUS", function (v) {                                                                         // 1005
		if (v.length !== 17) {                                                                                               // 1006
			return false;                                                                                                       // 1007
		}                                                                                                                    // 1008
                                                                                                                       //
		var LL = ["A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "P", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"],
		    VL = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9],                                      // 1010
		    FL = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2],                                                       // 1010
		    rs = 0,                                                                                                          // 1010
		    i,                                                                                                               // 1010
		    n,                                                                                                               // 1010
		    d,                                                                                                               // 1010
		    f,                                                                                                               // 1010
		    cd,                                                                                                              // 1010
		    cdv;                                                                                                             // 1010
                                                                                                                       //
		for (i = 0; i < 17; i++) {                                                                                           // 1016
			f = FL[i];                                                                                                          // 1017
			d = v.slice(i, i + 1);                                                                                              // 1018
			if (i === 8) {                                                                                                      // 1019
				cdv = d;                                                                                                           // 1020
			}                                                                                                                   // 1021
			if (!isNaN(d)) {                                                                                                    // 1022
				d *= f;                                                                                                            // 1023
			} else {                                                                                                            // 1024
				for (n = 0; n < LL.length; n++) {                                                                                  // 1025
					if (d.toUpperCase() === LL[n]) {                                                                                  // 1026
						d = VL[n];                                                                                                       // 1027
						d *= f;                                                                                                          // 1028
						if (isNaN(cdv) && n === 8) {                                                                                     // 1029
							cdv = LL[n];                                                                                                    // 1030
						}                                                                                                                // 1031
						break;                                                                                                           // 1032
					}                                                                                                                 // 1033
				}                                                                                                                  // 1034
			}                                                                                                                   // 1035
			rs += d;                                                                                                            // 1036
		}                                                                                                                    // 1037
		cd = rs % 11;                                                                                                        // 1038
		if (cd === 10) {                                                                                                     // 1039
			cd = "X";                                                                                                           // 1040
		}                                                                                                                    // 1041
		if (cd === cdv) {                                                                                                    // 1042
			return true;                                                                                                        // 1043
		}                                                                                                                    // 1044
		return false;                                                                                                        // 1045
	}, "The specified vehicle identification number (VIN) is invalid.");                                                  // 1046
                                                                                                                       //
	$.validator.addMethod("zipcodeUS", function (value, element) {                                                        // 1048
		return this.optional(element) || /^\d{5}(-\d{4})?$/.test(value);                                                     // 1049
	}, "The specified US ZIP Code is invalid");                                                                           // 1050
                                                                                                                       //
	$.validator.addMethod("ziprange", function (value, element) {                                                         // 1052
		return this.optional(element) || /^90[2-5]\d\{2\}-\d{4}$/.test(value);                                               // 1053
	}, "Your ZIP-code must be in the range 902xx-xxxx to 905xx-xxxx");                                                    // 1054
});                                                                                                                    // 1056
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"additional-methods.min.js":["jquery",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/dist/additional-methods.min.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*! jQuery Validation Plugin - v1.15.0 - 2/24/2016                                                                     // 1
 * http://jqueryvalidation.org/                                                                                        // 2
 * Copyright (c) 2016 Jörn Zaefferer; Licensed MIT */                                                                  // 3
!function(a){"function"==typeof define&&define.amd?define(["jquery","./jquery.validate.min"],a):"object"==typeof module&&module.exports?module.exports=a(require("jquery")):a(jQuery)}(function(a){!function(){function b(a){return a.replace(/<.[^<>]*?>/g," ").replace(/&nbsp;|&#160;/gi," ").replace(/[.(),;:!?%#$'\"_+=\/\-“”’]*/g,"")}a.validator.addMethod("maxWords",function(a,c,d){return this.optional(c)||b(a).match(/\b\w+\b/g).length<=d},a.validator.format("Please enter {0} words or less.")),a.validator.addMethod("minWords",function(a,c,d){return this.optional(c)||b(a).match(/\b\w+\b/g).length>=d},a.validator.format("Please enter at least {0} words.")),a.validator.addMethod("rangeWords",function(a,c,d){var e=b(a),f=/\b\w+\b/g;return this.optional(c)||e.match(f).length>=d[0]&&e.match(f).length<=d[1]},a.validator.format("Please enter between {0} and {1} words."))}(),a.validator.addMethod("accept",function(b,c,d){var e,f,g,h="string"==typeof d?d.replace(/\s/g,""):"image/*",i=this.optional(c);if(i)return i;if("file"===a(c).attr("type")&&(h=h.replace(/[\-\[\]\/\{\}\(\)\+\?\.\\\^\$\|]/g,"\\$&").replace(/,/g,"|").replace("/*","/.*"),c.files&&c.files.length))for(g=new RegExp(".?("+h+")$","i"),e=0;e<c.files.length;e++)if(f=c.files[e],!f.type.match(g))return!1;return!0},a.validator.format("Please enter a value with a valid mimetype.")),a.validator.addMethod("alphanumeric",function(a,b){return this.optional(b)||/^\w+$/i.test(a)},"Letters, numbers, and underscores only please"),a.validator.addMethod("bankaccountNL",function(a,b){if(this.optional(b))return!0;if(!/^[0-9]{9}|([0-9]{2} ){3}[0-9]{3}$/.test(a))return!1;var c,d,e,f=a.replace(/ /g,""),g=0,h=f.length;for(c=0;h>c;c++)d=h-c,e=f.substring(c,c+1),g+=d*e;return g%11===0},"Please specify a valid bank account number"),a.validator.addMethod("bankorgiroaccountNL",function(b,c){return this.optional(c)||a.validator.methods.bankaccountNL.call(this,b,c)||a.validator.methods.giroaccountNL.call(this,b,c)},"Please specify a valid bank or giro account number"),a.validator.addMethod("bic",function(a,b){return this.optional(b)||/^([A-Z]{6}[A-Z2-9][A-NP-Z1-9])(X{3}|[A-WY-Z0-9][A-Z0-9]{2})?$/.test(a.toUpperCase())},"Please specify a valid BIC code"),a.validator.addMethod("cifES",function(a){"use strict";var b,c,d,e,f,g,h=[];if(a=a.toUpperCase(),!a.match("((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)"))return!1;for(d=0;9>d;d++)h[d]=parseInt(a.charAt(d),10);for(c=h[2]+h[4]+h[6],e=1;8>e;e+=2)f=(2*h[e]).toString(),g=f.charAt(1),c+=parseInt(f.charAt(0),10)+(""===g?0:parseInt(g,10));return/^[ABCDEFGHJNPQRSUVW]{1}/.test(a)?(c+="",b=10-parseInt(c.charAt(c.length-1),10),a+=b,h[8].toString()===String.fromCharCode(64+b)||h[8].toString()===a.charAt(a.length-1)):!1},"Please specify a valid CIF number."),a.validator.addMethod("cpfBR",function(a){if(a=a.replace(/([~!@#$%^&*()_+=`{}\[\]\-|\\:;'<>,.\/? ])+/g,""),11!==a.length)return!1;var b,c,d,e,f=0;if(b=parseInt(a.substring(9,10),10),c=parseInt(a.substring(10,11),10),d=function(a,b){var c=10*a%11;return 10!==c&&11!==c||(c=0),c===b},""===a||"00000000000"===a||"11111111111"===a||"22222222222"===a||"33333333333"===a||"44444444444"===a||"55555555555"===a||"66666666666"===a||"77777777777"===a||"88888888888"===a||"99999999999"===a)return!1;for(e=1;9>=e;e++)f+=parseInt(a.substring(e-1,e),10)*(11-e);if(d(f,b)){for(f=0,e=1;10>=e;e++)f+=parseInt(a.substring(e-1,e),10)*(12-e);return d(f,c)}return!1},"Please specify a valid CPF number"),a.validator.addMethod("creditcard",function(a,b){if(this.optional(b))return"dependency-mismatch";if(/[^0-9 \-]+/.test(a))return!1;var c,d,e=0,f=0,g=!1;if(a=a.replace(/\D/g,""),a.length<13||a.length>19)return!1;for(c=a.length-1;c>=0;c--)d=a.charAt(c),f=parseInt(d,10),g&&(f*=2)>9&&(f-=9),e+=f,g=!g;return e%10===0},"Please enter a valid credit card number."),a.validator.addMethod("creditcardtypes",function(a,b,c){if(/[^0-9\-]+/.test(a))return!1;a=a.replace(/\D/g,"");var d=0;return c.mastercard&&(d|=1),c.visa&&(d|=2),c.amex&&(d|=4),c.dinersclub&&(d|=8),c.enroute&&(d|=16),c.discover&&(d|=32),c.jcb&&(d|=64),c.unknown&&(d|=128),c.all&&(d=255),1&d&&/^(5[12345])/.test(a)?16===a.length:2&d&&/^(4)/.test(a)?16===a.length:4&d&&/^(3[47])/.test(a)?15===a.length:8&d&&/^(3(0[012345]|[68]))/.test(a)?14===a.length:16&d&&/^(2(014|149))/.test(a)?15===a.length:32&d&&/^(6011)/.test(a)?16===a.length:64&d&&/^(3)/.test(a)?16===a.length:64&d&&/^(2131|1800)/.test(a)?15===a.length:!!(128&d)},"Please enter a valid credit card number."),a.validator.addMethod("currency",function(a,b,c){var d,e="string"==typeof c,f=e?c:c[0],g=e?!0:c[1];return f=f.replace(/,/g,""),f=g?f+"]":f+"]?",d="^["+f+"([1-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$",d=new RegExp(d),this.optional(b)||d.test(a)},"Please specify a valid currency"),a.validator.addMethod("dateFA",function(a,b){return this.optional(b)||/^[1-4]\d{3}\/((0?[1-6]\/((3[0-1])|([1-2][0-9])|(0?[1-9])))|((1[0-2]|(0?[7-9]))\/(30|([1-2][0-9])|(0?[1-9]))))$/.test(a)},a.validator.messages.date),a.validator.addMethod("dateITA",function(a,b){var c,d,e,f,g,h=!1,i=/^\d{1,2}\/\d{1,2}\/\d{4}$/;return i.test(a)?(c=a.split("/"),d=parseInt(c[0],10),e=parseInt(c[1],10),f=parseInt(c[2],10),g=new Date(Date.UTC(f,e-1,d,12,0,0,0)),h=g.getUTCFullYear()===f&&g.getUTCMonth()===e-1&&g.getUTCDate()===d):h=!1,this.optional(b)||h},a.validator.messages.date),a.validator.addMethod("dateNL",function(a,b){return this.optional(b)||/^(0?[1-9]|[12]\d|3[01])[\.\/\-](0?[1-9]|1[012])[\.\/\-]([12]\d)?(\d\d)$/.test(a)},a.validator.messages.date),a.validator.addMethod("extension",function(a,b,c){return c="string"==typeof c?c.replace(/,/g,"|"):"png|jpe?g|gif",this.optional(b)||a.match(new RegExp("\\.("+c+")$","i"))},a.validator.format("Please enter a value with a valid extension.")),a.validator.addMethod("giroaccountNL",function(a,b){return this.optional(b)||/^[0-9]{1,7}$/.test(a)},"Please specify a valid giro account number"),a.validator.addMethod("iban",function(a,b){if(this.optional(b))return!0;var c,d,e,f,g,h,i,j,k,l=a.replace(/ /g,"").toUpperCase(),m="",n=!0,o="",p="";if(c=l.substring(0,2),h={AL:"\\d{8}[\\dA-Z]{16}",AD:"\\d{8}[\\dA-Z]{12}",AT:"\\d{16}",AZ:"[\\dA-Z]{4}\\d{20}",BE:"\\d{12}",BH:"[A-Z]{4}[\\dA-Z]{14}",BA:"\\d{16}",BR:"\\d{23}[A-Z][\\dA-Z]",BG:"[A-Z]{4}\\d{6}[\\dA-Z]{8}",CR:"\\d{17}",HR:"\\d{17}",CY:"\\d{8}[\\dA-Z]{16}",CZ:"\\d{20}",DK:"\\d{14}",DO:"[A-Z]{4}\\d{20}",EE:"\\d{16}",FO:"\\d{14}",FI:"\\d{14}",FR:"\\d{10}[\\dA-Z]{11}\\d{2}",GE:"[\\dA-Z]{2}\\d{16}",DE:"\\d{18}",GI:"[A-Z]{4}[\\dA-Z]{15}",GR:"\\d{7}[\\dA-Z]{16}",GL:"\\d{14}",GT:"[\\dA-Z]{4}[\\dA-Z]{20}",HU:"\\d{24}",IS:"\\d{22}",IE:"[\\dA-Z]{4}\\d{14}",IL:"\\d{19}",IT:"[A-Z]\\d{10}[\\dA-Z]{12}",KZ:"\\d{3}[\\dA-Z]{13}",KW:"[A-Z]{4}[\\dA-Z]{22}",LV:"[A-Z]{4}[\\dA-Z]{13}",LB:"\\d{4}[\\dA-Z]{20}",LI:"\\d{5}[\\dA-Z]{12}",LT:"\\d{16}",LU:"\\d{3}[\\dA-Z]{13}",MK:"\\d{3}[\\dA-Z]{10}\\d{2}",MT:"[A-Z]{4}\\d{5}[\\dA-Z]{18}",MR:"\\d{23}",MU:"[A-Z]{4}\\d{19}[A-Z]{3}",MC:"\\d{10}[\\dA-Z]{11}\\d{2}",MD:"[\\dA-Z]{2}\\d{18}",ME:"\\d{18}",NL:"[A-Z]{4}\\d{10}",NO:"\\d{11}",PK:"[\\dA-Z]{4}\\d{16}",PS:"[\\dA-Z]{4}\\d{21}",PL:"\\d{24}",PT:"\\d{21}",RO:"[A-Z]{4}[\\dA-Z]{16}",SM:"[A-Z]\\d{10}[\\dA-Z]{12}",SA:"\\d{2}[\\dA-Z]{18}",RS:"\\d{18}",SK:"\\d{20}",SI:"\\d{15}",ES:"\\d{20}",SE:"\\d{20}",CH:"\\d{5}[\\dA-Z]{12}",TN:"\\d{20}",TR:"\\d{5}[\\dA-Z]{17}",AE:"\\d{3}\\d{16}",GB:"[A-Z]{4}\\d{14}",VG:"[\\dA-Z]{4}\\d{16}"},g=h[c],"undefined"!=typeof g&&(i=new RegExp("^[A-Z]{2}\\d{2}"+g+"$",""),!i.test(l)))return!1;for(d=l.substring(4,l.length)+l.substring(0,4),j=0;j<d.length;j++)e=d.charAt(j),"0"!==e&&(n=!1),n||(m+="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(e));for(k=0;k<m.length;k++)f=m.charAt(k),p=""+o+f,o=p%97;return 1===o},"Please specify a valid IBAN"),a.validator.addMethod("integer",function(a,b){return this.optional(b)||/^-?\d+$/.test(a)},"A positive or negative non-decimal number please"),a.validator.addMethod("ipv4",function(a,b){return this.optional(b)||/^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i.test(a)},"Please enter a valid IP v4 address."),a.validator.addMethod("ipv6",function(a,b){return this.optional(b)||/^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(a)},"Please enter a valid IP v6 address."),a.validator.addMethod("lettersonly",function(a,b){return this.optional(b)||/^[a-z]+$/i.test(a)},"Letters only please"),a.validator.addMethod("letterswithbasicpunc",function(a,b){return this.optional(b)||/^[a-z\-.,()'"\s]+$/i.test(a)},"Letters or punctuation only please"),a.validator.addMethod("mobileNL",function(a,b){return this.optional(b)||/^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)6((\s|\s?\-\s?)?[0-9]){8}$/.test(a)},"Please specify a valid mobile number"),a.validator.addMethod("mobileUK",function(a,b){return a=a.replace(/\(|\)|\s+|-/g,""),this.optional(b)||a.length>9&&a.match(/^(?:(?:(?:00\s?|\+)44\s?|0)7(?:[1345789]\d{2}|624)\s?\d{3}\s?\d{3})$/)},"Please specify a valid mobile number"),a.validator.addMethod("nieES",function(a){"use strict";return a=a.toUpperCase(),a.match("((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)")?/^[T]{1}/.test(a)?a[8]===/^[T]{1}[A-Z0-9]{8}$/.test(a):/^[XYZ]{1}/.test(a)?a[8]==="TRWAGMYFPDXBNJZSQVHLCKE".charAt(a.replace("X","0").replace("Y","1").replace("Z","2").substring(0,8)%23):!1:!1},"Please specify a valid NIE number."),a.validator.addMethod("nifES",function(a){"use strict";return a=a.toUpperCase(),a.match("((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)")?/^[0-9]{8}[A-Z]{1}$/.test(a)?"TRWAGMYFPDXBNJZSQVHLCKE".charAt(a.substring(8,0)%23)===a.charAt(8):/^[KLM]{1}/.test(a)?a[8]===String.fromCharCode(64):!1:!1},"Please specify a valid NIF number."),jQuery.validator.addMethod("notEqualTo",function(b,c,d){return this.optional(c)||!a.validator.methods.equalTo.call(this,b,c,d)},"Please enter a different value, values must not be the same."),a.validator.addMethod("nowhitespace",function(a,b){return this.optional(b)||/^\S+$/i.test(a)},"No white space please"),a.validator.addMethod("pattern",function(a,b,c){return this.optional(b)?!0:("string"==typeof c&&(c=new RegExp("^(?:"+c+")$")),c.test(a))},"Invalid format."),a.validator.addMethod("phoneNL",function(a,b){return this.optional(b)||/^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)[1-9]((\s|\s?\-\s?)?[0-9]){8}$/.test(a)},"Please specify a valid phone number."),a.validator.addMethod("phoneUK",function(a,b){return a=a.replace(/\(|\)|\s+|-/g,""),this.optional(b)||a.length>9&&a.match(/^(?:(?:(?:00\s?|\+)44\s?)|(?:\(?0))(?:\d{2}\)?\s?\d{4}\s?\d{4}|\d{3}\)?\s?\d{3}\s?\d{3,4}|\d{4}\)?\s?(?:\d{5}|\d{3}\s?\d{3})|\d{5}\)?\s?\d{4,5})$/)},"Please specify a valid phone number"),a.validator.addMethod("phoneUS",function(a,b){return a=a.replace(/\s+/g,""),this.optional(b)||a.length>9&&a.match(/^(\+?1-?)?(\([2-9]([02-9]\d|1[02-9])\)|[2-9]([02-9]\d|1[02-9]))-?[2-9]([02-9]\d|1[02-9])-?\d{4}$/)},"Please specify a valid phone number"),a.validator.addMethod("phonesUK",function(a,b){return a=a.replace(/\(|\)|\s+|-/g,""),this.optional(b)||a.length>9&&a.match(/^(?:(?:(?:00\s?|\+)44\s?|0)(?:1\d{8,9}|[23]\d{9}|7(?:[1345789]\d{8}|624\d{6})))$/)},"Please specify a valid uk phone number"),a.validator.addMethod("postalCodeCA",function(a,b){return this.optional(b)||/^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJKLMNPRSTVWXYZ] *\d[ABCEGHJKLMNPRSTVWXYZ]\d$/i.test(a)},"Please specify a valid postal code"),a.validator.addMethod("postalcodeBR",function(a,b){return this.optional(b)||/^\d{2}.\d{3}-\d{3}?$|^\d{5}-?\d{3}?$/.test(a)},"Informe um CEP válido."),a.validator.addMethod("postalcodeIT",function(a,b){return this.optional(b)||/^\d{5}$/.test(a)},"Please specify a valid postal code"),a.validator.addMethod("postalcodeNL",function(a,b){return this.optional(b)||/^[1-9][0-9]{3}\s?[a-zA-Z]{2}$/.test(a)},"Please specify a valid postal code"),a.validator.addMethod("postcodeUK",function(a,b){return this.optional(b)||/^((([A-PR-UWYZ][0-9])|([A-PR-UWYZ][0-9][0-9])|([A-PR-UWYZ][A-HK-Y][0-9])|([A-PR-UWYZ][A-HK-Y][0-9][0-9])|([A-PR-UWYZ][0-9][A-HJKSTUW])|([A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRVWXY]))\s?([0-9][ABD-HJLNP-UW-Z]{2})|(GIR)\s?(0AA))$/i.test(a)},"Please specify a valid UK postcode"),a.validator.addMethod("require_from_group",function(b,c,d){var e=a(d[1],c.form),f=e.eq(0),g=f.data("valid_req_grp")?f.data("valid_req_grp"):a.extend({},this),h=e.filter(function(){return g.elementValue(this)}).length>=d[0];return f.data("valid_req_grp",g),a(c).data("being_validated")||(e.data("being_validated",!0),e.each(function(){g.element(this)}),e.data("being_validated",!1)),h},a.validator.format("Please fill at least {0} of these fields.")),a.validator.addMethod("skip_or_fill_minimum",function(b,c,d){var e=a(d[1],c.form),f=e.eq(0),g=f.data("valid_skip")?f.data("valid_skip"):a.extend({},this),h=e.filter(function(){return g.elementValue(this)}).length,i=0===h||h>=d[0];return f.data("valid_skip",g),a(c).data("being_validated")||(e.data("being_validated",!0),e.each(function(){g.element(this)}),e.data("being_validated",!1)),i},a.validator.format("Please either skip these fields or fill at least {0} of them.")),a.validator.addMethod("stateUS",function(a,b,c){var d,e="undefined"==typeof c,f=e||"undefined"==typeof c.caseSensitive?!1:c.caseSensitive,g=e||"undefined"==typeof c.includeTerritories?!1:c.includeTerritories,h=e||"undefined"==typeof c.includeMilitary?!1:c.includeMilitary;return d=g||h?g&&h?"^(A[AEKLPRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$":g?"^(A[KLRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$":"^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$":"^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$",d=f?new RegExp(d):new RegExp(d,"i"),this.optional(b)||d.test(a)},"Please specify a valid state"),a.validator.addMethod("strippedminlength",function(b,c,d){return a(b).text().length>=d},a.validator.format("Please enter at least {0} characters")),a.validator.addMethod("time",function(a,b){return this.optional(b)||/^([01]\d|2[0-3]|[0-9])(:[0-5]\d){1,2}$/.test(a)},"Please enter a valid time, between 00:00 and 23:59"),a.validator.addMethod("time12h",function(a,b){return this.optional(b)||/^((0?[1-9]|1[012])(:[0-5]\d){1,2}(\ ?[AP]M))$/i.test(a)},"Please enter a valid time in 12-hour am/pm format"),a.validator.addMethod("url2",function(a,b){return this.optional(b)||/^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)*(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(a)},a.validator.messages.url),a.validator.addMethod("vinUS",function(a){if(17!==a.length)return!1;var b,c,d,e,f,g,h=["A","B","C","D","E","F","G","H","J","K","L","M","N","P","R","S","T","U","V","W","X","Y","Z"],i=[1,2,3,4,5,6,7,8,1,2,3,4,5,7,9,2,3,4,5,6,7,8,9],j=[8,7,6,5,4,3,2,10,0,9,8,7,6,5,4,3,2],k=0;for(b=0;17>b;b++){if(e=j[b],d=a.slice(b,b+1),8===b&&(g=d),isNaN(d)){for(c=0;c<h.length;c++)if(d.toUpperCase()===h[c]){d=i[c],d*=e,isNaN(g)&&8===c&&(g=h[c]);break}}else d*=e;k+=d}return f=k%11,10===f&&(f="X"),f===g},"The specified vehicle identification number (VIN) is invalid."),a.validator.addMethod("zipcodeUS",function(a,b){return this.optional(b)||/^\d{5}(-\d{4})?$/.test(a)},"The specified US ZIP Code is invalid"),a.validator.addMethod("ziprange",function(a,b){return this.optional(b)||/^90[2-5]\d\{2\}-\d{4}$/.test(a)},"Your ZIP-code must be in the range 902xx-xxxx to 905xx-xxxx")});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"jquery.mask.min.js":["jquery",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/dist/jquery.mask.min.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// jQuery Mask Plugin v1.14.0                                                                                          // 1
// github.com/igorescobar/jQuery-Mask-Plugin                                                                           // 2
return;(function(b){"function"===typeof define&&define.amd?define(["jquery"],b):"object"===typeof exports?module.exports=b(require("jquery")):b(jQuery||Zepto)})(function(b){var y=function(a,e,d){var c={invalid:[],getCaret:function(){try{var r,b=0,e=a.get(0),d=document.selection,f=e.selectionStart;if(d&&-1===navigator.appVersion.indexOf("MSIE 10"))r=d.createRange(),r.moveStart("character",-c.val().length),b=r.text.length;else if(f||"0"===f)b=f;return b}catch(g){}},setCaret:function(r){try{if(a.is(":focus")){var c,
b=a.get(0);b.setSelectionRange?(b.focus(),b.setSelectionRange(r,r)):(c=b.createTextRange(),c.collapse(!0),c.moveEnd("character",r),c.moveStart("character",r),c.select())}}catch(e){}},events:function(){a.on("keydown.mask",function(c){a.data("mask-keycode",c.keyCode||c.which)}).on(b.jMaskGlobals.useInput?"input.mask":"keyup.mask",c.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){a.keydown().keyup()},100)}).on("change.mask",function(){a.data("changed",!0)}).on("blur.mask",function(){n===
c.val()||a.data("changed")||a.trigger("change");a.data("changed",!1)}).on("blur.mask",function(){n=c.val()}).on("focus.mask",function(a){!0===d.selectOnFocus&&b(a.target).select()}).on("focusout.mask",function(){d.clearIfNotMatch&&!p.test(c.val())&&c.val("")})},getRegexMask:function(){for(var a=[],c,b,d,f,l=0;l<e.length;l++)(c=g.translation[e.charAt(l)])?(b=c.pattern.toString().replace(/.{1}$|^.{1}/g,""),d=c.optional,(c=c.recursive)?(a.push(e.charAt(l)),f={digit:e.charAt(l),pattern:b}):a.push(d||
c?b+"?":b)):a.push(e.charAt(l).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));a=a.join("");f&&(a=a.replace(new RegExp("("+f.digit+"(.*"+f.digit+")?)"),"($1)?").replace(new RegExp(f.digit,"g"),f.pattern));return new RegExp(a)},destroyEvents:function(){a.off("input keydown keyup paste drop blur focusout ".split(" ").join(".mask "))},val:function(c){var b=a.is("input")?"val":"text";if(0<arguments.length){if(a[b]()!==c)a[b](c);b=a}else b=a[b]();return b},getMCharsBeforeCount:function(a,c){for(var b=0,d=0,
f=e.length;d<f&&d<a;d++)g.translation[e.charAt(d)]||(a=c?a+1:a,b++);return b},caretPos:function(a,b,d,h){return g.translation[e.charAt(Math.min(a-1,e.length-1))]?Math.min(a+d-b-h,d):c.caretPos(a+1,b,d,h)},behaviour:function(d){d=d||window.event;c.invalid=[];var e=a.data("mask-keycode");if(-1===b.inArray(e,g.byPassKeys)){var m=c.getCaret(),h=c.val().length,f=c.getMasked(),l=f.length,k=c.getMCharsBeforeCount(l-1)-c.getMCharsBeforeCount(h-1),n=m<h;c.val(f);n&&(8!==e&&46!==e&&(m=c.caretPos(m,h,l,k)),
c.setCaret(m));return c.callbacks(d)}},getMasked:function(a,b){var m=[],h=void 0===b?c.val():b+"",f=0,l=e.length,k=0,n=h.length,q=1,p="push",u=-1,t,w;d.reverse?(p="unshift",q=-1,t=0,f=l-1,k=n-1,w=function(){return-1<f&&-1<k}):(t=l-1,w=function(){return f<l&&k<n});for(;w();){var x=e.charAt(f),v=h.charAt(k),s=g.translation[x];if(s)v.match(s.pattern)?(m[p](v),s.recursive&&(-1===u?u=f:f===t&&(f=u-q),t===u&&(f-=q)),f+=q):s.optional?(f+=q,k-=q):s.fallback?(m[p](s.fallback),f+=q,k-=q):c.invalid.push({p:k,
v:v,e:s.pattern}),k+=q;else{if(!a)m[p](x);v===x&&(k+=q);f+=q}}h=e.charAt(t);l!==n+1||g.translation[h]||m.push(h);return m.join("")},callbacks:function(b){var g=c.val(),m=g!==n,h=[g,b,a,d],f=function(a,b,c){"function"===typeof d[a]&&b&&d[a].apply(this,c)};f("onChange",!0===m,h);f("onKeyPress",!0===m,h);f("onComplete",g.length===e.length,h);f("onInvalid",0<c.invalid.length,[g,b,a,c.invalid,d])}};a=b(a);var g=this,n=c.val(),p;e="function"===typeof e?e(c.val(),void 0,a,d):e;g.mask=e;g.options=d;g.remove=
function(){var b=c.getCaret();c.destroyEvents();c.val(g.getCleanVal());c.setCaret(b-c.getMCharsBeforeCount(b));return a};g.getCleanVal=function(){return c.getMasked(!0)};g.getMaskedVal=function(a){return c.getMasked(!1,a)};g.init=function(e){e=e||!1;d=d||{};g.clearIfNotMatch=b.jMaskGlobals.clearIfNotMatch;g.byPassKeys=b.jMaskGlobals.byPassKeys;g.translation=b.extend({},b.jMaskGlobals.translation,d.translation);g=b.extend(!0,{},g,d);p=c.getRegexMask();!1===e?(d.placeholder&&a.attr("placeholder",d.placeholder),
a.data("mask")&&a.attr("autocomplete","off"),c.destroyEvents(),c.events(),e=c.getCaret(),c.val(c.getMasked()),c.setCaret(e+c.getMCharsBeforeCount(e,!0))):(c.events(),c.val(c.getMasked()))};g.init(!a.is("input"))};b.maskWatchers={};var A=function(){var a=b(this),e={},d=a.attr("data-mask");a.attr("data-mask-reverse")&&(e.reverse=!0);a.attr("data-mask-clearifnotmatch")&&(e.clearIfNotMatch=!0);"true"===a.attr("data-mask-selectonfocus")&&(e.selectOnFocus=!0);if(z(a,d,e))return a.data("mask",new y(this,
d,e))},z=function(a,e,d){d=d||{};var c=b(a).data("mask"),g=JSON.stringify;a=b(a).val()||b(a).text();try{return"function"===typeof e&&(e=e(a)),"object"!==typeof c||g(c.options)!==g(d)||c.mask!==e}catch(n){}};b.fn.mask=function(a,e){e=e||{};var d=this.selector,c=b.jMaskGlobals,g=c.watchInterval,c=e.watchInputs||c.watchInputs,n=function(){if(z(this,a,e))return b(this).data("mask",new y(this,a,e))};b(this).each(n);d&&""!==d&&c&&(clearInterval(b.maskWatchers[d]),b.maskWatchers[d]=setInterval(function(){b(document).find(d).each(n)},
g));return this};b.fn.masked=function(a){return this.data("mask").getMaskedVal(a)};b.fn.unmask=function(){clearInterval(b.maskWatchers[this.selector]);delete b.maskWatchers[this.selector];return this.each(function(){var a=b(this).data("mask");a&&a.remove().removeData("mask")})};b.fn.cleanVal=function(){return this.data("mask").getCleanVal()};b.applyDataMask=function(a){a=a||b.jMaskGlobals.maskElements;(a instanceof b?a:b(a)).filter(b.jMaskGlobals.dataMaskAttr).each(A)};var p={maskElements:"input,td,span,div",
dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,useInput:function(a){var b=document.createElement("div"),d;a="on"+a;d=a in b;d||(b.setAttribute(a,"return;"),d="function"===typeof b[a]);return d}("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};b.jMaskGlobals=b.jMaskGlobals||{};p=b.jMaskGlobals=b.extend(!0,{},p,b.jMaskGlobals);
p.dataMask&&b.applyDataMask();setInterval(function(){b.jMaskGlobals.watchDataMask&&b.applyDataMask()},p.watchInterval)});
                                                                                                                       // 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"jquery.maskedinput.js":["babel-runtime/helpers/typeof","jquery",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/dist/jquery.maskedinput.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof;module.import('babel-runtime/helpers/typeof',{"default":function(v){_typeof=v}});                          //
(function (factory) {                                                                                                  // 1
	if (typeof define === 'function' && define.amd) {                                                                     // 2
		// AMD. Register as an anonymous module.                                                                             //
		define(['jquery'], factory);                                                                                         // 4
	} else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {                          // 5
		// Node/CommonJS                                                                                                     //
		factory(require('jquery'));                                                                                          // 7
	} else {                                                                                                              // 8
		// Browser globals                                                                                                   //
		factory(jQuery);                                                                                                     // 10
	}                                                                                                                     // 11
})(function ($) {                                                                                                      // 12
                                                                                                                       //
	var ua = navigator.userAgent,                                                                                         // 14
	    iPhone = /iphone/i.test(ua),                                                                                      // 14
	    chrome = /chrome/i.test(ua),                                                                                      // 14
	    android = /android/i.test(ua),                                                                                    // 14
	    caretTimeoutId;                                                                                                   // 14
                                                                                                                       //
	$.mask = {                                                                                                            // 20
		//Predefined character definitions                                                                                   //
		definitions: {                                                                                                       // 22
			'9': "[0-9]",                                                                                                       // 23
			'a': "[A-Za-z]",                                                                                                    // 24
			'*': "[A-Za-z0-9]"                                                                                                  // 25
		},                                                                                                                   // 22
		autoclear: true,                                                                                                     // 27
		dataName: "rawMaskFn",                                                                                               // 28
		placeholder: '_'                                                                                                     // 29
	};                                                                                                                    // 20
                                                                                                                       //
	$.fn.extend({                                                                                                         // 32
		//Helper Function for Caret positioning                                                                              //
		caret: function caret(begin, end) {                                                                                  // 34
			var range;                                                                                                          // 35
                                                                                                                       //
			if (this.length === 0 || this.is(":hidden") || this.get(0) !== document.activeElement) {                            // 37
				return;                                                                                                            // 38
			}                                                                                                                   // 39
                                                                                                                       //
			if (typeof begin == 'number') {                                                                                     // 41
				end = typeof end === 'number' ? end : begin;                                                                       // 42
				return this.each(function () {                                                                                     // 43
					if (this.setSelectionRange) {                                                                                     // 44
						this.setSelectionRange(begin, end);                                                                              // 45
					} else if (this.createTextRange) {                                                                                // 46
						range = this.createTextRange();                                                                                  // 47
						range.collapse(true);                                                                                            // 48
						range.moveEnd('character', end);                                                                                 // 49
						range.moveStart('character', begin);                                                                             // 50
						range.select();                                                                                                  // 51
					}                                                                                                                 // 52
				});                                                                                                                // 53
			} else {                                                                                                            // 54
				if (this[0].setSelectionRange) {                                                                                   // 55
					begin = this[0].selectionStart;                                                                                   // 56
					end = this[0].selectionEnd;                                                                                       // 57
				} else if (document.selection && document.selection.createRange) {                                                 // 58
					range = document.selection.createRange();                                                                         // 59
					begin = 0 - range.duplicate().moveStart('character', -100000);                                                    // 60
					end = begin + range.text.length;                                                                                  // 61
				}                                                                                                                  // 62
				return { begin: begin, end: end };                                                                                 // 63
			}                                                                                                                   // 64
		},                                                                                                                   // 65
		unmask: function unmask() {                                                                                          // 66
			return this.trigger("unmask");                                                                                      // 67
		},                                                                                                                   // 68
		mask: function mask(_mask, settings) {                                                                               // 69
			var input, defs, tests, partialPosition, firstNonMaskPos, lastRequiredNonMaskPos, len, oldVal;                      // 70
                                                                                                                       //
			if (!_mask && this.length > 0) {                                                                                    // 79
				input = $(this[0]);                                                                                                // 80
				var fn = input.data($.mask.dataName);                                                                              // 81
				return fn ? fn() : undefined;                                                                                      // 82
			}                                                                                                                   // 83
                                                                                                                       //
			settings = $.extend({                                                                                               // 85
				autoclear: $.mask.autoclear,                                                                                       // 86
				placeholder: $.mask.placeholder, // Load default placeholder                                                       // 87
				completed: null                                                                                                    // 88
			}, settings);                                                                                                       // 85
                                                                                                                       //
			defs = $.mask.definitions;                                                                                          // 92
			tests = [];                                                                                                         // 93
			partialPosition = len = _mask.length;                                                                               // 94
			firstNonMaskPos = null;                                                                                             // 95
                                                                                                                       //
			_mask = String(_mask);                                                                                              // 97
                                                                                                                       //
			$.each(_mask.split(""), function (i, c) {                                                                           // 99
				if (c == '?') {                                                                                                    // 100
					len--;                                                                                                            // 101
					partialPosition = i;                                                                                              // 102
				} else if (defs[c]) {                                                                                              // 103
					tests.push(new RegExp(defs[c]));                                                                                  // 104
					if (firstNonMaskPos === null) {                                                                                   // 105
						firstNonMaskPos = tests.length - 1;                                                                              // 106
					}                                                                                                                 // 107
					if (i < partialPosition) {                                                                                        // 108
						lastRequiredNonMaskPos = tests.length - 1;                                                                       // 109
					}                                                                                                                 // 110
				} else {                                                                                                           // 111
					tests.push(null);                                                                                                 // 112
				}                                                                                                                  // 113
			});                                                                                                                 // 114
                                                                                                                       //
			return this.trigger("unmask").each(function () {                                                                    // 116
				var input = $(this),                                                                                               // 117
				    buffer = $.map(_mask.split(""), function (c, i) {                                                              // 117
					if (c != '?') {                                                                                                   // 121
						return defs[c] ? getPlaceholder(i) : c;                                                                          // 122
					}                                                                                                                 // 123
				}),                                                                                                                // 124
				    defaultBuffer = buffer.join(''),                                                                               // 117
				    focusText = input.val();                                                                                       // 117
                                                                                                                       //
				function tryFireCompleted() {                                                                                      // 128
					if (!settings.completed) {                                                                                        // 129
						return;                                                                                                          // 130
					}                                                                                                                 // 131
                                                                                                                       //
					for (var i = firstNonMaskPos; i <= lastRequiredNonMaskPos; i++) {                                                 // 133
						if (tests[i] && buffer[i] === getPlaceholder(i)) {                                                               // 134
							return;                                                                                                         // 135
						}                                                                                                                // 136
					}                                                                                                                 // 137
					settings.completed.call(input);                                                                                   // 138
				}                                                                                                                  // 139
                                                                                                                       //
				function getPlaceholder(i) {                                                                                       // 141
					if (i < settings.placeholder.length) return settings.placeholder.charAt(i);                                       // 142
					return settings.placeholder.charAt(0);                                                                            // 144
				}                                                                                                                  // 145
                                                                                                                       //
				function seekNext(pos) {                                                                                           // 147
					while (++pos < len && !tests[pos]) {}                                                                             // 148
					return pos;                                                                                                       // 149
				}                                                                                                                  // 150
                                                                                                                       //
				function seekPrev(pos) {                                                                                           // 152
					while (--pos >= 0 && !tests[pos]) {}                                                                              // 153
					return pos;                                                                                                       // 154
				}                                                                                                                  // 155
                                                                                                                       //
				function shiftL(begin, end) {                                                                                      // 157
					var i, j;                                                                                                         // 158
                                                                                                                       //
					if (begin < 0) {                                                                                                  // 161
						return;                                                                                                          // 162
					}                                                                                                                 // 163
                                                                                                                       //
					for (i = begin, j = seekNext(end); i < len; i++) {                                                                // 165
						if (tests[i]) {                                                                                                  // 166
							if (j < len && tests[i].test(buffer[j])) {                                                                      // 167
								buffer[i] = buffer[j];                                                                                         // 168
								buffer[j] = getPlaceholder(j);                                                                                 // 169
							} else {                                                                                                        // 170
								break;                                                                                                         // 171
							}                                                                                                               // 172
                                                                                                                       //
							j = seekNext(j);                                                                                                // 174
						}                                                                                                                // 175
					}                                                                                                                 // 176
					writeBuffer();                                                                                                    // 177
					input.caret(Math.max(firstNonMaskPos, begin));                                                                    // 178
				}                                                                                                                  // 179
                                                                                                                       //
				function shiftR(pos) {                                                                                             // 181
					var i, c, j, t;                                                                                                   // 182
                                                                                                                       //
					for (i = pos, c = getPlaceholder(pos); i < len; i++) {                                                            // 187
						if (tests[i]) {                                                                                                  // 188
							j = seekNext(i);                                                                                                // 189
							t = buffer[i];                                                                                                  // 190
							buffer[i] = c;                                                                                                  // 191
							if (j < len && tests[j].test(t)) {                                                                              // 192
								c = t;                                                                                                         // 193
							} else {                                                                                                        // 194
								break;                                                                                                         // 195
							}                                                                                                               // 196
						}                                                                                                                // 197
					}                                                                                                                 // 198
				}                                                                                                                  // 199
                                                                                                                       //
				function androidInputEvent(e) {                                                                                    // 201
					var curVal = input.val();                                                                                         // 202
					var pos = input.caret();                                                                                          // 203
					if (oldVal && oldVal.length && oldVal.length > curVal.length) {                                                   // 204
						// a deletion or backspace happened                                                                              //
						checkVal(true);                                                                                                  // 206
						while (pos.begin > 0 && !tests[pos.begin - 1]) {                                                                 // 207
							pos.begin--;                                                                                                    // 208
						}if (pos.begin === 0) {                                                                                          // 207
							while (pos.begin < firstNonMaskPos && !tests[pos.begin]) {                                                      // 211
								pos.begin++;                                                                                                   // 212
							}                                                                                                               // 211
						}                                                                                                                // 213
						input.caret(pos.begin, pos.begin);                                                                               // 214
					} else {                                                                                                          // 215
						var pos2 = checkVal(true);                                                                                       // 216
						var lastEnteredValue = curVal.charAt(pos.begin);                                                                 // 217
						if (pos.begin < len) {                                                                                           // 218
							if (!tests[pos.begin]) {                                                                                        // 219
								pos.begin++;                                                                                                   // 220
								if (tests[pos.begin].test(lastEnteredValue)) {                                                                 // 221
									pos.begin++;                                                                                                  // 222
								}                                                                                                              // 223
							} else {                                                                                                        // 224
								if (tests[pos.begin].test(lastEnteredValue)) {                                                                 // 225
									pos.begin++;                                                                                                  // 226
								}                                                                                                              // 227
							}                                                                                                               // 228
						}                                                                                                                // 229
						input.caret(pos.begin, pos.begin);                                                                               // 230
					}                                                                                                                 // 231
					tryFireCompleted();                                                                                               // 232
				}                                                                                                                  // 233
                                                                                                                       //
				function blurEvent(e) {                                                                                            // 236
					checkVal();                                                                                                       // 237
                                                                                                                       //
					if (input.val() != focusText) input.change();                                                                     // 239
				}                                                                                                                  // 241
                                                                                                                       //
				function keydownEvent(e) {                                                                                         // 243
					if (input.prop("readonly")) {                                                                                     // 244
						return;                                                                                                          // 245
					}                                                                                                                 // 246
                                                                                                                       //
					var k = e.which || e.keyCode,                                                                                     // 248
					    pos,                                                                                                          // 248
					    begin,                                                                                                        // 248
					    end;                                                                                                          // 248
					oldVal = input.val();                                                                                             // 252
					//backspace, delete, and escape get special treatment                                                             //
					if (k === 8 || k === 46 || iPhone && k === 127) {                                                                 // 254
						pos = input.caret();                                                                                             // 255
						begin = pos.begin;                                                                                               // 256
						end = pos.end;                                                                                                   // 257
                                                                                                                       //
						if (end - begin === 0) {                                                                                         // 259
							begin = k !== 46 ? seekPrev(begin) : end = seekNext(begin - 1);                                                 // 260
							end = k === 46 ? seekNext(end) : end;                                                                           // 261
						}                                                                                                                // 262
						clearBuffer(begin, end);                                                                                         // 263
						shiftL(begin, end - 1);                                                                                          // 264
                                                                                                                       //
						e.preventDefault();                                                                                              // 266
					} else if (k === 13) {                                                                                            // 267
						// enter                                                                                                         //
						blurEvent.call(this, e);                                                                                         // 268
					} else if (k === 27) {                                                                                            // 269
						// escape                                                                                                        //
						input.val(focusText);                                                                                            // 270
						input.caret(0, checkVal());                                                                                      // 271
						e.preventDefault();                                                                                              // 272
					}                                                                                                                 // 273
				}                                                                                                                  // 274
                                                                                                                       //
				function keypressEvent(e) {                                                                                        // 276
					if (input.prop("readonly")) {                                                                                     // 277
						return;                                                                                                          // 278
					}                                                                                                                 // 279
                                                                                                                       //
					var k = e.which || e.keyCode,                                                                                     // 281
					    pos = input.caret(),                                                                                          // 281
					    p,                                                                                                            // 281
					    c,                                                                                                            // 281
					    next;                                                                                                         // 281
                                                                                                                       //
					if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {                                                               // 287
						//Ignore                                                                                                         //
						return;                                                                                                          // 288
					} else if (k && k !== 13) {                                                                                       // 289
						if (pos.end - pos.begin !== 0) {                                                                                 // 290
							clearBuffer(pos.begin, pos.end);                                                                                // 291
							shiftL(pos.begin, pos.end - 1);                                                                                 // 292
						}                                                                                                                // 293
                                                                                                                       //
						p = seekNext(pos.begin - 1);                                                                                     // 295
						if (p < len) {                                                                                                   // 296
							c = String.fromCharCode(k);                                                                                     // 297
							if (tests[p].test(c)) {                                                                                         // 298
								shiftR(p);                                                                                                     // 299
                                                                                                                       //
								buffer[p] = c;                                                                                                 // 301
								writeBuffer();                                                                                                 // 302
								next = seekNext(p);                                                                                            // 303
                                                                                                                       //
								if (android) {                                                                                                 // 305
									//Path for CSP Violation on FireFox OS 1.1                                                                    //
									var proxy = function proxy() {                                                                                // 307
										$.proxy($.fn.caret, input, next)();                                                                          // 308
									};                                                                                                            // 309
                                                                                                                       //
									setTimeout(proxy, 0);                                                                                         // 311
								} else {                                                                                                       // 312
									input.caret(next);                                                                                            // 313
								}                                                                                                              // 314
								if (pos.begin <= lastRequiredNonMaskPos) {                                                                     // 315
									tryFireCompleted();                                                                                           // 316
								}                                                                                                              // 317
							}                                                                                                               // 318
						}                                                                                                                // 319
						e.preventDefault();                                                                                              // 320
					}                                                                                                                 // 321
				}                                                                                                                  // 322
                                                                                                                       //
				function clearBuffer(start, end) {                                                                                 // 324
					var i;                                                                                                            // 325
					for (i = start; i < end && i < len; i++) {                                                                        // 326
						if (tests[i]) {                                                                                                  // 327
							buffer[i] = getPlaceholder(i);                                                                                  // 328
						}                                                                                                                // 329
					}                                                                                                                 // 330
				}                                                                                                                  // 331
                                                                                                                       //
				function writeBuffer() {                                                                                           // 333
					input.val(buffer.join(''));                                                                                       // 333
				}                                                                                                                  // 333
                                                                                                                       //
				function checkVal(allow) {                                                                                         // 335
					//try to place characters where they belong                                                                       //
					var test = input.val(),                                                                                           // 337
					    lastMatch = -1,                                                                                               // 337
					    i,                                                                                                            // 337
					    c,                                                                                                            // 337
					    pos;                                                                                                          // 337
                                                                                                                       //
					for (i = 0, pos = 0; i < len; i++) {                                                                              // 343
						if (tests[i]) {                                                                                                  // 344
							buffer[i] = getPlaceholder(i);                                                                                  // 345
							while (pos++ < test.length) {                                                                                   // 346
								c = test.charAt(pos - 1);                                                                                      // 347
								if (tests[i].test(c)) {                                                                                        // 348
									buffer[i] = c;                                                                                                // 349
									lastMatch = i;                                                                                                // 350
									break;                                                                                                        // 351
								}                                                                                                              // 352
							}                                                                                                               // 353
							if (pos > test.length) {                                                                                        // 354
								clearBuffer(i + 1, len);                                                                                       // 355
								break;                                                                                                         // 356
							}                                                                                                               // 357
						} else {                                                                                                         // 358
							if (buffer[i] === test.charAt(pos)) {                                                                           // 359
								pos++;                                                                                                         // 360
							}                                                                                                               // 361
							if (i < partialPosition) {                                                                                      // 362
								lastMatch = i;                                                                                                 // 363
							}                                                                                                               // 364
						}                                                                                                                // 365
					}                                                                                                                 // 366
					if (allow) {                                                                                                      // 367
						writeBuffer();                                                                                                   // 368
					} else if (lastMatch + 1 < partialPosition) {                                                                     // 369
						if (settings.autoclear || buffer.join('') === defaultBuffer) {                                                   // 370
							// Invalid value. Remove it and replace it with the                                                             //
							// mask, which is the default behavior.                                                                         //
							if (input.val()) input.val("");                                                                                 // 373
							clearBuffer(0, len);                                                                                            // 374
						} else {                                                                                                         // 375
							// Invalid value, but we opt to show the value to the                                                           //
							// user and allow them to correct their mistake.                                                                //
							writeBuffer();                                                                                                  // 378
						}                                                                                                                // 379
					} else {                                                                                                          // 380
						writeBuffer();                                                                                                   // 381
						input.val(input.val().substring(0, lastMatch + 1));                                                              // 382
					}                                                                                                                 // 383
					return partialPosition ? i : firstNonMaskPos;                                                                     // 384
				}                                                                                                                  // 385
                                                                                                                       //
				input.data($.mask.dataName, function () {                                                                          // 387
					return $.map(buffer, function (c, i) {                                                                            // 388
						return tests[i] && c != getPlaceholder(i) ? c : null;                                                            // 389
					}).join('');                                                                                                      // 390
				});                                                                                                                // 391
                                                                                                                       //
				input.one("unmask", function () {                                                                                  // 394
					input.off(".mask").removeData($.mask.dataName);                                                                   // 396
				}).on("focus.mask", function () {                                                                                  // 399
					if (input.prop("readonly")) {                                                                                     // 401
						return;                                                                                                          // 402
					}                                                                                                                 // 403
                                                                                                                       //
					clearTimeout(caretTimeoutId);                                                                                     // 405
					var pos;                                                                                                          // 406
                                                                                                                       //
					focusText = input.val();                                                                                          // 408
                                                                                                                       //
					pos = checkVal();                                                                                                 // 410
                                                                                                                       //
					caretTimeoutId = setTimeout(function () {                                                                         // 412
						if (input.get(0) !== document.activeElement) {                                                                   // 413
							return;                                                                                                         // 414
						}                                                                                                                // 415
						writeBuffer();                                                                                                   // 416
						if (pos == _mask.replace("?", "").length) {                                                                      // 417
							input.caret(0, pos);                                                                                            // 418
						} else {                                                                                                         // 419
							input.caret(pos);                                                                                               // 420
						}                                                                                                                // 421
					}, 10);                                                                                                           // 422
				}).on("blur.mask", blurEvent).on("keydown.mask", keydownEvent).on("keypress.mask", keypressEvent).on("input.mask paste.mask", function () {
					if (input.prop("readonly")) {                                                                                     // 428
						return;                                                                                                          // 429
					}                                                                                                                 // 430
                                                                                                                       //
					setTimeout(function () {                                                                                          // 432
						var pos = checkVal(true);                                                                                        // 433
						input.caret(pos);                                                                                                // 434
						tryFireCompleted();                                                                                              // 435
					}, 0);                                                                                                            // 436
				});                                                                                                                // 437
				if (chrome && android) {                                                                                           // 438
					input.off('input.mask').on('input.mask', androidInputEvent);                                                      // 440
				}                                                                                                                  // 443
				checkVal(); //Perform initial check for existing values                                                            // 444
			});                                                                                                                 // 445
		}                                                                                                                    // 446
	});                                                                                                                   // 32
});                                                                                                                    // 448
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"jquery.validate.js":["babel-runtime/helpers/typeof","jquery",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/dist/jquery.validate.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof;module.import("babel-runtime/helpers/typeof",{"default":function(v){_typeof=v}});                          //
/*!                                                                                                                    //
 * jQuery Validation Plugin v1.15.0                                                                                    //
 *                                                                                                                     //
 * http://jqueryvalidation.org/                                                                                        //
 *                                                                                                                     //
 * Copyright (c) 2016 Jörn Zaefferer                                                                                   //
 * Released under the MIT license                                                                                      //
 */                                                                                                                    //
(function (factory) {                                                                                                  // 9
	if (typeof define === "function" && define.amd) {                                                                     // 10
		define(["jquery"], factory);                                                                                         // 11
	} else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && module.exports) {          // 12
		module.exports = factory(require("jquery"));                                                                         // 13
	} else {                                                                                                              // 14
		factory(jQuery);                                                                                                     // 15
	}                                                                                                                     // 16
})(function ($) {                                                                                                      // 17
                                                                                                                       //
	$.extend($.fn, {                                                                                                      // 19
                                                                                                                       //
		// http://jqueryvalidation.org/validate/                                                                             //
		validate: function validate(options) {                                                                               // 22
                                                                                                                       //
			// If nothing is selected, return nothing; can't chain anyway                                                       //
			if (!this.length) {                                                                                                 // 25
				if (options && options.debug && window.console) {                                                                  // 26
					console.warn("Nothing selected, can't validate, returning nothing.");                                             // 27
				}                                                                                                                  // 28
				return;                                                                                                            // 29
			}                                                                                                                   // 30
                                                                                                                       //
			// Check if a validator for this form was already created                                                           //
			var validator = $.data(this[0], "validator");                                                                       // 33
			if (validator) {                                                                                                    // 34
				return validator;                                                                                                  // 35
			}                                                                                                                   // 36
                                                                                                                       //
			// Add novalidate tag if HTML5.                                                                                     //
			this.attr("novalidate", "novalidate");                                                                              // 39
                                                                                                                       //
			validator = new $.validator(options, this[0]);                                                                      // 41
			$.data(this[0], "validator", validator);                                                                            // 42
                                                                                                                       //
			if (validator.settings.onsubmit) {                                                                                  // 44
                                                                                                                       //
				this.on("click.validate", ":submit", function (event) {                                                            // 46
					if (validator.settings.submitHandler) {                                                                           // 47
						validator.submitButton = event.target;                                                                           // 48
					}                                                                                                                 // 49
                                                                                                                       //
					// Allow suppressing validation by adding a cancel class to the submit button                                     //
					if ($(this).hasClass("cancel")) {                                                                                 // 52
						validator.cancelSubmit = true;                                                                                   // 53
					}                                                                                                                 // 54
                                                                                                                       //
					// Allow suppressing validation by adding the html5 formnovalidate attribute to the submit button                 //
					if ($(this).attr("formnovalidate") !== undefined) {                                                               // 57
						validator.cancelSubmit = true;                                                                                   // 58
					}                                                                                                                 // 59
				});                                                                                                                // 60
                                                                                                                       //
				// Validate the form on submit                                                                                     //
				this.on("submit.validate", function (event) {                                                                      // 63
					if (validator.settings.debug) {                                                                                   // 64
                                                                                                                       //
						// Prevent form submit to be able to see console output                                                          //
						event.preventDefault();                                                                                          // 67
					}                                                                                                                 // 68
					function handle() {                                                                                               // 69
						var hidden, result;                                                                                              // 70
						if (validator.settings.submitHandler) {                                                                          // 71
							if (validator.submitButton) {                                                                                   // 72
                                                                                                                       //
								// Insert a hidden input as a replacement for the missing submit button                                        //
								hidden = $("<input type='hidden'/>").attr("name", validator.submitButton.name).val($(validator.submitButton).val()).appendTo(validator.currentForm);
							}                                                                                                               // 79
							result = validator.settings.submitHandler.call(validator, validator.currentForm, event);                        // 80
							if (validator.submitButton) {                                                                                   // 81
                                                                                                                       //
								// And clean up afterwards; thanks to no-block-scope, hidden can be referenced                                 //
								hidden.remove();                                                                                               // 84
							}                                                                                                               // 85
							if (result !== undefined) {                                                                                     // 86
								return result;                                                                                                 // 87
							}                                                                                                               // 88
							return false;                                                                                                   // 89
						}                                                                                                                // 90
						return true;                                                                                                     // 91
					}                                                                                                                 // 92
                                                                                                                       //
					// Prevent submit for invalid forms or custom submit handlers                                                     //
					if (validator.cancelSubmit) {                                                                                     // 95
						validator.cancelSubmit = false;                                                                                  // 96
						return handle();                                                                                                 // 97
					}                                                                                                                 // 98
					if (validator.form()) {                                                                                           // 99
						if (validator.pendingRequest) {                                                                                  // 100
							validator.formSubmitted = true;                                                                                 // 101
							return false;                                                                                                   // 102
						}                                                                                                                // 103
						return handle();                                                                                                 // 104
					} else {                                                                                                          // 105
						validator.focusInvalid();                                                                                        // 106
						return false;                                                                                                    // 107
					}                                                                                                                 // 108
				});                                                                                                                // 109
			}                                                                                                                   // 110
                                                                                                                       //
			return validator;                                                                                                   // 112
		},                                                                                                                   // 113
                                                                                                                       //
		// http://jqueryvalidation.org/valid/                                                                                //
		valid: function valid() {                                                                                            // 116
			var valid, validator, errorList;                                                                                    // 117
                                                                                                                       //
			if ($(this[0]).is("form")) {                                                                                        // 119
				valid = this.validate().form();                                                                                    // 120
			} else {                                                                                                            // 121
				errorList = [];                                                                                                    // 122
				valid = true;                                                                                                      // 123
				validator = $(this[0].form).validate();                                                                            // 124
				this.each(function () {                                                                                            // 125
					valid = validator.element(this) && valid;                                                                         // 126
					if (!valid) {                                                                                                     // 127
						errorList = errorList.concat(validator.errorList);                                                               // 128
					}                                                                                                                 // 129
				});                                                                                                                // 130
				validator.errorList = errorList;                                                                                   // 131
			}                                                                                                                   // 132
			return valid;                                                                                                       // 133
		},                                                                                                                   // 134
                                                                                                                       //
		// http://jqueryvalidation.org/rules/                                                                                //
		rules: function rules(command, argument) {                                                                           // 137
                                                                                                                       //
			// If nothing is selected, return nothing; can't chain anyway                                                       //
			if (!this.length) {                                                                                                 // 140
				return;                                                                                                            // 141
			}                                                                                                                   // 142
                                                                                                                       //
			var element = this[0],                                                                                              // 144
			    settings,                                                                                                       // 144
			    staticRules,                                                                                                    // 144
			    existingRules,                                                                                                  // 144
			    data,                                                                                                           // 144
			    param,                                                                                                          // 144
			    filtered;                                                                                                       // 144
                                                                                                                       //
			if (command) {                                                                                                      // 147
				settings = $.data(element.form, "validator").settings;                                                             // 148
				staticRules = settings.rules;                                                                                      // 149
				existingRules = $.validator.staticRules(element);                                                                  // 150
				switch (command) {                                                                                                 // 151
					case "add":                                                                                                       // 152
						$.extend(existingRules, $.validator.normalizeRule(argument));                                                    // 153
                                                                                                                       //
						// Remove messages from rules, but allow them to be set separately                                               //
						delete existingRules.messages;                                                                                   // 156
						staticRules[element.name] = existingRules;                                                                       // 157
						if (argument.messages) {                                                                                         // 158
							settings.messages[element.name] = $.extend(settings.messages[element.name], argument.messages);                 // 159
						}                                                                                                                // 160
						break;                                                                                                           // 161
					case "remove":                                                                                                    // 162
						if (!argument) {                                                                                                 // 163
							delete staticRules[element.name];                                                                               // 164
							return existingRules;                                                                                           // 165
						}                                                                                                                // 166
						filtered = {};                                                                                                   // 167
						$.each(argument.split(/\s/), function (index, method) {                                                          // 168
							filtered[method] = existingRules[method];                                                                       // 169
							delete existingRules[method];                                                                                   // 170
							if (method === "required") {                                                                                    // 171
								$(element).removeAttr("aria-required");                                                                        // 172
							}                                                                                                               // 173
						});                                                                                                              // 174
						return filtered;                                                                                                 // 175
				}                                                                                                                  // 151
			}                                                                                                                   // 177
                                                                                                                       //
			data = $.validator.normalizeRules($.extend({}, $.validator.classRules(element), $.validator.attributeRules(element), $.validator.dataRules(element), $.validator.staticRules(element)), element);
                                                                                                                       //
			// Make sure required is at front                                                                                   //
			if (data.required) {                                                                                                // 189
				param = data.required;                                                                                             // 190
				delete data.required;                                                                                              // 191
				data = $.extend({ required: param }, data);                                                                        // 192
				$(element).attr("aria-required", "true");                                                                          // 193
			}                                                                                                                   // 194
                                                                                                                       //
			// Make sure remote is at back                                                                                      //
			if (data.remote) {                                                                                                  // 197
				param = data.remote;                                                                                               // 198
				delete data.remote;                                                                                                // 199
				data = $.extend(data, { remote: param });                                                                          // 200
			}                                                                                                                   // 201
                                                                                                                       //
			return data;                                                                                                        // 203
		}                                                                                                                    // 204
	});                                                                                                                   // 19
                                                                                                                       //
	// Custom selectors                                                                                                   //
	$.extend($.expr[":"], {                                                                                               // 208
                                                                                                                       //
		// http://jqueryvalidation.org/blank-selector/                                                                       //
		blank: function blank(a) {                                                                                           // 211
			return !$.trim("" + $(a).val());                                                                                    // 212
		},                                                                                                                   // 213
                                                                                                                       //
		// http://jqueryvalidation.org/filled-selector/                                                                      //
		filled: function filled(a) {                                                                                         // 216
			var val = $(a).val();                                                                                               // 217
			return val !== null && !!$.trim("" + val);                                                                          // 218
		},                                                                                                                   // 219
                                                                                                                       //
		// http://jqueryvalidation.org/unchecked-selector/                                                                   //
		unchecked: function unchecked(a) {                                                                                   // 222
			return !$(a).prop("checked");                                                                                       // 223
		}                                                                                                                    // 224
	});                                                                                                                   // 208
                                                                                                                       //
	// Constructor for validator                                                                                          //
	$.validator = function (options, form) {                                                                              // 228
		this.settings = $.extend(true, {}, $.validator.defaults, options);                                                   // 229
		this.currentForm = form;                                                                                             // 230
		this.init();                                                                                                         // 231
	};                                                                                                                    // 232
                                                                                                                       //
	// http://jqueryvalidation.org/jQuery.validator.format/                                                               //
	$.validator.format = function (source, params) {                                                                      // 235
		if (arguments.length === 1) {                                                                                        // 236
			return function () {                                                                                                // 237
				var args = $.makeArray(arguments);                                                                                 // 238
				args.unshift(source);                                                                                              // 239
				return $.validator.format.apply(this, args);                                                                       // 240
			};                                                                                                                  // 241
		}                                                                                                                    // 242
		if (params === undefined) {                                                                                          // 243
			return source;                                                                                                      // 244
		}                                                                                                                    // 245
		if (arguments.length > 2 && params.constructor !== Array) {                                                          // 246
			params = $.makeArray(arguments).slice(1);                                                                           // 247
		}                                                                                                                    // 248
		if (params.constructor !== Array) {                                                                                  // 249
			params = [params];                                                                                                  // 250
		}                                                                                                                    // 251
		$.each(params, function (i, n) {                                                                                     // 252
			source = source.replace(new RegExp("\\{" + i + "\\}", "g"), function () {                                           // 253
				return n;                                                                                                          // 254
			});                                                                                                                 // 255
		});                                                                                                                  // 256
		return source;                                                                                                       // 257
	};                                                                                                                    // 258
                                                                                                                       //
	$.extend($.validator, {                                                                                               // 260
                                                                                                                       //
		defaults: {                                                                                                          // 262
			messages: {},                                                                                                       // 263
			groups: {},                                                                                                         // 264
			rules: {},                                                                                                          // 265
			errorClass: "error",                                                                                                // 266
			pendingClass: "pending",                                                                                            // 267
			validClass: "valid",                                                                                                // 268
			errorElement: "label",                                                                                              // 269
			focusCleanup: false,                                                                                                // 270
			focusInvalid: true,                                                                                                 // 271
			errorContainer: $([]),                                                                                              // 272
			errorLabelContainer: $([]),                                                                                         // 273
			onsubmit: true,                                                                                                     // 274
			ignore: ":hidden",                                                                                                  // 275
			ignoreTitle: false,                                                                                                 // 276
			onfocusin: function onfocusin(element) {                                                                            // 277
				this.lastActive = element;                                                                                         // 278
                                                                                                                       //
				// Hide error label and remove error class on focus if enabled                                                     //
				if (this.settings.focusCleanup) {                                                                                  // 281
					if (this.settings.unhighlight) {                                                                                  // 282
						this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass);               // 283
					}                                                                                                                 // 284
					this.hideThese(this.errorsFor(element));                                                                          // 285
				}                                                                                                                  // 286
			},                                                                                                                  // 287
			onfocusout: function onfocusout(element) {                                                                          // 288
				if (!this.checkable(element) && (element.name in this.submitted || !this.optional(element))) {                     // 289
					this.element(element);                                                                                            // 290
				}                                                                                                                  // 291
			},                                                                                                                  // 292
			onkeyup: function onkeyup(element, event) {                                                                         // 293
                                                                                                                       //
				// Avoid revalidate the field when pressing one of the following keys                                              //
				// Shift       => 16                                                                                               //
				// Ctrl        => 17                                                                                               //
				// Alt         => 18                                                                                               //
				// Caps lock   => 20                                                                                               //
				// End         => 35                                                                                               //
				// Home        => 36                                                                                               //
				// Left arrow  => 37                                                                                               //
				// Up arrow    => 38                                                                                               //
				// Right arrow => 39                                                                                               //
				// Down arrow  => 40                                                                                               //
				// Insert      => 45                                                                                               //
				// Num lock    => 144                                                                                              //
				// AltGr key   => 225                                                                                              //
				var excludedKeys = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];                                         // 309
                                                                                                                       //
				if (event.which === 9 && this.elementValue(element) === "" || $.inArray(event.keyCode, excludedKeys) !== -1) {     // 314
					return;                                                                                                           // 315
				} else if (element.name in this.submitted || element.name in this.invalid) {                                       // 316
					this.element(element);                                                                                            // 317
				}                                                                                                                  // 318
			},                                                                                                                  // 319
			onclick: function onclick(element) {                                                                                // 320
                                                                                                                       //
				// Click on selects, radiobuttons and checkboxes                                                                   //
				if (element.name in this.submitted) {                                                                              // 323
					this.element(element);                                                                                            // 324
                                                                                                                       //
					// Or option elements, check parent select in that case                                                           //
				} else if (element.parentNode.name in this.submitted) {                                                            // 327
						this.element(element.parentNode);                                                                                // 328
					}                                                                                                                 // 329
			},                                                                                                                  // 330
			highlight: function highlight(element, errorClass, validClass) {                                                    // 331
				if (element.type === "radio") {                                                                                    // 332
					this.findByName(element.name).addClass(errorClass).removeClass(validClass);                                       // 333
				} else {                                                                                                           // 334
					$(element).addClass(errorClass).removeClass(validClass);                                                          // 335
				}                                                                                                                  // 336
			},                                                                                                                  // 337
			unhighlight: function unhighlight(element, errorClass, validClass) {                                                // 338
				if (element.type === "radio") {                                                                                    // 339
					this.findByName(element.name).removeClass(errorClass).addClass(validClass);                                       // 340
				} else {                                                                                                           // 341
					$(element).removeClass(errorClass).addClass(validClass);                                                          // 342
				}                                                                                                                  // 343
			}                                                                                                                   // 344
		},                                                                                                                   // 262
                                                                                                                       //
		// http://jqueryvalidation.org/jQuery.validator.setDefaults/                                                         //
		setDefaults: function setDefaults(settings) {                                                                        // 348
			$.extend($.validator.defaults, settings);                                                                           // 349
		},                                                                                                                   // 350
                                                                                                                       //
		messages: {                                                                                                          // 352
			required: "This field is required.",                                                                                // 353
			remote: "Please fix this field.",                                                                                   // 354
			email: "Please enter a valid email address.",                                                                       // 355
			url: "Please enter a valid URL.",                                                                                   // 356
			date: "Please enter a valid date.",                                                                                 // 357
			dateISO: "Please enter a valid date ( ISO ).",                                                                      // 358
			number: "Please enter a valid number.",                                                                             // 359
			digits: "Please enter only digits.",                                                                                // 360
			equalTo: "Please enter the same value again.",                                                                      // 361
			maxlength: $.validator.format("Please enter no more than {0} characters."),                                         // 362
			minlength: $.validator.format("Please enter at least {0} characters."),                                             // 363
			rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),                       // 364
			range: $.validator.format("Please enter a value between {0} and {1}."),                                             // 365
			max: $.validator.format("Please enter a value less than or equal to {0}."),                                         // 366
			min: $.validator.format("Please enter a value greater than or equal to {0}."),                                      // 367
			step: $.validator.format("Please enter a multiple of {0}.")                                                         // 368
		},                                                                                                                   // 352
                                                                                                                       //
		autoCreateRanges: false,                                                                                             // 371
                                                                                                                       //
		prototype: {                                                                                                         // 373
                                                                                                                       //
			init: function init() {                                                                                             // 375
				this.labelContainer = $(this.settings.errorLabelContainer);                                                        // 376
				this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);                      // 377
				this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer);                          // 378
				this.submitted = {};                                                                                               // 379
				this.valueCache = {};                                                                                              // 380
				this.pendingRequest = 0;                                                                                           // 381
				this.pending = {};                                                                                                 // 382
				this.invalid = {};                                                                                                 // 383
				this.reset();                                                                                                      // 384
                                                                                                                       //
				var groups = this.groups = {},                                                                                     // 386
				    rules;                                                                                                         // 386
				$.each(this.settings.groups, function (key, value) {                                                               // 388
					if (typeof value === "string") {                                                                                  // 389
						value = value.split(/\s/);                                                                                       // 390
					}                                                                                                                 // 391
					$.each(value, function (index, name) {                                                                            // 392
						groups[name] = key;                                                                                              // 393
					});                                                                                                               // 394
				});                                                                                                                // 395
				rules = this.settings.rules;                                                                                       // 396
				$.each(rules, function (key, value) {                                                                              // 397
					rules[key] = $.validator.normalizeRule(value);                                                                    // 398
				});                                                                                                                // 399
                                                                                                                       //
				function delegate(event) {                                                                                         // 401
					var validator = $.data(this.form, "validator"),                                                                   // 402
					    eventType = "on" + event.type.replace(/^validate/, ""),                                                       // 402
					    settings = validator.settings;                                                                                // 402
					if (settings[eventType] && !$(this).is(settings.ignore)) {                                                        // 405
						settings[eventType].call(validator, this, event);                                                                // 406
					}                                                                                                                 // 407
				}                                                                                                                  // 408
                                                                                                                       //
				$(this.currentForm).on("focusin.validate focusout.validate keyup.validate", ":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], " + "[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], " + "[type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], " + "[type='radio'], [type='checkbox'], [contenteditable]", delegate)
                                                                                                                       //
				// Support: Chrome, oldIE                                                                                          //
				// "select" is provided as event.target when clicking a option                                                     //
				.on("click.validate", "select, option, [type='radio'], [type='checkbox']", delegate);                              // 410
                                                                                                                       //
				if (this.settings.invalidHandler) {                                                                                // 421
					$(this.currentForm).on("invalid-form.validate", this.settings.invalidHandler);                                    // 422
				}                                                                                                                  // 423
                                                                                                                       //
				// Add aria-required to any Static/Data/Class required fields before first validation                              //
				// Screen readers require this attribute to be present before the initial submission http://www.w3.org/TR/WCAG-TECHS/ARIA2.html
				$(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required", "true");             // 427
			},                                                                                                                  // 428
                                                                                                                       //
			// http://jqueryvalidation.org/Validator.form/                                                                      //
			form: function form() {                                                                                             // 431
				this.checkForm();                                                                                                  // 432
				$.extend(this.submitted, this.errorMap);                                                                           // 433
				this.invalid = $.extend({}, this.errorMap);                                                                        // 434
				if (!this.valid()) {                                                                                               // 435
					$(this.currentForm).triggerHandler("invalid-form", [this]);                                                       // 436
				}                                                                                                                  // 437
				this.showErrors();                                                                                                 // 438
				return this.valid();                                                                                               // 439
			},                                                                                                                  // 440
                                                                                                                       //
			checkForm: function checkForm() {                                                                                   // 442
				this.prepareForm();                                                                                                // 443
				for (var i = 0, elements = this.currentElements = this.elements(); elements[i]; i++) {                             // 444
					this.check(elements[i]);                                                                                          // 445
				}                                                                                                                  // 446
				return this.valid();                                                                                               // 447
			},                                                                                                                  // 448
                                                                                                                       //
			// http://jqueryvalidation.org/Validator.element/                                                                   //
			element: function element(_element) {                                                                               // 451
				var cleanElement = this.clean(_element),                                                                           // 452
				    checkElement = this.validationTargetFor(cleanElement),                                                         // 452
				    v = this,                                                                                                      // 452
				    result = true,                                                                                                 // 452
				    rs,                                                                                                            // 452
				    group;                                                                                                         // 452
                                                                                                                       //
				if (checkElement === undefined) {                                                                                  // 458
					delete this.invalid[cleanElement.name];                                                                           // 459
				} else {                                                                                                           // 460
					this.prepareElement(checkElement);                                                                                // 461
					this.currentElements = $(checkElement);                                                                           // 462
                                                                                                                       //
					// If this element is grouped, then validate all group elements already                                           //
					// containing a value                                                                                             //
					group = this.groups[checkElement.name];                                                                           // 466
					if (group) {                                                                                                      // 467
						$.each(this.groups, function (name, testgroup) {                                                                 // 468
							if (testgroup === group && name !== checkElement.name) {                                                        // 469
								cleanElement = v.validationTargetFor(v.clean(v.findByName(name)));                                             // 470
								if (cleanElement && cleanElement.name in v.invalid) {                                                          // 471
									v.currentElements.push(cleanElement);                                                                         // 472
									result = result && v.check(cleanElement);                                                                     // 473
								}                                                                                                              // 474
							}                                                                                                               // 475
						});                                                                                                              // 476
					}                                                                                                                 // 477
                                                                                                                       //
					rs = this.check(checkElement) !== false;                                                                          // 479
					result = result && rs;                                                                                            // 480
					if (rs) {                                                                                                         // 481
						this.invalid[checkElement.name] = false;                                                                         // 482
					} else {                                                                                                          // 483
						this.invalid[checkElement.name] = true;                                                                          // 484
					}                                                                                                                 // 485
                                                                                                                       //
					if (!this.numberOfInvalids()) {                                                                                   // 487
                                                                                                                       //
						// Hide error containers on last error                                                                           //
						this.toHide = this.toHide.add(this.containers);                                                                  // 490
					}                                                                                                                 // 491
					this.showErrors();                                                                                                // 492
                                                                                                                       //
					// Add aria-invalid status for screen readers                                                                     //
					$(_element).attr("aria-invalid", !rs);                                                                            // 495
				}                                                                                                                  // 496
                                                                                                                       //
				return result;                                                                                                     // 498
			},                                                                                                                  // 499
                                                                                                                       //
			// http://jqueryvalidation.org/Validator.showErrors/                                                                //
			showErrors: function showErrors(errors) {                                                                           // 502
				if (errors) {                                                                                                      // 503
					var validator = this;                                                                                             // 504
                                                                                                                       //
					// Add items to error list and map                                                                                //
					$.extend(this.errorMap, errors);                                                                                  // 507
					this.errorList = $.map(this.errorMap, function (message, name) {                                                  // 508
						return {                                                                                                         // 509
							message: message,                                                                                               // 510
							element: validator.findByName(name)[0]                                                                          // 511
						};                                                                                                               // 509
					});                                                                                                               // 513
                                                                                                                       //
					// Remove items from success list                                                                                 //
					this.successList = $.grep(this.successList, function (element) {                                                  // 516
						return !(element.name in errors);                                                                                // 517
					});                                                                                                               // 518
				}                                                                                                                  // 519
				if (this.settings.showErrors) {                                                                                    // 520
					this.settings.showErrors.call(this, this.errorMap, this.errorList);                                               // 521
				} else {                                                                                                           // 522
					this.defaultShowErrors();                                                                                         // 523
				}                                                                                                                  // 524
			},                                                                                                                  // 525
                                                                                                                       //
			// http://jqueryvalidation.org/Validator.resetForm/                                                                 //
			resetForm: function resetForm() {                                                                                   // 528
				if ($.fn.resetForm) {                                                                                              // 529
					$(this.currentForm).resetForm();                                                                                  // 530
				}                                                                                                                  // 531
				this.invalid = {};                                                                                                 // 532
				this.submitted = {};                                                                                               // 533
				this.prepareForm();                                                                                                // 534
				this.hideErrors();                                                                                                 // 535
				var elements = this.elements().removeData("previousValue").removeAttr("aria-invalid");                             // 536
                                                                                                                       //
				this.resetElements(elements);                                                                                      // 540
			},                                                                                                                  // 541
                                                                                                                       //
			resetElements: function resetElements(elements) {                                                                   // 543
				var i;                                                                                                             // 544
                                                                                                                       //
				if (this.settings.unhighlight) {                                                                                   // 546
					for (i = 0; elements[i]; i++) {                                                                                   // 547
						this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, "");                                 // 548
						this.findByName(elements[i].name).removeClass(this.settings.validClass);                                         // 550
					}                                                                                                                 // 551
				} else {                                                                                                           // 552
					elements.removeClass(this.settings.errorClass).removeClass(this.settings.validClass);                             // 553
				}                                                                                                                  // 556
			},                                                                                                                  // 557
                                                                                                                       //
			numberOfInvalids: function numberOfInvalids() {                                                                     // 559
				return this.objectLength(this.invalid);                                                                            // 560
			},                                                                                                                  // 561
                                                                                                                       //
			objectLength: function objectLength(obj) {                                                                          // 563
				/* jshint unused: false */                                                                                         //
				var count = 0,                                                                                                     // 565
				    i;                                                                                                             // 565
				for (i in obj) {                                                                                                   // 567
					if (obj[i]) {                                                                                                     // 568
						count++;                                                                                                         // 569
					}                                                                                                                 // 570
				}                                                                                                                  // 571
				return count;                                                                                                      // 572
			},                                                                                                                  // 573
                                                                                                                       //
			hideErrors: function hideErrors() {                                                                                 // 575
				this.hideThese(this.toHide);                                                                                       // 576
			},                                                                                                                  // 577
                                                                                                                       //
			hideThese: function hideThese(errors) {                                                                             // 579
				errors.not(this.containers).text("");                                                                              // 580
				this.addWrapper(errors).hide();                                                                                    // 581
			},                                                                                                                  // 582
                                                                                                                       //
			valid: function valid() {                                                                                           // 584
				return this.size() === 0;                                                                                          // 585
			},                                                                                                                  // 586
                                                                                                                       //
			size: function size() {                                                                                             // 588
				return this.errorList.length;                                                                                      // 589
			},                                                                                                                  // 590
                                                                                                                       //
			focusInvalid: function focusInvalid() {                                                                             // 592
				if (this.settings.focusInvalid) {                                                                                  // 593
					try {                                                                                                             // 594
						$(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus()  // 595
                                                                                                                       //
						// Manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
						.trigger("focusin");                                                                                             // 595
					} catch (e) {                                                                                                     // 601
                                                                                                                       //
						// Ignore IE throwing errors when focusing hidden elements                                                       //
					}                                                                                                                 // 604
				}                                                                                                                  // 605
			},                                                                                                                  // 606
                                                                                                                       //
			findLastActive: function findLastActive() {                                                                         // 608
				var lastActive = this.lastActive;                                                                                  // 609
				return lastActive && $.grep(this.errorList, function (n) {                                                         // 610
					return n.element.name === lastActive.name;                                                                        // 611
				}).length === 1 && lastActive;                                                                                     // 612
			},                                                                                                                  // 613
                                                                                                                       //
			elements: function elements() {                                                                                     // 615
				var validator = this,                                                                                              // 616
				    rulesCache = {};                                                                                               // 616
                                                                                                                       //
				// Select all valid inputs inside the form (no submit or reset buttons)                                            //
				return $(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function () {
					var name = this.name || $(this).attr("name"); // For contenteditable                                              // 625
					if (!name && validator.settings.debug && window.console) {                                                        // 626
						console.error("%o has no name assigned", this);                                                                  // 627
					}                                                                                                                 // 628
                                                                                                                       //
					// Set form expando on contenteditable                                                                            //
					if (this.hasAttribute("contenteditable")) {                                                                       // 631
						this.form = $(this).closest("form")[0];                                                                          // 632
					}                                                                                                                 // 633
                                                                                                                       //
					// Select only the first element for each name, and only those with rules specified                               //
					if (name in rulesCache || !validator.objectLength($(this).rules())) {                                             // 636
						return false;                                                                                                    // 637
					}                                                                                                                 // 638
                                                                                                                       //
					rulesCache[name] = true;                                                                                          // 640
					return true;                                                                                                      // 641
				});                                                                                                                // 642
			},                                                                                                                  // 643
                                                                                                                       //
			clean: function clean(selector) {                                                                                   // 645
				return $(selector)[0];                                                                                             // 646
			},                                                                                                                  // 647
                                                                                                                       //
			errors: function errors() {                                                                                         // 649
				var errorClass = this.settings.errorClass.split(" ").join(".");                                                    // 650
				return $(this.settings.errorElement + "." + errorClass, this.errorContext);                                        // 651
			},                                                                                                                  // 652
                                                                                                                       //
			resetInternals: function resetInternals() {                                                                         // 654
				this.successList = [];                                                                                             // 655
				this.errorList = [];                                                                                               // 656
				this.errorMap = {};                                                                                                // 657
				this.toShow = $([]);                                                                                               // 658
				this.toHide = $([]);                                                                                               // 659
			},                                                                                                                  // 660
                                                                                                                       //
			reset: function reset() {                                                                                           // 662
				this.resetInternals();                                                                                             // 663
				this.currentElements = $([]);                                                                                      // 664
			},                                                                                                                  // 665
                                                                                                                       //
			prepareForm: function prepareForm() {                                                                               // 667
				this.reset();                                                                                                      // 668
				this.toHide = this.errors().add(this.containers);                                                                  // 669
			},                                                                                                                  // 670
                                                                                                                       //
			prepareElement: function prepareElement(element) {                                                                  // 672
				this.reset();                                                                                                      // 673
				this.toHide = this.errorsFor(element);                                                                             // 674
			},                                                                                                                  // 675
                                                                                                                       //
			elementValue: function elementValue(element) {                                                                      // 677
				var $element = $(element),                                                                                         // 678
				    type = element.type,                                                                                           // 678
				    val,                                                                                                           // 678
				    idx;                                                                                                           // 678
                                                                                                                       //
				if (type === "radio" || type === "checkbox") {                                                                     // 682
					return this.findByName(element.name).filter(":checked").val();                                                    // 683
				} else if (type === "number" && typeof element.validity !== "undefined") {                                         // 684
					return element.validity.badInput ? "NaN" : $element.val();                                                        // 685
				}                                                                                                                  // 686
                                                                                                                       //
				if (element.hasAttribute("contenteditable")) {                                                                     // 688
					val = $element.text();                                                                                            // 689
				} else {                                                                                                           // 690
					val = $element.val();                                                                                             // 691
				}                                                                                                                  // 692
                                                                                                                       //
				if (type === "file") {                                                                                             // 694
                                                                                                                       //
					// Modern browser (chrome & safari)                                                                               //
					if (val.substr(0, 12) === "C:\\fakepath\\") {                                                                     // 697
						return val.substr(12);                                                                                           // 698
					}                                                                                                                 // 699
                                                                                                                       //
					// Legacy browsers                                                                                                //
					// Unix-based path                                                                                                //
					idx = val.lastIndexOf("/");                                                                                       // 703
					if (idx >= 0) {                                                                                                   // 704
						return val.substr(idx + 1);                                                                                      // 705
					}                                                                                                                 // 706
                                                                                                                       //
					// Windows-based path                                                                                             //
					idx = val.lastIndexOf("\\");                                                                                      // 709
					if (idx >= 0) {                                                                                                   // 710
						return val.substr(idx + 1);                                                                                      // 711
					}                                                                                                                 // 712
                                                                                                                       //
					// Just the file name                                                                                             //
					return val;                                                                                                       // 715
				}                                                                                                                  // 716
                                                                                                                       //
				if (typeof val === "string") {                                                                                     // 718
					return val.replace(/\r/g, "");                                                                                    // 719
				}                                                                                                                  // 720
				return val;                                                                                                        // 721
			},                                                                                                                  // 722
                                                                                                                       //
			check: function check(element) {                                                                                    // 724
				element = this.validationTargetFor(this.clean(element));                                                           // 725
                                                                                                                       //
				var rules = $(element).rules(),                                                                                    // 727
				    rulesCount = $.map(rules, function (n, i) {                                                                    // 727
					return i;                                                                                                         // 729
				}).length,                                                                                                         // 730
				    dependencyMismatch = false,                                                                                    // 727
				    val = this.elementValue(element),                                                                              // 727
				    result,                                                                                                        // 727
				    method,                                                                                                        // 727
				    rule;                                                                                                          // 727
                                                                                                                       //
				// If a normalizer is defined for this element, then                                                               //
				// call it to retreive the changed value instead                                                                   //
				// of using the real one.                                                                                          //
				// Note that `this` in the normalizer is `element`.                                                                //
				if (typeof rules.normalizer === "function") {                                                                      // 739
					val = rules.normalizer.call(element, val);                                                                        // 740
                                                                                                                       //
					if (typeof val !== "string") {                                                                                    // 742
						throw new TypeError("The normalizer should return a string value.");                                             // 743
					}                                                                                                                 // 744
                                                                                                                       //
					// Delete the normalizer from rules to avoid treating                                                             //
					// it as a pre-defined method.                                                                                    //
					delete rules.normalizer;                                                                                          // 748
				}                                                                                                                  // 749
                                                                                                                       //
				for (method in rules) {                                                                                            // 751
					rule = { method: method, parameters: rules[method] };                                                             // 752
					try {                                                                                                             // 753
						result = $.validator.methods[method].call(this, val, element, rule.parameters);                                  // 754
                                                                                                                       //
						// If a method indicates that the field is optional and therefore valid,                                         //
						// don't mark it as valid when there are no other rules                                                          //
						if (result === "dependency-mismatch" && rulesCount === 1) {                                                      // 758
							dependencyMismatch = true;                                                                                      // 759
							continue;                                                                                                       // 760
						}                                                                                                                // 761
						dependencyMismatch = false;                                                                                      // 762
                                                                                                                       //
						if (result === "pending") {                                                                                      // 764
							this.toHide = this.toHide.not(this.errorsFor(element));                                                         // 765
							return;                                                                                                         // 766
						}                                                                                                                // 767
                                                                                                                       //
						if (!result) {                                                                                                   // 769
							this.formatAndAdd(element, rule);                                                                               // 770
							return false;                                                                                                   // 771
						}                                                                                                                // 772
					} catch (e) {                                                                                                     // 773
						if (this.settings.debug && window.console) {                                                                     // 774
							console.log("Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e);
						}                                                                                                                // 776
						if (e instanceof TypeError) {                                                                                    // 777
							e.message += ".  Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.";
						}                                                                                                                // 779
                                                                                                                       //
						throw e;                                                                                                         // 781
					}                                                                                                                 // 782
				}                                                                                                                  // 783
				if (dependencyMismatch) {                                                                                          // 784
					return;                                                                                                           // 785
				}                                                                                                                  // 786
				if (this.objectLength(rules)) {                                                                                    // 787
					this.successList.push(element);                                                                                   // 788
				}                                                                                                                  // 789
				return true;                                                                                                       // 790
			},                                                                                                                  // 791
                                                                                                                       //
			// Return the custom message for the given element and validation method                                            //
			// specified in the element's HTML5 data attribute                                                                  //
			// return the generic message if present and no method specific message is present                                  //
			customDataMessage: function customDataMessage(element, method) {                                                    // 796
				return $(element).data("msg" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase()) || $(element).data("msg");
			},                                                                                                                  // 799
                                                                                                                       //
			// Return the custom message for the given element name and validation method                                       //
			customMessage: function customMessage(name, method) {                                                               // 802
				var m = this.settings.messages[name];                                                                              // 803
				return m && (m.constructor === String ? m : m[method]);                                                            // 804
			},                                                                                                                  // 805
                                                                                                                       //
			// Return the first defined argument, allowing empty strings                                                        //
			findDefined: function findDefined() {                                                                               // 808
				for (var i = 0; i < arguments.length; i++) {                                                                       // 809
					if (arguments[i] !== undefined) {                                                                                 // 810
						return arguments[i];                                                                                             // 811
					}                                                                                                                 // 812
				}                                                                                                                  // 813
				return undefined;                                                                                                  // 814
			},                                                                                                                  // 815
                                                                                                                       //
			defaultMessage: function defaultMessage(element, rule) {                                                            // 817
				var message = this.findDefined(this.customMessage(element.name, rule.method), this.customDataMessage(element, rule.method),
                                                                                                                       //
				// 'title' is never undefined, so handle empty string as undefined                                                 //
				!this.settings.ignoreTitle && element.title || undefined, $.validator.messages[rule.method], "<strong>Warning: No message defined for " + element.name + "</strong>"),
				    theregex = /\$?\{(\d+)\}/g;                                                                                    // 818
				if (typeof message === "function") {                                                                               // 828
					message = message.call(this, rule.parameters, element);                                                           // 829
				} else if (theregex.test(message)) {                                                                               // 830
					message = $.validator.format(message.replace(theregex, "{$1}"), rule.parameters);                                 // 831
				}                                                                                                                  // 832
                                                                                                                       //
				return message;                                                                                                    // 834
			},                                                                                                                  // 835
                                                                                                                       //
			formatAndAdd: function formatAndAdd(element, rule) {                                                                // 837
				var message = this.defaultMessage(element, rule);                                                                  // 838
                                                                                                                       //
				this.errorList.push({                                                                                              // 840
					message: message,                                                                                                 // 841
					element: element,                                                                                                 // 842
					method: rule.method                                                                                               // 843
				});                                                                                                                // 840
                                                                                                                       //
				this.errorMap[element.name] = message;                                                                             // 846
				this.submitted[element.name] = message;                                                                            // 847
			},                                                                                                                  // 848
                                                                                                                       //
			addWrapper: function addWrapper(toToggle) {                                                                         // 850
				if (this.settings.wrapper) {                                                                                       // 851
					toToggle = toToggle.add(toToggle.parent(this.settings.wrapper));                                                  // 852
				}                                                                                                                  // 853
				return toToggle;                                                                                                   // 854
			},                                                                                                                  // 855
                                                                                                                       //
			defaultShowErrors: function defaultShowErrors() {                                                                   // 857
				var i, elements, error;                                                                                            // 858
				for (i = 0; this.errorList[i]; i++) {                                                                              // 859
					error = this.errorList[i];                                                                                        // 860
					if (this.settings.highlight) {                                                                                    // 861
						this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass);           // 862
					}                                                                                                                 // 863
					this.showLabel(error.element, error.message);                                                                     // 864
				}                                                                                                                  // 865
				if (this.errorList.length) {                                                                                       // 866
					this.toShow = this.toShow.add(this.containers);                                                                   // 867
				}                                                                                                                  // 868
				if (this.settings.success) {                                                                                       // 869
					for (i = 0; this.successList[i]; i++) {                                                                           // 870
						this.showLabel(this.successList[i]);                                                                             // 871
					}                                                                                                                 // 872
				}                                                                                                                  // 873
				if (this.settings.unhighlight) {                                                                                   // 874
					for (i = 0, elements = this.validElements(); elements[i]; i++) {                                                  // 875
						this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, this.settings.validClass);           // 876
					}                                                                                                                 // 877
				}                                                                                                                  // 878
				this.toHide = this.toHide.not(this.toShow);                                                                        // 879
				this.hideErrors();                                                                                                 // 880
				this.addWrapper(this.toShow).show();                                                                               // 881
			},                                                                                                                  // 882
                                                                                                                       //
			validElements: function validElements() {                                                                           // 884
				return this.currentElements.not(this.invalidElements());                                                           // 885
			},                                                                                                                  // 886
                                                                                                                       //
			invalidElements: function invalidElements() {                                                                       // 888
				return $(this.errorList).map(function () {                                                                         // 889
					return this.element;                                                                                              // 890
				});                                                                                                                // 891
			},                                                                                                                  // 892
                                                                                                                       //
			showLabel: function showLabel(element, message) {                                                                   // 894
				var place,                                                                                                         // 895
				    group,                                                                                                         // 895
				    errorID,                                                                                                       // 895
				    v,                                                                                                             // 895
				    error = this.errorsFor(element),                                                                               // 895
				    elementID = this.idOrName(element),                                                                            // 895
				    describedBy = $(element).attr("aria-describedby");                                                             // 895
                                                                                                                       //
				if (error.length) {                                                                                                // 900
                                                                                                                       //
					// Refresh error/success class                                                                                    //
					error.removeClass(this.settings.validClass).addClass(this.settings.errorClass);                                   // 903
                                                                                                                       //
					// Replace message on existing label                                                                              //
					error.html(message);                                                                                              // 906
				} else {                                                                                                           // 907
                                                                                                                       //
					// Create error element                                                                                           //
					error = $("<" + this.settings.errorElement + ">").attr("id", elementID + "-error").addClass(this.settings.errorClass).html(message || "");
                                                                                                                       //
					// Maintain reference to the element to be placed into the DOM                                                    //
					place = error;                                                                                                    // 916
					if (this.settings.wrapper) {                                                                                      // 917
                                                                                                                       //
						// Make sure the element is visible, even in IE                                                                  //
						// actually showing the wrapped element is handled elsewhere                                                     //
						place = error.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();                                   // 921
					}                                                                                                                 // 922
					if (this.labelContainer.length) {                                                                                 // 923
						this.labelContainer.append(place);                                                                               // 924
					} else if (this.settings.errorPlacement) {                                                                        // 925
						this.settings.errorPlacement(place, $(element));                                                                 // 926
					} else {                                                                                                          // 927
						place.insertAfter(element);                                                                                      // 928
					}                                                                                                                 // 929
                                                                                                                       //
					// Link error back to the element                                                                                 //
					if (error.is("label")) {                                                                                          // 932
                                                                                                                       //
						// If the error is a label, then associate using 'for'                                                           //
						error.attr("for", elementID);                                                                                    // 935
                                                                                                                       //
						// If the element is not a child of an associated label, then it's necessary                                     //
						// to explicitly apply aria-describedby                                                                          //
					} else if (error.parents("label[for='" + this.escapeCssMeta(elementID) + "']").length === 0) {                    // 939
							errorID = error.attr("id");                                                                                     // 940
                                                                                                                       //
							// Respect existing non-error aria-describedby                                                                  //
							if (!describedBy) {                                                                                             // 943
								describedBy = errorID;                                                                                         // 944
							} else if (!describedBy.match(new RegExp("\\b" + this.escapeCssMeta(errorID) + "\\b"))) {                       // 945
                                                                                                                       //
								// Add to end of list if not already present                                                                   //
								describedBy += " " + errorID;                                                                                  // 948
							}                                                                                                               // 949
							$(element).attr("aria-describedby", describedBy);                                                               // 950
                                                                                                                       //
							// If this element is grouped, then assign to all elements in the same group                                    //
							group = this.groups[element.name];                                                                              // 953
							if (group) {                                                                                                    // 954
								v = this;                                                                                                      // 955
								$.each(v.groups, function (name, testgroup) {                                                                  // 956
									if (testgroup === group) {                                                                                    // 957
										$("[name='" + v.escapeCssMeta(name) + "']", v.currentForm).attr("aria-describedby", error.attr("id"));       // 958
									}                                                                                                             // 960
								});                                                                                                            // 961
							}                                                                                                               // 962
						}                                                                                                                // 963
				}                                                                                                                  // 964
				if (!message && this.settings.success) {                                                                           // 965
					error.text("");                                                                                                   // 966
					if (typeof this.settings.success === "string") {                                                                  // 967
						error.addClass(this.settings.success);                                                                           // 968
					} else {                                                                                                          // 969
						this.settings.success(error, element);                                                                           // 970
					}                                                                                                                 // 971
				}                                                                                                                  // 972
				this.toShow = this.toShow.add(error);                                                                              // 973
			},                                                                                                                  // 974
                                                                                                                       //
			errorsFor: function errorsFor(element) {                                                                            // 976
				var name = this.escapeCssMeta(this.idOrName(element)),                                                             // 977
				    describer = $(element).attr("aria-describedby"),                                                               // 977
				    selector = "label[for='" + name + "'], label[for='" + name + "'] *";                                           // 977
                                                                                                                       //
				// 'aria-describedby' should directly reference the error element                                                  //
				if (describer) {                                                                                                   // 982
					selector = selector + ", #" + this.escapeCssMeta(describer).replace(/\s+/g, ", #");                               // 983
				}                                                                                                                  // 985
                                                                                                                       //
				return this.errors().filter(selector);                                                                             // 987
			},                                                                                                                  // 990
                                                                                                                       //
			// See https://api.jquery.com/category/selectors/, for CSS                                                          //
			// meta-characters that should be escaped in order to be used with JQuery                                           //
			// as a literal part of a name/id or any selector.                                                                  //
			escapeCssMeta: function escapeCssMeta(string) {                                                                     // 995
				return string.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1");                                           // 996
			},                                                                                                                  // 997
                                                                                                                       //
			idOrName: function idOrName(element) {                                                                              // 999
				return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);         // 1000
			},                                                                                                                  // 1001
                                                                                                                       //
			validationTargetFor: function validationTargetFor(element) {                                                        // 1003
                                                                                                                       //
				// If radio/checkbox, validate first element in group instead                                                      //
				if (this.checkable(element)) {                                                                                     // 1006
					element = this.findByName(element.name);                                                                          // 1007
				}                                                                                                                  // 1008
                                                                                                                       //
				// Always apply ignore filter                                                                                      //
				return $(element).not(this.settings.ignore)[0];                                                                    // 1011
			},                                                                                                                  // 1012
                                                                                                                       //
			checkable: function checkable(element) {                                                                            // 1014
				return (/radio|checkbox/i.test(element.type)                                                                       // 1015
				);                                                                                                                 // 1015
			},                                                                                                                  // 1016
                                                                                                                       //
			findByName: function findByName(name) {                                                                             // 1018
				return $(this.currentForm).find("[name='" + this.escapeCssMeta(name) + "']");                                      // 1019
			},                                                                                                                  // 1020
                                                                                                                       //
			getLength: function getLength(value, element) {                                                                     // 1022
				switch (element.nodeName.toLowerCase()) {                                                                          // 1023
					case "select":                                                                                                    // 1024
						return $("option:selected", element).length;                                                                     // 1025
					case "input":                                                                                                     // 1026
						if (this.checkable(element)) {                                                                                   // 1027
							return this.findByName(element.name).filter(":checked").length;                                                 // 1028
						}                                                                                                                // 1029
				}                                                                                                                  // 1023
				return value.length;                                                                                               // 1031
			},                                                                                                                  // 1032
                                                                                                                       //
			depend: function depend(param, element) {                                                                           // 1034
				return this.dependTypes[typeof param === "undefined" ? "undefined" : _typeof(param)] ? this.dependTypes[typeof param === "undefined" ? "undefined" : _typeof(param)](param, element) : true;
			},                                                                                                                  // 1036
                                                                                                                       //
			dependTypes: {                                                                                                      // 1038
				"boolean": function boolean(param) {                                                                               // 1039
					return param;                                                                                                     // 1040
				},                                                                                                                 // 1041
				"string": function string(param, element) {                                                                        // 1042
					return !!$(param, element.form).length;                                                                           // 1043
				},                                                                                                                 // 1044
				"function": function _function(param, element) {                                                                   // 1045
					return param(element);                                                                                            // 1046
				}                                                                                                                  // 1047
			},                                                                                                                  // 1038
                                                                                                                       //
			optional: function optional(element) {                                                                              // 1050
				var val = this.elementValue(element);                                                                              // 1051
				return !$.validator.methods.required.call(this, val, element) && "dependency-mismatch";                            // 1052
			},                                                                                                                  // 1053
                                                                                                                       //
			startRequest: function startRequest(element) {                                                                      // 1055
				if (!this.pending[element.name]) {                                                                                 // 1056
					this.pendingRequest++;                                                                                            // 1057
					$(element).addClass(this.settings.pendingClass);                                                                  // 1058
					this.pending[element.name] = true;                                                                                // 1059
				}                                                                                                                  // 1060
			},                                                                                                                  // 1061
                                                                                                                       //
			stopRequest: function stopRequest(element, valid) {                                                                 // 1063
				this.pendingRequest--;                                                                                             // 1064
                                                                                                                       //
				// Sometimes synchronization fails, make sure pendingRequest is never < 0                                          //
				if (this.pendingRequest < 0) {                                                                                     // 1067
					this.pendingRequest = 0;                                                                                          // 1068
				}                                                                                                                  // 1069
				delete this.pending[element.name];                                                                                 // 1070
				$(element).removeClass(this.settings.pendingClass);                                                                // 1071
				if (valid && this.pendingRequest === 0 && this.formSubmitted && this.form()) {                                     // 1072
					$(this.currentForm).submit();                                                                                     // 1073
					this.formSubmitted = false;                                                                                       // 1074
				} else if (!valid && this.pendingRequest === 0 && this.formSubmitted) {                                            // 1075
					$(this.currentForm).triggerHandler("invalid-form", [this]);                                                       // 1076
					this.formSubmitted = false;                                                                                       // 1077
				}                                                                                                                  // 1078
			},                                                                                                                  // 1079
                                                                                                                       //
			previousValue: function previousValue(element, method) {                                                            // 1081
				return $.data(element, "previousValue") || $.data(element, "previousValue", {                                      // 1082
					old: null,                                                                                                        // 1083
					valid: true,                                                                                                      // 1084
					message: this.defaultMessage(element, { method: method })                                                         // 1085
				});                                                                                                                // 1082
			},                                                                                                                  // 1087
                                                                                                                       //
			// Cleans up all forms and elements, removes validator-specific events                                              //
			destroy: function destroy() {                                                                                       // 1090
				this.resetForm();                                                                                                  // 1091
                                                                                                                       //
				$(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur");
			}                                                                                                                   // 1099
                                                                                                                       //
		},                                                                                                                   // 373
                                                                                                                       //
		classRuleSettings: {                                                                                                 // 1103
			required: { required: true },                                                                                       // 1104
			email: { email: true },                                                                                             // 1105
			url: { url: true },                                                                                                 // 1106
			date: { date: true },                                                                                               // 1107
			dateISO: { dateISO: true },                                                                                         // 1108
			number: { number: true },                                                                                           // 1109
			digits: { digits: true },                                                                                           // 1110
			creditcard: { creditcard: true }                                                                                    // 1111
		},                                                                                                                   // 1103
                                                                                                                       //
		addClassRules: function addClassRules(className, rules) {                                                            // 1114
			if (className.constructor === String) {                                                                             // 1115
				this.classRuleSettings[className] = rules;                                                                         // 1116
			} else {                                                                                                            // 1117
				$.extend(this.classRuleSettings, className);                                                                       // 1118
			}                                                                                                                   // 1119
		},                                                                                                                   // 1120
                                                                                                                       //
		classRules: function classRules(element) {                                                                           // 1122
			var rules = {},                                                                                                     // 1123
			    classes = $(element).attr("class");                                                                             // 1123
                                                                                                                       //
			if (classes) {                                                                                                      // 1126
				$.each(classes.split(" "), function () {                                                                           // 1127
					if (this in $.validator.classRuleSettings) {                                                                      // 1128
						$.extend(rules, $.validator.classRuleSettings[this]);                                                            // 1129
					}                                                                                                                 // 1130
				});                                                                                                                // 1131
			}                                                                                                                   // 1132
			return rules;                                                                                                       // 1133
		},                                                                                                                   // 1134
                                                                                                                       //
		normalizeAttributeRule: function normalizeAttributeRule(rules, type, method, value) {                                // 1136
                                                                                                                       //
			// Convert the value to a number for number inputs, and for text for backwards compability                          //
			// allows type="date" and others to be compared as strings                                                          //
			if (/min|max|step/.test(method) && (type === null || /number|range|text/.test(type))) {                             // 1140
				value = Number(value);                                                                                             // 1141
                                                                                                                       //
				// Support Opera Mini, which returns NaN for undefined minlength                                                   //
				if (isNaN(value)) {                                                                                                // 1144
					value = undefined;                                                                                                // 1145
				}                                                                                                                  // 1146
			}                                                                                                                   // 1147
                                                                                                                       //
			if (value || value === 0) {                                                                                         // 1149
				rules[method] = value;                                                                                             // 1150
			} else if (type === method && type !== "range") {                                                                   // 1151
                                                                                                                       //
				// Exception: the jquery validate 'range' method                                                                   //
				// does not test for the html5 'range' type                                                                        //
				rules[method] = true;                                                                                              // 1155
			}                                                                                                                   // 1156
		},                                                                                                                   // 1157
                                                                                                                       //
		attributeRules: function attributeRules(element) {                                                                   // 1159
			var rules = {},                                                                                                     // 1160
			    $element = $(element),                                                                                          // 1160
			    type = element.getAttribute("type"),                                                                            // 1160
			    method,                                                                                                         // 1160
			    value;                                                                                                          // 1160
                                                                                                                       //
			for (method in $.validator.methods) {                                                                               // 1165
                                                                                                                       //
				// Support for <input required> in both html5 and older browsers                                                   //
				if (method === "required") {                                                                                       // 1168
					value = element.getAttribute(method);                                                                             // 1169
                                                                                                                       //
					// Some browsers return an empty string for the required attribute                                                //
					// and non-HTML5 browsers might have required="" markup                                                           //
					if (value === "") {                                                                                               // 1173
						value = true;                                                                                                    // 1174
					}                                                                                                                 // 1175
                                                                                                                       //
					// Force non-HTML5 browsers to return bool                                                                        //
					value = !!value;                                                                                                  // 1178
				} else {                                                                                                           // 1179
					value = $element.attr(method);                                                                                    // 1180
				}                                                                                                                  // 1181
                                                                                                                       //
				this.normalizeAttributeRule(rules, type, method, value);                                                           // 1183
			}                                                                                                                   // 1184
                                                                                                                       //
			// 'maxlength' may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs                       //
			if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {                                              // 1187
				delete rules.maxlength;                                                                                            // 1188
			}                                                                                                                   // 1189
                                                                                                                       //
			return rules;                                                                                                       // 1191
		},                                                                                                                   // 1192
                                                                                                                       //
		dataRules: function dataRules(element) {                                                                             // 1194
			var rules = {},                                                                                                     // 1195
			    $element = $(element),                                                                                          // 1195
			    type = element.getAttribute("type"),                                                                            // 1195
			    method,                                                                                                         // 1195
			    value;                                                                                                          // 1195
                                                                                                                       //
			for (method in $.validator.methods) {                                                                               // 1200
				value = $element.data("rule" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase());                // 1201
				this.normalizeAttributeRule(rules, type, method, value);                                                           // 1202
			}                                                                                                                   // 1203
			return rules;                                                                                                       // 1204
		},                                                                                                                   // 1205
                                                                                                                       //
		staticRules: function staticRules(element) {                                                                         // 1207
			var rules = {},                                                                                                     // 1208
			    validator = $.data(element.form, "validator");                                                                  // 1208
                                                                                                                       //
			if (validator.settings.rules) {                                                                                     // 1211
				rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};                                   // 1212
			}                                                                                                                   // 1213
			return rules;                                                                                                       // 1214
		},                                                                                                                   // 1215
                                                                                                                       //
		normalizeRules: function normalizeRules(rules, element) {                                                            // 1217
                                                                                                                       //
			// Handle dependency check                                                                                          //
			$.each(rules, function (prop, val) {                                                                                // 1220
                                                                                                                       //
				// Ignore rule when param is explicitly false, eg. required:false                                                  //
				if (val === false) {                                                                                               // 1223
					delete rules[prop];                                                                                               // 1224
					return;                                                                                                           // 1225
				}                                                                                                                  // 1226
				if (val.param || val.depends) {                                                                                    // 1227
					var keepRule = true;                                                                                              // 1228
					switch (_typeof(val.depends)) {                                                                                   // 1229
						case "string":                                                                                                   // 1230
							keepRule = !!$(val.depends, element.form).length;                                                               // 1231
							break;                                                                                                          // 1232
						case "function":                                                                                                 // 1233
							keepRule = val.depends.call(element, element);                                                                  // 1234
							break;                                                                                                          // 1235
					}                                                                                                                 // 1229
					if (keepRule) {                                                                                                   // 1237
						rules[prop] = val.param !== undefined ? val.param : true;                                                        // 1238
					} else {                                                                                                          // 1239
						$.data(element.form, "validator").resetElements($(element));                                                     // 1240
						delete rules[prop];                                                                                              // 1241
					}                                                                                                                 // 1242
				}                                                                                                                  // 1243
			});                                                                                                                 // 1244
                                                                                                                       //
			// Evaluate parameters                                                                                              //
			$.each(rules, function (rule, parameter) {                                                                          // 1247
				rules[rule] = $.isFunction(parameter) && rule !== "normalizer" ? parameter(element) : parameter;                   // 1248
			});                                                                                                                 // 1249
                                                                                                                       //
			// Clean number parameters                                                                                          //
			$.each(["minlength", "maxlength"], function () {                                                                    // 1252
				if (rules[this]) {                                                                                                 // 1253
					rules[this] = Number(rules[this]);                                                                                // 1254
				}                                                                                                                  // 1255
			});                                                                                                                 // 1256
			$.each(["rangelength", "range"], function () {                                                                      // 1257
				var parts;                                                                                                         // 1258
				if (rules[this]) {                                                                                                 // 1259
					if ($.isArray(rules[this])) {                                                                                     // 1260
						rules[this] = [Number(rules[this][0]), Number(rules[this][1])];                                                  // 1261
					} else if (typeof rules[this] === "string") {                                                                     // 1262
						parts = rules[this].replace(/[\[\]]/g, "").split(/[\s,]+/);                                                      // 1263
						rules[this] = [Number(parts[0]), Number(parts[1])];                                                              // 1264
					}                                                                                                                 // 1265
				}                                                                                                                  // 1266
			});                                                                                                                 // 1267
                                                                                                                       //
			if ($.validator.autoCreateRanges) {                                                                                 // 1269
                                                                                                                       //
				// Auto-create ranges                                                                                              //
				if (rules.min != null && rules.max != null) {                                                                      // 1272
					rules.range = [rules.min, rules.max];                                                                             // 1273
					delete rules.min;                                                                                                 // 1274
					delete rules.max;                                                                                                 // 1275
				}                                                                                                                  // 1276
				if (rules.minlength != null && rules.maxlength != null) {                                                          // 1277
					rules.rangelength = [rules.minlength, rules.maxlength];                                                           // 1278
					delete rules.minlength;                                                                                           // 1279
					delete rules.maxlength;                                                                                           // 1280
				}                                                                                                                  // 1281
			}                                                                                                                   // 1282
                                                                                                                       //
			return rules;                                                                                                       // 1284
		},                                                                                                                   // 1285
                                                                                                                       //
		// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}                            //
		normalizeRule: function normalizeRule(data) {                                                                        // 1288
			if (typeof data === "string") {                                                                                     // 1289
				var transformed = {};                                                                                              // 1290
				$.each(data.split(/\s/), function () {                                                                             // 1291
					transformed[this] = true;                                                                                         // 1292
				});                                                                                                                // 1293
				data = transformed;                                                                                                // 1294
			}                                                                                                                   // 1295
			return data;                                                                                                        // 1296
		},                                                                                                                   // 1297
                                                                                                                       //
		// http://jqueryvalidation.org/jQuery.validator.addMethod/                                                           //
		addMethod: function addMethod(name, method, message) {                                                               // 1300
			$.validator.methods[name] = method;                                                                                 // 1301
			$.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];                          // 1302
			if (method.length < 3) {                                                                                            // 1303
				$.validator.addClassRules(name, $.validator.normalizeRule(name));                                                  // 1304
			}                                                                                                                   // 1305
		},                                                                                                                   // 1306
                                                                                                                       //
		// http://jqueryvalidation.org/jQuery.validator.methods/                                                             //
		methods: {                                                                                                           // 1309
                                                                                                                       //
			// http://jqueryvalidation.org/required-method/                                                                     //
			required: function required(value, element, param) {                                                                // 1312
                                                                                                                       //
				// Check if dependency is met                                                                                      //
				if (!this.depend(param, element)) {                                                                                // 1315
					return "dependency-mismatch";                                                                                     // 1316
				}                                                                                                                  // 1317
				if (element.nodeName.toLowerCase() === "select") {                                                                 // 1318
                                                                                                                       //
					// Could be an array for select-multiple or a string, both are fine this way                                      //
					var val = $(element).val();                                                                                       // 1321
					return val && val.length > 0;                                                                                     // 1322
				}                                                                                                                  // 1323
				if (this.checkable(element)) {                                                                                     // 1324
					return this.getLength(value, element) > 0;                                                                        // 1325
				}                                                                                                                  // 1326
				return value.length > 0;                                                                                           // 1327
			},                                                                                                                  // 1328
                                                                                                                       //
			// http://jqueryvalidation.org/email-method/                                                                        //
			email: function email(value, element) {                                                                             // 1331
                                                                                                                       //
				// From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address                                     //
				// Retrieved 2014-01-14                                                                                            //
				// If you have a problem with this implementation, report a bug against the above spec                             //
				// Or use custom methods to implement your own email validation                                                    //
				return this.optional(element) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(value);
			},                                                                                                                  // 1338
                                                                                                                       //
			// http://jqueryvalidation.org/url-method/                                                                          //
			url: function url(value, element) {                                                                                 // 1341
                                                                                                                       //
				// Copyright (c) 2010-2013 Diego Perini, MIT licensed                                                              //
				// https://gist.github.com/dperini/729294                                                                          //
				// see also https://mathiasbynens.be/demo/url-regex                                                                //
				// modified to allow protocol-relative URLs                                                                        //
				return this.optional(element) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(value);
			},                                                                                                                  // 1348
                                                                                                                       //
			// http://jqueryvalidation.org/date-method/                                                                         //
			date: function date(value, element) {                                                                               // 1351
				return this.optional(element) || !/Invalid|NaN/.test(new Date(value).toString());                                  // 1352
			},                                                                                                                  // 1353
                                                                                                                       //
			// http://jqueryvalidation.org/dateISO-method/                                                                      //
			dateISO: function dateISO(value, element) {                                                                         // 1356
				return this.optional(element) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);       // 1357
			},                                                                                                                  // 1358
                                                                                                                       //
			// http://jqueryvalidation.org/number-method/                                                                       //
			number: function number(value, element) {                                                                           // 1361
				return this.optional(element) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);                        // 1362
			},                                                                                                                  // 1363
                                                                                                                       //
			// http://jqueryvalidation.org/digits-method/                                                                       //
			digits: function digits(value, element) {                                                                           // 1366
				return this.optional(element) || /^\d+$/.test(value);                                                              // 1367
			},                                                                                                                  // 1368
                                                                                                                       //
			// http://jqueryvalidation.org/minlength-method/                                                                    //
			minlength: function minlength(value, element, param) {                                                              // 1371
				var length = $.isArray(value) ? value.length : this.getLength(value, element);                                     // 1372
				return this.optional(element) || length >= param;                                                                  // 1373
			},                                                                                                                  // 1374
                                                                                                                       //
			// http://jqueryvalidation.org/maxlength-method/                                                                    //
			maxlength: function maxlength(value, element, param) {                                                              // 1377
				var length = $.isArray(value) ? value.length : this.getLength(value, element);                                     // 1378
				return this.optional(element) || length <= param;                                                                  // 1379
			},                                                                                                                  // 1380
                                                                                                                       //
			// http://jqueryvalidation.org/rangelength-method/                                                                  //
			rangelength: function rangelength(value, element, param) {                                                          // 1383
				var length = $.isArray(value) ? value.length : this.getLength(value, element);                                     // 1384
				return this.optional(element) || length >= param[0] && length <= param[1];                                         // 1385
			},                                                                                                                  // 1386
                                                                                                                       //
			// http://jqueryvalidation.org/min-method/                                                                          //
			min: function min(value, element, param) {                                                                          // 1389
				return this.optional(element) || value >= param;                                                                   // 1390
			},                                                                                                                  // 1391
                                                                                                                       //
			// http://jqueryvalidation.org/max-method/                                                                          //
			max: function max(value, element, param) {                                                                          // 1394
				return this.optional(element) || value <= param;                                                                   // 1395
			},                                                                                                                  // 1396
                                                                                                                       //
			// http://jqueryvalidation.org/range-method/                                                                        //
			range: function range(value, element, param) {                                                                      // 1399
				return this.optional(element) || value >= param[0] && value <= param[1];                                           // 1400
			},                                                                                                                  // 1401
                                                                                                                       //
			// http://jqueryvalidation.org/step-method/                                                                         //
			step: function step(value, element, param) {                                                                        // 1404
				var type = $(element).attr("type"),                                                                                // 1405
				    errorMessage = "Step attribute on input type " + type + " is not supported.",                                  // 1405
				    supportedTypes = ["text", "number", "range"],                                                                  // 1405
				    re = new RegExp("\\b" + type + "\\b"),                                                                         // 1405
				    notSupported = type && !re.test(supportedTypes.join());                                                        // 1405
                                                                                                                       //
				// Works only for text, number and range input types                                                               //
				// TODO find a way to support input types date, datetime, datetime-local, month, time and week                     //
				if (notSupported) {                                                                                                // 1413
					throw new Error(errorMessage);                                                                                    // 1414
				}                                                                                                                  // 1415
				return this.optional(element) || value % param === 0;                                                              // 1416
			},                                                                                                                  // 1417
                                                                                                                       //
			// http://jqueryvalidation.org/equalTo-method/                                                                      //
			equalTo: function equalTo(value, element, param) {                                                                  // 1420
                                                                                                                       //
				// Bind to the blur event of the target in order to revalidate whenever the target field is updated                //
				var target = $(param);                                                                                             // 1423
				if (this.settings.onfocusout && target.not(".validate-equalTo-blur").length) {                                     // 1424
					target.addClass("validate-equalTo-blur").on("blur.validate-equalTo", function () {                                // 1425
						$(element).valid();                                                                                              // 1426
					});                                                                                                               // 1427
				}                                                                                                                  // 1428
				return value === target.val();                                                                                     // 1429
			},                                                                                                                  // 1430
                                                                                                                       //
			// http://jqueryvalidation.org/remote-method/                                                                       //
			remote: function remote(value, element, param, method) {                                                            // 1433
				if (this.optional(element)) {                                                                                      // 1434
					return "dependency-mismatch";                                                                                     // 1435
				}                                                                                                                  // 1436
                                                                                                                       //
				method = typeof method === "string" && method || "remote";                                                         // 1438
                                                                                                                       //
				var previous = this.previousValue(element, method),                                                                // 1440
				    validator,                                                                                                     // 1440
				    data,                                                                                                          // 1440
				    optionDataString;                                                                                              // 1440
                                                                                                                       //
				if (!this.settings.messages[element.name]) {                                                                       // 1443
					this.settings.messages[element.name] = {};                                                                        // 1444
				}                                                                                                                  // 1445
				previous.originalMessage = previous.originalMessage || this.settings.messages[element.name][method];               // 1446
				this.settings.messages[element.name][method] = previous.message;                                                   // 1447
                                                                                                                       //
				param = typeof param === "string" && { url: param } || param;                                                      // 1449
				optionDataString = $.param($.extend({ data: value }, param.data));                                                 // 1450
				if (previous.old === optionDataString) {                                                                           // 1451
					return previous.valid;                                                                                            // 1452
				}                                                                                                                  // 1453
                                                                                                                       //
				previous.old = optionDataString;                                                                                   // 1455
				validator = this;                                                                                                  // 1456
				this.startRequest(element);                                                                                        // 1457
				data = {};                                                                                                         // 1458
				data[element.name] = value;                                                                                        // 1459
				$.ajax($.extend(true, {                                                                                            // 1460
					mode: "abort",                                                                                                    // 1461
					port: "validate" + element.name,                                                                                  // 1462
					dataType: "json",                                                                                                 // 1463
					data: data,                                                                                                       // 1464
					context: validator.currentForm,                                                                                   // 1465
					success: function success(response) {                                                                             // 1466
						var valid = response === true || response === "true",                                                            // 1467
						    errors,                                                                                                      // 1467
						    message,                                                                                                     // 1467
						    submitted;                                                                                                   // 1467
                                                                                                                       //
						validator.settings.messages[element.name][method] = previous.originalMessage;                                    // 1470
						if (valid) {                                                                                                     // 1471
							submitted = validator.formSubmitted;                                                                            // 1472
							validator.resetInternals();                                                                                     // 1473
							validator.toHide = validator.errorsFor(element);                                                                // 1474
							validator.formSubmitted = submitted;                                                                            // 1475
							validator.successList.push(element);                                                                            // 1476
							validator.invalid[element.name] = false;                                                                        // 1477
							validator.showErrors();                                                                                         // 1478
						} else {                                                                                                         // 1479
							errors = {};                                                                                                    // 1480
							message = response || validator.defaultMessage(element, { method: method, parameters: value });                 // 1481
							errors[element.name] = previous.message = message;                                                              // 1482
							validator.invalid[element.name] = true;                                                                         // 1483
							validator.showErrors(errors);                                                                                   // 1484
						}                                                                                                                // 1485
						previous.valid = valid;                                                                                          // 1486
						validator.stopRequest(element, valid);                                                                           // 1487
					}                                                                                                                 // 1488
				}, param));                                                                                                        // 1460
				return "pending";                                                                                                  // 1490
			}                                                                                                                   // 1491
		}                                                                                                                    // 1309
                                                                                                                       //
	});                                                                                                                   // 260
                                                                                                                       //
	// Ajax mode: abort                                                                                                   //
	// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});                                                             //
	// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()
                                                                                                                       //
	var pendingRequests = {},                                                                                             // 1500
	    ajax;                                                                                                             // 1500
                                                                                                                       //
	// Use a prefilter if available (1.5+)                                                                                //
	if ($.ajaxPrefilter) {                                                                                                // 1504
		$.ajaxPrefilter(function (settings, _, xhr) {                                                                        // 1505
			var port = settings.port;                                                                                           // 1506
			if (settings.mode === "abort") {                                                                                    // 1507
				if (pendingRequests[port]) {                                                                                       // 1508
					pendingRequests[port].abort();                                                                                    // 1509
				}                                                                                                                  // 1510
				pendingRequests[port] = xhr;                                                                                       // 1511
			}                                                                                                                   // 1512
		});                                                                                                                  // 1513
	} else {                                                                                                              // 1514
                                                                                                                       //
		// Proxy ajax                                                                                                        //
		ajax = $.ajax;                                                                                                       // 1517
		$.ajax = function (settings) {                                                                                       // 1518
			var mode = ("mode" in settings ? settings : $.ajaxSettings).mode,                                                   // 1519
			    port = ("port" in settings ? settings : $.ajaxSettings).port;                                                   // 1519
			if (mode === "abort") {                                                                                             // 1521
				if (pendingRequests[port]) {                                                                                       // 1522
					pendingRequests[port].abort();                                                                                    // 1523
				}                                                                                                                  // 1524
				pendingRequests[port] = ajax.apply(this, arguments);                                                               // 1525
				return pendingRequests[port];                                                                                      // 1526
			}                                                                                                                   // 1527
			return ajax.apply(this, arguments);                                                                                 // 1528
		};                                                                                                                   // 1529
	}                                                                                                                     // 1530
});                                                                                                                    // 1532
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"jquery.validate.min.js":["jquery",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/dist/jquery.validate.min.js                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*! jQuery Validation Plugin - v1.15.0 - 2/24/2016                                                                     // 1
 * http://jqueryvalidation.org/                                                                                        // 2
 * Copyright (c) 2016 Jörn Zaefferer; Licensed MIT */                                                                  // 3
!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):"object"==typeof module&&module.exports?module.exports=a(require("jquery")):a(jQuery)}(function(a){a.extend(a.fn,{validate:function(b){if(!this.length)return void(b&&b.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing."));var c=a.data(this[0],"validator");return c?c:(this.attr("novalidate","novalidate"),c=new a.validator(b,this[0]),a.data(this[0],"validator",c),c.settings.onsubmit&&(this.on("click.validate",":submit",function(b){c.settings.submitHandler&&(c.submitButton=b.target),a(this).hasClass("cancel")&&(c.cancelSubmit=!0),void 0!==a(this).attr("formnovalidate")&&(c.cancelSubmit=!0)}),this.on("submit.validate",function(b){function d(){var d,e;return c.settings.submitHandler?(c.submitButton&&(d=a("<input type='hidden'/>").attr("name",c.submitButton.name).val(a(c.submitButton).val()).appendTo(c.currentForm)),e=c.settings.submitHandler.call(c,c.currentForm,b),c.submitButton&&d.remove(),void 0!==e?e:!1):!0}return c.settings.debug&&b.preventDefault(),c.cancelSubmit?(c.cancelSubmit=!1,d()):c.form()?c.pendingRequest?(c.formSubmitted=!0,!1):d():(c.focusInvalid(),!1)})),c)},valid:function(){var b,c,d;return a(this[0]).is("form")?b=this.validate().form():(d=[],b=!0,c=a(this[0].form).validate(),this.each(function(){b=c.element(this)&&b,b||(d=d.concat(c.errorList))}),c.errorList=d),b},rules:function(b,c){if(this.length){var d,e,f,g,h,i,j=this[0];if(b)switch(d=a.data(j.form,"validator").settings,e=d.rules,f=a.validator.staticRules(j),b){case"add":a.extend(f,a.validator.normalizeRule(c)),delete f.messages,e[j.name]=f,c.messages&&(d.messages[j.name]=a.extend(d.messages[j.name],c.messages));break;case"remove":return c?(i={},a.each(c.split(/\s/),function(b,c){i[c]=f[c],delete f[c],"required"===c&&a(j).removeAttr("aria-required")}),i):(delete e[j.name],f)}return g=a.validator.normalizeRules(a.extend({},a.validator.classRules(j),a.validator.attributeRules(j),a.validator.dataRules(j),a.validator.staticRules(j)),j),g.required&&(h=g.required,delete g.required,g=a.extend({required:h},g),a(j).attr("aria-required","true")),g.remote&&(h=g.remote,delete g.remote,g=a.extend(g,{remote:h})),g}}}),a.extend(a.expr[":"],{blank:function(b){return!a.trim(""+a(b).val())},filled:function(b){var c=a(b).val();return null!==c&&!!a.trim(""+c)},unchecked:function(b){return!a(b).prop("checked")}}),a.validator=function(b,c){this.settings=a.extend(!0,{},a.validator.defaults,b),this.currentForm=c,this.init()},a.validator.format=function(b,c){return 1===arguments.length?function(){var c=a.makeArray(arguments);return c.unshift(b),a.validator.format.apply(this,c)}:void 0===c?b:(arguments.length>2&&c.constructor!==Array&&(c=a.makeArray(arguments).slice(1)),c.constructor!==Array&&(c=[c]),a.each(c,function(a,c){b=b.replace(new RegExp("\\{"+a+"\\}","g"),function(){return c})}),b)},a.extend(a.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:a([]),errorLabelContainer:a([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(a){this.lastActive=a,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,a,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(a)))},onfocusout:function(a){this.checkable(a)||!(a.name in this.submitted)&&this.optional(a)||this.element(a)},onkeyup:function(b,c){var d=[16,17,18,20,35,36,37,38,39,40,45,144,225];9===c.which&&""===this.elementValue(b)||-1!==a.inArray(c.keyCode,d)||(b.name in this.submitted||b.name in this.invalid)&&this.element(b)},onclick:function(a){a.name in this.submitted?this.element(a):a.parentNode.name in this.submitted&&this.element(a.parentNode)},highlight:function(b,c,d){"radio"===b.type?this.findByName(b.name).addClass(c).removeClass(d):a(b).addClass(c).removeClass(d)},unhighlight:function(b,c,d){"radio"===b.type?this.findByName(b.name).removeClass(c).addClass(d):a(b).removeClass(c).addClass(d)}},setDefaults:function(b){a.extend(a.validator.defaults,b)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date ( ISO ).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:a.validator.format("Please enter no more than {0} characters."),minlength:a.validator.format("Please enter at least {0} characters."),rangelength:a.validator.format("Please enter a value between {0} and {1} characters long."),range:a.validator.format("Please enter a value between {0} and {1}."),max:a.validator.format("Please enter a value less than or equal to {0}."),min:a.validator.format("Please enter a value greater than or equal to {0}."),step:a.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){function b(b){var c=a.data(this.form,"validator"),d="on"+b.type.replace(/^validate/,""),e=c.settings;e[d]&&!a(this).is(e.ignore)&&e[d].call(c,this,b)}this.labelContainer=a(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||a(this.currentForm),this.containers=a(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var c,d=this.groups={};a.each(this.settings.groups,function(b,c){"string"==typeof c&&(c=c.split(/\s/)),a.each(c,function(a,c){d[c]=b})}),c=this.settings.rules,a.each(c,function(b,d){c[b]=a.validator.normalizeRule(d)}),a(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable]",b).on("click.validate","select, option, [type='radio'], [type='checkbox']",b),this.settings.invalidHandler&&a(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler),a(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required","true")},form:function(){return this.checkForm(),a.extend(this.submitted,this.errorMap),this.invalid=a.extend({},this.errorMap),this.valid()||a(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var a=0,b=this.currentElements=this.elements();b[a];a++)this.check(b[a]);return this.valid()},element:function(b){var c,d,e=this.clean(b),f=this.validationTargetFor(e),g=this,h=!0;return void 0===f?delete this.invalid[e.name]:(this.prepareElement(f),this.currentElements=a(f),d=this.groups[f.name],d&&a.each(this.groups,function(a,b){b===d&&a!==f.name&&(e=g.validationTargetFor(g.clean(g.findByName(a))),e&&e.name in g.invalid&&(g.currentElements.push(e),h=h&&g.check(e)))}),c=this.check(f)!==!1,h=h&&c,c?this.invalid[f.name]=!1:this.invalid[f.name]=!0,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),a(b).attr("aria-invalid",!c)),h},showErrors:function(b){if(b){var c=this;a.extend(this.errorMap,b),this.errorList=a.map(this.errorMap,function(a,b){return{message:a,element:c.findByName(b)[0]}}),this.successList=a.grep(this.successList,function(a){return!(a.name in b)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){a.fn.resetForm&&a(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var b=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(b)},resetElements:function(a){var b;if(this.settings.unhighlight)for(b=0;a[b];b++)this.settings.unhighlight.call(this,a[b],this.settings.errorClass,""),this.findByName(a[b].name).removeClass(this.settings.validClass);else a.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(a){var b,c=0;for(b in a)a[b]&&c++;return c},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(a){a.not(this.containers).text(""),this.addWrapper(a).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{a(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(b){}},findLastActive:function(){var b=this.lastActive;return b&&1===a.grep(this.errorList,function(a){return a.element.name===b.name}).length&&b},elements:function(){var b=this,c={};return a(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){var d=this.name||a(this).attr("name");return!d&&b.settings.debug&&window.console&&console.error("%o has no name assigned",this),this.hasAttribute("contenteditable")&&(this.form=a(this).closest("form")[0]),d in c||!b.objectLength(a(this).rules())?!1:(c[d]=!0,!0)})},clean:function(b){return a(b)[0]},errors:function(){var b=this.settings.errorClass.split(" ").join(".");return a(this.settings.errorElement+"."+b,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=a([]),this.toHide=a([])},reset:function(){this.resetInternals(),this.currentElements=a([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(a){this.reset(),this.toHide=this.errorsFor(a)},elementValue:function(b){var c,d,e=a(b),f=b.type;return"radio"===f||"checkbox"===f?this.findByName(b.name).filter(":checked").val():"number"===f&&"undefined"!=typeof b.validity?b.validity.badInput?"NaN":e.val():(c=b.hasAttribute("contenteditable")?e.text():e.val(),"file"===f?"C:\\fakepath\\"===c.substr(0,12)?c.substr(12):(d=c.lastIndexOf("/"),d>=0?c.substr(d+1):(d=c.lastIndexOf("\\"),d>=0?c.substr(d+1):c)):"string"==typeof c?c.replace(/\r/g,""):c)},check:function(b){b=this.validationTargetFor(this.clean(b));var c,d,e,f=a(b).rules(),g=a.map(f,function(a,b){return b}).length,h=!1,i=this.elementValue(b);if("function"==typeof f.normalizer){if(i=f.normalizer.call(b,i),"string"!=typeof i)throw new TypeError("The normalizer should return a string value.");delete f.normalizer}for(d in f){e={method:d,parameters:f[d]};try{if(c=a.validator.methods[d].call(this,i,b,e.parameters),"dependency-mismatch"===c&&1===g){h=!0;continue}if(h=!1,"pending"===c)return void(this.toHide=this.toHide.not(this.errorsFor(b)));if(!c)return this.formatAndAdd(b,e),!1}catch(j){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+b.id+", check the '"+e.method+"' method.",j),j instanceof TypeError&&(j.message+=".  Exception occurred when checking element "+b.id+", check the '"+e.method+"' method."),j}}if(!h)return this.objectLength(f)&&this.successList.push(b),!0},customDataMessage:function(b,c){return a(b).data("msg"+c.charAt(0).toUpperCase()+c.substring(1).toLowerCase())||a(b).data("msg")},customMessage:function(a,b){var c=this.settings.messages[a];return c&&(c.constructor===String?c:c[b])},findDefined:function(){for(var a=0;a<arguments.length;a++)if(void 0!==arguments[a])return arguments[a]},defaultMessage:function(b,c){var d=this.findDefined(this.customMessage(b.name,c.method),this.customDataMessage(b,c.method),!this.settings.ignoreTitle&&b.title||void 0,a.validator.messages[c.method],"<strong>Warning: No message defined for "+b.name+"</strong>"),e=/\$?\{(\d+)\}/g;return"function"==typeof d?d=d.call(this,c.parameters,b):e.test(d)&&(d=a.validator.format(d.replace(e,"{$1}"),c.parameters)),d},formatAndAdd:function(a,b){var c=this.defaultMessage(a,b);this.errorList.push({message:c,element:a,method:b.method}),this.errorMap[a.name]=c,this.submitted[a.name]=c},addWrapper:function(a){return this.settings.wrapper&&(a=a.add(a.parent(this.settings.wrapper))),a},defaultShowErrors:function(){var a,b,c;for(a=0;this.errorList[a];a++)c=this.errorList[a],this.settings.highlight&&this.settings.highlight.call(this,c.element,this.settings.errorClass,this.settings.validClass),this.showLabel(c.element,c.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(a=0;this.successList[a];a++)this.showLabel(this.successList[a]);if(this.settings.unhighlight)for(a=0,b=this.validElements();b[a];a++)this.settings.unhighlight.call(this,b[a],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return a(this.errorList).map(function(){return this.element})},showLabel:function(b,c){var d,e,f,g,h=this.errorsFor(b),i=this.idOrName(b),j=a(b).attr("aria-describedby");h.length?(h.removeClass(this.settings.validClass).addClass(this.settings.errorClass),h.html(c)):(h=a("<"+this.settings.errorElement+">").attr("id",i+"-error").addClass(this.settings.errorClass).html(c||""),d=h,this.settings.wrapper&&(d=h.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(d):this.settings.errorPlacement?this.settings.errorPlacement(d,a(b)):d.insertAfter(b),h.is("label")?h.attr("for",i):0===h.parents("label[for='"+this.escapeCssMeta(i)+"']").length&&(f=h.attr("id"),j?j.match(new RegExp("\\b"+this.escapeCssMeta(f)+"\\b"))||(j+=" "+f):j=f,a(b).attr("aria-describedby",j),e=this.groups[b.name],e&&(g=this,a.each(g.groups,function(b,c){c===e&&a("[name='"+g.escapeCssMeta(b)+"']",g.currentForm).attr("aria-describedby",h.attr("id"))})))),!c&&this.settings.success&&(h.text(""),"string"==typeof this.settings.success?h.addClass(this.settings.success):this.settings.success(h,b)),this.toShow=this.toShow.add(h)},errorsFor:function(b){var c=this.escapeCssMeta(this.idOrName(b)),d=a(b).attr("aria-describedby"),e="label[for='"+c+"'], label[for='"+c+"'] *";return d&&(e=e+", #"+this.escapeCssMeta(d).replace(/\s+/g,", #")),this.errors().filter(e)},escapeCssMeta:function(a){return a.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(a){return this.groups[a.name]||(this.checkable(a)?a.name:a.id||a.name)},validationTargetFor:function(b){return this.checkable(b)&&(b=this.findByName(b.name)),a(b).not(this.settings.ignore)[0]},checkable:function(a){return/radio|checkbox/i.test(a.type)},findByName:function(b){return a(this.currentForm).find("[name='"+this.escapeCssMeta(b)+"']")},getLength:function(b,c){switch(c.nodeName.toLowerCase()){case"select":return a("option:selected",c).length;case"input":if(this.checkable(c))return this.findByName(c.name).filter(":checked").length}return b.length},depend:function(a,b){return this.dependTypes[typeof a]?this.dependTypes[typeof a](a,b):!0},dependTypes:{"boolean":function(a){return a},string:function(b,c){return!!a(b,c.form).length},"function":function(a,b){return a(b)}},optional:function(b){var c=this.elementValue(b);return!a.validator.methods.required.call(this,c,b)&&"dependency-mismatch"},startRequest:function(b){this.pending[b.name]||(this.pendingRequest++,a(b).addClass(this.settings.pendingClass),this.pending[b.name]=!0)},stopRequest:function(b,c){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[b.name],a(b).removeClass(this.settings.pendingClass),c&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(a(this.currentForm).submit(),this.formSubmitted=!1):!c&&0===this.pendingRequest&&this.formSubmitted&&(a(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(b,c){return a.data(b,"previousValue")||a.data(b,"previousValue",{old:null,valid:!0,message:this.defaultMessage(b,{method:c})})},destroy:function(){this.resetForm(),a(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(b,c){b.constructor===String?this.classRuleSettings[b]=c:a.extend(this.classRuleSettings,b)},classRules:function(b){var c={},d=a(b).attr("class");return d&&a.each(d.split(" "),function(){this in a.validator.classRuleSettings&&a.extend(c,a.validator.classRuleSettings[this])}),c},normalizeAttributeRule:function(a,b,c,d){/min|max|step/.test(c)&&(null===b||/number|range|text/.test(b))&&(d=Number(d),isNaN(d)&&(d=void 0)),d||0===d?a[c]=d:b===c&&"range"!==b&&(a[c]=!0)},attributeRules:function(b){var c,d,e={},f=a(b),g=b.getAttribute("type");for(c in a.validator.methods)"required"===c?(d=b.getAttribute(c),""===d&&(d=!0),d=!!d):d=f.attr(c),this.normalizeAttributeRule(e,g,c,d);return e.maxlength&&/-1|2147483647|524288/.test(e.maxlength)&&delete e.maxlength,e},dataRules:function(b){var c,d,e={},f=a(b),g=b.getAttribute("type");for(c in a.validator.methods)d=f.data("rule"+c.charAt(0).toUpperCase()+c.substring(1).toLowerCase()),this.normalizeAttributeRule(e,g,c,d);return e},staticRules:function(b){var c={},d=a.data(b.form,"validator");return d.settings.rules&&(c=a.validator.normalizeRule(d.settings.rules[b.name])||{}),c},normalizeRules:function(b,c){return a.each(b,function(d,e){if(e===!1)return void delete b[d];if(e.param||e.depends){var f=!0;switch(typeof e.depends){case"string":f=!!a(e.depends,c.form).length;break;case"function":f=e.depends.call(c,c)}f?b[d]=void 0!==e.param?e.param:!0:(a.data(c.form,"validator").resetElements(a(c)),delete b[d])}}),a.each(b,function(d,e){b[d]=a.isFunction(e)&&"normalizer"!==d?e(c):e}),a.each(["minlength","maxlength"],function(){b[this]&&(b[this]=Number(b[this]))}),a.each(["rangelength","range"],function(){var c;b[this]&&(a.isArray(b[this])?b[this]=[Number(b[this][0]),Number(b[this][1])]:"string"==typeof b[this]&&(c=b[this].replace(/[\[\]]/g,"").split(/[\s,]+/),b[this]=[Number(c[0]),Number(c[1])]))}),a.validator.autoCreateRanges&&(null!=b.min&&null!=b.max&&(b.range=[b.min,b.max],delete b.min,delete b.max),null!=b.minlength&&null!=b.maxlength&&(b.rangelength=[b.minlength,b.maxlength],delete b.minlength,delete b.maxlength)),b},normalizeRule:function(b){if("string"==typeof b){var c={};a.each(b.split(/\s/),function(){c[this]=!0}),b=c}return b},addMethod:function(b,c,d){a.validator.methods[b]=c,a.validator.messages[b]=void 0!==d?d:a.validator.messages[b],c.length<3&&a.validator.addClassRules(b,a.validator.normalizeRule(b))},methods:{required:function(b,c,d){if(!this.depend(d,c))return"dependency-mismatch";if("select"===c.nodeName.toLowerCase()){var e=a(c).val();return e&&e.length>0}return this.checkable(c)?this.getLength(b,c)>0:b.length>0},email:function(a,b){return this.optional(b)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(a)},url:function(a,b){return this.optional(b)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(a)},date:function(a,b){return this.optional(b)||!/Invalid|NaN/.test(new Date(a).toString())},dateISO:function(a,b){return this.optional(b)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(a)},number:function(a,b){return this.optional(b)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(a)},digits:function(a,b){return this.optional(b)||/^\d+$/.test(a)},minlength:function(b,c,d){var e=a.isArray(b)?b.length:this.getLength(b,c);return this.optional(c)||e>=d},maxlength:function(b,c,d){var e=a.isArray(b)?b.length:this.getLength(b,c);return this.optional(c)||d>=e},rangelength:function(b,c,d){var e=a.isArray(b)?b.length:this.getLength(b,c);return this.optional(c)||e>=d[0]&&e<=d[1]},min:function(a,b,c){return this.optional(b)||a>=c},max:function(a,b,c){return this.optional(b)||c>=a},range:function(a,b,c){return this.optional(b)||a>=c[0]&&a<=c[1]},step:function(b,c,d){var e=a(c).attr("type"),f="Step attribute on input type "+e+" is not supported.",g=["text","number","range"],h=new RegExp("\\b"+e+"\\b"),i=e&&!h.test(g.join());if(i)throw new Error(f);return this.optional(c)||b%d===0},equalTo:function(b,c,d){var e=a(d);return this.settings.onfocusout&&e.not(".validate-equalTo-blur").length&&e.addClass("validate-equalTo-blur").on("blur.validate-equalTo",function(){a(c).valid()}),b===e.val()},remote:function(b,c,d,e){if(this.optional(c))return"dependency-mismatch";e="string"==typeof e&&e||"remote";var f,g,h,i=this.previousValue(c,e);return this.settings.messages[c.name]||(this.settings.messages[c.name]={}),i.originalMessage=i.originalMessage||this.settings.messages[c.name][e],this.settings.messages[c.name][e]=i.message,d="string"==typeof d&&{url:d}||d,h=a.param(a.extend({data:b},d.data)),i.old===h?i.valid:(i.old=h,f=this,this.startRequest(c),g={},g[c.name]=b,a.ajax(a.extend(!0,{mode:"abort",port:"validate"+c.name,dataType:"json",data:g,context:f.currentForm,success:function(a){var d,g,h,j=a===!0||"true"===a;f.settings.messages[c.name][e]=i.originalMessage,j?(h=f.formSubmitted,f.resetInternals(),f.toHide=f.errorsFor(c),f.formSubmitted=h,f.successList.push(c),f.invalid[c.name]=!1,f.showErrors()):(d={},g=a||f.defaultMessage(c,{method:e,parameters:b}),d[c.name]=i.message=g,f.invalid[c.name]=!0,f.showErrors(d)),i.valid=j,f.stopRequest(c,j)}},d)),"pending")}}});var b,c={};a.ajaxPrefilter?a.ajaxPrefilter(function(a,b,d){var e=a.port;"abort"===a.mode&&(c[e]&&c[e].abort(),c[e]=d)}):(b=a.ajax,a.ajax=function(d){var e=("mode"in d?d:a.ajaxSettings).mode,f=("port"in d?d:a.ajaxSettings).port;return"abort"===e?(c[f]&&c[f].abort(),c[f]=b.apply(this,arguments),c[f]):b.apply(this,arguments)})});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"funcoes_globais":{"recalcular-posicao-rodape.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/funcoes_globais/recalcular-posicao-rodape.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
recalcular_posicao_rodape = function recalcular_posicao_rodape() {                                                     // 1
                                                                                                                       //
    var ch = $('.container').height(),                                                                                 // 3
        wh = $(window).height(),                                                                                       // 3
        logoSize = 30,                                                                                                 // 3
        // logo height                                                                                                 // 3
    bottom = 5,                                                                                                        // 6
        // distancia da parte de baixo da tela                                                                         // 3
    diff = ch + logoSize - wh,                                                                                         // 7
        $rodape = $('.rodape');                                                                                        // 3
                                                                                                                       //
    if (diff > 0) {                                                                                                    // 10
        $rodape.css('bottom', -diff + 'px');                                                                           // 11
    } else {                                                                                                           // 12
        $rodape.css('bottom', bottom + 'px');                                                                          // 14
    }                                                                                                                  // 15
};                                                                                                                     // 17
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"helpers":{"flow-router.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/helpers/flow-router.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    //
 * Created by lucas on 7/23/16.                                                                                        //
 */                                                                                                                    //
                                                                                                                       //
var pathFor = function pathFor(path, view) {                                                                           // 6
    if (path.hash) {                                                                                                   // 7
        view = path;                                                                                                   // 8
        path = view.hash.route;                                                                                        // 9
        delete view.hash.route;                                                                                        // 10
    }                                                                                                                  // 11
                                                                                                                       //
    if (path == null) {                                                                                                // 13
        path = "";                                                                                                     // 13
    }                                                                                                                  // 13
                                                                                                                       //
    var query = view.hash.query ? FlowRouter._qs.parse(view.hash.query) : {};                                          // 15
    return FlowRouter.path(path, view.hash, query);                                                                    // 16
};                                                                                                                     // 17
                                                                                                                       //
Template.registerHelper('pathFor', pathFor);                                                                           // 19
                                                                                                                       //
Template.registerHelper('urlFor', function (path, view) {                                                              // 21
    return Meteor.absoluteUrl(pathFor(path, view).substr(1));                                                          // 22
});                                                                                                                    // 23
                                                                                                                       //
Template.registerHelper('currentRoute', function (route) {                                                             // 25
    FlowRouter.watchPathChange();                                                                                      // 26
    return FlowRouter.current().route.name === route ? 'active' : '';                                                  // 27
});                                                                                                                    // 28
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"spacebars.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/helpers/spacebars.js                                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// This allows us to write inline arrays in Blaze templates                                                            //
// like so: {{> template param=(array 1 2 3) }}                                                                        //
// => The template's data context will look like this:                                                                 //
// { param: [1, 2, 3] }                                                                                                //
Template.registerHelper('array', function () {                                                                         // 5
    return Array.from(arguments).slice(0, arguments.length - 1);                                                       // 6
});                                                                                                                    // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"main.js":["/imports/startup/client/","../node_modules/bootstrap/dist/css/bootstrap.min.css","../node_modules/bootstrap/dist/js/bootstrap.min",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/main.js                                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.import('/imports/startup/client/');module.import('../node_modules/bootstrap/dist/css/bootstrap.min.css');module.import('../node_modules/bootstrap/dist/js/bootstrap.min');
                                                                                                                       // 2
                                                                                                                       // 3
                                                                                                                       //
Bert.defaults.hideDelay = 5000;                                                                                        // 5
                                                                                                                       //
// FlowRouter.wait();                                                                                                  //
//                                                                                                                     //
// Tracker.autorun(function() {                                                                                        //
//     if (Roles.subscription.ready() && !FlowRouter._initialized) {                                                   //
//         FlowRouter.initialize()                                                                                     //
//     }                                                                                                               //
// });                                                                                                                 //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}},{"extensions":[".js",".json",".html",".css",".sass",".less",".scss"]});
require("./client/dist/datepicker/js/bootstrap-datepicker.js");
require("./client/dist/datepicker/locales/bootstrap-datepicker.pt-BR.min.js");
require("./client/dist/additional-methods.js");
require("./client/dist/additional-methods.min.js");
require("./client/dist/jquery.mask.min.js");
require("./client/dist/jquery.maskedinput.js");
require("./client/dist/jquery.validate.js");
require("./client/dist/jquery.validate.min.js");
require("./client/funcoes_globais/recalcular-posicao-rodape.js");
require("./client/helpers/flow-router.js");
require("./client/helpers/spacebars.js");
require("./client/main.js");