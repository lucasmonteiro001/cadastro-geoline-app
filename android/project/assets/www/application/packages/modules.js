//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var meteorInstall = Package['modules-runtime'].meteorInstall;

/* Package-scope variables */
var Buffer, process;

var require = meteorInstall({"node_modules":{"meteor":{"modules":{"client.js":["./install-packages.js","./stubs.js","./buffer.js","./process.js","reify/lib/runtime","./css",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// packages/modules/client.js                                                                                  //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
require("./install-packages.js");                                                                              // 1
require("./stubs.js");                                                                                         // 2
require("./buffer.js");                                                                                        // 3
require("./process.js");                                                                                       // 4
require("reify/lib/runtime").enable(module.constructor);                                                       // 5
                                                                                                               // 6
exports.addStyles = require("./css").addStyles;                                                                // 7
                                                                                                               // 8
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"buffer.js":["buffer",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// packages/modules/buffer.js                                                                                  //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
try {                                                                                                          // 1
  Buffer = global.Buffer || require("buffer").Buffer;                                                          // 2
} catch (noBuffer) {}                                                                                          // 3
                                                                                                               // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"css.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// packages/modules/css.js                                                                                     //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
var doc = document;                                                                                            // 1
var head = doc.getElementsByTagName("head").item(0);                                                           // 2
                                                                                                               // 3
exports.addStyles = function (css) {                                                                           // 4
  var style = doc.createElement("style");                                                                      // 5
                                                                                                               // 6
  style.setAttribute("type", "text/css");                                                                      // 7
                                                                                                               // 8
  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                           // 9
  var internetExplorerSheetObject =                                                                            // 10
    style.sheet || // Edge/IE11.                                                                               // 11
    style.styleSheet; // Older IEs.                                                                            // 12
                                                                                                               // 13
  if (internetExplorerSheetObject) {                                                                           // 14
    internetExplorerSheetObject.cssText = css;                                                                 // 15
  } else {                                                                                                     // 16
    style.appendChild(doc.createTextNode(css));                                                                // 17
  }                                                                                                            // 18
                                                                                                               // 19
  return head.appendChild(style);                                                                              // 20
};                                                                                                             // 21
                                                                                                               // 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"install-packages.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// packages/modules/install-packages.js                                                                        //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
function install(name, mainModule) {                                                                           // 1
  var meteorDir = {};                                                                                          // 2
                                                                                                               // 3
  // Given a package name <name>, install a stub module in the                                                 // 4
  // /node_modules/meteor directory called <name>.js, so that                                                  // 5
  // require.resolve("meteor/<name>") will always return                                                       // 6
  // /node_modules/meteor/<name>.js instead of something like                                                  // 7
  // /node_modules/meteor/<name>/index.js, in the rare but possible event                                      // 8
  // that the package contains a file called index.js (#6590).                                                 // 9
                                                                                                               // 10
  if (mainModule) {                                                                                            // 11
    meteorDir[name + ".js"] = [mainModule, function (require, e, module) {                                     // 12
      module.exports = require(mainModule);                                                                    // 13
    }];                                                                                                        // 14
  } else {                                                                                                     // 15
    // back compat with old Meteor packages                                                                    // 16
    meteorDir[name + ".js"] = function (r, e, module) {                                                        // 17
      module.exports = Package[name];                                                                          // 18
    };                                                                                                         // 19
  }                                                                                                            // 20
                                                                                                               // 21
  meteorInstall({                                                                                              // 22
    node_modules: {                                                                                            // 23
      meteor: meteorDir                                                                                        // 24
    }                                                                                                          // 25
  });                                                                                                          // 26
}                                                                                                              // 27
                                                                                                               // 28
// This file will be modified during computeJsOutputFilesMap to include                                        // 29
// install(<name>) calls for every Meteor package.                                                             // 30
                                                                                                               // 31
install("underscore");                                                                                         // 32
install("meteor");                                                                                             // 33
install("insecure");                                                                                           // 34
install("tracker");                                                                                            // 35
install("reactive-var");                                                                                       // 36
install("mdg:geolocation");                                                                                    // 37
install("meteor-base");                                                                                        // 38
install("mobile-experience");                                                                                  // 39
install("modules-runtime");                                                                                    // 40
install("modules", "meteor/modules/client.js");                                                                // 41
install("es5-shim", "meteor/es5-shim/client.js");                                                              // 42
install("promise", "meteor/promise/client.js");                                                                // 43
install("ecmascript-runtime", "meteor/ecmascript-runtime/runtime.js");                                         // 44
install("babel-compiler");                                                                                     // 45
install("ecmascript");                                                                                         // 46
install("base64");                                                                                             // 47
install("ejson");                                                                                              // 48
install("id-map");                                                                                             // 49
install("ordered-dict");                                                                                       // 50
install("babel-runtime");                                                                                      // 51
install("random");                                                                                             // 52
install("mongo-id");                                                                                           // 53
install("diff-sequence");                                                                                      // 54
install("geojson-utils", "meteor/geojson-utils/main.js");                                                      // 55
install("minimongo");                                                                                          // 56
install("check", "meteor/check/match.js");                                                                     // 57
install("retry");                                                                                              // 58
install("ddp-common");                                                                                         // 59
install("reload");                                                                                             // 60
install("ddp-client");                                                                                         // 61
install("ddp");                                                                                                // 62
install("ddp-server");                                                                                         // 63
install("allow-deny");                                                                                         // 64
install("mongo");                                                                                              // 65
install("reactive-dict");                                                                                      // 66
install("session");                                                                                            // 67
install("jquery", "meteor/jquery/main.js");                                                                    // 68
install("deps");                                                                                               // 69
install("htmljs");                                                                                             // 70
install("observe-sequence");                                                                                   // 71
install("blaze");                                                                                              // 72
install("blaze-html-templates");                                                                               // 73
install("spacebars");                                                                                          // 74
install("standard-minifier-css");                                                                              // 75
install("standard-minifier-js");                                                                               // 76
install("browser-policy");                                                                                     // 77
install("fourseven:scss");                                                                                     // 78
install("aldeed:simple-schema");                                                                               // 79
install("raix:eventemitter");                                                                                  // 80
install("aldeed:collection2-core");                                                                            // 81
install("aldeed:schema-index");                                                                                // 82
install("aldeed:schema-deny");                                                                                 // 83
install("aldeed:collection2");                                                                                 // 84
install("templating");                                                                                         // 85
install("ui");                                                                                                 // 86
install("anti:i18n");                                                                                          // 87
install("fortawesome:fontawesome");                                                                            // 88
install("aslagle:reactive-table");                                                                             // 89
install("themeteorchef:bert");                                                                                 // 90
install("xolvio:cleaner");                                                                                     // 91
install("xolvio:backdoor");                                                                                    // 92
install("mdg:validated-method");                                                                               // 93
install("dburles:factory");                                                                                    // 94
install("kadira:flow-router");                                                                                 // 95
install("kadira:blaze-layout");                                                                                // 96
install("cottz:flow-router-auth");                                                                             // 97
install("less");                                                                                               // 98
install("coffeescript");                                                                                       // 99
install("zimme:active-route");                                                                                 // 100
install("arillo:flow-router-helpers");                                                                         // 101
install("momentjs:moment");                                                                                    // 102
install("themeteorchef:jquery-validation");                                                                    // 103
install("ground:dictionary");                                                                                  // 104
install("ground:minimax");                                                                                     // 105
install("ground:util");                                                                                        // 106
install("ground:store");                                                                                       // 107
install("ground:localstorage");                                                                                // 108
install("ground:servertime");                                                                                  // 109
install("raix:stubfence");                                                                                     // 110
install("raix:onetimeout");                                                                                    // 111
install("dispatch:request-animation-frame");                                                                   // 112
install("dispatch:kernel");                                                                                    // 113
install("ground:db");                                                                                          // 114
install("url");                                                                                                // 115
install("http");                                                                                               // 116
install("froatsnook:request");                                                                                 // 117
install("erasaur:meteor-lodash");                                                                              // 118
install("webapp");                                                                                             // 119
install("livedata");                                                                                           // 120
install("hot-code-push");                                                                                      // 121
install("fastclick");                                                                                          // 122
install("mobile-status-bar");                                                                                  // 123
install("launch-screen");                                                                                      // 124
install("autoupdate");                                                                                         // 125
install("mdg:validation-error");                                                                               // 126
                                                                                                               // 127
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"process.js":["process",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// packages/modules/process.js                                                                                 //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
try {                                                                                                          // 1
  // The application can run `npm install process` to provide its own                                          // 2
  // process stub; otherwise this module will provide a partial stub.                                          // 3
  process = global.process || require("process");                                                              // 4
} catch (noProcess) {                                                                                          // 5
  process = {};                                                                                                // 6
}                                                                                                              // 7
                                                                                                               // 8
if (Meteor.isServer) {                                                                                         // 9
  // Make require("process") work on the server in all versions of Node.                                       // 10
  meteorInstall({                                                                                              // 11
    node_modules: {                                                                                            // 12
      "process.js": function (r, e, module) {                                                                  // 13
        module.exports = process;                                                                              // 14
      }                                                                                                        // 15
    }                                                                                                          // 16
  });                                                                                                          // 17
} else {                                                                                                       // 18
  process.platform = "browser";                                                                                // 19
  process.nextTick = process.nextTick || Meteor._setImmediate;                                                 // 20
}                                                                                                              // 21
                                                                                                               // 22
if (typeof process.env !== "object") {                                                                         // 23
  process.env = {};                                                                                            // 24
}                                                                                                              // 25
                                                                                                               // 26
_.extend(process.env, meteorEnv);                                                                              // 27
                                                                                                               // 28
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"stubs.js":["meteor-node-stubs",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// packages/modules/stubs.js                                                                                   //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
try {                                                                                                          // 1
  // When meteor-node-stubs is installed in the application's root                                             // 2
  // node_modules directory, requiring it here installs aliases for stubs                                      // 3
  // for all Node built-in modules, such as fs, util, and http.                                                // 4
  require("meteor-node-stubs");                                                                                // 5
} catch (noStubs) {}                                                                                           // 6
                                                                                                               // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"node_modules":{"reify":{"lib":{"runtime.js":["./entry.js","./utils.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor/modules/node_modules/reify/lib/runtime.js                                               //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
var Entry = require("./entry.js").Entry;                                                                       // 1
var utils = require("./utils.js");                                                                             // 2
                                                                                                               // 3
exports.enable = function (Module) {                                                                           // 4
  var Mp = Module.prototype;                                                                                   // 5
                                                                                                               // 6
  if (typeof Mp.import === "function" &&                                                                       // 7
      typeof Mp.export === "function") {                                                                       // 8
    // If the Mp.{import,export} methods have already been                                                     // 9
    // defined, abandon reification immediately.                                                               // 10
    return Module;                                                                                             // 11
  }                                                                                                            // 12
                                                                                                               // 13
  // Platform-specific code should implement this method however                                               // 14
  // appropriate. Module.prototype.resolve(id) should return an absolute                                       // 15
  // version of the given module identifier, like require.resolve.                                             // 16
  Mp.resolve = Mp.resolve || function resolve(id) {                                                            // 17
    throw new Error("Module.prototype.resolve not implemented");                                               // 18
  };                                                                                                           // 19
                                                                                                               // 20
  // Platform-specific code should find a way to call this method whenever                                     // 21
  // the module system is about to return module.exports from require. This                                    // 22
  // might happen more than once per module, in case of dependency cycles,                                     // 23
  // so we want Module.prototype.runModuleSetters to run each time.                                            // 24
  Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {                                        // 25
    var entry = Entry.get(this.id);                                                                            // 26
    if (entry) {                                                                                               // 27
      entry.runModuleSetters(this);                                                                            // 28
    }                                                                                                          // 29
                                                                                                               // 30
    // Assignments to exported local variables get wrapped with calls to                                       // 31
    // module.runModuleSetters, so module.runModuleSetters returns the                                         // 32
    // valueToPassThrough parameter to allow the value of the original                                         // 33
    // expression to pass through. For example,                                                                // 34
    //                                                                                                         // 35
    //   export var a = 1;                                                                                     // 36
    //   console.log(a += 3);                                                                                  // 37
    //                                                                                                         // 38
    // becomes                                                                                                 // 39
    //                                                                                                         // 40
    //   module.export("a", () => a);                                                                          // 41
    //   var a = 1;                                                                                            // 42
    //   console.log(module.runModuleSetters(a += 3));                                                         // 43
    //                                                                                                         // 44
    // This ensures module.runModuleSetters runs immediately after the                                         // 45
    // assignment, and does not interfere with the larger computation.                                         // 46
    return valueToPassThrough;                                                                                 // 47
  };                                                                                                           // 48
                                                                                                               // 49
  function setESModule(module) {                                                                               // 50
    var exports = module.exports;                                                                              // 51
    if (exports && typeof exports === "object") {                                                              // 52
      exports.__esModule = true;                                                                               // 53
    }                                                                                                          // 54
  }                                                                                                            // 55
                                                                                                               // 56
  Mp.import = function (id, setters) {                                                                         // 57
    var module = this;                                                                                         // 58
    setESModule(module);                                                                                       // 59
                                                                                                               // 60
    var absoluteId = module.resolve(id);                                                                       // 61
                                                                                                               // 62
    if (setters && typeof setters === "object") {                                                              // 63
      var entry = Entry.getOrCreate(absoluteId);                                                               // 64
      entry.addSetters(module, setters);                                                                       // 65
    }                                                                                                          // 66
                                                                                                               // 67
    var countBefore = entry && entry.runCount;                                                                 // 68
    var exports = typeof module.require === "function"                                                         // 69
      ? module.require(absoluteId)                                                                             // 70
      : require(absoluteId);                                                                                   // 71
                                                                                                               // 72
    if (entry && entry.runCount === countBefore) {                                                             // 73
      // If require(absoluteId) didn't run any setters for this entry,                                         // 74
      // perhaps because it's not the first time this module has been                                          // 75
      // required, run the setters now using an object that passes as the                                      // 76
      // real module object.                                                                                   // 77
      entry.runModuleSetters({                                                                                 // 78
        id: absoluteId,                                                                                        // 79
        exports: exports,                                                                                      // 80
        getExportByName: Mp.getExportByName                                                                    // 81
      });                                                                                                      // 82
    }                                                                                                          // 83
  };                                                                                                           // 84
                                                                                                               // 85
  // Register getter functions for local variables in the scope of an                                          // 86
  // export statement. The keys of the getters object are exported names,                                      // 87
  // and the values are functions that return local values.                                                    // 88
  Mp.export = function (getters) {                                                                             // 89
    var module = this;                                                                                         // 90
    setESModule(module);                                                                                       // 91
                                                                                                               // 92
    if (utils.isPlainObject(getters)) {                                                                        // 93
      Entry.getOrCreate(module.id).addGetters(getters);                                                        // 94
    }                                                                                                          // 95
                                                                                                               // 96
    if (module.loaded) {                                                                                       // 97
      // If the module has already been evaluated, then we need to trigger                                     // 98
      // another round of entry.runModuleSetters calls, which begins by                                        // 99
      // calling entry.runModuleGetters(module).                                                               // 100
      module.runModuleSetters();                                                                               // 101
    }                                                                                                          // 102
  };                                                                                                           // 103
                                                                                                               // 104
  // This method can be overridden by client code to implement custom export                                   // 105
  // naming logic. The current implementation works well with Babel's                                          // 106
  // __esModule convention.                                                                                    // 107
  Mp.getExportByName = function (name) {                                                                       // 108
    var exports = this.exports;                                                                                // 109
                                                                                                               // 110
    if (name === "*") {                                                                                        // 111
      return exports;                                                                                          // 112
    }                                                                                                          // 113
                                                                                                               // 114
    if (name === "default" &&                                                                                  // 115
        ! (exports &&                                                                                          // 116
           typeof exports === "object" &&                                                                      // 117
           exports.__esModule &&                                                                               // 118
           "default" in exports)) {                                                                            // 119
      return exports;                                                                                          // 120
    }                                                                                                          // 121
                                                                                                               // 122
    return exports && exports[name];                                                                           // 123
  };                                                                                                           // 124
                                                                                                               // 125
  return Module;                                                                                               // 126
};                                                                                                             // 127
                                                                                                               // 128
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"entry.js":["./utils.js",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor/modules/node_modules/reify/lib/entry.js                                                 //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
var hasOwn = Object.prototype.hasOwnProperty;                                                                  // 1
var entryMap = Object.create(null);                                                                            // 2
var utils = require("./utils.js");                                                                             // 3
                                                                                                               // 4
function Entry(id) {                                                                                           // 5
  // Same as module.id for this module.                                                                        // 6
  this.id = id;                                                                                                // 7
  // The number of times this.runModuleSetters has been called.                                                // 8
  this.runCount = 0;                                                                                           // 9
  // Setters for assigning to local variables in parent modules.                                               // 10
  this.setters = Object.create(null);                                                                          // 11
  // Getters for local variables exported from this module.                                                    // 12
  this.getters = Object.create(null);                                                                          // 13
}                                                                                                              // 14
                                                                                                               // 15
var Ep = Entry.prototype;                                                                                      // 16
                                                                                                               // 17
Entry.get = function (id) {                                                                                    // 18
  return entryMap[id] || null;                                                                                 // 19
};                                                                                                             // 20
                                                                                                               // 21
Entry.getOrCreate = function (id) {                                                                            // 22
  return entryMap[id] = entryMap[id] || new Entry(id);                                                         // 23
};                                                                                                             // 24
                                                                                                               // 25
Ep.addSetters = function (parent, setters) {                                                                   // 26
  var entry = this;                                                                                            // 27
                                                                                                               // 28
  Object.keys(setters).forEach(function (name) {                                                               // 29
    var setter = setters[name];                                                                                // 30
    if (typeof setter === "function" &&                                                                        // 31
        // Ignore any requests for the exports.__esModule property."                                           // 32
        name !== "__esModule") {                                                                               // 33
      setter.parent = parent;                                                                                  // 34
      (entry.setters[name] =                                                                                   // 35
       entry.setters[name] || []                                                                               // 36
      ).push(setter);                                                                                          // 37
    }                                                                                                          // 38
  });                                                                                                          // 39
};                                                                                                             // 40
                                                                                                               // 41
Ep.addGetters = function (getters) {                                                                           // 42
  var entry = this;                                                                                            // 43
  Object.keys(getters).forEach(function (name) {                                                               // 44
    var getter = getters[name];                                                                                // 45
    if (typeof getter === "function" &&                                                                        // 46
        // Ignore any requests for the exports.__esModule property."                                           // 47
        name !== "__esModule") {                                                                               // 48
      // Should this throw if hasOwn.call(this.getters, name)?                                                 // 49
      entry.getters[name] = getter;                                                                            // 50
    }                                                                                                          // 51
  });                                                                                                          // 52
};                                                                                                             // 53
                                                                                                               // 54
function runModuleSetters(module) {                                                                            // 55
  var entry = entryMap[module.id];                                                                             // 56
  if (entry) {                                                                                                 // 57
    entry.runModuleSetters(module);                                                                            // 58
  }                                                                                                            // 59
}                                                                                                              // 60
                                                                                                               // 61
function runModuleGetters(module) {                                                                            // 62
  var entry = entryMap[module.id];                                                                             // 63
  return entry ? entry.runModuleGetters(module) : 0;                                                           // 64
}                                                                                                              // 65
                                                                                                               // 66
Ep.runModuleGetters = function (module) {                                                                      // 67
  var entry = this;                                                                                            // 68
  var changeCount = 0;                                                                                         // 69
                                                                                                               // 70
  Object.keys(entry.getters).forEach(function (name) {                                                         // 71
    if (entry.runGetter(module, name)) {                                                                       // 72
      ++changeCount;                                                                                           // 73
    }                                                                                                          // 74
  });                                                                                                          // 75
                                                                                                               // 76
  return changeCount;                                                                                          // 77
};                                                                                                             // 78
                                                                                                               // 79
// Returns true iff the getter updated module.exports with a new value.                                        // 80
Ep.runGetter = function (module, name) {                                                                       // 81
  if (! hasOwn.call(this.getters, name)) {                                                                     // 82
    return false;                                                                                              // 83
  }                                                                                                            // 84
                                                                                                               // 85
  var getter = this.getters[name];                                                                             // 86
  try {                                                                                                        // 87
    var value = getter.call(module);                                                                           // 88
  } catch (e) {}                                                                                               // 89
  var exports = module.exports;                                                                                // 90
                                                                                                               // 91
  if (! hasOwn.call(exports, name) ||                                                                          // 92
      exports[name] !== value) {                                                                               // 93
    // We update module.exports[name] with the current value so that                                           // 94
    // CommonJS require calls remain consistent with module.import.                                            // 95
    exports[name] = value;                                                                                     // 96
    return true;                                                                                               // 97
  }                                                                                                            // 98
                                                                                                               // 99
  return false;                                                                                                // 100
};                                                                                                             // 101
                                                                                                               // 102
// Called whenever module.exports might have changed, to trigger any                                           // 103
// setters associated with the newly exported values.                                                          // 104
Ep.runModuleSetters = function (module) {                                                                      // 105
  var entry = this;                                                                                            // 106
  var names = Object.keys(entry.setters);                                                                      // 107
                                                                                                               // 108
  // Make sure module.exports is up to date before we call                                                     // 109
  // module.getExportByName(name).                                                                             // 110
  entry.runModuleGetters(module);                                                                              // 111
                                                                                                               // 112
  // Invoke the given callback once for every (setter, value, name) triple                                     // 113
  // that needs to be called. Note that forEachSetter does not call any                                        // 114
  // setters itself, only the given callback.                                                                  // 115
  function forEachSetter(callback, context) {                                                                  // 116
    names.forEach(function (name) {                                                                            // 117
      entry.setters[name].forEach(function (setter) {                                                          // 118
        var value = module.getExportByName(name);                                                              // 119
        if (name === "*") {                                                                                    // 120
          Object.keys(value).forEach(function (name) {                                                         // 121
            call(setter, value[name], name);                                                                   // 122
          });                                                                                                  // 123
        } else {                                                                                               // 124
          call(setter, value, name);                                                                           // 125
        }                                                                                                      // 126
      });                                                                                                      // 127
    });                                                                                                        // 128
                                                                                                               // 129
    function call(setter, value, name) {                                                                       // 130
      if (name === "__esModule") {                                                                             // 131
        // Ignore setters asking for module.exports.__esModule.                                                // 132
        return;                                                                                                // 133
      }                                                                                                        // 134
                                                                                                               // 135
      setter.last = setter.last || Object.create(null);                                                        // 136
                                                                                                               // 137
      if (! hasOwn.call(setter.last, name) ||                                                                  // 138
          setter.last[name] !== value) {                                                                       // 139
        // Only invoke the callback if we have not called this setter                                          // 140
        // (with a value of this name) before, or the current value is                                         // 141
        // different from the last value we passed to this setter.                                             // 142
        return callback.apply(context, arguments);                                                             // 143
      }                                                                                                        // 144
    }                                                                                                          // 145
  }                                                                                                            // 146
                                                                                                               // 147
  // Every three elements of this list form a (setter, value, name) triple                                     // 148
  // that needs to be invoked.                                                                                 // 149
  var settersToCall = [];                                                                                      // 150
                                                                                                               // 151
  // Lazily-initialized objects mapping parent module identifiers to                                           // 152
  // relevant parent module objects and snapshots of their exports.                                            // 153
  var relevantParents;                                                                                         // 154
  var parentSnapshots;                                                                                         // 155
                                                                                                               // 156
  // Take snapshots of setter.parent.exports for any setters that we are                                       // 157
  // planning to call, so that we can later determine if calling the                                           // 158
  // setters modified any of those exports objects.                                                            // 159
  forEachSetter(function (setter, value, name) {                                                               // 160
    var parent = setter.parent;                                                                                // 161
    parentSnapshots = parentSnapshots || Object.create(null);                                                  // 162
    if (! hasOwn.call(parentSnapshots, parent.id)) {                                                           // 163
      relevantParents = relevantParents || Object.create(null);                                                // 164
      relevantParents[parent.id] = parent;                                                                     // 165
      if (utils.isPlainObject(parent.exports)) {                                                               // 166
        // If parent.exports is an object, make a shallow clone of it so                                       // 167
        // that we can see if it changes as a result of calling setters.                                       // 168
        parentSnapshots[parent.id] = utils.assign({}, parent.exports);                                         // 169
      } else {                                                                                                 // 170
        // If parent.exports is not an object, the "snapshot" is just the                                      // 171
        // value of parent.exports.                                                                            // 172
        parentSnapshots[parent.id] = parent.exports;                                                           // 173
      }                                                                                                        // 174
    }                                                                                                          // 175
                                                                                                               // 176
    // Push three elements at a time to avoid creating wrapper arrays for                                      // 177
    // each (setter, value, name) triple. Note the i += 3 below.                                               // 178
    settersToCall.push(setter, value, name);                                                                   // 179
  });                                                                                                          // 180
                                                                                                               // 181
  // Now call all the setters that we decided we need to call.                                                 // 182
  for (var i = 0; i < settersToCall.length; i += 3) {                                                          // 183
    var setter = settersToCall[i];                                                                             // 184
    var value = settersToCall[i + 1];                                                                          // 185
    var name = settersToCall[i + 2];                                                                           // 186
    setter.call(module, setter.last[name] = value, name);                                                      // 187
  }                                                                                                            // 188
                                                                                                               // 189
  ++entry.runCount;                                                                                            // 190
                                                                                                               // 191
  if (! relevantParents) {                                                                                     // 192
    // If we never called takeSnapshot, then we can avoid checking                                             // 193
    // relevantParents and parentSnapshots below.                                                              // 194
    return;                                                                                                    // 195
  }                                                                                                            // 196
                                                                                                               // 197
  // If any of the setters updated the module.exports of a parent module,                                      // 198
  // or updated local variables that are exported by that parent module,                                       // 199
  // then we must re-run any setters registered by that parent module.                                         // 200
  Object.keys(relevantParents).forEach(function (id) {                                                         // 201
    var parent = relevantParents[id];                                                                          // 202
                                                                                                               // 203
    if (runModuleGetters(parent) > 0) {                                                                        // 204
      return runModuleSetters(parent);                                                                         // 205
    }                                                                                                          // 206
                                                                                                               // 207
    var exports = parent.exports;                                                                              // 208
    var snapshot = parentSnapshots[parent.id];                                                                 // 209
    if (utils.shallowObjEqual(exports, snapshot)) {                                                            // 210
      // If parent.exports have not changed since we took the snapshot,                                        // 211
      // then we do not need to run the parent's setters.                                                      // 212
      return;                                                                                                  // 213
    }                                                                                                          // 214
                                                                                                               // 215
    runModuleSetters(parent);                                                                                  // 216
  });                                                                                                          // 217
};                                                                                                             // 218
                                                                                                               // 219
exports.Entry = Entry;                                                                                         // 220
                                                                                                               // 221
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"utils.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor/modules/node_modules/reify/lib/utils.js                                                 //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
var hasOwn = Object.prototype.hasOwnProperty;                                                                  // 1
var objToStr = Object.prototype.toString;                                                                      // 2
var objStr = objToStr.call({});                                                                                // 3
                                                                                                               // 4
function isPlainObject(value) {                                                                                // 5
  return objToStr.call(value) === objStr;                                                                      // 6
}                                                                                                              // 7
exports.isPlainObject = isPlainObject;                                                                         // 8
                                                                                                               // 9
exports.assign = Object.assign || function (obj) {                                                             // 10
  var argc = arguments.length;                                                                                 // 11
  for (var i = 1; i < argc; ++i) {                                                                             // 12
    var arg = arguments[i];                                                                                    // 13
    if (arg && typeof arg === "object") {                                                                      // 14
      var keys = Object.keys(arg);                                                                             // 15
      for (var k = 0; k < keys.length; ++k) {                                                                  // 16
        var key = keys[k];                                                                                     // 17
        obj[key] = arg[key];                                                                                   // 18
      }                                                                                                        // 19
    }                                                                                                          // 20
  }                                                                                                            // 21
  return obj;                                                                                                  // 22
};                                                                                                             // 23
                                                                                                               // 24
exports.shallowObjEqual = function(a, b) {                                                                     // 25
  if (a === b) {                                                                                               // 26
    return true;                                                                                               // 27
  }                                                                                                            // 28
                                                                                                               // 29
  if (! isPlainObject(a) ||                                                                                    // 30
      ! isPlainObject(b)) {                                                                                    // 31
    return false;                                                                                              // 32
  }                                                                                                            // 33
                                                                                                               // 34
  var aKeys = Object.keys(a);                                                                                  // 35
  var bKeys = Object.keys(b);                                                                                  // 36
                                                                                                               // 37
  if (aKeys.length !== bKeys.length) {                                                                         // 38
    return false;                                                                                              // 39
  }                                                                                                            // 40
                                                                                                               // 41
  return aKeys.every(function (key) {                                                                          // 42
    return hasOwn.call(b, key) &&                                                                              // 43
      a[key] === b[key];                                                                                       // 44
  });                                                                                                          // 45
};                                                                                                             // 46
                                                                                                               // 47
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}}},"bootstrap":{"dist":{"css":{"bootstrap.min.css":["meteor/modules",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/bootstrap/dist/css/bootstrap.min.css                                                           //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
module.exports = require("meteor/modules").addStyles(                                                          // 1
  "/*!\n * Bootstrap v3.3.6 (http://getbootstrap.com)\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n *//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{margin:.67em 0;font-size:2em}mark{color:#000;background:#ff0}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{height:0;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{margin:0;font:inherit;color:inherit}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{padding:0;border:0}input{line-height:normal}input[type=checkbox],input[type=radio]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;-webkit-appearance:textfield}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{padding:.35em .625em .75em;margin:0 2px;border:1px solid silver}legend{padding:0;border:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-spacing:0;border-collapse:collapse}td,th{padding:0}/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */@media print{*,:after,:before{color:#000!important;text-shadow:none!important;background:0 0!important;-webkit-box-shadow:none!important;box-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:\" (\" attr(href) \")\"}abbr[title]:after{content:\" (\" attr(title) \")\"}a[href^=\"javascript:\"]:after,a[href^=\"#\"]:after{content:\"\"}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}img{max-width:100%!important}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}.navbar{display:none}.btn>.caret,.dropup>.btn>.caret{border-top-color:#000!important}.label{border:1px solid #000}.table{border-collapse:collapse!important}.table td,.table th{background-color:#fff!important}.table-bordered td,.table-bordered th{border:1px solid #ddd!important}}@font-face{font-family:'Glyphicons Halflings';src:url(../fonts/glyphicons-halflings-regular.eot);src:url(../fonts/glyphicons-halflings-regular.eot?#iefix) format('embedded-opentype'),url(../fonts/glyphicons-halflings-regular.woff2) format('woff2'),url(../fonts/glyphicons-halflings-regular.woff) format('woff'),url(../fonts/glyphicons-halflings-regular.ttf) format('truetype'),url(../fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular) format('svg')}.glyphicon{position:relative;top:1px;display:inline-block;font-family:'Glyphicons Halflings';font-style:normal;font-weight:400;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.glyphicon-asterisk:before{content:\"\\002a\"}.glyphicon-plus:before{content:\"\\002b\"}.glyphicon-eur:before,.glyphicon-euro:before{content:\"\\20ac\"}.glyphicon-minus:before{content:\"\\2212\"}.glyphicon-cloud:before{content:\"\\2601\"}.glyphicon-envelope:before{content:\"\\2709\"}.glyphicon-pencil:before{content:\"\\270f\"}.glyphicon-glass:before{content:\"\\e001\"}.glyphicon-music:before{content:\"\\e002\"}.glyphicon-search:before{content:\"\\e003\"}.glyphicon-heart:before{content:\"\\e005\"}.glyphicon-star:before{content:\"\\e006\"}.glyphicon-star-empty:before{content:\"\\e007\"}.glyphicon-user:before{content:\"\\e008\"}.glyphicon-film:before{content:\"\\e009\"}.glyphicon-th-large:before{content:\"\\e010\"}.glyphicon-th:before{content:\"\\e011\"}.glyphicon-th-list:before{content:\"\\e012\"}.glyphicon-ok:before{content:\"\\e013\"}.glyphicon-remove:before{content:\"\\e014\"}.glyphicon-zoom-in:before{content:\"\\e015\"}.glyphicon-zoom-out:before{content:\"\\e016\"}.glyphicon-off:before{content:\"\\e017\"}.glyphicon-signal:before{content:\"\\e018\"}.glyphicon-cog:before{content:\"\\e019\"}.glyphicon-trash:before{content:\"\\e020\"}.glyphicon-home:before{content:\"\\e021\"}.glyphicon-file:before{content:\"\\e022\"}.glyphicon-time:before{content:\"\\e023\"}.glyphicon-road:before{content:\"\\e024\"}.glyphicon-download-alt:before{content:\"\\e025\"}.glyphicon-download:before{content:\"\\e026\"}.glyphicon-upload:before{content:\"\\e027\"}.glyphicon-inbox:before{content:\"\\e028\"}.glyphicon-play-circle:before{content:\"\\e029\"}.glyphicon-repeat:before{content:\"\\e030\"}.glyphicon-refresh:before{content:\"\\e031\"}.glyphicon-list-alt:before{content:\"\\e032\"}.glyphicon-lock:before{content:\"\\e033\"}.glyphicon-flag:before{content:\"\\e034\"}.glyphicon-headphones:before{content:\"\\e035\"}.glyphicon-volume-off:before{content:\"\\e036\"}.glyphicon-volume-down:before{content:\"\\e037\"}.glyphicon-volume-up:before{content:\"\\e038\"}.glyphicon-qrcode:before{content:\"\\e039\"}.glyphicon-barcode:before{content:\"\\e040\"}.glyphicon-tag:before{content:\"\\e041\"}.glyphicon-tags:before{content:\"\\e042\"}.glyphicon-book:before{content:\"\\e043\"}.glyphicon-bookmark:before{content:\"\\e044\"}.glyphicon-print:before{content:\"\\e045\"}.glyphicon-camera:before{content:\"\\e046\"}.glyphicon-font:before{content:\"\\e047\"}.glyphicon-bold:before{content:\"\\e048\"}.glyphicon-italic:before{content:\"\\e049\"}.glyphicon-text-height:before{content:\"\\e050\"}.glyphicon-text-width:before{content:\"\\e051\"}.glyphicon-align-left:before{content:\"\\e052\"}.glyphicon-align-center:before{content:\"\\e053\"}.glyphicon-align-right:before{content:\"\\e054\"}.glyphicon-align-justify:before{content:\"\\e055\"}.glyphicon-list:before{content:\"\\e056\"}.glyphicon-indent-left:before{content:\"\\e057\"}.glyphicon-indent-right:before{content:\"\\e058\"}.glyphicon-facetime-video:before{content:\"\\e059\"}.glyphicon-picture:before{content:\"\\e060\"}.glyphicon-map-marker:before{content:\"\\e062\"}.glyphicon-adjust:before{content:\"\\e063\"}.glyphicon-tint:before{content:\"\\e064\"}.glyphicon-edit:before{content:\"\\e065\"}.glyphicon-share:before{content:\"\\e066\"}.glyphicon-check:before{content:\"\\e067\"}.glyphicon-move:before{content:\"\\e068\"}.glyphicon-step-backward:before{content:\"\\e069\"}.glyphicon-fast-backward:before{content:\"\\e070\"}.glyphicon-backward:before{content:\"\\e071\"}.glyphicon-play:before{content:\"\\e072\"}.glyphicon-pause:before{content:\"\\e073\"}.glyphicon-stop:before{content:\"\\e074\"}.glyphicon-forward:before{content:\"\\e075\"}.glyphicon-fast-forward:before{content:\"\\e076\"}.glyphicon-step-forward:before{content:\"\\e077\"}.glyphicon-eject:before{content:\"\\e078\"}.glyphicon-chevron-left:before{content:\"\\e079\"}.glyphicon-chevron-right:before{content:\"\\e080\"}.glyphicon-plus-sign:before{content:\"\\e081\"}.glyphicon-minus-sign:before{content:\"\\e082\"}.glyphicon-remove-sign:before{content:\"\\e083\"}.glyphicon-ok-sign:before{content:\"\\e084\"}.glyphicon-question-sign:before{content:\"\\e085\"}.glyphicon-info-sign:before{content:\"\\e086\"}.glyphicon-screenshot:before{content:\"\\e087\"}.glyphicon-remove-circle:before{content:\"\\e088\"}.glyphicon-ok-circle:before{content:\"\\e089\"}.glyphicon-ban-circle:before{content:\"\\e090\"}.glyphicon-arrow-left:before{content:\"\\e091\"}.glyphicon-arrow-right:before{content:\"\\e092\"}.glyphicon-arrow-up:before{content:\"\\e093\"}.glyphicon-arrow-down:before{content:\"\\e094\"}.glyphicon-share-alt:before{content:\"\\e095\"}.glyphicon-resize-full:before{content:\"\\e096\"}.glyphicon-resize-small:before{content:\"\\e097\"}.glyphicon-exclamation-sign:before{content:\"\\e101\"}.glyphicon-gift:before{content:\"\\e102\"}.glyphicon-leaf:before{content:\"\\e103\"}.glyphicon-fire:before{content:\"\\e104\"}.glyphicon-eye-open:before{content:\"\\e105\"}.glyphicon-eye-close:before{content:\"\\e106\"}.glyphicon-warning-sign:before{content:\"\\e107\"}.glyphicon-plane:before{content:\"\\e108\"}.glyphicon-calendar:before{content:\"\\e109\"}.glyphicon-random:before{content:\"\\e110\"}.glyphicon-comment:before{content:\"\\e111\"}.glyphicon-magnet:before{content:\"\\e112\"}.glyphicon-chevron-up:before{content:\"\\e113\"}.glyphicon-chevron-down:before{content:\"\\e114\"}.glyphicon-retweet:before{content:\"\\e115\"}.glyphicon-shopping-cart:before{content:\"\\e116\"}.glyphicon-folder-close:before{content:\"\\e117\"}.glyphicon-folder-open:before{content:\"\\e118\"}.glyphicon-resize-vertical:before{content:\"\\e119\"}.glyphicon-resize-horizontal:before{content:\"\\e120\"}.glyphicon-hdd:before{content:\"\\e121\"}.glyphicon-bullhorn:before{content:\"\\e122\"}.glyphicon-bell:before{content:\"\\e123\"}.glyphicon-certificate:before{content:\"\\e124\"}.glyphicon-thumbs-up:before{content:\"\\e125\"}.glyphicon-thumbs-down:before{content:\"\\e126\"}.glyphicon-hand-right:before{content:\"\\e127\"}.glyphicon-hand-left:before{content:\"\\e128\"}.glyphicon-hand-up:before{content:\"\\e129\"}.glyphicon-hand-down:before{content:\"\\e130\"}.glyphicon-circle-arrow-right:before{content:\"\\e131\"}.glyphicon-circle-arrow-left:before{content:\"\\e132\"}.glyphicon-circle-arrow-up:before{content:\"\\e133\"}.glyphicon-circle-arrow-down:before{content:\"\\e134\"}.glyphicon-globe:before{content:\"\\e135\"}.glyphicon-wrench:before{content:\"\\e136\"}.glyphicon-tasks:before{content:\"\\e137\"}.glyphicon-filter:before{content:\"\\e138\"}.glyphicon-briefcase:before{content:\"\\e139\"}.glyphicon-fullscreen:before{content:\"\\e140\"}.glyphicon-dashboard:before{content:\"\\e141\"}.glyphicon-paperclip:before{content:\"\\e142\"}.glyphicon-heart-empty:before{content:\"\\e143\"}.glyphicon-link:before{content:\"\\e144\"}.glyphicon-phone:before{content:\"\\e145\"}.glyphicon-pushpin:before{content:\"\\e146\"}.glyphicon-usd:before{content:\"\\e148\"}.glyphicon-gbp:before{content:\"\\e149\"}.glyphicon-sort:before{content:\"\\e150\"}.glyphicon-sort-by-alphabet:before{content:\"\\e151\"}.glyphicon-sort-by-alphabet-alt:before{content:\"\\e152\"}.glyphicon-sort-by-order:before{content:\"\\e153\"}.glyphicon-sort-by-order-alt:before{content:\"\\e154\"}.glyphicon-sort-by-attributes:before{content:\"\\e155\"}.glyphicon-sort-by-attributes-alt:before{content:\"\\e156\"}.glyphicon-unchecked:before{content:\"\\e157\"}.glyphicon-expand:before{content:\"\\e158\"}.glyphicon-collapse-down:before{content:\"\\e159\"}.glyphicon-collapse-up:before{content:\"\\e160\"}.glyphicon-log-in:before{content:\"\\e161\"}.glyphicon-flash:before{content:\"\\e162\"}.glyphicon-log-out:before{content:\"\\e163\"}.glyphicon-new-window:before{content:\"\\e164\"}.glyphicon-record:before{content:\"\\e165\"}.glyphicon-save:before{content:\"\\e166\"}.glyphicon-open:before{content:\"\\e167\"}.glyphicon-saved:before{content:\"\\e168\"}.glyphicon-import:before{content:\"\\e169\"}.glyphicon-export:before{content:\"\\e170\"}.glyphicon-send:before{content:\"\\e171\"}.glyphicon-floppy-disk:before{content:\"\\e172\"}.glyphicon-floppy-saved:before{content:\"\\e173\"}.glyphicon-floppy-remove:before{content:\"\\e174\"}.glyphicon-floppy-save:before{content:\"\\e175\"}.glyphicon-floppy-open:before{content:\"\\e176\"}.glyphicon-credit-card:before{content:\"\\e177\"}.glyphicon-transfer:before{content:\"\\e178\"}.glyphicon-cutlery:before{content:\"\\e179\"}.glyphicon-header:before{content:\"\\e180\"}.glyphicon-compressed:before{content:\"\\e181\"}.glyphicon-earphone:before{content:\"\\e182\"}.glyphicon-phone-alt:before{content:\"\\e183\"}.glyphicon-tower:before{content:\"\\e184\"}.glyphicon-stats:before{content:\"\\e185\"}.glyphicon-sd-video:before{content:\"\\e186\"}.glyphicon-hd-video:before{content:\"\\e187\"}.glyphicon-subtitles:before{content:\"\\e188\"}.glyphicon-sound-stereo:before{content:\"\\e189\"}.glyphicon-sound-dolby:before{content:\"\\e190\"}.glyphicon-sound-5-1:before{content:\"\\e191\"}.glyphicon-sound-6-1:before{content:\"\\e192\"}.glyphicon-sound-7-1:before{content:\"\\e193\"}.glyphicon-copyright-mark:before{content:\"\\e194\"}.glyphicon-registration-mark:before{content:\"\\e195\"}.glyphicon-cloud-download:before{content:\"\\e197\"}.glyphicon-cloud-upload:before{content:\"\\e198\"}.glyphicon-tree-conifer:before{content:\"\\e199\"}.glyphicon-tree-deciduous:before{content:\"\\e200\"}.glyphicon-cd:before{content:\"\\e201\"}.glyphicon-save-file:before{content:\"\\e202\"}.glyphicon-open-file:before{content:\"\\e203\"}.glyphicon-level-up:before{content:\"\\e204\"}.glyphicon-copy:before{content:\"\\e205\"}.glyphicon-paste:before{content:\"\\e206\"}.glyphicon-alert:before{content:\"\\e209\"}.glyphicon-equalizer:before{content:\"\\e210\"}.glyphicon-king:before{content:\"\\e211\"}.glyphicon-queen:before{content:\"\\e212\"}.glyphicon-pawn:before{content:\"\\e213\"}.glyphicon-bishop:before{content:\"\\e214\"}.glyphicon-knight:before{content:\"\\e215\"}.glyphicon-baby-formula:before{content:\"\\e216\"}.glyphicon-tent:before{content:\"\\26fa\"}.glyphicon-blackboard:before{content:\"\\e218\"}.glyphicon-bed:before{content:\"\\e219\"}.glyphicon-apple:before{content:\"\\f8ff\"}.glyphicon-erase:before{content:\"\\e221\"}.glyphicon-hourglass:before{content:\"\\231b\"}.glyphicon-lamp:before{content:\"\\e223\"}.glyphicon-duplicate:before{content:\"\\e224\"}.glyphicon-piggy-bank:before{content:\"\\e225\"}.glyphicon-scissors:before{content:\"\\e226\"}.glyphicon-bitcoin:before{content:\"\\e227\"}.glyphicon-btc:before{content:\"\\e227\"}.glyphicon-xbt:before{content:\"\\e227\"}.glyphicon-yen:before{content:\"\\00a5\"}.glyphicon-jpy:before{content:\"\\00a5\"}.glyphicon-ruble:before{content:\"\\20bd\"}.glyphicon-rub:before{content:\"\\20bd\"}.glyphicon-scale:before{content:\"\\e230\"}.glyphicon-ice-lolly:before{content:\"\\e231\"}.glyphicon-ice-lolly-tasted:before{content:\"\\e232\"}.glyphicon-education:before{content:\"\\e233\"}.glyphicon-option-horizontal:before{content:\"\\e234\"}.glyphicon-option-vertical:before{content:\"\\e235\"}.glyphicon-menu-hamburger:before{content:\"\\e236\"}.glyphicon-modal-window:before{content:\"\\e237\"}.glyphicon-oil:before{content:\"\\e238\"}.glyphicon-grain:before{content:\"\\e239\"}.glyphicon-sunglasses:before{content:\"\\e240\"}.glyphicon-text-size:before{content:\"\\e241\"}.glyphicon-text-color:before{content:\"\\e242\"}.glyphicon-text-background:before{content:\"\\e243\"}.glyphicon-object-align-top:before{content:\"\\e244\"}.glyphicon-object-align-bottom:before{content:\"\\e245\"}.glyphicon-object-align-horizontal:before{content:\"\\e246\"}.glyphicon-object-align-left:before{content:\"\\e247\"}.glyphicon-object-align-vertical:before{content:\"\\e248\"}.glyphicon-object-align-right:before{content:\"\\e249\"}.glyphicon-triangle-right:before{content:\"\\e250\"}.glyphicon-triangle-left:before{content:\"\\e251\"}.glyphicon-triangle-bottom:before{content:\"\\e252\"}.glyphicon-triangle-top:before{content:\"\\e253\"}.glyphicon-console:before{content:\"\\e254\"}.glyphicon-superscript:before{content:\"\\e255\"}.glyphicon-subscript:before{content:\"\\e256\"}.glyphicon-menu-left:before{content:\"\\e257\"}.glyphicon-menu-right:before{content:\"\\e258\"}.glyphicon-menu-down:before{content:\"\\e259\"}.glyphicon-menu-up:before{content:\"\\e260\"}*{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}:after,:before{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}html{font-size:10px;-webkit-tap-highlight-color:rgba(0,0,0,0)}body{font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:14px;line-height:1.42857143;color:#333;background-color:#fff}button,input,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit}a{color:#337ab7;text-decoration:none}a:focus,a:hover{color:#23527c;text-decoration:underline}a:focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}figure{margin:0}img{vertical-align:middle}.carousel-inner>.item>a>img,.carousel-inner>.item>img,.img-responsive,.thumbnail a>img,.thumbnail>img{display:block;max-width:100%;height:auto}.img-rounded{border-radius:6px}.img-thumbnail{display:inline-block;max-width:100%;height:auto;padding:4px;line-height:1.42857143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;-o-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.img-circle{border-radius:50%}hr{margin-top:20px;margin-bottom:20px;border:0;border-top:1px solid #eee}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}[role=button]{cursor:pointer}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{font-family:inherit;font-weight:500;line-height:1.1;color:inherit}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-weight:400;line-height:1;color:#777}.h1,.h2,.h3,h1,h2,h3{margin-top:20px;margin-bottom:10px}.h1 .small,.h1 small,.h2 .small,.h2 small,.h3 .small,.h3 small,h1 .small,h1 small,h2 .small,h2 small,h3 .small,h3 small{font-size:65%}.h4,.h5,.h6,h4,h5,h6{margin-top:10px;margin-bottom:10px}.h4 .small,.h4 small,.h5 .small,.h5 small,.h6 .small,.h6 small,h4 .small,h4 small,h5 .small,h5 small,h6 .small,h6 small{font-size:75%}.h1,h1{font-size:36px}.h2,h2{font-size:30px}.h3,h3{font-size:24px}.h4,h4{font-size:18px}.h5,h5{font-size:14px}.h6,h6{font-size:12px}p{margin:0 0 10px}.lead{margin-bottom:20px;font-size:16px;font-weight:300;line-height:1.4}@media (min-width:768px){.lead{font-size:21px}}.small,small{font-size:85%}.mark,mark{padding:.2em;background-color:#fcf8e3}.text-left{text-align:left}.text-right{text-align:right}.text-center{text-align:center}.text-justify{text-align:justify}.text-nowrap{white-space:nowrap}.text-lowercase{text-transform:lowercase}.text-uppercase{text-transform:uppercase}.text-capitalize{text-transform:capitalize}.text-muted{color:#777}.text-primary{color:#337ab7}a.text-primary:focus,a.text-primary:hover{color:#286090}.text-success{color:#3c763d}a.text-success:focus,a.text-success:hover{color:#2b542c}.text-info{color:#31708f}a.text-info:focus,a.text-info:hover{color:#245269}.text-warning{color:#8a6d3b}a.text-warning:focus,a.text-warning:hover{color:#66512c}.text-danger{color:#a94442}a.text-danger:focus,a.text-danger:hover{color:#843534}.bg-primary{color:#fff;background-color:#337ab7}a.bg-primary:focus,a.bg-primary:hover{background-color:#286090}.bg-success{background-color:#dff0d8}a.bg-success:focus,a.bg-success:hover{background-color:#c1e2b3}.bg-info{background-color:#d9edf7}a.bg-info:focus,a.bg-info:hover{background-color:#afd9ee}.bg-warning{background-color:#fcf8e3}a.bg-warning:focus,a.bg-warning:hover{background-color:#f7ecb5}.bg-danger{background-color:#f2dede}a.bg-danger:focus,a.bg-danger:hover{background-color:#e4b9b9}.page-header{padding-bottom:9px;margin:40px 0 20px;border-bottom:1px solid #eee}ol,ul{margin-top:0;margin-bottom:10px}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;margin-left:-5px;list-style:none}.list-inline>li{display:inline-block;padding-right:5px;padding-left:5px}dl{margin-top:0;margin-bottom:20px}dd,dt{line-height:1.42857143}dt{font-weight:700}dd{margin-left:0}@media (min-width:768px){.dl-horizontal dt{float:left;width:160px;overflow:hidden;clear:left;text-align:right;text-overflow:ellipsis;white-space:nowrap}.dl-horizontal dd{margin-left:180px}}abbr[data-original-title],abbr[title]{cursor:help;border-bottom:1px dotted #777}.initialism{font-size:90%;text-transform:uppercase}blockquote{padding:10px 20px;margin:0 0 20px;font-size:17.5px;border-left:5px solid #eee}blockquote ol:last-child,blockquote p:last-child,blockquote ul:last-child{margin-bottom:0}blockquote .small,blockquote footer,blockquote small{display:block;font-size:80%;line-height:1.42857143;color:#777}blockquote .small:before,blockquote footer:before,blockquote small:before{content:'\\2014 \\00A0'}.blockquote-reverse,blockquote.pull-right{padding-right:15px;padding-left:0;text-align:right;border-right:5px solid #eee;border-left:0}.blockquote-reverse .small:before,.blockquote-reverse footer:before,.blockquote-reverse small:before,blockquote.pull-right .small:before,blockquote.pull-right footer:before,blockquote.pull-right small:before{content:''}.blockquote-reverse .small:after,.blockquote-reverse footer:after,.blockquote-reverse small:after,blockquote.pull-right .small:after,blockquote.pull-right footer:after,blockquote.pull-right small:after{content:'\\00A0 \\2014'}address{margin-bottom:20px;font-style:normal;line-height:1.42857143}code,kbd,pre,samp{font-family:Menlo,Monaco,Consolas,\"Courier New\",monospace}code{padding:2px 4px;font-size:90%;color:#c7254e;background-color:#f9f2f4;border-radius:4px}kbd{padding:2px 4px;font-size:90%;color:#fff;background-color:#333;border-radius:3px;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,.25);box-shadow:inset 0 -1px 0 rgba(0,0,0,.25)}kbd kbd{padding:0;font-size:100%;font-weight:700;-webkit-box-shadow:none;box-shadow:none}pre{display:block;padding:9.5px;margin:0 0 10px;font-size:13px;line-height:1.42857143;color:#333;word-break:break-all;word-wrap:break-word;background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px}pre code{padding:0;font-size:inherit;color:inherit;white-space:pre-wrap;background-color:transparent;border-radius:0}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}@media (min-width:768px){.container{width:750px}}@media (min-width:992px){.container{width:970px}}@media (min-width:1200px){.container{width:1170px}}.container-fluid{padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}.row{margin-right:-15px;margin-left:-15px}.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9,.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9,.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9,.col-xs-1,.col-xs-10,.col-xs-11,.col-xs-12,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9{position:relative;min-height:1px;padding-right:15px;padding-left:15px}.col-xs-1,.col-xs-10,.col-xs-11,.col-xs-12,.col-xs-2,.col-xs-3,.col-xs-4,.col-xs-5,.col-xs-6,.col-xs-7,.col-xs-8,.col-xs-9{float:left}.col-xs-12{width:100%}.col-xs-11{width:91.66666667%}.col-xs-10{width:83.33333333%}.col-xs-9{width:75%}.col-xs-8{width:66.66666667%}.col-xs-7{width:58.33333333%}.col-xs-6{width:50%}.col-xs-5{width:41.66666667%}.col-xs-4{width:33.33333333%}.col-xs-3{width:25%}.col-xs-2{width:16.66666667%}.col-xs-1{width:8.33333333%}.col-xs-pull-12{right:100%}.col-xs-pull-11{right:91.66666667%}.col-xs-pull-10{right:83.33333333%}.col-xs-pull-9{right:75%}.col-xs-pull-8{right:66.66666667%}.col-xs-pull-7{right:58.33333333%}.col-xs-pull-6{right:50%}.col-xs-pull-5{right:41.66666667%}.col-xs-pull-4{right:33.33333333%}.col-xs-pull-3{right:25%}.col-xs-pull-2{right:16.66666667%}.col-xs-pull-1{right:8.33333333%}.col-xs-pull-0{right:auto}.col-xs-push-12{left:100%}.col-xs-push-11{left:91.66666667%}.col-xs-push-10{left:83.33333333%}.col-xs-push-9{left:75%}.col-xs-push-8{left:66.66666667%}.col-xs-push-7{left:58.33333333%}.col-xs-push-6{left:50%}.col-xs-push-5{left:41.66666667%}.col-xs-push-4{left:33.33333333%}.col-xs-push-3{left:25%}.col-xs-push-2{left:16.66666667%}.col-xs-push-1{left:8.33333333%}.col-xs-push-0{left:auto}.col-xs-offset-12{margin-left:100%}.col-xs-offset-11{margin-left:91.66666667%}.col-xs-offset-10{margin-left:83.33333333%}.col-xs-offset-9{margin-left:75%}.col-xs-offset-8{margin-left:66.66666667%}.col-xs-offset-7{margin-left:58.33333333%}.col-xs-offset-6{margin-left:50%}.col-xs-offset-5{margin-left:41.66666667%}.col-xs-offset-4{margin-left:33.33333333%}.col-xs-offset-3{margin-left:25%}.col-xs-offset-2{margin-left:16.66666667%}.col-xs-offset-1{margin-left:8.33333333%}.col-xs-offset-0{margin-left:0}@media (min-width:768px){.col-sm-1,.col-sm-10,.col-sm-11,.col-sm-12,.col-sm-2,.col-sm-3,.col-sm-4,.col-sm-5,.col-sm-6,.col-sm-7,.col-sm-8,.col-sm-9{float:left}.col-sm-12{width:100%}.col-sm-11{width:91.66666667%}.col-sm-10{width:83.33333333%}.col-sm-9{width:75%}.col-sm-8{width:66.66666667%}.col-sm-7{width:58.33333333%}.col-sm-6{width:50%}.col-sm-5{width:41.66666667%}.col-sm-4{width:33.33333333%}.col-sm-3{width:25%}.col-sm-2{width:16.66666667%}.col-sm-1{width:8.33333333%}.col-sm-pull-12{right:100%}.col-sm-pull-11{right:91.66666667%}.col-sm-pull-10{right:83.33333333%}.col-sm-pull-9{right:75%}.col-sm-pull-8{right:66.66666667%}.col-sm-pull-7{right:58.33333333%}.col-sm-pull-6{right:50%}.col-sm-pull-5{right:41.66666667%}.col-sm-pull-4{right:33.33333333%}.col-sm-pull-3{right:25%}.col-sm-pull-2{right:16.66666667%}.col-sm-pull-1{right:8.33333333%}.col-sm-pull-0{right:auto}.col-sm-push-12{left:100%}.col-sm-push-11{left:91.66666667%}.col-sm-push-10{left:83.33333333%}.col-sm-push-9{left:75%}.col-sm-push-8{left:66.66666667%}.col-sm-push-7{left:58.33333333%}.col-sm-push-6{left:50%}.col-sm-push-5{left:41.66666667%}.col-sm-push-4{left:33.33333333%}.col-sm-push-3{left:25%}.col-sm-push-2{left:16.66666667%}.col-sm-push-1{left:8.33333333%}.col-sm-push-0{left:auto}.col-sm-offset-12{margin-left:100%}.col-sm-offset-11{margin-left:91.66666667%}.col-sm-offset-10{margin-left:83.33333333%}.col-sm-offset-9{margin-left:75%}.col-sm-offset-8{margin-left:66.66666667%}.col-sm-offset-7{margin-left:58.33333333%}.col-sm-offset-6{margin-left:50%}.col-sm-offset-5{margin-left:41.66666667%}.col-sm-offset-4{margin-left:33.33333333%}.col-sm-offset-3{margin-left:25%}.col-sm-offset-2{margin-left:16.66666667%}.col-sm-offset-1{margin-left:8.33333333%}.col-sm-offset-0{margin-left:0}}@media (min-width:992px){.col-md-1,.col-md-10,.col-md-11,.col-md-12,.col-md-2,.col-md-3,.col-md-4,.col-md-5,.col-md-6,.col-md-7,.col-md-8,.col-md-9{float:left}.col-md-12{width:100%}.col-md-11{width:91.66666667%}.col-md-10{width:83.33333333%}.col-md-9{width:75%}.col-md-8{width:66.66666667%}.col-md-7{width:58.33333333%}.col-md-6{width:50%}.col-md-5{width:41.66666667%}.col-md-4{width:33.33333333%}.col-md-3{width:25%}.col-md-2{width:16.66666667%}.col-md-1{width:8.33333333%}.col-md-pull-12{right:100%}.col-md-pull-11{right:91.66666667%}.col-md-pull-10{right:83.33333333%}.col-md-pull-9{right:75%}.col-md-pull-8{right:66.66666667%}.col-md-pull-7{right:58.33333333%}.col-md-pull-6{right:50%}.col-md-pull-5{right:41.66666667%}.col-md-pull-4{right:33.33333333%}.col-md-pull-3{right:25%}.col-md-pull-2{right:16.66666667%}.col-md-pull-1{right:8.33333333%}.col-md-pull-0{right:auto}.col-md-push-12{left:100%}.col-md-push-11{left:91.66666667%}.col-md-push-10{left:83.33333333%}.col-md-push-9{left:75%}.col-md-push-8{left:66.66666667%}.col-md-push-7{left:58.33333333%}.col-md-push-6{left:50%}.col-md-push-5{left:41.66666667%}.col-md-push-4{left:33.33333333%}.col-md-push-3{left:25%}.col-md-push-2{left:16.66666667%}.col-md-push-1{left:8.33333333%}.col-md-push-0{left:auto}.col-md-offset-12{margin-left:100%}.col-md-offset-11{margin-left:91.66666667%}.col-md-offset-10{margin-left:83.33333333%}.col-md-offset-9{margin-left:75%}.col-md-offset-8{margin-left:66.66666667%}.col-md-offset-7{margin-left:58.33333333%}.col-md-offset-6{margin-left:50%}.col-md-offset-5{margin-left:41.66666667%}.col-md-offset-4{margin-left:33.33333333%}.col-md-offset-3{margin-left:25%}.col-md-offset-2{margin-left:16.66666667%}.col-md-offset-1{margin-left:8.33333333%}.col-md-offset-0{margin-left:0}}@media (min-width:1200px){.col-lg-1,.col-lg-10,.col-lg-11,.col-lg-12,.col-lg-2,.col-lg-3,.col-lg-4,.col-lg-5,.col-lg-6,.col-lg-7,.col-lg-8,.col-lg-9{float:left}.col-lg-12{width:100%}.col-lg-11{width:91.66666667%}.col-lg-10{width:83.33333333%}.col-lg-9{width:75%}.col-lg-8{width:66.66666667%}.col-lg-7{width:58.33333333%}.col-lg-6{width:50%}.col-lg-5{width:41.66666667%}.col-lg-4{width:33.33333333%}.col-lg-3{width:25%}.col-lg-2{width:16.66666667%}.col-lg-1{width:8.33333333%}.col-lg-pull-12{right:100%}.col-lg-pull-11{right:91.66666667%}.col-lg-pull-10{right:83.33333333%}.col-lg-pull-9{right:75%}.col-lg-pull-8{right:66.66666667%}.col-lg-pull-7{right:58.33333333%}.col-lg-pull-6{right:50%}.col-lg-pull-5{right:41.66666667%}.col-lg-pull-4{right:33.33333333%}.col-lg-pull-3{right:25%}.col-lg-pull-2{right:16.66666667%}.col-lg-pull-1{right:8.33333333%}.col-lg-pull-0{right:auto}.col-lg-push-12{left:100%}.col-lg-push-11{left:91.66666667%}.col-lg-push-10{left:83.33333333%}.col-lg-push-9{left:75%}.col-lg-push-8{left:66.66666667%}.col-lg-push-7{left:58.33333333%}.col-lg-push-6{left:50%}.col-lg-push-5{left:41.66666667%}.col-lg-push-4{left:33.33333333%}.col-lg-push-3{left:25%}.col-lg-push-2{left:16.66666667%}.col-lg-push-1{left:8.33333333%}.col-lg-push-0{left:auto}.col-lg-offset-12{margin-left:100%}.col-lg-offset-11{margin-left:91.66666667%}.col-lg-offset-10{margin-left:83.33333333%}.col-lg-offset-9{margin-left:75%}.col-lg-offset-8{margin-left:66.66666667%}.col-lg-offset-7{margin-left:58.33333333%}.col-lg-offset-6{margin-left:50%}.col-lg-offset-5{margin-left:41.66666667%}.col-lg-offset-4{margin-left:33.33333333%}.col-lg-offset-3{margin-left:25%}.col-lg-offset-2{margin-left:16.66666667%}.col-lg-offset-1{margin-left:8.33333333%}.col-lg-offset-0{margin-left:0}}table{background-color:transparent}caption{padding-top:8px;padding-bottom:8px;color:#777;text-align:left}th{text-align:left}.table{width:100%;max-width:100%;margin-bottom:20px}.table>tbody>tr>td,.table>tbody>tr>th,.table>tfoot>tr>td,.table>tfoot>tr>th,.table>thead>tr>td,.table>thead>tr>th{padding:8px;line-height:1.42857143;vertical-align:top;border-top:1px solid #ddd}.table>thead>tr>th{vertical-align:bottom;border-bottom:2px solid #ddd}.table>caption+thead>tr:first-child>td,.table>caption+thead>tr:first-child>th,.table>colgroup+thead>tr:first-child>td,.table>colgroup+thead>tr:first-child>th,.table>thead:first-child>tr:first-child>td,.table>thead:first-child>tr:first-child>th{border-top:0}.table>tbody+tbody{border-top:2px solid #ddd}.table .table{background-color:#fff}.table-condensed>tbody>tr>td,.table-condensed>tbody>tr>th,.table-condensed>tfoot>tr>td,.table-condensed>tfoot>tr>th,.table-condensed>thead>tr>td,.table-condensed>thead>tr>th{padding:5px}.table-bordered{border:1px solid #ddd}.table-bordered>tbody>tr>td,.table-bordered>tbody>tr>th,.table-bordered>tfoot>tr>td,.table-bordered>tfoot>tr>th,.table-bordered>thead>tr>td,.table-bordered>thead>tr>th{border:1px solid #ddd}.table-bordered>thead>tr>td,.table-bordered>thead>tr>th{border-bottom-width:2px}.table-striped>tbody>tr:nth-of-type(odd){background-color:#f9f9f9}.table-hover>tbody>tr:hover{background-color:#f5f5f5}table col[class*=col-]{position:static;display:table-column;float:none}table td[class*=col-],table th[class*=col-]{position:static;display:table-cell;float:none}.table>tbody>tr.active>td,.table>tbody>tr.active>th,.table>tbody>tr>td.active,.table>tbody>tr>th.active,.table>tfoot>tr.active>td,.table>tfoot>tr.active>th,.table>tfoot>tr>td.active,.table>tfoot>tr>th.active,.table>thead>tr.active>td,.table>thead>tr.active>th,.table>thead>tr>td.active,.table>thead>tr>th.active{background-color:#f5f5f5}.table-hover>tbody>tr.active:hover>td,.table-hover>tbody>tr.active:hover>th,.table-hover>tbody>tr:hover>.active,.table-hover>tbody>tr>td.active:hover,.table-hover>tbody>tr>th.active:hover{background-color:#e8e8e8}.table>tbody>tr.success>td,.table>tbody>tr.success>th,.table>tbody>tr>td.success,.table>tbody>tr>th.success,.table>tfoot>tr.success>td,.table>tfoot>tr.success>th,.table>tfoot>tr>td.success,.table>tfoot>tr>th.success,.table>thead>tr.success>td,.table>thead>tr.success>th,.table>thead>tr>td.success,.table>thead>tr>th.success{background-color:#dff0d8}.table-hover>tbody>tr.success:hover>td,.table-hover>tbody>tr.success:hover>th,.table-hover>tbody>tr:hover>.success,.table-hover>tbody>tr>td.success:hover,.table-hover>tbody>tr>th.success:hover{background-color:#d0e9c6}.table>tbody>tr.info>td,.table>tbody>tr.info>th,.table>tbody>tr>td.info,.table>tbody>tr>th.info,.table>tfoot>tr.info>td,.table>tfoot>tr.info>th,.table>tfoot>tr>td.info,.table>tfoot>tr>th.info,.table>thead>tr.info>td,.table>thead>tr.info>th,.table>thead>tr>td.info,.table>thead>tr>th.info{background-color:#d9edf7}.table-hover>tbody>tr.info:hover>td,.table-hover>tbody>tr.info:hover>th,.table-hover>tbody>tr:hover>.info,.table-hover>tbody>tr>td.info:hover,.table-hover>tbody>tr>th.info:hover{background-color:#c4e3f3}.table>tbody>tr.warning>td,.table>tbody>tr.warning>th,.table>tbody>tr>td.warning,.table>tbody>tr>th.warning,.table>tfoot>tr.warning>td,.table>tfoot>tr.warning>th,.table>tfoot>tr>td.warning,.table>tfoot>tr>th.warning,.table>thead>tr.warning>td,.table>thead>tr.warning>th,.table>thead>tr>td.warning,.table>thead>tr>th.warning{background-color:#fcf8e3}.table-hover>tbody>tr.warning:hover>td,.table-hover>tbody>tr.warning:hover>th,.table-hover>tbody>tr:hover>.warning,.table-hover>tbody>tr>td.warning:hover,.table-hover>tbody>tr>th.warning:hover{background-color:#faf2cc}.table>tbody>tr.danger>td,.table>tbody>tr.danger>th,.table>tbody>tr>td.danger,.table>tbody>tr>th.danger,.table>tfoot>tr.danger>td,.table>tfoot>tr.danger>th,.table>tfoot>tr>td.danger,.table>tfoot>tr>th.danger,.table>thead>tr.danger>td,.table>thead>tr.danger>th,.table>thead>tr>td.danger,.table>thead>tr>th.danger{background-color:#f2dede}.table-hover>tbody>tr.danger:hover>td,.table-hover>tbody>tr.danger:hover>th,.table-hover>tbody>tr:hover>.danger,.table-hover>tbody>tr>td.danger:hover,.table-hover>tbody>tr>th.danger:hover{background-color:#ebcccc}.table-responsive{min-height:.01%;overflow-x:auto}@media screen and (max-width:767px){.table-responsive{width:100%;margin-bottom:15px;overflow-y:hidden;-ms-overflow-style:-ms-autohiding-scrollbar;border:1px solid #ddd}.table-responsive>.table{margin-bottom:0}.table-responsive>.table>tbody>tr>td,.table-responsive>.table>tbody>tr>th,.table-responsive>.table>tfoot>tr>td,.table-responsive>.table>tfoot>tr>th,.table-responsive>.table>thead>tr>td,.table-responsive>.table>thead>tr>th{white-space:nowrap}.table-responsive>.table-bordered{border:0}.table-responsive>.table-bordered>tbody>tr>td:first-child,.table-responsive>.table-bordered>tbody>tr>th:first-child,.table-responsive>.table-bordered>tfoot>tr>td:first-child,.table-responsive>.table-bordered>tfoot>tr>th:first-child,.table-responsive>.table-bordered>thead>tr>td:first-child,.table-responsive>.table-bordered>thead>tr>th:first-child{border-left:0}.table-responsive>.table-bordered>tbody>tr>td:last-child,.table-responsive>.table-bordered>tbody>tr>th:last-child,.table-responsive>.table-bordered>tfoot>tr>td:last-child,.table-responsive>.table-bordered>tfoot>tr>th:last-child,.table-responsive>.table-bordered>thead>tr>td:last-child,.table-responsive>.table-bordered>thead>tr>th:last-child{border-right:0}.table-responsive>.table-bordered>tbody>tr:last-child>td,.table-responsive>.table-bordered>tbody>tr:last-child>th,.table-responsive>.table-bordered>tfoot>tr:last-child>td,.table-responsive>.table-bordered>tfoot>tr:last-child>th{border-bottom:0}}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;padding:0;margin-bottom:20px;font-size:21px;line-height:inherit;color:#333;border:0;border-bottom:1px solid #e5e5e5}label{display:inline-block;max-width:100%;margin-bottom:5px;font-weight:700}input[type=search]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}input[type=checkbox],input[type=radio]{margin:4px 0 0;margin-top:1px\\9;line-height:normal}input[type=file]{display:block}input[type=range]{display:block;width:100%}select[multiple],select[size]{height:auto}input[type=file]:focus,input[type=checkbox]:focus,input[type=radio]:focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}output{display:block;padding-top:7px;font-size:14px;line-height:1.42857143;color:#555}.form-control{display:block;width:100%;height:34px;padding:6px 12px;font-size:14px;line-height:1.42857143;color:#555;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075);-webkit-transition:border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;-o-transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s}.form-control:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6)}.form-control::-moz-placeholder{color:#999;opacity:1}.form-control:-ms-input-placeholder{color:#999}.form-control::-webkit-input-placeholder{color:#999}.form-control::-ms-expand{background-color:transparent;border:0}.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control{background-color:#eee;opacity:1}.form-control[disabled],fieldset[disabled] .form-control{cursor:not-allowed}textarea.form-control{height:auto}input[type=search]{-webkit-appearance:none}@media screen and (-webkit-min-device-pixel-ratio:0){input[type=date].form-control,input[type=time].form-control,input[type=datetime-local].form-control,input[type=month].form-control{line-height:34px}.input-group-sm input[type=date],.input-group-sm input[type=time],.input-group-sm input[type=datetime-local],.input-group-sm input[type=month],input[type=date].input-sm,input[type=time].input-sm,input[type=datetime-local].input-sm,input[type=month].input-sm{line-height:30px}.input-group-lg input[type=date],.input-group-lg input[type=time],.input-group-lg input[type=datetime-local],.input-group-lg input[type=month],input[type=date].input-lg,input[type=time].input-lg,input[type=datetime-local].input-lg,input[type=month].input-lg{line-height:46px}}.form-group{margin-bottom:15px}.checkbox,.radio{position:relative;display:block;margin-top:10px;margin-bottom:10px}.checkbox label,.radio label{min-height:20px;padding-left:20px;margin-bottom:0;font-weight:400;cursor:pointer}.checkbox input[type=checkbox],.checkbox-inline input[type=checkbox],.radio input[type=radio],.radio-inline input[type=radio]{position:absolute;margin-top:4px\\9;margin-left:-20px}.checkbox+.checkbox,.radio+.radio{margin-top:-5px}.checkbox-inline,.radio-inline{position:relative;display:inline-block;padding-left:20px;margin-bottom:0;font-weight:400;vertical-align:middle;cursor:pointer}.checkbox-inline+.checkbox-inline,.radio-inline+.radio-inline{margin-top:0;margin-left:10px}fieldset[disabled] input[type=checkbox],fieldset[disabled] input[type=radio],input[type=checkbox].disabled,input[type=checkbox][disabled],input[type=radio].disabled,input[type=radio][disabled]{cursor:not-allowed}.checkbox-inline.disabled,.radio-inline.disabled,fieldset[disabled] .checkbox-inline,fieldset[disabled] .radio-inline{cursor:not-allowed}.checkbox.disabled label,.radio.disabled label,fieldset[disabled] .checkbox label,fieldset[disabled] .radio label{cursor:not-allowed}.form-control-static{min-height:34px;padding-top:7px;padding-bottom:7px;margin-bottom:0}.form-control-static.input-lg,.form-control-static.input-sm{padding-right:0;padding-left:0}.input-sm{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}select.input-sm{height:30px;line-height:30px}select[multiple].input-sm,textarea.input-sm{height:auto}.form-group-sm .form-control{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.form-group-sm select.form-control{height:30px;line-height:30px}.form-group-sm select[multiple].form-control,.form-group-sm textarea.form-control{height:auto}.form-group-sm .form-control-static{height:30px;min-height:32px;padding:6px 10px;font-size:12px;line-height:1.5}.input-lg{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}select.input-lg{height:46px;line-height:46px}select[multiple].input-lg,textarea.input-lg{height:auto}.form-group-lg .form-control{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.form-group-lg select.form-control{height:46px;line-height:46px}.form-group-lg select[multiple].form-control,.form-group-lg textarea.form-control{height:auto}.form-group-lg .form-control-static{height:46px;min-height:38px;padding:11px 16px;font-size:18px;line-height:1.3333333}.has-feedback{position:relative}.has-feedback .form-control{padding-right:42.5px}.form-control-feedback{position:absolute;top:0;right:0;z-index:2;display:block;width:34px;height:34px;line-height:34px;text-align:center;pointer-events:none}.form-group-lg .form-control+.form-control-feedback,.input-group-lg+.form-control-feedback,.input-lg+.form-control-feedback{width:46px;height:46px;line-height:46px}.form-group-sm .form-control+.form-control-feedback,.input-group-sm+.form-control-feedback,.input-sm+.form-control-feedback{width:30px;height:30px;line-height:30px}.has-success .checkbox,.has-success .checkbox-inline,.has-success .control-label,.has-success .help-block,.has-success .radio,.has-success .radio-inline,.has-success.checkbox label,.has-success.checkbox-inline label,.has-success.radio label,.has-success.radio-inline label{color:#3c763d}.has-success .form-control{border-color:#3c763d;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-success .form-control:focus{border-color:#2b542c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #67b168;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #67b168}.has-success .input-group-addon{color:#3c763d;background-color:#dff0d8;border-color:#3c763d}.has-success .form-control-feedback{color:#3c763d}.has-warning .checkbox,.has-warning .checkbox-inline,.has-warning .control-label,.has-warning .help-block,.has-warning .radio,.has-warning .radio-inline,.has-warning.checkbox label,.has-warning.checkbox-inline label,.has-warning.radio label,.has-warning.radio-inline label{color:#8a6d3b}.has-warning .form-control{border-color:#8a6d3b;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-warning .form-control:focus{border-color:#66512c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #c0a16b;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #c0a16b}.has-warning .input-group-addon{color:#8a6d3b;background-color:#fcf8e3;border-color:#8a6d3b}.has-warning .form-control-feedback{color:#8a6d3b}.has-error .checkbox,.has-error .checkbox-inline,.has-error .control-label,.has-error .help-block,.has-error .radio,.has-error .radio-inline,.has-error.checkbox label,.has-error.checkbox-inline label,.has-error.radio label,.has-error.radio-inline label{color:#a94442}.has-error .form-control{border-color:#a94442;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075)}.has-error .form-control:focus{border-color:#843534;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #ce8483;box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 6px #ce8483}.has-error .input-group-addon{color:#a94442;background-color:#f2dede;border-color:#a94442}.has-error .form-control-feedback{color:#a94442}.has-feedback label~.form-control-feedback{top:25px}.has-feedback label.sr-only~.form-control-feedback{top:0}.help-block{display:block;margin-top:5px;margin-bottom:10px;color:#737373}@media (min-width:768px){.form-inline .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.form-inline .form-control{display:inline-block;width:auto;vertical-align:middle}.form-inline .form-control-static{display:inline-block}.form-inline .input-group{display:inline-table;vertical-align:middle}.form-inline .input-group .form-control,.form-inline .input-group .input-group-addon,.form-inline .input-group .input-group-btn{width:auto}.form-inline .input-group>.form-control{width:100%}.form-inline .control-label{margin-bottom:0;vertical-align:middle}.form-inline .checkbox,.form-inline .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.form-inline .checkbox label,.form-inline .radio label{padding-left:0}.form-inline .checkbox input[type=checkbox],.form-inline .radio input[type=radio]{position:relative;margin-left:0}.form-inline .has-feedback .form-control-feedback{top:0}}.form-horizontal .checkbox,.form-horizontal .checkbox-inline,.form-horizontal .radio,.form-horizontal .radio-inline{padding-top:7px;margin-top:0;margin-bottom:0}.form-horizontal .checkbox,.form-horizontal .radio{min-height:27px}.form-horizontal .form-group{margin-right:-15px;margin-left:-15px}@media (min-width:768px){.form-horizontal .control-label{padding-top:7px;margin-bottom:0;text-align:right}}.form-horizontal .has-feedback .form-control-feedback{right:15px}@media (min-width:768px){.form-horizontal .form-group-lg .control-label{padding-top:11px;font-size:18px}}@media (min-width:768px){.form-horizontal .form-group-sm .control-label{padding-top:6px;font-size:12px}}.btn{display:inline-block;padding:6px 12px;margin-bottom:0;font-size:14px;font-weight:400;line-height:1.42857143;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-image:none;border:1px solid transparent;border-radius:4px}.btn.active.focus,.btn.active:focus,.btn.focus,.btn:active.focus,.btn:active:focus,.btn:focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.btn.focus,.btn:focus,.btn:hover{color:#333;text-decoration:none}.btn.active,.btn:active{background-image:none;outline:0;-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}.btn.disabled,.btn[disabled],fieldset[disabled] .btn{cursor:not-allowed;filter:alpha(opacity=65);-webkit-box-shadow:none;box-shadow:none;opacity:.65}a.btn.disabled,fieldset[disabled] a.btn{pointer-events:none}.btn-default{color:#333;background-color:#fff;border-color:#ccc}.btn-default.focus,.btn-default:focus{color:#333;background-color:#e6e6e6;border-color:#8c8c8c}.btn-default:hover{color:#333;background-color:#e6e6e6;border-color:#adadad}.btn-default.active,.btn-default:active,.open>.dropdown-toggle.btn-default{color:#333;background-color:#e6e6e6;border-color:#adadad}.btn-default.active.focus,.btn-default.active:focus,.btn-default.active:hover,.btn-default:active.focus,.btn-default:active:focus,.btn-default:active:hover,.open>.dropdown-toggle.btn-default.focus,.open>.dropdown-toggle.btn-default:focus,.open>.dropdown-toggle.btn-default:hover{color:#333;background-color:#d4d4d4;border-color:#8c8c8c}.btn-default.active,.btn-default:active,.open>.dropdown-toggle.btn-default{background-image:none}.btn-default.disabled.focus,.btn-default.disabled:focus,.btn-default.disabled:hover,.btn-default[disabled].focus,.btn-default[disabled]:focus,.btn-default[disabled]:hover,fieldset[disabled] .btn-default.focus,fieldset[disabled] .btn-default:focus,fieldset[disabled] .btn-default:hover{background-color:#fff;border-color:#ccc}.btn-default .badge{color:#fff;background-color:#333}.btn-primary{color:#fff;background-color:#337ab7;border-color:#2e6da4}.btn-primary.focus,.btn-primary:focus{color:#fff;background-color:#286090;border-color:#122b40}.btn-primary:hover{color:#fff;background-color:#286090;border-color:#204d74}.btn-primary.active,.btn-primary:active,.open>.dropdown-toggle.btn-primary{color:#fff;background-color:#286090;border-color:#204d74}.btn-primary.active.focus,.btn-primary.active:focus,.btn-primary.active:hover,.btn-primary:active.focus,.btn-primary:active:focus,.btn-primary:active:hover,.open>.dropdown-toggle.btn-primary.focus,.open>.dropdown-toggle.btn-primary:focus,.open>.dropdown-toggle.btn-primary:hover{color:#fff;background-color:#204d74;border-color:#122b40}.btn-primary.active,.btn-primary:active,.open>.dropdown-toggle.btn-primary{background-image:none}.btn-primary.disabled.focus,.btn-primary.disabled:focus,.btn-primary.disabled:hover,.btn-primary[disabled].focus,.btn-primary[disabled]:focus,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary.focus,fieldset[disabled] .btn-primary:focus,fieldset[disabled] .btn-primary:hover{background-color:#337ab7;border-color:#2e6da4}.btn-primary .badge{color:#337ab7;background-color:#fff}.btn-success{color:#fff;background-color:#5cb85c;border-color:#4cae4c}.btn-success.focus,.btn-success:focus{color:#fff;background-color:#449d44;border-color:#255625}.btn-success:hover{color:#fff;background-color:#449d44;border-color:#398439}.btn-success.active,.btn-success:active,.open>.dropdown-toggle.btn-success{color:#fff;background-color:#449d44;border-color:#398439}.btn-success.active.focus,.btn-success.active:focus,.btn-success.active:hover,.btn-success:active.focus,.btn-success:active:focus,.btn-success:active:hover,.open>.dropdown-toggle.btn-success.focus,.open>.dropdown-toggle.btn-success:focus,.open>.dropdown-toggle.btn-success:hover{color:#fff;background-color:#398439;border-color:#255625}.btn-success.active,.btn-success:active,.open>.dropdown-toggle.btn-success{background-image:none}.btn-success.disabled.focus,.btn-success.disabled:focus,.btn-success.disabled:hover,.btn-success[disabled].focus,.btn-success[disabled]:focus,.btn-success[disabled]:hover,fieldset[disabled] .btn-success.focus,fieldset[disabled] .btn-success:focus,fieldset[disabled] .btn-success:hover{background-color:#5cb85c;border-color:#4cae4c}.btn-success .badge{color:#5cb85c;background-color:#fff}.btn-info{color:#fff;background-color:#5bc0de;border-color:#46b8da}.btn-info.focus,.btn-info:focus{color:#fff;background-color:#31b0d5;border-color:#1b6d85}.btn-info:hover{color:#fff;background-color:#31b0d5;border-color:#269abc}.btn-info.active,.btn-info:active,.open>.dropdown-toggle.btn-info{color:#fff;background-color:#31b0d5;border-color:#269abc}.btn-info.active.focus,.btn-info.active:focus,.btn-info.active:hover,.btn-info:active.focus,.btn-info:active:focus,.btn-info:active:hover,.open>.dropdown-toggle.btn-info.focus,.open>.dropdown-toggle.btn-info:focus,.open>.dropdown-toggle.btn-info:hover{color:#fff;background-color:#269abc;border-color:#1b6d85}.btn-info.active,.btn-info:active,.open>.dropdown-toggle.btn-info{background-image:none}.btn-info.disabled.focus,.btn-info.disabled:focus,.btn-info.disabled:hover,.btn-info[disabled].focus,.btn-info[disabled]:focus,.btn-info[disabled]:hover,fieldset[disabled] .btn-info.focus,fieldset[disabled] .btn-info:focus,fieldset[disabled] .btn-info:hover{background-color:#5bc0de;border-color:#46b8da}.btn-info .badge{color:#5bc0de;background-color:#fff}.btn-warning{color:#fff;background-color:#f0ad4e;border-color:#eea236}.btn-warning.focus,.btn-warning:focus{color:#fff;background-color:#ec971f;border-color:#985f0d}.btn-warning:hover{color:#fff;background-color:#ec971f;border-color:#d58512}.btn-warning.active,.btn-warning:active,.open>.dropdown-toggle.btn-warning{color:#fff;background-color:#ec971f;border-color:#d58512}.btn-warning.active.focus,.btn-warning.active:focus,.btn-warning.active:hover,.btn-warning:active.focus,.btn-warning:active:focus,.btn-warning:active:hover,.open>.dropdown-toggle.btn-warning.focus,.open>.dropdown-toggle.btn-warning:focus,.open>.dropdown-toggle.btn-warning:hover{color:#fff;background-color:#d58512;border-color:#985f0d}.btn-warning.active,.btn-warning:active,.open>.dropdown-toggle.btn-warning{background-image:none}.btn-warning.disabled.focus,.btn-warning.disabled:focus,.btn-warning.disabled:hover,.btn-warning[disabled].focus,.btn-warning[disabled]:focus,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning.focus,fieldset[disabled] .btn-warning:focus,fieldset[disabled] .btn-warning:hover{background-color:#f0ad4e;border-color:#eea236}.btn-warning .badge{color:#f0ad4e;background-color:#fff}.btn-danger{color:#fff;background-color:#d9534f;border-color:#d43f3a}.btn-danger.focus,.btn-danger:focus{color:#fff;background-color:#c9302c;border-color:#761c19}.btn-danger:hover{color:#fff;background-color:#c9302c;border-color:#ac2925}.btn-danger.active,.btn-danger:active,.open>.dropdown-toggle.btn-danger{color:#fff;background-color:#c9302c;border-color:#ac2925}.btn-danger.active.focus,.btn-danger.active:focus,.btn-danger.active:hover,.btn-danger:active.focus,.btn-danger:active:focus,.btn-danger:active:hover,.open>.dropdown-toggle.btn-danger.focus,.open>.dropdown-toggle.btn-danger:focus,.open>.dropdown-toggle.btn-danger:hover{color:#fff;background-color:#ac2925;border-color:#761c19}.btn-danger.active,.btn-danger:active,.open>.dropdown-toggle.btn-danger{background-image:none}.btn-danger.disabled.focus,.btn-danger.disabled:focus,.btn-danger.disabled:hover,.btn-danger[disabled].focus,.btn-danger[disabled]:focus,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger.focus,fieldset[disabled] .btn-danger:focus,fieldset[disabled] .btn-danger:hover{background-color:#d9534f;border-color:#d43f3a}.btn-danger .badge{color:#d9534f;background-color:#fff}.btn-link{font-weight:400;color:#337ab7;border-radius:0}.btn-link,.btn-link.active,.btn-link:active,.btn-link[disabled],fieldset[disabled] .btn-link{background-color:transparent;-webkit-box-shadow:none;box-shadow:none}.btn-link,.btn-link:active,.btn-link:focus,.btn-link:hover{border-color:transparent}.btn-link:focus,.btn-link:hover{color:#23527c;text-decoration:underline;background-color:transparent}.btn-link[disabled]:focus,.btn-link[disabled]:hover,fieldset[disabled] .btn-link:focus,fieldset[disabled] .btn-link:hover{color:#777;text-decoration:none}.btn-group-lg>.btn,.btn-lg{padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}.btn-group-sm>.btn,.btn-sm{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-group-xs>.btn,.btn-xs{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-block{display:block;width:100%}.btn-block+.btn-block{margin-top:5px}input[type=button].btn-block,input[type=reset].btn-block,input[type=submit].btn-block{width:100%}.fade{opacity:0;-webkit-transition:opacity .15s linear;-o-transition:opacity .15s linear;transition:opacity .15s linear}.fade.in{opacity:1}.collapse{display:none}.collapse.in{display:block}tr.collapse.in{display:table-row}tbody.collapse.in{display:table-row-group}.collapsing{position:relative;height:0;overflow:hidden;-webkit-transition-timing-function:ease;-o-transition-timing-function:ease;transition-timing-function:ease;-webkit-transition-duration:.35s;-o-transition-duration:.35s;transition-duration:.35s;-webkit-transition-property:height,visibility;-o-transition-property:height,visibility;transition-property:height,visibility}.caret{display:inline-block;width:0;height:0;margin-left:2px;vertical-align:middle;border-top:4px dashed;border-top:4px solid\\9;border-right:4px solid transparent;border-left:4px solid transparent}.dropdown,.dropup{position:relative}.dropdown-toggle:focus{outline:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:160px;padding:5px 0;margin:2px 0 0;font-size:14px;text-align:left;list-style:none;background-color:#fff;-webkit-background-clip:padding-box;background-clip:padding-box;border:1px solid #ccc;border:1px solid rgba(0,0,0,.15);border-radius:4px;-webkit-box-shadow:0 6px 12px rgba(0,0,0,.175);box-shadow:0 6px 12px rgba(0,0,0,.175)}.dropdown-menu.pull-right{right:0;left:auto}.dropdown-menu .divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.dropdown-menu>li>a{display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.42857143;color:#333;white-space:nowrap}.dropdown-menu>li>a:focus,.dropdown-menu>li>a:hover{color:#262626;text-decoration:none;background-color:#f5f5f5}.dropdown-menu>.active>a,.dropdown-menu>.active>a:focus,.dropdown-menu>.active>a:hover{color:#fff;text-decoration:none;background-color:#337ab7;outline:0}.dropdown-menu>.disabled>a,.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{color:#777}.dropdown-menu>.disabled>a:focus,.dropdown-menu>.disabled>a:hover{text-decoration:none;cursor:not-allowed;background-color:transparent;background-image:none;filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}.open>.dropdown-menu{display:block}.open>a{outline:0}.dropdown-menu-right{right:0;left:auto}.dropdown-menu-left{right:auto;left:0}.dropdown-header{display:block;padding:3px 20px;font-size:12px;line-height:1.42857143;color:#777;white-space:nowrap}.dropdown-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:990}.pull-right>.dropdown-menu{right:0;left:auto}.dropup .caret,.navbar-fixed-bottom .dropdown .caret{content:\"\";border-top:0;border-bottom:4px dashed;border-bottom:4px solid\\9}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:2px}@media (min-width:768px){.navbar-right .dropdown-menu{right:0;left:auto}.navbar-right .dropdown-menu-left{right:auto;left:0}}.btn-group,.btn-group-vertical{position:relative;display:inline-block;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;float:left}.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group-vertical>.btn:hover,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus,.btn-group>.btn:hover{z-index:2}.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group{margin-left:-1px}.btn-toolbar{margin-left:-5px}.btn-toolbar .btn,.btn-toolbar .btn-group,.btn-toolbar .input-group{float:left}.btn-toolbar>.btn,.btn-toolbar>.btn-group,.btn-toolbar>.input-group{margin-left:5px}.btn-group>.btn:not(:first-child):not(:last-child):not(.dropdown-toggle){border-radius:0}.btn-group>.btn:first-child{margin-left:0}.btn-group>.btn:first-child:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn:last-child:not(:first-child),.btn-group>.dropdown-toggle:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.btn-group>.btn-group{float:left}.btn-group>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:last-child:not(:first-child)>.btn:first-child{border-top-left-radius:0;border-bottom-left-radius:0}.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle{outline:0}.btn-group>.btn+.dropdown-toggle{padding-right:8px;padding-left:8px}.btn-group>.btn-lg+.dropdown-toggle{padding-right:12px;padding-left:12px}.btn-group.open .dropdown-toggle{-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,.125);box-shadow:inset 0 3px 5px rgba(0,0,0,.125)}.btn-group.open .dropdown-toggle.btn-link{-webkit-box-shadow:none;box-shadow:none}.btn .caret{margin-left:0}.btn-lg .caret{border-width:5px 5px 0;border-bottom-width:0}.dropup .btn-lg .caret{border-width:0 5px 5px}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group,.btn-group-vertical>.btn-group>.btn{display:block;float:none;width:100%;max-width:100%}.btn-group-vertical>.btn-group>.btn{float:none}.btn-group-vertical>.btn+.btn,.btn-group-vertical>.btn+.btn-group,.btn-group-vertical>.btn-group+.btn,.btn-group-vertical>.btn-group+.btn-group{margin-top:-1px;margin-left:0}.btn-group-vertical>.btn:not(:first-child):not(:last-child){border-radius:0}.btn-group-vertical>.btn:first-child:not(:last-child){border-top-left-radius:4px;border-top-right-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn:last-child:not(:first-child){border-top-left-radius:0;border-top-right-radius:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}.btn-group-vertical>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group-vertical>.btn-group:first-child:not(:last-child)>.btn:last-child,.btn-group-vertical>.btn-group:first-child:not(:last-child)>.dropdown-toggle{border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:last-child:not(:first-child)>.btn:first-child{border-top-left-radius:0;border-top-right-radius:0}.btn-group-justified{display:table;width:100%;table-layout:fixed;border-collapse:separate}.btn-group-justified>.btn,.btn-group-justified>.btn-group{display:table-cell;float:none;width:1%}.btn-group-justified>.btn-group .btn{width:100%}.btn-group-justified>.btn-group .dropdown-menu{left:auto}[data-toggle=buttons]>.btn input[type=checkbox],[data-toggle=buttons]>.btn input[type=radio],[data-toggle=buttons]>.btn-group>.btn input[type=checkbox],[data-toggle=buttons]>.btn-group>.btn input[type=radio]{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.input-group{position:relative;display:table;border-collapse:separate}.input-group[class*=col-]{float:none;padding-right:0;padding-left:0}.input-group .form-control{position:relative;z-index:2;float:left;width:100%;margin-bottom:0}.input-group .form-control:focus{z-index:3}.input-group-lg>.form-control,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.btn{height:46px;padding:10px 16px;font-size:18px;line-height:1.3333333;border-radius:6px}select.input-group-lg>.form-control,select.input-group-lg>.input-group-addon,select.input-group-lg>.input-group-btn>.btn{height:46px;line-height:46px}select[multiple].input-group-lg>.form-control,select[multiple].input-group-lg>.input-group-addon,select[multiple].input-group-lg>.input-group-btn>.btn,textarea.input-group-lg>.form-control,textarea.input-group-lg>.input-group-addon,textarea.input-group-lg>.input-group-btn>.btn{height:auto}.input-group-sm>.form-control,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.btn{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}select.input-group-sm>.form-control,select.input-group-sm>.input-group-addon,select.input-group-sm>.input-group-btn>.btn{height:30px;line-height:30px}select[multiple].input-group-sm>.form-control,select[multiple].input-group-sm>.input-group-addon,select[multiple].input-group-sm>.input-group-btn>.btn,textarea.input-group-sm>.form-control,textarea.input-group-sm>.input-group-addon,textarea.input-group-sm>.input-group-btn>.btn{height:auto}.input-group .form-control,.input-group-addon,.input-group-btn{display:table-cell}.input-group .form-control:not(:first-child):not(:last-child),.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child){border-radius:0}.input-group-addon,.input-group-btn{width:1%;white-space:nowrap;vertical-align:middle}.input-group-addon{padding:6px 12px;font-size:14px;font-weight:400;line-height:1;color:#555;text-align:center;background-color:#eee;border:1px solid #ccc;border-radius:4px}.input-group-addon.input-sm{padding:5px 10px;font-size:12px;border-radius:3px}.input-group-addon.input-lg{padding:10px 16px;font-size:18px;border-radius:6px}.input-group-addon input[type=checkbox],.input-group-addon input[type=radio]{margin-top:0}.input-group .form-control:first-child,.input-group-addon:first-child,.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group>.btn,.input-group-btn:first-child>.dropdown-toggle,.input-group-btn:last-child>.btn-group:not(:last-child)>.btn,.input-group-btn:last-child>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.input-group-addon:first-child{border-right:0}.input-group .form-control:last-child,.input-group-addon:last-child,.input-group-btn:first-child>.btn-group:not(:first-child)>.btn,.input-group-btn:first-child>.btn:not(:first-child),.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group>.btn,.input-group-btn:last-child>.dropdown-toggle{border-top-left-radius:0;border-bottom-left-radius:0}.input-group-addon:last-child{border-left:0}.input-group-btn{position:relative;font-size:0;white-space:nowrap}.input-group-btn>.btn{position:relative}.input-group-btn>.btn+.btn{margin-left:-1px}.input-group-btn>.btn:active,.input-group-btn>.btn:focus,.input-group-btn>.btn:hover{z-index:2}.input-group-btn:first-child>.btn,.input-group-btn:first-child>.btn-group{margin-right:-1px}.input-group-btn:last-child>.btn,.input-group-btn:last-child>.btn-group{z-index:2;margin-left:-1px}.nav{padding-left:0;margin-bottom:0;list-style:none}.nav>li{position:relative;display:block}.nav>li>a{position:relative;display:block;padding:10px 15px}.nav>li>a:focus,.nav>li>a:hover{text-decoration:none;background-color:#eee}.nav>li.disabled>a{color:#777}.nav>li.disabled>a:focus,.nav>li.disabled>a:hover{color:#777;text-decoration:none;cursor:not-allowed;background-color:transparent}.nav .open>a,.nav .open>a:focus,.nav .open>a:hover{background-color:#eee;border-color:#337ab7}.nav .nav-divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.nav>li>a>img{max-width:none}.nav-tabs{border-bottom:1px solid #ddd}.nav-tabs>li{float:left;margin-bottom:-1px}.nav-tabs>li>a{margin-right:2px;line-height:1.42857143;border:1px solid transparent;border-radius:4px 4px 0 0}.nav-tabs>li>a:hover{border-color:#eee #eee #ddd}.nav-tabs>li.active>a,.nav-tabs>li.active>a:focus,.nav-tabs>li.active>a:hover{color:#555;cursor:default;background-color:#fff;border:1px solid #ddd;border-bottom-color:transparent}.nav-tabs.nav-justified{width:100%;border-bottom:0}.nav-tabs.nav-justified>li{float:none}.nav-tabs.nav-justified>li>a{margin-bottom:5px;text-align:center}.nav-tabs.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media (min-width:768px){.nav-tabs.nav-justified>li{display:table-cell;width:1%}.nav-tabs.nav-justified>li>a{margin-bottom:0}}.nav-tabs.nav-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border:1px solid #ddd}@media (min-width:768px){.nav-tabs.nav-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:focus,.nav-tabs.nav-justified>.active>a:hover{border-bottom-color:#fff}}.nav-pills>li{float:left}.nav-pills>li>a{border-radius:4px}.nav-pills>li+li{margin-left:2px}.nav-pills>li.active>a,.nav-pills>li.active>a:focus,.nav-pills>li.active>a:hover{color:#fff;background-color:#337ab7}.nav-stacked>li{float:none}.nav-stacked>li+li{margin-top:2px;margin-left:0}.nav-justified{width:100%}.nav-justified>li{float:none}.nav-justified>li>a{margin-bottom:5px;text-align:center}.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media (min-width:768px){.nav-justified>li{display:table-cell;width:1%}.nav-justified>li>a{margin-bottom:0}}.nav-tabs-justified{border-bottom:0}.nav-tabs-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover{border:1px solid #ddd}@media (min-width:768px){.nav-tabs-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:focus,.nav-tabs-justified>.active>a:hover{border-bottom-color:#fff}}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-left-radius:0;border-top-right-radius:0}.navbar{position:relative;min-height:50px;margin-bottom:20px;border:1px solid transparent}@media (min-width:768px){.navbar{border-radius:4px}}@media (min-width:768px){.navbar-header{float:left}}.navbar-collapse{padding-right:15px;padding-left:15px;overflow-x:visible;-webkit-overflow-scrolling:touch;border-top:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 0 rgba(255,255,255,.1)}.navbar-collapse.in{overflow-y:auto}@media (min-width:768px){.navbar-collapse{width:auto;border-top:0;-webkit-box-shadow:none;box-shadow:none}.navbar-collapse.collapse{display:block!important;height:auto!important;padding-bottom:0;overflow:visible!important}.navbar-collapse.in{overflow-y:visible}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse,.navbar-static-top .navbar-collapse{padding-right:0;padding-left:0}}.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:340px}@media (max-device-width:480px) and (orientation:landscape){.navbar-fixed-bottom .navbar-collapse,.navbar-fixed-top .navbar-collapse{max-height:200px}}.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:-15px;margin-left:-15px}@media (min-width:768px){.container-fluid>.navbar-collapse,.container-fluid>.navbar-header,.container>.navbar-collapse,.container>.navbar-header{margin-right:0;margin-left:0}}.navbar-static-top{z-index:1000;border-width:0 0 1px}@media (min-width:768px){.navbar-static-top{border-radius:0}}.navbar-fixed-bottom,.navbar-fixed-top{position:fixed;right:0;left:0;z-index:1030}@media (min-width:768px){.navbar-fixed-bottom,.navbar-fixed-top{border-radius:0}}.navbar-fixed-top{top:0;border-width:0 0 1px}.navbar-fixed-bottom{bottom:0;margin-bottom:0;border-width:1px 0 0}.navbar-brand{float:left;height:50px;padding:15px 15px;font-size:18px;line-height:20px}.navbar-brand:focus,.navbar-brand:hover{text-decoration:none}.navbar-brand>img{display:block}@media (min-width:768px){.navbar>.container .navbar-brand,.navbar>.container-fluid .navbar-brand{margin-left:-15px}}.navbar-toggle{position:relative;float:right;padding:9px 10px;margin-top:8px;margin-right:15px;margin-bottom:8px;background-color:transparent;background-image:none;border:1px solid transparent;border-radius:4px}.navbar-toggle:focus{outline:0}.navbar-toggle .icon-bar{display:block;width:22px;height:2px;border-radius:1px}.navbar-toggle .icon-bar+.icon-bar{margin-top:4px}@media (min-width:768px){.navbar-toggle{display:none}}.navbar-nav{margin:7.5px -15px}.navbar-nav>li>a{padding-top:10px;padding-bottom:10px;line-height:20px}@media (max-width:767px){.navbar-nav .open .dropdown-menu{position:static;float:none;width:auto;margin-top:0;background-color:transparent;border:0;-webkit-box-shadow:none;box-shadow:none}.navbar-nav .open .dropdown-menu .dropdown-header,.navbar-nav .open .dropdown-menu>li>a{padding:5px 15px 5px 25px}.navbar-nav .open .dropdown-menu>li>a{line-height:20px}.navbar-nav .open .dropdown-menu>li>a:focus,.navbar-nav .open .dropdown-menu>li>a:hover{background-image:none}}@media (min-width:768px){.navbar-nav{float:left;margin:0}.navbar-nav>li{float:left}.navbar-nav>li>a{padding-top:15px;padding-bottom:15px}}.navbar-form{padding:10px 15px;margin-top:8px;margin-right:-15px;margin-bottom:8px;margin-left:-15px;border-top:1px solid transparent;border-bottom:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,.1),0 1px 0 rgba(255,255,255,.1);box-shadow:inset 0 1px 0 rgba(255,255,255,.1),0 1px 0 rgba(255,255,255,.1)}@media (min-width:768px){.navbar-form .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.navbar-form .form-control{display:inline-block;width:auto;vertical-align:middle}.navbar-form .form-control-static{display:inline-block}.navbar-form .input-group{display:inline-table;vertical-align:middle}.navbar-form .input-group .form-control,.navbar-form .input-group .input-group-addon,.navbar-form .input-group .input-group-btn{width:auto}.navbar-form .input-group>.form-control{width:100%}.navbar-form .control-label{margin-bottom:0;vertical-align:middle}.navbar-form .checkbox,.navbar-form .radio{display:inline-block;margin-top:0;margin-bottom:0;vertical-align:middle}.navbar-form .checkbox label,.navbar-form .radio label{padding-left:0}.navbar-form .checkbox input[type=checkbox],.navbar-form .radio input[type=radio]{position:relative;margin-left:0}.navbar-form .has-feedback .form-control-feedback{top:0}}@media (max-width:767px){.navbar-form .form-group{margin-bottom:5px}.navbar-form .form-group:last-child{margin-bottom:0}}@media (min-width:768px){.navbar-form{width:auto;padding-top:0;padding-bottom:0;margin-right:0;margin-left:0;border:0;-webkit-box-shadow:none;box-shadow:none}}.navbar-nav>li>.dropdown-menu{margin-top:0;border-top-left-radius:0;border-top-right-radius:0}.navbar-fixed-bottom .navbar-nav>li>.dropdown-menu{margin-bottom:0;border-top-left-radius:4px;border-top-right-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.navbar-btn{margin-top:8px;margin-bottom:8px}.navbar-btn.btn-sm{margin-top:10px;margin-bottom:10px}.navbar-btn.btn-xs{margin-top:14px;margin-bottom:14px}.navbar-text{margin-top:15px;margin-bottom:15px}@media (min-width:768px){.navbar-text{float:left;margin-right:15px;margin-left:15px}}@media (min-width:768px){.navbar-left{float:left!important}.navbar-right{float:right!important;margin-right:-15px}.navbar-right~.navbar-right{margin-right:0}}.navbar-default{background-color:#f8f8f8;border-color:#e7e7e7}.navbar-default .navbar-brand{color:#777}.navbar-default .navbar-brand:focus,.navbar-default .navbar-brand:hover{color:#5e5e5e;background-color:transparent}.navbar-default .navbar-text{color:#777}.navbar-default .navbar-nav>li>a{color:#777}.navbar-default .navbar-nav>li>a:focus,.navbar-default .navbar-nav>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:focus,.navbar-default .navbar-nav>.active>a:hover{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav>.disabled>a,.navbar-default .navbar-nav>.disabled>a:focus,.navbar-default .navbar-nav>.disabled>a:hover{color:#ccc;background-color:transparent}.navbar-default .navbar-toggle{border-color:#ddd}.navbar-default .navbar-toggle:focus,.navbar-default .navbar-toggle:hover{background-color:#ddd}.navbar-default .navbar-toggle .icon-bar{background-color:#888}.navbar-default .navbar-collapse,.navbar-default .navbar-form{border-color:#e7e7e7}.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:focus,.navbar-default .navbar-nav>.open>a:hover{color:#555;background-color:#e7e7e7}@media (max-width:767px){.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#777}.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover{color:#333;background-color:transparent}.navbar-default .navbar-nav .open .dropdown-menu>.active>a,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:hover{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#ccc;background-color:transparent}}.navbar-default .navbar-link{color:#777}.navbar-default .navbar-link:hover{color:#333}.navbar-default .btn-link{color:#777}.navbar-default .btn-link:focus,.navbar-default .btn-link:hover{color:#333}.navbar-default .btn-link[disabled]:focus,.navbar-default .btn-link[disabled]:hover,fieldset[disabled] .navbar-default .btn-link:focus,fieldset[disabled] .navbar-default .btn-link:hover{color:#ccc}.navbar-inverse{background-color:#222;border-color:#080808}.navbar-inverse .navbar-brand{color:#9d9d9d}.navbar-inverse .navbar-brand:focus,.navbar-inverse .navbar-brand:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-text{color:#9d9d9d}.navbar-inverse .navbar-nav>li>a{color:#9d9d9d}.navbar-inverse .navbar-nav>li>a:focus,.navbar-inverse .navbar-nav>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav>.active>a,.navbar-inverse .navbar-nav>.active>a:focus,.navbar-inverse .navbar-nav>.active>a:hover{color:#fff;background-color:#080808}.navbar-inverse .navbar-nav>.disabled>a,.navbar-inverse .navbar-nav>.disabled>a:focus,.navbar-inverse .navbar-nav>.disabled>a:hover{color:#444;background-color:transparent}.navbar-inverse .navbar-toggle{border-color:#333}.navbar-inverse .navbar-toggle:focus,.navbar-inverse .navbar-toggle:hover{background-color:#333}.navbar-inverse .navbar-toggle .icon-bar{background-color:#fff}.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form{border-color:#101010}.navbar-inverse .navbar-nav>.open>a,.navbar-inverse .navbar-nav>.open>a:focus,.navbar-inverse .navbar-nav>.open>a:hover{color:#fff;background-color:#080808}@media (max-width:767px){.navbar-inverse .navbar-nav .open .dropdown-menu>.dropdown-header{border-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu .divider{background-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a{color:#9d9d9d}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:hover{color:#fff;background-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:focus,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:hover{color:#444;background-color:transparent}}.navbar-inverse .navbar-link{color:#9d9d9d}.navbar-inverse .navbar-link:hover{color:#fff}.navbar-inverse .btn-link{color:#9d9d9d}.navbar-inverse .btn-link:focus,.navbar-inverse .btn-link:hover{color:#fff}.navbar-inverse .btn-link[disabled]:focus,.navbar-inverse .btn-link[disabled]:hover,fieldset[disabled] .navbar-inverse .btn-link:focus,fieldset[disabled] .navbar-inverse .btn-link:hover{color:#444}.breadcrumb{padding:8px 15px;margin-bottom:20px;list-style:none;background-color:#f5f5f5;border-radius:4px}.breadcrumb>li{display:inline-block}.breadcrumb>li+li:before{padding:0 5px;color:#ccc;content:\"/\\00a0\"}.breadcrumb>.active{color:#777}.pagination{display:inline-block;padding-left:0;margin:20px 0;border-radius:4px}.pagination>li{display:inline}.pagination>li>a,.pagination>li>span{position:relative;float:left;padding:6px 12px;margin-left:-1px;line-height:1.42857143;color:#337ab7;text-decoration:none;background-color:#fff;border:1px solid #ddd}.pagination>li:first-child>a,.pagination>li:first-child>span{margin-left:0;border-top-left-radius:4px;border-bottom-left-radius:4px}.pagination>li:last-child>a,.pagination>li:last-child>span{border-top-right-radius:4px;border-bottom-right-radius:4px}.pagination>li>a:focus,.pagination>li>a:hover,.pagination>li>span:focus,.pagination>li>span:hover{z-index:2;color:#23527c;background-color:#eee;border-color:#ddd}.pagination>.active>a,.pagination>.active>a:focus,.pagination>.active>a:hover,.pagination>.active>span,.pagination>.active>span:focus,.pagination>.active>span:hover{z-index:3;color:#fff;cursor:default;background-color:#337ab7;border-color:#337ab7}.pagination>.disabled>a,.pagination>.disabled>a:focus,.pagination>.disabled>a:hover,.pagination>.disabled>span,.pagination>.disabled>span:focus,.pagination>.disabled>span:hover{color:#777;cursor:not-allowed;background-color:#fff;border-color:#ddd}.pagination-lg>li>a,.pagination-lg>li>span{padding:10px 16px;font-size:18px;line-height:1.3333333}.pagination-lg>li:first-child>a,.pagination-lg>li:first-child>span{border-top-left-radius:6px;border-bottom-left-radius:6px}.pagination-lg>li:last-child>a,.pagination-lg>li:last-child>span{border-top-right-radius:6px;border-bottom-right-radius:6px}.pagination-sm>li>a,.pagination-sm>li>span{padding:5px 10px;font-size:12px;line-height:1.5}.pagination-sm>li:first-child>a,.pagination-sm>li:first-child>span{border-top-left-radius:3px;border-bottom-left-radius:3px}.pagination-sm>li:last-child>a,.pagination-sm>li:last-child>span{border-top-right-radius:3px;border-bottom-right-radius:3px}.pager{padding-left:0;margin:20px 0;text-align:center;list-style:none}.pager li{display:inline}.pager li>a,.pager li>span{display:inline-block;padding:5px 14px;background-color:#fff;border:1px solid #ddd;border-radius:15px}.pager li>a:focus,.pager li>a:hover{text-decoration:none;background-color:#eee}.pager .next>a,.pager .next>span{float:right}.pager .previous>a,.pager .previous>span{float:left}.pager .disabled>a,.pager .disabled>a:focus,.pager .disabled>a:hover,.pager .disabled>span{color:#777;cursor:not-allowed;background-color:#fff}.label{display:inline;padding:.2em .6em .3em;font-size:75%;font-weight:700;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}a.label:focus,a.label:hover{color:#fff;text-decoration:none;cursor:pointer}.label:empty{display:none}.btn .label{position:relative;top:-1px}.label-default{background-color:#777}.label-default[href]:focus,.label-default[href]:hover{background-color:#5e5e5e}.label-primary{background-color:#337ab7}.label-primary[href]:focus,.label-primary[href]:hover{background-color:#286090}.label-success{background-color:#5cb85c}.label-success[href]:focus,.label-success[href]:hover{background-color:#449d44}.label-info{background-color:#5bc0de}.label-info[href]:focus,.label-info[href]:hover{background-color:#31b0d5}.label-warning{background-color:#f0ad4e}.label-warning[href]:focus,.label-warning[href]:hover{background-color:#ec971f}.label-danger{background-color:#d9534f}.label-danger[href]:focus,.label-danger[href]:hover{background-color:#c9302c}.badge{display:inline-block;min-width:10px;padding:3px 7px;font-size:12px;font-weight:700;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:middle;background-color:#777;border-radius:10px}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.btn-group-xs>.btn .badge,.btn-xs .badge{top:0;padding:1px 5px}a.badge:focus,a.badge:hover{color:#fff;text-decoration:none;cursor:pointer}.list-group-item.active>.badge,.nav-pills>.active>a>.badge{color:#337ab7;background-color:#fff}.list-group-item>.badge{float:right}.list-group-item>.badge+.badge{margin-right:5px}.nav-pills>li>a>.badge{margin-left:3px}.jumbotron{padding-top:30px;padding-bottom:30px;margin-bottom:30px;color:inherit;background-color:#eee}.jumbotron .h1,.jumbotron h1{color:inherit}.jumbotron p{margin-bottom:15px;font-size:21px;font-weight:200}.jumbotron>hr{border-top-color:#d5d5d5}.container .jumbotron,.container-fluid .jumbotron{padding-right:15px;padding-left:15px;border-radius:6px}.jumbotron .container{max-width:100%}@media screen and (min-width:768px){.jumbotron{padding-top:48px;padding-bottom:48px}.container .jumbotron,.container-fluid .jumbotron{padding-right:60px;padding-left:60px}.jumbotron .h1,.jumbotron h1{font-size:63px}}.thumbnail{display:block;padding:4px;margin-bottom:20px;line-height:1.42857143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:border .2s ease-in-out;-o-transition:border .2s ease-in-out;transition:border .2s ease-in-out}.thumbnail a>img,.thumbnail>img{margin-right:auto;margin-left:auto}a.thumbnail.active,a.thumbnail:focus,a.thumbnail:hover{border-color:#337ab7}.thumbnail .caption{padding:9px;color:#333}.alert{padding:15px;margin-bottom:20px;border:1px solid transparent;border-radius:4px}.alert h4{margin-top:0;color:inherit}.alert .alert-link{font-weight:700}.alert>p,.alert>ul{margin-bottom:0}.alert>p+p{margin-top:5px}.alert-dismissable,.alert-dismissible{padding-right:35px}.alert-dismissable .close,.alert-dismissible .close{position:relative;top:-2px;right:-21px;color:inherit}.alert-success{color:#3c763d;background-color:#dff0d8;border-color:#d6e9c6}.alert-success hr{border-top-color:#c9e2b3}.alert-success .alert-link{color:#2b542c}.alert-info{color:#31708f;background-color:#d9edf7;border-color:#bce8f1}.alert-info hr{border-top-color:#a6e1ec}.alert-info .alert-link{color:#245269}.alert-warning{color:#8a6d3b;background-color:#fcf8e3;border-color:#faebcc}.alert-warning hr{border-top-color:#f7e1b5}.alert-warning .alert-link{color:#66512c}.alert-danger{color:#a94442;background-color:#f2dede;border-color:#ebccd1}.alert-danger hr{border-top-color:#e4b9c0}.alert-danger .alert-link{color:#843534}@-webkit-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@-o-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}.progress{height:20px;margin-bottom:20px;overflow:hidden;background-color:#f5f5f5;border-radius:4px;-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,.1);box-shadow:inset 0 1px 2px rgba(0,0,0,.1)}.progress-bar{float:left;width:0;height:100%;font-size:12px;line-height:20px;color:#fff;text-align:center;background-color:#337ab7;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,.15);-webkit-transition:width .6s ease;-o-transition:width .6s ease;transition:width .6s ease}.progress-bar-striped,.progress-striped .progress-bar{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);-webkit-background-size:40px 40px;background-size:40px 40px}.progress-bar.active,.progress.active .progress-bar{-webkit-animation:progress-bar-stripes 2s linear infinite;-o-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}.progress-bar-success{background-color:#5cb85c}.progress-striped .progress-bar-success{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.progress-bar-info{background-color:#5bc0de}.progress-striped .progress-bar-info{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.progress-bar-warning{background-color:#f0ad4e}.progress-striped .progress-bar-warning{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.progress-bar-danger{background-color:#d9534f}.progress-striped .progress-bar-danger{background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent)}.media{margin-top:15px}.media:first-child{margin-top:0}.media,.media-body{overflow:hidden;zoom:1}.media-body{width:10000px}.media-object{display:block}.media-object.img-thumbnail{max-width:none}.media-right,.media>.pull-right{padding-left:10px}.media-left,.media>.pull-left{padding-right:10px}.media-body,.media-left,.media-right{display:table-cell;vertical-align:top}.media-middle{vertical-align:middle}.media-bottom{vertical-align:bottom}.media-heading{margin-top:0;margin-bottom:5px}.media-list{padding-left:0;list-style:none}.list-group{padding-left:0;margin-bottom:20px}.list-group-item{position:relative;display:block;padding:10px 15px;margin-bottom:-1px;background-color:#fff;border:1px solid #ddd}.list-group-item:first-child{border-top-left-radius:4px;border-top-right-radius:4px}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}a.list-group-item,button.list-group-item{color:#555}a.list-group-item .list-group-item-heading,button.list-group-item .list-group-item-heading{color:#333}a.list-group-item:focus,a.list-group-item:hover,button.list-group-item:focus,button.list-group-item:hover{color:#555;text-decoration:none;background-color:#f5f5f5}button.list-group-item{width:100%;text-align:left}.list-group-item.disabled,.list-group-item.disabled:focus,.list-group-item.disabled:hover{color:#777;cursor:not-allowed;background-color:#eee}.list-group-item.disabled .list-group-item-heading,.list-group-item.disabled:focus .list-group-item-heading,.list-group-item.disabled:hover .list-group-item-heading{color:inherit}.list-group-item.disabled .list-group-item-text,.list-group-item.disabled:focus .list-group-item-text,.list-group-item.disabled:hover .list-group-item-text{color:#777}.list-group-item.active,.list-group-item.active:focus,.list-group-item.active:hover{z-index:2;color:#fff;background-color:#337ab7;border-color:#337ab7}.list-group-item.active .list-group-item-heading,.list-group-item.active .list-group-item-heading>.small,.list-group-item.active .list-group-item-heading>small,.list-group-item.active:focus .list-group-item-heading,.list-group-item.active:focus .list-group-item-heading>.small,.list-group-item.active:focus .list-group-item-heading>small,.list-group-item.active:hover .list-group-item-heading,.list-group-item.active:hover .list-group-item-heading>.small,.list-group-item.active:hover .list-group-item-heading>small{color:inherit}.list-group-item.active .list-group-item-text,.list-group-item.active:focus .list-group-item-text,.list-group-item.active:hover .list-group-item-text{color:#c7ddef}.list-group-item-success{color:#3c763d;background-color:#dff0d8}a.list-group-item-success,button.list-group-item-success{color:#3c763d}a.list-group-item-success .list-group-item-heading,button.list-group-item-success .list-group-item-heading{color:inherit}a.list-group-item-success:focus,a.list-group-item-success:hover,button.list-group-item-success:focus,button.list-group-item-success:hover{color:#3c763d;background-color:#d0e9c6}a.list-group-item-success.active,a.list-group-item-success.active:focus,a.list-group-item-success.active:hover,button.list-group-item-success.active,button.list-group-item-success.active:focus,button.list-group-item-success.active:hover{color:#fff;background-color:#3c763d;border-color:#3c763d}.list-group-item-info{color:#31708f;background-color:#d9edf7}a.list-group-item-info,button.list-group-item-info{color:#31708f}a.list-group-item-info .list-group-item-heading,button.list-group-item-info .list-group-item-heading{color:inherit}a.list-group-item-info:focus,a.list-group-item-info:hover,button.list-group-item-info:focus,button.list-group-item-info:hover{color:#31708f;background-color:#c4e3f3}a.list-group-item-info.active,a.list-group-item-info.active:focus,a.list-group-item-info.active:hover,button.list-group-item-info.active,button.list-group-item-info.active:focus,button.list-group-item-info.active:hover{color:#fff;background-color:#31708f;border-color:#31708f}.list-group-item-warning{color:#8a6d3b;background-color:#fcf8e3}a.list-group-item-warning,button.list-group-item-warning{color:#8a6d3b}a.list-group-item-warning .list-group-item-heading,button.list-group-item-warning .list-group-item-heading{color:inherit}a.list-group-item-warning:focus,a.list-group-item-warning:hover,button.list-group-item-warning:focus,button.list-group-item-warning:hover{color:#8a6d3b;background-color:#faf2cc}a.list-group-item-warning.active,a.list-group-item-warning.active:focus,a.list-group-item-warning.active:hover,button.list-group-item-warning.active,button.list-group-item-warning.active:focus,button.list-group-item-warning.active:hover{color:#fff;background-color:#8a6d3b;border-color:#8a6d3b}.list-group-item-danger{color:#a94442;background-color:#f2dede}a.list-group-item-danger,button.list-group-item-danger{color:#a94442}a.list-group-item-danger .list-group-item-heading,button.list-group-item-danger .list-group-item-heading{color:inherit}a.list-group-item-danger:focus,a.list-group-item-danger:hover,button.list-group-item-danger:focus,button.list-group-item-danger:hover{color:#a94442;background-color:#ebcccc}a.list-group-item-danger.active,a.list-group-item-danger.active:focus,a.list-group-item-danger.active:hover,button.list-group-item-danger.active,button.list-group-item-danger.active:focus,button.list-group-item-danger.active:hover{color:#fff;background-color:#a94442;border-color:#a94442}.list-group-item-heading{margin-top:0;margin-bottom:5px}.list-group-item-text{margin-bottom:0;line-height:1.3}.panel{margin-bottom:20px;background-color:#fff;border:1px solid transparent;border-radius:4px;-webkit-box-shadow:0 1px 1px rgba(0,0,0,.05);box-shadow:0 1px 1px rgba(0,0,0,.05)}.panel-body{padding:15px}.panel-heading{padding:10px 15px;border-bottom:1px solid transparent;border-top-left-radius:3px;border-top-right-radius:3px}.panel-heading>.dropdown .dropdown-toggle{color:inherit}.panel-title{margin-top:0;margin-bottom:0;font-size:16px;color:inherit}.panel-title>.small,.panel-title>.small>a,.panel-title>a,.panel-title>small,.panel-title>small>a{color:inherit}.panel-footer{padding:10px 15px;background-color:#f5f5f5;border-top:1px solid #ddd;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.list-group,.panel>.panel-collapse>.list-group{margin-bottom:0}.panel>.list-group .list-group-item,.panel>.panel-collapse>.list-group .list-group-item{border-width:1px 0;border-radius:0}.panel>.list-group:first-child .list-group-item:first-child,.panel>.panel-collapse>.list-group:first-child .list-group-item:first-child{border-top:0;border-top-left-radius:3px;border-top-right-radius:3px}.panel>.list-group:last-child .list-group-item:last-child,.panel>.panel-collapse>.list-group:last-child .list-group-item:last-child{border-bottom:0;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.panel-heading+.panel-collapse>.list-group .list-group-item:first-child{border-top-left-radius:0;border-top-right-radius:0}.panel-heading+.list-group .list-group-item:first-child{border-top-width:0}.list-group+.panel-footer{border-top-width:0}.panel>.panel-collapse>.table,.panel>.table,.panel>.table-responsive>.table{margin-bottom:0}.panel>.panel-collapse>.table caption,.panel>.table caption,.panel>.table-responsive>.table caption{padding-right:15px;padding-left:15px}.panel>.table-responsive:first-child>.table:first-child,.panel>.table:first-child{border-top-left-radius:3px;border-top-right-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child,.panel>.table:first-child>thead:first-child>tr:first-child{border-top-left-radius:3px;border-top-right-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:first-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:first-child,.panel>.table:first-child>thead:first-child>tr:first-child td:first-child,.panel>.table:first-child>thead:first-child>tr:first-child th:first-child{border-top-left-radius:3px}.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>tbody:first-child>tr:first-child th:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table-responsive:first-child>.table:first-child>thead:first-child>tr:first-child th:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child td:last-child,.panel>.table:first-child>tbody:first-child>tr:first-child th:last-child,.panel>.table:first-child>thead:first-child>tr:first-child td:last-child,.panel>.table:first-child>thead:first-child>tr:first-child th:last-child{border-top-right-radius:3px}.panel>.table-responsive:last-child>.table:last-child,.panel>.table:last-child{border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child{border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:first-child,.panel>.table:last-child>tbody:last-child>tr:last-child td:first-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:first-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:first-child{border-bottom-left-radius:3px}.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table-responsive:last-child>.table:last-child>tfoot:last-child>tr:last-child th:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child td:last-child,.panel>.table:last-child>tbody:last-child>tr:last-child th:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child td:last-child,.panel>.table:last-child>tfoot:last-child>tr:last-child th:last-child{border-bottom-right-radius:3px}.panel>.panel-body+.table,.panel>.panel-body+.table-responsive,.panel>.table+.panel-body,.panel>.table-responsive+.panel-body{border-top:1px solid #ddd}.panel>.table>tbody:first-child>tr:first-child td,.panel>.table>tbody:first-child>tr:first-child th{border-top:0}.panel>.table-bordered,.panel>.table-responsive>.table-bordered{border:0}.panel>.table-bordered>tbody>tr>td:first-child,.panel>.table-bordered>tbody>tr>th:first-child,.panel>.table-bordered>tfoot>tr>td:first-child,.panel>.table-bordered>tfoot>tr>th:first-child,.panel>.table-bordered>thead>tr>td:first-child,.panel>.table-bordered>thead>tr>th:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:first-child,.panel>.table-responsive>.table-bordered>thead>tr>td:first-child,.panel>.table-responsive>.table-bordered>thead>tr>th:first-child{border-left:0}.panel>.table-bordered>tbody>tr>td:last-child,.panel>.table-bordered>tbody>tr>th:last-child,.panel>.table-bordered>tfoot>tr>td:last-child,.panel>.table-bordered>tfoot>tr>th:last-child,.panel>.table-bordered>thead>tr>td:last-child,.panel>.table-bordered>thead>tr>th:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:last-child,.panel>.table-responsive>.table-bordered>thead>tr>td:last-child,.panel>.table-responsive>.table-bordered>thead>tr>th:last-child{border-right:0}.panel>.table-bordered>tbody>tr:first-child>td,.panel>.table-bordered>tbody>tr:first-child>th,.panel>.table-bordered>thead>tr:first-child>td,.panel>.table-bordered>thead>tr:first-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:first-child>th,.panel>.table-responsive>.table-bordered>thead>tr:first-child>td,.panel>.table-responsive>.table-bordered>thead>tr:first-child>th{border-bottom:0}.panel>.table-bordered>tbody>tr:last-child>td,.panel>.table-bordered>tbody>tr:last-child>th,.panel>.table-bordered>tfoot>tr:last-child>td,.panel>.table-bordered>tfoot>tr:last-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>th,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>td,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>th{border-bottom:0}.panel>.table-responsive{margin-bottom:0;border:0}.panel-group{margin-bottom:20px}.panel-group .panel{margin-bottom:0;border-radius:4px}.panel-group .panel+.panel{margin-top:5px}.panel-group .panel-heading{border-bottom:0}.panel-group .panel-heading+.panel-collapse>.list-group,.panel-group .panel-heading+.panel-collapse>.panel-body{border-top:1px solid #ddd}.panel-group .panel-footer{border-top:0}.panel-group .panel-footer+.panel-collapse .panel-body{border-bottom:1px solid #ddd}.panel-default{border-color:#ddd}.panel-default>.panel-heading{color:#333;background-color:#f5f5f5;border-color:#ddd}.panel-default>.panel-heading+.panel-collapse>.panel-body{border-top-color:#ddd}.panel-default>.panel-heading .badge{color:#f5f5f5;background-color:#333}.panel-default>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#ddd}.panel-primary{border-color:#337ab7}.panel-primary>.panel-heading{color:#fff;background-color:#337ab7;border-color:#337ab7}.panel-primary>.panel-heading+.panel-collapse>.panel-body{border-top-color:#337ab7}.panel-primary>.panel-heading .badge{color:#337ab7;background-color:#fff}.panel-primary>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#337ab7}.panel-success{border-color:#d6e9c6}.panel-success>.panel-heading{color:#3c763d;background-color:#dff0d8;border-color:#d6e9c6}.panel-success>.panel-heading+.panel-collapse>.panel-body{border-top-color:#d6e9c6}.panel-success>.panel-heading .badge{color:#dff0d8;background-color:#3c763d}.panel-success>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#d6e9c6}.panel-info{border-color:#bce8f1}.panel-info>.panel-heading{color:#31708f;background-color:#d9edf7;border-color:#bce8f1}.panel-info>.panel-heading+.panel-collapse>.panel-body{border-top-color:#bce8f1}.panel-info>.panel-heading .badge{color:#d9edf7;background-color:#31708f}.panel-info>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#bce8f1}.panel-warning{border-color:#faebcc}.panel-warning>.panel-heading{color:#8a6d3b;background-color:#fcf8e3;border-color:#faebcc}.panel-warning>.panel-heading+.panel-collapse>.panel-body{border-top-color:#faebcc}.panel-warning>.panel-heading .badge{color:#fcf8e3;background-color:#8a6d3b}.panel-warning>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#faebcc}.panel-danger{border-color:#ebccd1}.panel-danger>.panel-heading{color:#a94442;background-color:#f2dede;border-color:#ebccd1}.panel-danger>.panel-heading+.panel-collapse>.panel-body{border-top-color:#ebccd1}.panel-danger>.panel-heading .badge{color:#f2dede;background-color:#a94442}.panel-danger>.panel-footer+.panel-collapse>.panel-body{border-bottom-color:#ebccd1}.embed-responsive{position:relative;display:block;height:0;padding:0;overflow:hidden}.embed-responsive .embed-responsive-item,.embed-responsive embed,.embed-responsive iframe,.embed-responsive object,.embed-responsive video{position:absolute;top:0;bottom:0;left:0;width:100%;height:100%;border:0}.embed-responsive-16by9{padding-bottom:56.25%}.embed-responsive-4by3{padding-bottom:75%}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.05);box-shadow:inset 0 1px 1px rgba(0,0,0,.05)}.well blockquote{border-color:#ddd;border-color:rgba(0,0,0,.15)}.well-lg{padding:24px;border-radius:6px}.well-sm{padding:9px;border-radius:3px}.close{float:right;font-size:21px;font-weight:700;line-height:1;color:#000;text-shadow:0 1px 0 #fff;filter:alpha(opacity=20);opacity:.2}.close:focus,.close:hover{color:#000;text-decoration:none;cursor:pointer;filter:alpha(opacity=50);opacity:.5}button.close{-webkit-appearance:none;padding:0;cursor:pointer;background:0 0;border:0}.modal-open{overflow:hidden}.modal{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1050;display:none;overflow:hidden;-webkit-overflow-scrolling:touch;outline:0}.modal.fade .modal-dialog{-webkit-transition:-webkit-transform .3s ease-out;-o-transition:-o-transform .3s ease-out;transition:transform .3s ease-out;-webkit-transform:translate(0,-25%);-ms-transform:translate(0,-25%);-o-transform:translate(0,-25%);transform:translate(0,-25%)}.modal.in .modal-dialog{-webkit-transform:translate(0,0);-ms-transform:translate(0,0);-o-transform:translate(0,0);transform:translate(0,0)}.modal-open .modal{overflow-x:hidden;overflow-y:auto}.modal-dialog{position:relative;width:auto;margin:10px}.modal-content{position:relative;background-color:#fff;-webkit-background-clip:padding-box;background-clip:padding-box;border:1px solid #999;border:1px solid rgba(0,0,0,.2);border-radius:6px;outline:0;-webkit-box-shadow:0 3px 9px rgba(0,0,0,.5);box-shadow:0 3px 9px rgba(0,0,0,.5)}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;background-color:#000}.modal-backdrop.fade{filter:alpha(opacity=0);opacity:0}.modal-backdrop.in{filter:alpha(opacity=50);opacity:.5}.modal-header{padding:15px;border-bottom:1px solid #e5e5e5}.modal-header .close{margin-top:-2px}.modal-title{margin:0;line-height:1.42857143}.modal-body{position:relative;padding:15px}.modal-footer{padding:15px;text-align:right;border-top:1px solid #e5e5e5}.modal-footer .btn+.btn{margin-bottom:0;margin-left:5px}.modal-footer .btn-group .btn+.btn{margin-left:-1px}.modal-footer .btn-block+.btn-block{margin-left:0}.modal-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}@media (min-width:768px){.modal-dialog{width:600px;margin:30px auto}.modal-content{-webkit-box-shadow:0 5px 15px rgba(0,0,0,.5);box-shadow:0 5px 15px rgba(0,0,0,.5)}.modal-sm{width:300px}}@media (min-width:992px){.modal-lg{width:900px}}.tooltip{position:absolute;z-index:1070;display:block;font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:12px;font-style:normal;font-weight:400;line-height:1.42857143;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;word-wrap:normal;white-space:normal;filter:alpha(opacity=0);opacity:0;line-break:auto}.tooltip.in{filter:alpha(opacity=90);opacity:.9}.tooltip.top{padding:5px 0;margin-top:-3px}.tooltip.right{padding:0 5px;margin-left:3px}.tooltip.bottom{padding:5px 0;margin-top:3px}.tooltip.left{padding:0 5px;margin-left:-3px}.tooltip-inner{max-width:200px;padding:3px 8px;color:#fff;text-align:center;background-color:#000;border-radius:4px}.tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}.tooltip.top .tooltip-arrow{bottom:0;left:50%;margin-left:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-left .tooltip-arrow{right:5px;bottom:0;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-right .tooltip-arrow{bottom:0;left:5px;margin-bottom:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.right .tooltip-arrow{top:50%;left:0;margin-top:-5px;border-width:5px 5px 5px 0;border-right-color:#000}.tooltip.left .tooltip-arrow{top:50%;right:0;margin-top:-5px;border-width:5px 0 5px 5px;border-left-color:#000}.tooltip.bottom .tooltip-arrow{top:0;left:50%;margin-left:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-left .tooltip-arrow{top:0;right:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-right .tooltip-arrow{top:0;left:5px;margin-top:-5px;border-width:0 5px 5px;border-bottom-color:#000}.popover{position:absolute;top:0;left:0;z-index:1060;display:none;max-width:276px;padding:1px;font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;font-size:14px;font-style:normal;font-weight:400;line-height:1.42857143;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;word-wrap:normal;white-space:normal;background-color:#fff;-webkit-background-clip:padding-box;background-clip:padding-box;border:1px solid #ccc;border:1px solid rgba(0,0,0,.2);border-radius:6px;-webkit-box-shadow:0 5px 10px rgba(0,0,0,.2);box-shadow:0 5px 10px rgba(0,0,0,.2);line-break:auto}.popover.top{margin-top:-10px}.popover.right{margin-left:10px}.popover.bottom{margin-top:10px}.popover.left{margin-left:-10px}.popover-title{padding:8px 14px;margin:0;font-size:14px;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-radius:5px 5px 0 0}.popover-content{padding:9px 14px}.popover>.arrow,.popover>.arrow:after{position:absolute;display:block;width:0;height:0;border-color:transparent;border-style:solid}.popover>.arrow{border-width:11px}.popover>.arrow:after{content:\"\";border-width:10px}.popover.top>.arrow{bottom:-11px;left:50%;margin-left:-11px;border-top-color:#999;border-top-color:rgba(0,0,0,.25);border-bottom-width:0}.popover.top>.arrow:after{bottom:1px;margin-left:-10px;content:\" \";border-top-color:#fff;border-bottom-width:0}.popover.right>.arrow{top:50%;left:-11px;margin-top:-11px;border-right-color:#999;border-right-color:rgba(0,0,0,.25);border-left-width:0}.popover.right>.arrow:after{bottom:-10px;left:1px;content:\" \";border-right-color:#fff;border-left-width:0}.popover.bottom>.arrow{top:-11px;left:50%;margin-left:-11px;border-top-width:0;border-bottom-color:#999;border-bottom-color:rgba(0,0,0,.25)}.popover.bottom>.arrow:after{top:1px;margin-left:-10px;content:\" \";border-top-width:0;border-bottom-color:#fff}.popover.left>.arrow{top:50%;right:-11px;margin-top:-11px;border-right-width:0;border-left-color:#999;border-left-color:rgba(0,0,0,.25)}.popover.left>.arrow:after{right:1px;bottom:-10px;content:\" \";border-right-width:0;border-left-color:#fff}.carousel{position:relative}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-inner>.item{position:relative;display:none;-webkit-transition:.6s ease-in-out left;-o-transition:.6s ease-in-out left;transition:.6s ease-in-out left}.carousel-inner>.item>a>img,.carousel-inner>.item>img{line-height:1}@media all and (transform-3d),(-webkit-transform-3d){.carousel-inner>.item{-webkit-transition:-webkit-transform .6s ease-in-out;-o-transition:-o-transform .6s ease-in-out;transition:transform .6s ease-in-out;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-perspective:1000px;perspective:1000px}.carousel-inner>.item.active.right,.carousel-inner>.item.next{left:0;-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}.carousel-inner>.item.active.left,.carousel-inner>.item.prev{left:0;-webkit-transform:translate3d(-100%,0,0);transform:translate3d(-100%,0,0)}.carousel-inner>.item.active,.carousel-inner>.item.next.left,.carousel-inner>.item.prev.right{left:0;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}.carousel-inner>.active,.carousel-inner>.next,.carousel-inner>.prev{display:block}.carousel-inner>.active{left:0}.carousel-inner>.next,.carousel-inner>.prev{position:absolute;top:0;width:100%}.carousel-inner>.next{left:100%}.carousel-inner>.prev{left:-100%}.carousel-inner>.next.left,.carousel-inner>.prev.right{left:0}.carousel-inner>.active.left{left:-100%}.carousel-inner>.active.right{left:100%}.carousel-control{position:absolute;top:0;bottom:0;left:0;width:15%;font-size:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,.6);background-color:rgba(0,0,0,0);filter:alpha(opacity=50);opacity:.5}.carousel-control.left{background-image:-webkit-linear-gradient(left,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001) 100%);background-image:-o-linear-gradient(left,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001) 100%);background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.5)),to(rgba(0,0,0,.0001)));background-image:linear-gradient(to right,rgba(0,0,0,.5) 0,rgba(0,0,0,.0001) 100%);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);background-repeat:repeat-x}.carousel-control.right{right:0;left:auto;background-image:-webkit-linear-gradient(left,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5) 100%);background-image:-o-linear-gradient(left,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5) 100%);background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.0001)),to(rgba(0,0,0,.5)));background-image:linear-gradient(to right,rgba(0,0,0,.0001) 0,rgba(0,0,0,.5) 100%);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);background-repeat:repeat-x}.carousel-control:focus,.carousel-control:hover{color:#fff;text-decoration:none;filter:alpha(opacity=90);outline:0;opacity:.9}.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next,.carousel-control .icon-prev{position:absolute;top:50%;z-index:5;display:inline-block;margin-top:-10px}.carousel-control .glyphicon-chevron-left,.carousel-control .icon-prev{left:50%;margin-left:-10px}.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next{right:50%;margin-right:-10px}.carousel-control .icon-next,.carousel-control .icon-prev{width:20px;height:20px;font-family:serif;line-height:1}.carousel-control .icon-prev:before{content:'\\2039'}.carousel-control .icon-next:before{content:'\\203a'}.carousel-indicators{position:absolute;bottom:10px;left:50%;z-index:15;width:60%;padding-left:0;margin-left:-30%;text-align:center;list-style:none}.carousel-indicators li{display:inline-block;width:10px;height:10px;margin:1px;text-indent:-999px;cursor:pointer;background-color:#000\\9;background-color:rgba(0,0,0,0);border:1px solid #fff;border-radius:10px}.carousel-indicators .active{width:12px;height:12px;margin:0;background-color:#fff}.carousel-caption{position:absolute;right:15%;bottom:20px;left:15%;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,.6)}.carousel-caption .btn{text-shadow:none}@media screen and (min-width:768px){.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next,.carousel-control .icon-prev{width:30px;height:30px;margin-top:-10px;font-size:30px}.carousel-control .glyphicon-chevron-left,.carousel-control .icon-prev{margin-left:-10px}.carousel-control .glyphicon-chevron-right,.carousel-control .icon-next{margin-right:-10px}.carousel-caption{right:20%;left:20%;padding-bottom:30px}.carousel-indicators{bottom:20px}}.btn-group-vertical>.btn-group:after,.btn-group-vertical>.btn-group:before,.btn-toolbar:after,.btn-toolbar:before,.clearfix:after,.clearfix:before,.container-fluid:after,.container-fluid:before,.container:after,.container:before,.dl-horizontal dd:after,.dl-horizontal dd:before,.form-horizontal .form-group:after,.form-horizontal .form-group:before,.modal-footer:after,.modal-footer:before,.modal-header:after,.modal-header:before,.nav:after,.nav:before,.navbar-collapse:after,.navbar-collapse:before,.navbar-header:after,.navbar-header:before,.navbar:after,.navbar:before,.pager:after,.pager:before,.panel-body:after,.panel-body:before,.row:after,.row:before{display:table;content:\" \"}.btn-group-vertical>.btn-group:after,.btn-toolbar:after,.clearfix:after,.container-fluid:after,.container:after,.dl-horizontal dd:after,.form-horizontal .form-group:after,.modal-footer:after,.modal-header:after,.nav:after,.navbar-collapse:after,.navbar-header:after,.navbar:after,.pager:after,.panel-body:after,.row:after{clear:both}.center-block{display:block;margin-right:auto;margin-left:auto}.pull-right{float:right!important}.pull-left{float:left!important}.hide{display:none!important}.show{display:block!important}.invisible{visibility:hidden}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.hidden{display:none!important}.affix{position:fixed}@-ms-viewport{width:device-width}.visible-lg,.visible-md,.visible-sm,.visible-xs{display:none!important}.visible-lg-block,.visible-lg-inline,.visible-lg-inline-block,.visible-md-block,.visible-md-inline,.visible-md-inline-block,.visible-sm-block,.visible-sm-inline,.visible-sm-inline-block,.visible-xs-block,.visible-xs-inline,.visible-xs-inline-block{display:none!important}@media (max-width:767px){.visible-xs{display:block!important}table.visible-xs{display:table!important}tr.visible-xs{display:table-row!important}td.visible-xs,th.visible-xs{display:table-cell!important}}@media (max-width:767px){.visible-xs-block{display:block!important}}@media (max-width:767px){.visible-xs-inline{display:inline!important}}@media (max-width:767px){.visible-xs-inline-block{display:inline-block!important}}@media (min-width:768px) and (max-width:991px){.visible-sm{display:block!important}table.visible-sm{display:table!important}tr.visible-sm{display:table-row!important}td.visible-sm,th.visible-sm{display:table-cell!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-block{display:block!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-inline{display:inline!important}}@media (min-width:768px) and (max-width:991px){.visible-sm-inline-block{display:inline-block!important}}@media (min-width:992px) and (max-width:1199px){.visible-md{display:block!important}table.visible-md{display:table!important}tr.visible-md{display:table-row!important}td.visible-md,th.visible-md{display:table-cell!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-block{display:block!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-inline{display:inline!important}}@media (min-width:992px) and (max-width:1199px){.visible-md-inline-block{display:inline-block!important}}@media (min-width:1200px){.visible-lg{display:block!important}table.visible-lg{display:table!important}tr.visible-lg{display:table-row!important}td.visible-lg,th.visible-lg{display:table-cell!important}}@media (min-width:1200px){.visible-lg-block{display:block!important}}@media (min-width:1200px){.visible-lg-inline{display:inline!important}}@media (min-width:1200px){.visible-lg-inline-block{display:inline-block!important}}@media (max-width:767px){.hidden-xs{display:none!important}}@media (min-width:768px) and (max-width:991px){.hidden-sm{display:none!important}}@media (min-width:992px) and (max-width:1199px){.hidden-md{display:none!important}}@media (min-width:1200px){.hidden-lg{display:none!important}}.visible-print{display:none!important}@media print{.visible-print{display:block!important}table.visible-print{display:table!important}tr.visible-print{display:table-row!important}td.visible-print,th.visible-print{display:table-cell!important}}.visible-print-block{display:none!important}@media print{.visible-print-block{display:block!important}}.visible-print-inline{display:none!important}@media print{.visible-print-inline{display:inline!important}}.visible-print-inline-block{display:none!important}@media print{.visible-print-inline-block{display:inline-block!important}}@media print{.hidden-print{display:none!important}}\n/*# sourceMappingURL=bootstrap.min.css.map */"
);                                                                                                             // 3
                                                                                                               // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"js":{"bootstrap.min.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/bootstrap/dist/js/bootstrap.min.js                                                             //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
/*!                                                                                                            // 1
 * Bootstrap v3.3.6 (http://getbootstrap.com)                                                                  // 2
 * Copyright 2011-2015 Twitter, Inc.                                                                           // 3
 * Licensed under the MIT license                                                                              // 4
 */                                                                                                            // 5
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(a){"use strict";var b=a.fn.jquery.split(" ")[0].split(".");if(b[0]<2&&b[1]<9||1==b[0]&&9==b[1]&&b[2]<1||b[0]>2)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3")}(jQuery),+function(a){"use strict";function b(){var a=document.createElement("bootstrap"),b={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var c in b)if(void 0!==a.style[c])return{end:b[c]};return!1}a.fn.emulateTransitionEnd=function(b){var c=!1,d=this;a(this).one("bsTransitionEnd",function(){c=!0});var e=function(){c||a(d).trigger(a.support.transition.end)};return setTimeout(e,b),this},a(function(){a.support.transition=b(),a.support.transition&&(a.event.special.bsTransitionEnd={bindType:a.support.transition.end,delegateType:a.support.transition.end,handle:function(b){return a(b.target).is(this)?b.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var c=a(this),e=c.data("bs.alert");e||c.data("bs.alert",e=new d(this)),"string"==typeof b&&e[b].call(c)})}var c='[data-dismiss="alert"]',d=function(b){a(b).on("click",c,this.close)};d.VERSION="3.3.6",d.TRANSITION_DURATION=150,d.prototype.close=function(b){function c(){g.detach().trigger("closed.bs.alert").remove()}var e=a(this),f=e.attr("data-target");f||(f=e.attr("href"),f=f&&f.replace(/.*(?=#[^\s]*$)/,""));var g=a(f);b&&b.preventDefault(),g.length||(g=e.closest(".alert")),g.trigger(b=a.Event("close.bs.alert")),b.isDefaultPrevented()||(g.removeClass("in"),a.support.transition&&g.hasClass("fade")?g.one("bsTransitionEnd",c).emulateTransitionEnd(d.TRANSITION_DURATION):c())};var e=a.fn.alert;a.fn.alert=b,a.fn.alert.Constructor=d,a.fn.alert.noConflict=function(){return a.fn.alert=e,this},a(document).on("click.bs.alert.data-api",c,d.prototype.close)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.button"),f="object"==typeof b&&b;e||d.data("bs.button",e=new c(this,f)),"toggle"==b?e.toggle():b&&e.setState(b)})}var c=function(b,d){this.$element=a(b),this.options=a.extend({},c.DEFAULTS,d),this.isLoading=!1};c.VERSION="3.3.6",c.DEFAULTS={loadingText:"loading..."},c.prototype.setState=function(b){var c="disabled",d=this.$element,e=d.is("input")?"val":"html",f=d.data();b+="Text",null==f.resetText&&d.data("resetText",d[e]()),setTimeout(a.proxy(function(){d[e](null==f[b]?this.options[b]:f[b]),"loadingText"==b?(this.isLoading=!0,d.addClass(c).attr(c,c)):this.isLoading&&(this.isLoading=!1,d.removeClass(c).removeAttr(c))},this),0)},c.prototype.toggle=function(){var a=!0,b=this.$element.closest('[data-toggle="buttons"]');if(b.length){var c=this.$element.find("input");"radio"==c.prop("type")?(c.prop("checked")&&(a=!1),b.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==c.prop("type")&&(c.prop("checked")!==this.$element.hasClass("active")&&(a=!1),this.$element.toggleClass("active")),c.prop("checked",this.$element.hasClass("active")),a&&c.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var d=a.fn.button;a.fn.button=b,a.fn.button.Constructor=c,a.fn.button.noConflict=function(){return a.fn.button=d,this},a(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(c){var d=a(c.target);d.hasClass("btn")||(d=d.closest(".btn")),b.call(d,"toggle"),a(c.target).is('input[type="radio"]')||a(c.target).is('input[type="checkbox"]')||c.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(b){a(b.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(b.type))})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.carousel"),f=a.extend({},c.DEFAULTS,d.data(),"object"==typeof b&&b),g="string"==typeof b?b:f.slide;e||d.data("bs.carousel",e=new c(this,f)),"number"==typeof b?e.to(b):g?e[g]():f.interval&&e.pause().cycle()})}var c=function(b,c){this.$element=a(b),this.$indicators=this.$element.find(".carousel-indicators"),this.options=c,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",a.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",a.proxy(this.pause,this)).on("mouseleave.bs.carousel",a.proxy(this.cycle,this))};c.VERSION="3.3.6",c.TRANSITION_DURATION=600,c.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},c.prototype.keydown=function(a){if(!/input|textarea/i.test(a.target.tagName)){switch(a.which){case 37:this.prev();break;case 39:this.next();break;default:return}a.preventDefault()}},c.prototype.cycle=function(b){return b||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(a.proxy(this.next,this),this.options.interval)),this},c.prototype.getItemIndex=function(a){return this.$items=a.parent().children(".item"),this.$items.index(a||this.$active)},c.prototype.getItemForDirection=function(a,b){var c=this.getItemIndex(b),d="prev"==a&&0===c||"next"==a&&c==this.$items.length-1;if(d&&!this.options.wrap)return b;var e="prev"==a?-1:1,f=(c+e)%this.$items.length;return this.$items.eq(f)},c.prototype.to=function(a){var b=this,c=this.getItemIndex(this.$active=this.$element.find(".item.active"));return a>this.$items.length-1||0>a?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){b.to(a)}):c==a?this.pause().cycle():this.slide(a>c?"next":"prev",this.$items.eq(a))},c.prototype.pause=function(b){return b||(this.paused=!0),this.$element.find(".next, .prev").length&&a.support.transition&&(this.$element.trigger(a.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},c.prototype.next=function(){return this.sliding?void 0:this.slide("next")},c.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},c.prototype.slide=function(b,d){var e=this.$element.find(".item.active"),f=d||this.getItemForDirection(b,e),g=this.interval,h="next"==b?"left":"right",i=this;if(f.hasClass("active"))return this.sliding=!1;var j=f[0],k=a.Event("slide.bs.carousel",{relatedTarget:j,direction:h});if(this.$element.trigger(k),!k.isDefaultPrevented()){if(this.sliding=!0,g&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var l=a(this.$indicators.children()[this.getItemIndex(f)]);l&&l.addClass("active")}var m=a.Event("slid.bs.carousel",{relatedTarget:j,direction:h});return a.support.transition&&this.$element.hasClass("slide")?(f.addClass(b),f[0].offsetWidth,e.addClass(h),f.addClass(h),e.one("bsTransitionEnd",function(){f.removeClass([b,h].join(" ")).addClass("active"),e.removeClass(["active",h].join(" ")),i.sliding=!1,setTimeout(function(){i.$element.trigger(m)},0)}).emulateTransitionEnd(c.TRANSITION_DURATION)):(e.removeClass("active"),f.addClass("active"),this.sliding=!1,this.$element.trigger(m)),g&&this.cycle(),this}};var d=a.fn.carousel;a.fn.carousel=b,a.fn.carousel.Constructor=c,a.fn.carousel.noConflict=function(){return a.fn.carousel=d,this};var e=function(c){var d,e=a(this),f=a(e.attr("data-target")||(d=e.attr("href"))&&d.replace(/.*(?=#[^\s]+$)/,""));if(f.hasClass("carousel")){var g=a.extend({},f.data(),e.data()),h=e.attr("data-slide-to");h&&(g.interval=!1),b.call(f,g),h&&f.data("bs.carousel").to(h),c.preventDefault()}};a(document).on("click.bs.carousel.data-api","[data-slide]",e).on("click.bs.carousel.data-api","[data-slide-to]",e),a(window).on("load",function(){a('[data-ride="carousel"]').each(function(){var c=a(this);b.call(c,c.data())})})}(jQuery),+function(a){"use strict";function b(b){var c,d=b.attr("data-target")||(c=b.attr("href"))&&c.replace(/.*(?=#[^\s]+$)/,"");return a(d)}function c(b){return this.each(function(){var c=a(this),e=c.data("bs.collapse"),f=a.extend({},d.DEFAULTS,c.data(),"object"==typeof b&&b);!e&&f.toggle&&/show|hide/.test(b)&&(f.toggle=!1),e||c.data("bs.collapse",e=new d(this,f)),"string"==typeof b&&e[b]()})}var d=function(b,c){this.$element=a(b),this.options=a.extend({},d.DEFAULTS,c),this.$trigger=a('[data-toggle="collapse"][href="#'+b.id+'"],[data-toggle="collapse"][data-target="#'+b.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};d.VERSION="3.3.6",d.TRANSITION_DURATION=350,d.DEFAULTS={toggle:!0},d.prototype.dimension=function(){var a=this.$element.hasClass("width");return a?"width":"height"},d.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var b,e=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(e&&e.length&&(b=e.data("bs.collapse"),b&&b.transitioning))){var f=a.Event("show.bs.collapse");if(this.$element.trigger(f),!f.isDefaultPrevented()){e&&e.length&&(c.call(e,"hide"),b||e.data("bs.collapse",null));var g=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[g](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var h=function(){this.$element.removeClass("collapsing").addClass("collapse in")[g](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!a.support.transition)return h.call(this);var i=a.camelCase(["scroll",g].join("-"));this.$element.one("bsTransitionEnd",a.proxy(h,this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i])}}}},d.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var b=a.Event("hide.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var e=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return a.support.transition?void this.$element[c](0).one("bsTransitionEnd",a.proxy(e,this)).emulateTransitionEnd(d.TRANSITION_DURATION):e.call(this)}}},d.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},d.prototype.getParent=function(){return a(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(a.proxy(function(c,d){var e=a(d);this.addAriaAndCollapsedClass(b(e),e)},this)).end()},d.prototype.addAriaAndCollapsedClass=function(a,b){var c=a.hasClass("in");a.attr("aria-expanded",c),b.toggleClass("collapsed",!c).attr("aria-expanded",c)};var e=a.fn.collapse;a.fn.collapse=c,a.fn.collapse.Constructor=d,a.fn.collapse.noConflict=function(){return a.fn.collapse=e,this},a(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(d){var e=a(this);e.attr("data-target")||d.preventDefault();var f=b(e),g=f.data("bs.collapse"),h=g?"toggle":e.data();c.call(f,h)})}(jQuery),+function(a){"use strict";function b(b){var c=b.attr("data-target");c||(c=b.attr("href"),c=c&&/#[A-Za-z]/.test(c)&&c.replace(/.*(?=#[^\s]*$)/,""));var d=c&&a(c);return d&&d.length?d:b.parent()}function c(c){c&&3===c.which||(a(e).remove(),a(f).each(function(){var d=a(this),e=b(d),f={relatedTarget:this};e.hasClass("open")&&(c&&"click"==c.type&&/input|textarea/i.test(c.target.tagName)&&a.contains(e[0],c.target)||(e.trigger(c=a.Event("hide.bs.dropdown",f)),c.isDefaultPrevented()||(d.attr("aria-expanded","false"),e.removeClass("open").trigger(a.Event("hidden.bs.dropdown",f)))))}))}function d(b){return this.each(function(){var c=a(this),d=c.data("bs.dropdown");d||c.data("bs.dropdown",d=new g(this)),"string"==typeof b&&d[b].call(c)})}var e=".dropdown-backdrop",f='[data-toggle="dropdown"]',g=function(b){a(b).on("click.bs.dropdown",this.toggle)};g.VERSION="3.3.6",g.prototype.toggle=function(d){var e=a(this);if(!e.is(".disabled, :disabled")){var f=b(e),g=f.hasClass("open");if(c(),!g){"ontouchstart"in document.documentElement&&!f.closest(".navbar-nav").length&&a(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(a(this)).on("click",c);var h={relatedTarget:this};if(f.trigger(d=a.Event("show.bs.dropdown",h)),d.isDefaultPrevented())return;e.trigger("focus").attr("aria-expanded","true"),f.toggleClass("open").trigger(a.Event("shown.bs.dropdown",h))}return!1}},g.prototype.keydown=function(c){if(/(38|40|27|32)/.test(c.which)&&!/input|textarea/i.test(c.target.tagName)){var d=a(this);if(c.preventDefault(),c.stopPropagation(),!d.is(".disabled, :disabled")){var e=b(d),g=e.hasClass("open");if(!g&&27!=c.which||g&&27==c.which)return 27==c.which&&e.find(f).trigger("focus"),d.trigger("click");var h=" li:not(.disabled):visible a",i=e.find(".dropdown-menu"+h);if(i.length){var j=i.index(c.target);38==c.which&&j>0&&j--,40==c.which&&j<i.length-1&&j++,~j||(j=0),i.eq(j).trigger("focus")}}}};var h=a.fn.dropdown;a.fn.dropdown=d,a.fn.dropdown.Constructor=g,a.fn.dropdown.noConflict=function(){return a.fn.dropdown=h,this},a(document).on("click.bs.dropdown.data-api",c).on("click.bs.dropdown.data-api",".dropdown form",function(a){a.stopPropagation()}).on("click.bs.dropdown.data-api",f,g.prototype.toggle).on("keydown.bs.dropdown.data-api",f,g.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",g.prototype.keydown)}(jQuery),+function(a){"use strict";function b(b,d){return this.each(function(){var e=a(this),f=e.data("bs.modal"),g=a.extend({},c.DEFAULTS,e.data(),"object"==typeof b&&b);f||e.data("bs.modal",f=new c(this,g)),"string"==typeof b?f[b](d):g.show&&f.show(d)})}var c=function(b,c){this.options=c,this.$body=a(document.body),this.$element=a(b),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,a.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};c.VERSION="3.3.6",c.TRANSITION_DURATION=300,c.BACKDROP_TRANSITION_DURATION=150,c.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},c.prototype.toggle=function(a){return this.isShown?this.hide():this.show(a)},c.prototype.show=function(b){var d=this,e=a.Event("show.bs.modal",{relatedTarget:b});this.$element.trigger(e),this.isShown||e.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',a.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){d.$element.one("mouseup.dismiss.bs.modal",function(b){a(b.target).is(d.$element)&&(d.ignoreBackdropClick=!0)})}),this.backdrop(function(){var e=a.support.transition&&d.$element.hasClass("fade");d.$element.parent().length||d.$element.appendTo(d.$body),d.$element.show().scrollTop(0),d.adjustDialog(),e&&d.$element[0].offsetWidth,d.$element.addClass("in"),d.enforceFocus();var f=a.Event("shown.bs.modal",{relatedTarget:b});e?d.$dialog.one("bsTransitionEnd",function(){d.$element.trigger("focus").trigger(f)}).emulateTransitionEnd(c.TRANSITION_DURATION):d.$element.trigger("focus").trigger(f)}))},c.prototype.hide=function(b){b&&b.preventDefault(),b=a.Event("hide.bs.modal"),this.$element.trigger(b),this.isShown&&!b.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),a(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),a.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",a.proxy(this.hideModal,this)).emulateTransitionEnd(c.TRANSITION_DURATION):this.hideModal())},c.prototype.enforceFocus=function(){a(document).off("focusin.bs.modal").on("focusin.bs.modal",a.proxy(function(a){this.$element[0]===a.target||this.$element.has(a.target).length||this.$element.trigger("focus")},this))},c.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",a.proxy(function(a){27==a.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},c.prototype.resize=function(){this.isShown?a(window).on("resize.bs.modal",a.proxy(this.handleUpdate,this)):a(window).off("resize.bs.modal")},c.prototype.hideModal=function(){var a=this;this.$element.hide(),this.backdrop(function(){a.$body.removeClass("modal-open"),a.resetAdjustments(),a.resetScrollbar(),a.$element.trigger("hidden.bs.modal")})},c.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},c.prototype.backdrop=function(b){var d=this,e=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var f=a.support.transition&&e;if(this.$backdrop=a(document.createElement("div")).addClass("modal-backdrop "+e).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",a.proxy(function(a){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(a.target===a.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),f&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!b)return;f?this.$backdrop.one("bsTransitionEnd",b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):b()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var g=function(){d.removeBackdrop(),b&&b()};a.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION):g()}else b&&b()},c.prototype.handleUpdate=function(){this.adjustDialog()},c.prototype.adjustDialog=function(){var a=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&a?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!a?this.scrollbarWidth:""})},c.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},c.prototype.checkScrollbar=function(){var a=window.innerWidth;if(!a){var b=document.documentElement.getBoundingClientRect();a=b.right-Math.abs(b.left)}this.bodyIsOverflowing=document.body.clientWidth<a,this.scrollbarWidth=this.measureScrollbar()},c.prototype.setScrollbar=function(){var a=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",a+this.scrollbarWidth)},c.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},c.prototype.measureScrollbar=function(){var a=document.createElement("div");a.className="modal-scrollbar-measure",this.$body.append(a);var b=a.offsetWidth-a.clientWidth;return this.$body[0].removeChild(a),b};var d=a.fn.modal;a.fn.modal=b,a.fn.modal.Constructor=c,a.fn.modal.noConflict=function(){return a.fn.modal=d,this},a(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(c){var d=a(this),e=d.attr("href"),f=a(d.attr("data-target")||e&&e.replace(/.*(?=#[^\s]+$)/,"")),g=f.data("bs.modal")?"toggle":a.extend({remote:!/#/.test(e)&&e},f.data(),d.data());d.is("a")&&c.preventDefault(),f.one("show.bs.modal",function(a){a.isDefaultPrevented()||f.one("hidden.bs.modal",function(){d.is(":visible")&&d.trigger("focus")})}),b.call(f,g,this)})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tooltip"),f="object"==typeof b&&b;(e||!/destroy|hide/.test(b))&&(e||d.data("bs.tooltip",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",a,b)};c.VERSION="3.3.6",c.TRANSITION_DURATION=150,c.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},c.prototype.init=function(b,c,d){if(this.enabled=!0,this.type=b,this.$element=a(c),this.options=this.getOptions(d),this.$viewport=this.options.viewport&&a(a.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var e=this.options.trigger.split(" "),f=e.length;f--;){var g=e[f];if("click"==g)this.$element.on("click."+this.type,this.options.selector,a.proxy(this.toggle,this));else if("manual"!=g){var h="hover"==g?"mouseenter":"focusin",i="hover"==g?"mouseleave":"focusout";this.$element.on(h+"."+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(i+"."+this.type,this.options.selector,a.proxy(this.leave,this))}}this.options.selector?this._options=a.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.getOptions=function(b){return b=a.extend({},this.getDefaults(),this.$element.data(),b),b.delay&&"number"==typeof b.delay&&(b.delay={show:b.delay,hide:b.delay}),b},c.prototype.getDelegateOptions=function(){var b={},c=this.getDefaults();return this._options&&a.each(this._options,function(a,d){c[a]!=d&&(b[a]=d)}),b},c.prototype.enter=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),b instanceof a.Event&&(c.inState["focusin"==b.type?"focus":"hover"]=!0),c.tip().hasClass("in")||"in"==c.hoverState?void(c.hoverState="in"):(clearTimeout(c.timeout),c.hoverState="in",c.options.delay&&c.options.delay.show?void(c.timeout=setTimeout(function(){"in"==c.hoverState&&c.show()},c.options.delay.show)):c.show())},c.prototype.isInStateTrue=function(){for(var a in this.inState)if(this.inState[a])return!0;return!1},c.prototype.leave=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget).data("bs."+this.type);return c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c)),b instanceof a.Event&&(c.inState["focusout"==b.type?"focus":"hover"]=!1),c.isInStateTrue()?void 0:(clearTimeout(c.timeout),c.hoverState="out",c.options.delay&&c.options.delay.hide?void(c.timeout=setTimeout(function(){"out"==c.hoverState&&c.hide()},c.options.delay.hide)):c.hide())},c.prototype.show=function(){var b=a.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(b);var d=a.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(b.isDefaultPrevented()||!d)return;var e=this,f=this.tip(),g=this.getUID(this.type);this.setContent(),f.attr("id",g),this.$element.attr("aria-describedby",g),this.options.animation&&f.addClass("fade");var h="function"==typeof this.options.placement?this.options.placement.call(this,f[0],this.$element[0]):this.options.placement,i=/\s?auto?\s?/i,j=i.test(h);j&&(h=h.replace(i,"")||"top"),f.detach().css({top:0,left:0,display:"block"}).addClass(h).data("bs."+this.type,this),this.options.container?f.appendTo(this.options.container):f.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var k=this.getPosition(),l=f[0].offsetWidth,m=f[0].offsetHeight;if(j){var n=h,o=this.getPosition(this.$viewport);h="bottom"==h&&k.bottom+m>o.bottom?"top":"top"==h&&k.top-m<o.top?"bottom":"right"==h&&k.right+l>o.width?"left":"left"==h&&k.left-l<o.left?"right":h,f.removeClass(n).addClass(h)}var p=this.getCalculatedOffset(h,k,l,m);this.applyPlacement(p,h);var q=function(){var a=e.hoverState;e.$element.trigger("shown.bs."+e.type),e.hoverState=null,"out"==a&&e.leave(e)};a.support.transition&&this.$tip.hasClass("fade")?f.one("bsTransitionEnd",q).emulateTransitionEnd(c.TRANSITION_DURATION):q()}},c.prototype.applyPlacement=function(b,c){var d=this.tip(),e=d[0].offsetWidth,f=d[0].offsetHeight,g=parseInt(d.css("margin-top"),10),h=parseInt(d.css("margin-left"),10);isNaN(g)&&(g=0),isNaN(h)&&(h=0),b.top+=g,b.left+=h,a.offset.setOffset(d[0],a.extend({using:function(a){d.css({top:Math.round(a.top),left:Math.round(a.left)})}},b),0),d.addClass("in");var i=d[0].offsetWidth,j=d[0].offsetHeight;"top"==c&&j!=f&&(b.top=b.top+f-j);var k=this.getViewportAdjustedDelta(c,b,i,j);k.left?b.left+=k.left:b.top+=k.top;var l=/top|bottom/.test(c),m=l?2*k.left-e+i:2*k.top-f+j,n=l?"offsetWidth":"offsetHeight";d.offset(b),this.replaceArrow(m,d[0][n],l)},c.prototype.replaceArrow=function(a,b,c){this.arrow().css(c?"left":"top",50*(1-a/b)+"%").css(c?"top":"left","")},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b),a.removeClass("fade in top bottom left right")},c.prototype.hide=function(b){function d(){"in"!=e.hoverState&&f.detach(),e.$element.removeAttr("aria-describedby").trigger("hidden.bs."+e.type),b&&b()}var e=this,f=a(this.$tip),g=a.Event("hide.bs."+this.type);return this.$element.trigger(g),g.isDefaultPrevented()?void 0:(f.removeClass("in"),a.support.transition&&f.hasClass("fade")?f.one("bsTransitionEnd",d).emulateTransitionEnd(c.TRANSITION_DURATION):d(),this.hoverState=null,this)},c.prototype.fixTitle=function(){var a=this.$element;(a.attr("title")||"string"!=typeof a.attr("data-original-title"))&&a.attr("data-original-title",a.attr("title")||"").attr("title","")},c.prototype.hasContent=function(){return this.getTitle()},c.prototype.getPosition=function(b){b=b||this.$element;var c=b[0],d="BODY"==c.tagName,e=c.getBoundingClientRect();null==e.width&&(e=a.extend({},e,{width:e.right-e.left,height:e.bottom-e.top}));var f=d?{top:0,left:0}:b.offset(),g={scroll:d?document.documentElement.scrollTop||document.body.scrollTop:b.scrollTop()},h=d?{width:a(window).width(),height:a(window).height()}:null;return a.extend({},e,g,h,f)},c.prototype.getCalculatedOffset=function(a,b,c,d){return"bottom"==a?{top:b.top+b.height,left:b.left+b.width/2-c/2}:"top"==a?{top:b.top-d,left:b.left+b.width/2-c/2}:"left"==a?{top:b.top+b.height/2-d/2,left:b.left-c}:{top:b.top+b.height/2-d/2,left:b.left+b.width}},c.prototype.getViewportAdjustedDelta=function(a,b,c,d){var e={top:0,left:0};if(!this.$viewport)return e;var f=this.options.viewport&&this.options.viewport.padding||0,g=this.getPosition(this.$viewport);if(/right|left/.test(a)){var h=b.top-f-g.scroll,i=b.top+f-g.scroll+d;h<g.top?e.top=g.top-h:i>g.top+g.height&&(e.top=g.top+g.height-i)}else{var j=b.left-f,k=b.left+f+c;j<g.left?e.left=g.left-j:k>g.right&&(e.left=g.left+g.width-k)}return e},c.prototype.getTitle=function(){var a,b=this.$element,c=this.options;return a=b.attr("data-original-title")||("function"==typeof c.title?c.title.call(b[0]):c.title)},c.prototype.getUID=function(a){do a+=~~(1e6*Math.random());while(document.getElementById(a));return a},c.prototype.tip=function(){if(!this.$tip&&(this.$tip=a(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},c.prototype.enable=function(){this.enabled=!0},c.prototype.disable=function(){this.enabled=!1},c.prototype.toggleEnabled=function(){this.enabled=!this.enabled},c.prototype.toggle=function(b){var c=this;b&&(c=a(b.currentTarget).data("bs."+this.type),c||(c=new this.constructor(b.currentTarget,this.getDelegateOptions()),a(b.currentTarget).data("bs."+this.type,c))),b?(c.inState.click=!c.inState.click,c.isInStateTrue()?c.enter(c):c.leave(c)):c.tip().hasClass("in")?c.leave(c):c.enter(c)},c.prototype.destroy=function(){var a=this;clearTimeout(this.timeout),this.hide(function(){a.$element.off("."+a.type).removeData("bs."+a.type),a.$tip&&a.$tip.detach(),a.$tip=null,a.$arrow=null,a.$viewport=null})};var d=a.fn.tooltip;a.fn.tooltip=b,a.fn.tooltip.Constructor=c,a.fn.tooltip.noConflict=function(){return a.fn.tooltip=d,this}}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.popover"),f="object"==typeof b&&b;(e||!/destroy|hide/.test(b))&&(e||d.data("bs.popover",e=new c(this,f)),"string"==typeof b&&e[b]())})}var c=function(a,b){this.init("popover",a,b)};if(!a.fn.tooltip)throw new Error("Popover requires tooltip.js");c.VERSION="3.3.6",c.DEFAULTS=a.extend({},a.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),c.prototype=a.extend({},a.fn.tooltip.Constructor.prototype),c.prototype.constructor=c,c.prototype.getDefaults=function(){return c.DEFAULTS},c.prototype.setContent=function(){var a=this.tip(),b=this.getTitle(),c=this.getContent();a.find(".popover-title")[this.options.html?"html":"text"](b),a.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof c?"html":"append":"text"](c),a.removeClass("fade top bottom left right in"),a.find(".popover-title").html()||a.find(".popover-title").hide()},c.prototype.hasContent=function(){return this.getTitle()||this.getContent()},c.prototype.getContent=function(){var a=this.$element,b=this.options;return a.attr("data-content")||("function"==typeof b.content?b.content.call(a[0]):b.content)},c.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var d=a.fn.popover;a.fn.popover=b,a.fn.popover.Constructor=c,a.fn.popover.noConflict=function(){return a.fn.popover=d,this}}(jQuery),+function(a){"use strict";function b(c,d){this.$body=a(document.body),this.$scrollElement=a(a(c).is(document.body)?window:c),this.options=a.extend({},b.DEFAULTS,d),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",a.proxy(this.process,this)),this.refresh(),this.process()}function c(c){return this.each(function(){var d=a(this),e=d.data("bs.scrollspy"),f="object"==typeof c&&c;e||d.data("bs.scrollspy",e=new b(this,f)),"string"==typeof c&&e[c]()})}b.VERSION="3.3.6",b.DEFAULTS={offset:10},b.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},b.prototype.refresh=function(){var b=this,c="offset",d=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),a.isWindow(this.$scrollElement[0])||(c="position",d=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var b=a(this),e=b.data("target")||b.attr("href"),f=/^#./.test(e)&&a(e);return f&&f.length&&f.is(":visible")&&[[f[c]().top+d,e]]||null}).sort(function(a,b){return a[0]-b[0]}).each(function(){b.offsets.push(this[0]),b.targets.push(this[1])})},b.prototype.process=function(){var a,b=this.$scrollElement.scrollTop()+this.options.offset,c=this.getScrollHeight(),d=this.options.offset+c-this.$scrollElement.height(),e=this.offsets,f=this.targets,g=this.activeTarget;if(this.scrollHeight!=c&&this.refresh(),b>=d)return g!=(a=f[f.length-1])&&this.activate(a);if(g&&b<e[0])return this.activeTarget=null,this.clear();for(a=e.length;a--;)g!=f[a]&&b>=e[a]&&(void 0===e[a+1]||b<e[a+1])&&this.activate(f[a])},b.prototype.activate=function(b){this.activeTarget=b,this.clear();var c=this.selector+'[data-target="'+b+'"],'+this.selector+'[href="'+b+'"]',d=a(c).parents("li").addClass("active");
d.parent(".dropdown-menu").length&&(d=d.closest("li.dropdown").addClass("active")),d.trigger("activate.bs.scrollspy")},b.prototype.clear=function(){a(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var d=a.fn.scrollspy;a.fn.scrollspy=c,a.fn.scrollspy.Constructor=b,a.fn.scrollspy.noConflict=function(){return a.fn.scrollspy=d,this},a(window).on("load.bs.scrollspy.data-api",function(){a('[data-spy="scroll"]').each(function(){var b=a(this);c.call(b,b.data())})})}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.tab");e||d.data("bs.tab",e=new c(this)),"string"==typeof b&&e[b]()})}var c=function(b){this.element=a(b)};c.VERSION="3.3.6",c.TRANSITION_DURATION=150,c.prototype.show=function(){var b=this.element,c=b.closest("ul:not(.dropdown-menu)"),d=b.data("target");if(d||(d=b.attr("href"),d=d&&d.replace(/.*(?=#[^\s]*$)/,"")),!b.parent("li").hasClass("active")){var e=c.find(".active:last a"),f=a.Event("hide.bs.tab",{relatedTarget:b[0]}),g=a.Event("show.bs.tab",{relatedTarget:e[0]});if(e.trigger(f),b.trigger(g),!g.isDefaultPrevented()&&!f.isDefaultPrevented()){var h=a(d);this.activate(b.closest("li"),c),this.activate(h,h.parent(),function(){e.trigger({type:"hidden.bs.tab",relatedTarget:b[0]}),b.trigger({type:"shown.bs.tab",relatedTarget:e[0]})})}}},c.prototype.activate=function(b,d,e){function f(){g.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),b.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),h?(b[0].offsetWidth,b.addClass("in")):b.removeClass("fade"),b.parent(".dropdown-menu").length&&b.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),e&&e()}var g=d.find("> .active"),h=e&&a.support.transition&&(g.length&&g.hasClass("fade")||!!d.find("> .fade").length);g.length&&h?g.one("bsTransitionEnd",f).emulateTransitionEnd(c.TRANSITION_DURATION):f(),g.removeClass("in")};var d=a.fn.tab;a.fn.tab=b,a.fn.tab.Constructor=c,a.fn.tab.noConflict=function(){return a.fn.tab=d,this};var e=function(c){c.preventDefault(),b.call(a(this),"show")};a(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',e).on("click.bs.tab.data-api",'[data-toggle="pill"]',e)}(jQuery),+function(a){"use strict";function b(b){return this.each(function(){var d=a(this),e=d.data("bs.affix"),f="object"==typeof b&&b;e||d.data("bs.affix",e=new c(this,f)),"string"==typeof b&&e[b]()})}var c=function(b,d){this.options=a.extend({},c.DEFAULTS,d),this.$target=a(this.options.target).on("scroll.bs.affix.data-api",a.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",a.proxy(this.checkPositionWithEventLoop,this)),this.$element=a(b),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};c.VERSION="3.3.6",c.RESET="affix affix-top affix-bottom",c.DEFAULTS={offset:0,target:window},c.prototype.getState=function(a,b,c,d){var e=this.$target.scrollTop(),f=this.$element.offset(),g=this.$target.height();if(null!=c&&"top"==this.affixed)return c>e?"top":!1;if("bottom"==this.affixed)return null!=c?e+this.unpin<=f.top?!1:"bottom":a-d>=e+g?!1:"bottom";var h=null==this.affixed,i=h?e:f.top,j=h?g:b;return null!=c&&c>=e?"top":null!=d&&i+j>=a-d?"bottom":!1},c.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(c.RESET).addClass("affix");var a=this.$target.scrollTop(),b=this.$element.offset();return this.pinnedOffset=b.top-a},c.prototype.checkPositionWithEventLoop=function(){setTimeout(a.proxy(this.checkPosition,this),1)},c.prototype.checkPosition=function(){if(this.$element.is(":visible")){var b=this.$element.height(),d=this.options.offset,e=d.top,f=d.bottom,g=Math.max(a(document).height(),a(document.body).height());"object"!=typeof d&&(f=e=d),"function"==typeof e&&(e=d.top(this.$element)),"function"==typeof f&&(f=d.bottom(this.$element));var h=this.getState(g,b,e,f);if(this.affixed!=h){null!=this.unpin&&this.$element.css("top","");var i="affix"+(h?"-"+h:""),j=a.Event(i+".bs.affix");if(this.$element.trigger(j),j.isDefaultPrevented())return;this.affixed=h,this.unpin="bottom"==h?this.getPinnedOffset():null,this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace("affix","affixed")+".bs.affix")}"bottom"==h&&this.$element.offset({top:g-b-f})}};var d=a.fn.affix;a.fn.affix=b,a.fn.affix.Constructor=c,a.fn.affix.noConflict=function(){return a.fn.affix=d,this},a(window).on("load",function(){a('[data-spy="affix"]').each(function(){var c=a(this),d=c.data();d.offset=d.offset||{},null!=d.offsetBottom&&(d.offset.bottom=d.offsetBottom),null!=d.offsetTop&&(d.offset.top=d.offsetTop),b.call(c,d)})})}(jQuery);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"jquery":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/jquery/package.json                                                                            //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
exports.name = "jquery";                                                                                       // 1
exports.version = "2.2.4";                                                                                     // 2
exports.main = "dist/jquery.js";                                                                               // 3
                                                                                                               // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"dist":{"jquery.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/jquery/dist/jquery.js                                                                          //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
/*!                                                                                                            // 1
 * jQuery JavaScript Library v2.2.4                                                                            // 2
 * http://jquery.com/                                                                                          // 3
 *                                                                                                             // 4
 * Includes Sizzle.js                                                                                          // 5
 * http://sizzlejs.com/                                                                                        // 6
 *                                                                                                             // 7
 * Copyright jQuery Foundation and other contributors                                                          // 8
 * Released under the MIT license                                                                              // 9
 * http://jquery.org/license                                                                                   // 10
 *                                                                                                             // 11
 * Date: 2016-05-20T17:23Z                                                                                     // 12
 */                                                                                                            // 13
                                                                                                               // 14
(function( global, factory ) {                                                                                 // 15
                                                                                                               // 16
	if ( typeof module === "object" && typeof module.exports === "object" ) {                                     // 17
		// For CommonJS and CommonJS-like environments where a proper `window`                                       // 18
		// is present, execute the factory and get jQuery.                                                           // 19
		// For environments that do not have a `window` with a `document`                                            // 20
		// (such as Node.js), expose a factory as module.exports.                                                    // 21
		// This accentuates the need for the creation of a real `window`.                                            // 22
		// e.g. var jQuery = require("jquery")(window);                                                              // 23
		// See ticket #14549 for more info.                                                                          // 24
		module.exports = global.document ?                                                                           // 25
			factory( global, true ) :                                                                                   // 26
			function( w ) {                                                                                             // 27
				if ( !w.document ) {                                                                                       // 28
					throw new Error( "jQuery requires a window with a document" );                                            // 29
				}                                                                                                          // 30
				return factory( w );                                                                                       // 31
			};                                                                                                          // 32
	} else {                                                                                                      // 33
		factory( global );                                                                                           // 34
	}                                                                                                             // 35
                                                                                                               // 36
// Pass this if window is not defined yet                                                                      // 37
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {                                // 38
                                                                                                               // 39
// Support: Firefox 18+                                                                                        // 40
// Can't be in strict mode, several libs including ASP.NET trace                                               // 41
// the stack via arguments.caller.callee and Firefox dies if                                                   // 42
// you try to trace through "use strict" call chains. (#13335)                                                 // 43
//"use strict";                                                                                                // 44
var arr = [];                                                                                                  // 45
                                                                                                               // 46
var document = window.document;                                                                                // 47
                                                                                                               // 48
var slice = arr.slice;                                                                                         // 49
                                                                                                               // 50
var concat = arr.concat;                                                                                       // 51
                                                                                                               // 52
var push = arr.push;                                                                                           // 53
                                                                                                               // 54
var indexOf = arr.indexOf;                                                                                     // 55
                                                                                                               // 56
var class2type = {};                                                                                           // 57
                                                                                                               // 58
var toString = class2type.toString;                                                                            // 59
                                                                                                               // 60
var hasOwn = class2type.hasOwnProperty;                                                                        // 61
                                                                                                               // 62
var support = {};                                                                                              // 63
                                                                                                               // 64
                                                                                                               // 65
                                                                                                               // 66
var                                                                                                            // 67
	version = "2.2.4",                                                                                            // 68
                                                                                                               // 69
	// Define a local copy of jQuery                                                                              // 70
	jQuery = function( selector, context ) {                                                                      // 71
                                                                                                               // 72
		// The jQuery object is actually just the init constructor 'enhanced'                                        // 73
		// Need init if jQuery is called (just allow error to be thrown if not included)                             // 74
		return new jQuery.fn.init( selector, context );                                                              // 75
	},                                                                                                            // 76
                                                                                                               // 77
	// Support: Android<4.1                                                                                       // 78
	// Make sure we trim BOM and NBSP                                                                             // 79
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,                                                                 // 80
                                                                                                               // 81
	// Matches dashed string for camelizing                                                                       // 82
	rmsPrefix = /^-ms-/,                                                                                          // 83
	rdashAlpha = /-([\da-z])/gi,                                                                                  // 84
                                                                                                               // 85
	// Used by jQuery.camelCase as callback to replace()                                                          // 86
	fcamelCase = function( all, letter ) {                                                                        // 87
		return letter.toUpperCase();                                                                                 // 88
	};                                                                                                            // 89
                                                                                                               // 90
jQuery.fn = jQuery.prototype = {                                                                               // 91
                                                                                                               // 92
	// The current version of jQuery being used                                                                   // 93
	jquery: version,                                                                                              // 94
                                                                                                               // 95
	constructor: jQuery,                                                                                          // 96
                                                                                                               // 97
	// Start with an empty selector                                                                               // 98
	selector: "",                                                                                                 // 99
                                                                                                               // 100
	// The default length of a jQuery object is 0                                                                 // 101
	length: 0,                                                                                                    // 102
                                                                                                               // 103
	toArray: function() {                                                                                         // 104
		return slice.call( this );                                                                                   // 105
	},                                                                                                            // 106
                                                                                                               // 107
	// Get the Nth element in the matched element set OR                                                          // 108
	// Get the whole matched element set as a clean array                                                         // 109
	get: function( num ) {                                                                                        // 110
		return num != null ?                                                                                         // 111
                                                                                                               // 112
			// Return just the one element from the set                                                                 // 113
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :                                                     // 114
                                                                                                               // 115
			// Return all the elements in a clean array                                                                 // 116
			slice.call( this );                                                                                         // 117
	},                                                                                                            // 118
                                                                                                               // 119
	// Take an array of elements and push it onto the stack                                                       // 120
	// (returning the new matched element set)                                                                    // 121
	pushStack: function( elems ) {                                                                                // 122
                                                                                                               // 123
		// Build a new jQuery matched element set                                                                    // 124
		var ret = jQuery.merge( this.constructor(), elems );                                                         // 125
                                                                                                               // 126
		// Add the old object onto the stack (as a reference)                                                        // 127
		ret.prevObject = this;                                                                                       // 128
		ret.context = this.context;                                                                                  // 129
                                                                                                               // 130
		// Return the newly-formed element set                                                                       // 131
		return ret;                                                                                                  // 132
	},                                                                                                            // 133
                                                                                                               // 134
	// Execute a callback for every element in the matched set.                                                   // 135
	each: function( callback ) {                                                                                  // 136
		return jQuery.each( this, callback );                                                                        // 137
	},                                                                                                            // 138
                                                                                                               // 139
	map: function( callback ) {                                                                                   // 140
		return this.pushStack( jQuery.map( this, function( elem, i ) {                                               // 141
			return callback.call( elem, i, elem );                                                                      // 142
		} ) );                                                                                                       // 143
	},                                                                                                            // 144
                                                                                                               // 145
	slice: function() {                                                                                           // 146
		return this.pushStack( slice.apply( this, arguments ) );                                                     // 147
	},                                                                                                            // 148
                                                                                                               // 149
	first: function() {                                                                                           // 150
		return this.eq( 0 );                                                                                         // 151
	},                                                                                                            // 152
                                                                                                               // 153
	last: function() {                                                                                            // 154
		return this.eq( -1 );                                                                                        // 155
	},                                                                                                            // 156
                                                                                                               // 157
	eq: function( i ) {                                                                                           // 158
		var len = this.length,                                                                                       // 159
			j = +i + ( i < 0 ? len : 0 );                                                                               // 160
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );                                             // 161
	},                                                                                                            // 162
                                                                                                               // 163
	end: function() {                                                                                             // 164
		return this.prevObject || this.constructor();                                                                // 165
	},                                                                                                            // 166
                                                                                                               // 167
	// For internal use only.                                                                                     // 168
	// Behaves like an Array's method, not like a jQuery method.                                                  // 169
	push: push,                                                                                                   // 170
	sort: arr.sort,                                                                                               // 171
	splice: arr.splice                                                                                            // 172
};                                                                                                             // 173
                                                                                                               // 174
jQuery.extend = jQuery.fn.extend = function() {                                                                // 175
	var options, name, src, copy, copyIsArray, clone,                                                             // 176
		target = arguments[ 0 ] || {},                                                                               // 177
		i = 1,                                                                                                       // 178
		length = arguments.length,                                                                                   // 179
		deep = false;                                                                                                // 180
                                                                                                               // 181
	// Handle a deep copy situation                                                                               // 182
	if ( typeof target === "boolean" ) {                                                                          // 183
		deep = target;                                                                                               // 184
                                                                                                               // 185
		// Skip the boolean and the target                                                                           // 186
		target = arguments[ i ] || {};                                                                               // 187
		i++;                                                                                                         // 188
	}                                                                                                             // 189
                                                                                                               // 190
	// Handle case when target is a string or something (possible in deep copy)                                   // 191
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {                                           // 192
		target = {};                                                                                                 // 193
	}                                                                                                             // 194
                                                                                                               // 195
	// Extend jQuery itself if only one argument is passed                                                        // 196
	if ( i === length ) {                                                                                         // 197
		target = this;                                                                                               // 198
		i--;                                                                                                         // 199
	}                                                                                                             // 200
                                                                                                               // 201
	for ( ; i < length; i++ ) {                                                                                   // 202
                                                                                                               // 203
		// Only deal with non-null/undefined values                                                                  // 204
		if ( ( options = arguments[ i ] ) != null ) {                                                                // 205
                                                                                                               // 206
			// Extend the base object                                                                                   // 207
			for ( name in options ) {                                                                                   // 208
				src = target[ name ];                                                                                      // 209
				copy = options[ name ];                                                                                    // 210
                                                                                                               // 211
				// Prevent never-ending loop                                                                               // 212
				if ( target === copy ) {                                                                                   // 213
					continue;                                                                                                 // 214
				}                                                                                                          // 215
                                                                                                               // 216
				// Recurse if we're merging plain objects or arrays                                                        // 217
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||                                                     // 218
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {                                                            // 219
                                                                                                               // 220
					if ( copyIsArray ) {                                                                                      // 221
						copyIsArray = false;                                                                                     // 222
						clone = src && jQuery.isArray( src ) ? src : [];                                                         // 223
                                                                                                               // 224
					} else {                                                                                                  // 225
						clone = src && jQuery.isPlainObject( src ) ? src : {};                                                   // 226
					}                                                                                                         // 227
                                                                                                               // 228
					// Never move original objects, clone them                                                                // 229
					target[ name ] = jQuery.extend( deep, clone, copy );                                                      // 230
                                                                                                               // 231
				// Don't bring in undefined values                                                                         // 232
				} else if ( copy !== undefined ) {                                                                         // 233
					target[ name ] = copy;                                                                                    // 234
				}                                                                                                          // 235
			}                                                                                                           // 236
		}                                                                                                            // 237
	}                                                                                                             // 238
                                                                                                               // 239
	// Return the modified object                                                                                 // 240
	return target;                                                                                                // 241
};                                                                                                             // 242
                                                                                                               // 243
jQuery.extend( {                                                                                               // 244
                                                                                                               // 245
	// Unique for each copy of jQuery on the page                                                                 // 246
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),                                         // 247
                                                                                                               // 248
	// Assume jQuery is ready without the ready module                                                            // 249
	isReady: true,                                                                                                // 250
                                                                                                               // 251
	error: function( msg ) {                                                                                      // 252
		throw new Error( msg );                                                                                      // 253
	},                                                                                                            // 254
                                                                                                               // 255
	noop: function() {},                                                                                          // 256
                                                                                                               // 257
	isFunction: function( obj ) {                                                                                 // 258
		return jQuery.type( obj ) === "function";                                                                    // 259
	},                                                                                                            // 260
                                                                                                               // 261
	isArray: Array.isArray,                                                                                       // 262
                                                                                                               // 263
	isWindow: function( obj ) {                                                                                   // 264
		return obj != null && obj === obj.window;                                                                    // 265
	},                                                                                                            // 266
                                                                                                               // 267
	isNumeric: function( obj ) {                                                                                  // 268
                                                                                                               // 269
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")                                         // 270
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")                          // 271
		// subtraction forces infinities to NaN                                                                      // 272
		// adding 1 corrects loss of precision from parseFloat (#15100)                                              // 273
		var realStringObj = obj && obj.toString();                                                                   // 274
		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;                   // 275
	},                                                                                                            // 276
                                                                                                               // 277
	isPlainObject: function( obj ) {                                                                              // 278
		var key;                                                                                                     // 279
                                                                                                               // 280
		// Not plain objects:                                                                                        // 281
		// - Any object or value whose internal [[Class]] property is not "[object Object]"                          // 282
		// - DOM nodes                                                                                               // 283
		// - window                                                                                                  // 284
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {                           // 285
			return false;                                                                                               // 286
		}                                                                                                            // 287
                                                                                                               // 288
		// Not own constructor property must be Object                                                               // 289
		if ( obj.constructor &&                                                                                      // 290
				!hasOwn.call( obj, "constructor" ) &&                                                                      // 291
				!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {                                       // 292
			return false;                                                                                               // 293
		}                                                                                                            // 294
                                                                                                               // 295
		// Own properties are enumerated firstly, so to speed up,                                                    // 296
		// if last one is own, then all properties are own                                                           // 297
		for ( key in obj ) {}                                                                                        // 298
                                                                                                               // 299
		return key === undefined || hasOwn.call( obj, key );                                                         // 300
	},                                                                                                            // 301
                                                                                                               // 302
	isEmptyObject: function( obj ) {                                                                              // 303
		var name;                                                                                                    // 304
		for ( name in obj ) {                                                                                        // 305
			return false;                                                                                               // 306
		}                                                                                                            // 307
		return true;                                                                                                 // 308
	},                                                                                                            // 309
                                                                                                               // 310
	type: function( obj ) {                                                                                       // 311
		if ( obj == null ) {                                                                                         // 312
			return obj + "";                                                                                            // 313
		}                                                                                                            // 314
                                                                                                               // 315
		// Support: Android<4.0, iOS<6 (functionish RegExp)                                                          // 316
		return typeof obj === "object" || typeof obj === "function" ?                                                // 317
			class2type[ toString.call( obj ) ] || "object" :                                                            // 318
			typeof obj;                                                                                                 // 319
	},                                                                                                            // 320
                                                                                                               // 321
	// Evaluates a script in a global context                                                                     // 322
	globalEval: function( code ) {                                                                                // 323
		var script,                                                                                                  // 324
			indirect = eval;                                                                                            // 325
                                                                                                               // 326
		code = jQuery.trim( code );                                                                                  // 327
                                                                                                               // 328
		if ( code ) {                                                                                                // 329
                                                                                                               // 330
			// If the code includes a valid, prologue position                                                          // 331
			// strict mode pragma, execute code by injecting a                                                          // 332
			// script tag into the document.                                                                            // 333
			if ( code.indexOf( "use strict" ) === 1 ) {                                                                 // 334
				script = document.createElement( "script" );                                                               // 335
				script.text = code;                                                                                        // 336
				document.head.appendChild( script ).parentNode.removeChild( script );                                      // 337
			} else {                                                                                                    // 338
                                                                                                               // 339
				// Otherwise, avoid the DOM node creation, insertion                                                       // 340
				// and removal by using an indirect global eval                                                            // 341
                                                                                                               // 342
				indirect( code );                                                                                          // 343
			}                                                                                                           // 344
		}                                                                                                            // 345
	},                                                                                                            // 346
                                                                                                               // 347
	// Convert dashed to camelCase; used by the css and data modules                                              // 348
	// Support: IE9-11+                                                                                           // 349
	// Microsoft forgot to hump their vendor prefix (#9572)                                                       // 350
	camelCase: function( string ) {                                                                               // 351
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );                                 // 352
	},                                                                                                            // 353
                                                                                                               // 354
	nodeName: function( elem, name ) {                                                                            // 355
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();                                  // 356
	},                                                                                                            // 357
                                                                                                               // 358
	each: function( obj, callback ) {                                                                             // 359
		var length, i = 0;                                                                                           // 360
                                                                                                               // 361
		if ( isArrayLike( obj ) ) {                                                                                  // 362
			length = obj.length;                                                                                        // 363
			for ( ; i < length; i++ ) {                                                                                 // 364
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {                                                  // 365
					break;                                                                                                    // 366
				}                                                                                                          // 367
			}                                                                                                           // 368
		} else {                                                                                                     // 369
			for ( i in obj ) {                                                                                          // 370
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {                                                  // 371
					break;                                                                                                    // 372
				}                                                                                                          // 373
			}                                                                                                           // 374
		}                                                                                                            // 375
                                                                                                               // 376
		return obj;                                                                                                  // 377
	},                                                                                                            // 378
                                                                                                               // 379
	// Support: Android<4.1                                                                                       // 380
	trim: function( text ) {                                                                                      // 381
		return text == null ?                                                                                        // 382
			"" :                                                                                                        // 383
			( text + "" ).replace( rtrim, "" );                                                                         // 384
	},                                                                                                            // 385
                                                                                                               // 386
	// results is for internal usage only                                                                         // 387
	makeArray: function( arr, results ) {                                                                         // 388
		var ret = results || [];                                                                                     // 389
                                                                                                               // 390
		if ( arr != null ) {                                                                                         // 391
			if ( isArrayLike( Object( arr ) ) ) {                                                                       // 392
				jQuery.merge( ret,                                                                                         // 393
					typeof arr === "string" ?                                                                                 // 394
					[ arr ] : arr                                                                                             // 395
				);                                                                                                         // 396
			} else {                                                                                                    // 397
				push.call( ret, arr );                                                                                     // 398
			}                                                                                                           // 399
		}                                                                                                            // 400
                                                                                                               // 401
		return ret;                                                                                                  // 402
	},                                                                                                            // 403
                                                                                                               // 404
	inArray: function( elem, arr, i ) {                                                                           // 405
		return arr == null ? -1 : indexOf.call( arr, elem, i );                                                      // 406
	},                                                                                                            // 407
                                                                                                               // 408
	merge: function( first, second ) {                                                                            // 409
		var len = +second.length,                                                                                    // 410
			j = 0,                                                                                                      // 411
			i = first.length;                                                                                           // 412
                                                                                                               // 413
		for ( ; j < len; j++ ) {                                                                                     // 414
			first[ i++ ] = second[ j ];                                                                                 // 415
		}                                                                                                            // 416
                                                                                                               // 417
		first.length = i;                                                                                            // 418
                                                                                                               // 419
		return first;                                                                                                // 420
	},                                                                                                            // 421
                                                                                                               // 422
	grep: function( elems, callback, invert ) {                                                                   // 423
		var callbackInverse,                                                                                         // 424
			matches = [],                                                                                               // 425
			i = 0,                                                                                                      // 426
			length = elems.length,                                                                                      // 427
			callbackExpect = !invert;                                                                                   // 428
                                                                                                               // 429
		// Go through the array, only saving the items                                                               // 430
		// that pass the validator function                                                                          // 431
		for ( ; i < length; i++ ) {                                                                                  // 432
			callbackInverse = !callback( elems[ i ], i );                                                               // 433
			if ( callbackInverse !== callbackExpect ) {                                                                 // 434
				matches.push( elems[ i ] );                                                                                // 435
			}                                                                                                           // 436
		}                                                                                                            // 437
                                                                                                               // 438
		return matches;                                                                                              // 439
	},                                                                                                            // 440
                                                                                                               // 441
	// arg is for internal usage only                                                                             // 442
	map: function( elems, callback, arg ) {                                                                       // 443
		var length, value,                                                                                           // 444
			i = 0,                                                                                                      // 445
			ret = [];                                                                                                   // 446
                                                                                                               // 447
		// Go through the array, translating each of the items to their new values                                   // 448
		if ( isArrayLike( elems ) ) {                                                                                // 449
			length = elems.length;                                                                                      // 450
			for ( ; i < length; i++ ) {                                                                                 // 451
				value = callback( elems[ i ], i, arg );                                                                    // 452
                                                                                                               // 453
				if ( value != null ) {                                                                                     // 454
					ret.push( value );                                                                                        // 455
				}                                                                                                          // 456
			}                                                                                                           // 457
                                                                                                               // 458
		// Go through every key on the object,                                                                       // 459
		} else {                                                                                                     // 460
			for ( i in elems ) {                                                                                        // 461
				value = callback( elems[ i ], i, arg );                                                                    // 462
                                                                                                               // 463
				if ( value != null ) {                                                                                     // 464
					ret.push( value );                                                                                        // 465
				}                                                                                                          // 466
			}                                                                                                           // 467
		}                                                                                                            // 468
                                                                                                               // 469
		// Flatten any nested arrays                                                                                 // 470
		return concat.apply( [], ret );                                                                              // 471
	},                                                                                                            // 472
                                                                                                               // 473
	// A global GUID counter for objects                                                                          // 474
	guid: 1,                                                                                                      // 475
                                                                                                               // 476
	// Bind a function to a context, optionally partially applying any                                            // 477
	// arguments.                                                                                                 // 478
	proxy: function( fn, context ) {                                                                              // 479
		var tmp, args, proxy;                                                                                        // 480
                                                                                                               // 481
		if ( typeof context === "string" ) {                                                                         // 482
			tmp = fn[ context ];                                                                                        // 483
			context = fn;                                                                                               // 484
			fn = tmp;                                                                                                   // 485
		}                                                                                                            // 486
                                                                                                               // 487
		// Quick check to determine if target is callable, in the spec                                               // 488
		// this throws a TypeError, but we will just return undefined.                                               // 489
		if ( !jQuery.isFunction( fn ) ) {                                                                            // 490
			return undefined;                                                                                           // 491
		}                                                                                                            // 492
                                                                                                               // 493
		// Simulated bind                                                                                            // 494
		args = slice.call( arguments, 2 );                                                                           // 495
		proxy = function() {                                                                                         // 496
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );                                 // 497
		};                                                                                                           // 498
                                                                                                               // 499
		// Set the guid of unique handler to the same of original handler, so it can be removed                      // 500
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;                                                             // 501
                                                                                                               // 502
		return proxy;                                                                                                // 503
	},                                                                                                            // 504
                                                                                                               // 505
	now: Date.now,                                                                                                // 506
                                                                                                               // 507
	// jQuery.support is not used in Core but other projects attach their                                         // 508
	// properties to it so it needs to exist.                                                                     // 509
	support: support                                                                                              // 510
} );                                                                                                           // 511
                                                                                                               // 512
// JSHint would error on this code due to the Symbol not being defined in ES5.                                 // 513
// Defining this global in .jshintrc would create a danger of using the global                                 // 514
// unguarded in another place, it seems safer to just disable JSHint for these                                 // 515
// three lines.                                                                                                // 516
/* jshint ignore: start */                                                                                     // 517
if ( typeof Symbol === "function" ) {                                                                          // 518
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];                                                        // 519
}                                                                                                              // 520
/* jshint ignore: end */                                                                                       // 521
                                                                                                               // 522
// Populate the class2type map                                                                                 // 523
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),              // 524
function( i, name ) {                                                                                          // 525
	class2type[ "[object " + name + "]" ] = name.toLowerCase();                                                   // 526
} );                                                                                                           // 527
                                                                                                               // 528
function isArrayLike( obj ) {                                                                                  // 529
                                                                                                               // 530
	// Support: iOS 8.2 (not reproducible in simulator)                                                           // 531
	// `in` check used to prevent JIT error (gh-2145)                                                             // 532
	// hasOwn isn't used here due to false negatives                                                              // 533
	// regarding Nodelist length in IE                                                                            // 534
	var length = !!obj && "length" in obj && obj.length,                                                          // 535
		type = jQuery.type( obj );                                                                                   // 536
                                                                                                               // 537
	if ( type === "function" || jQuery.isWindow( obj ) ) {                                                        // 538
		return false;                                                                                                // 539
	}                                                                                                             // 540
                                                                                                               // 541
	return type === "array" || length === 0 ||                                                                    // 542
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;                                           // 543
}                                                                                                              // 544
var Sizzle =                                                                                                   // 545
/*!                                                                                                            // 546
 * Sizzle CSS Selector Engine v2.2.1                                                                           // 547
 * http://sizzlejs.com/                                                                                        // 548
 *                                                                                                             // 549
 * Copyright jQuery Foundation and other contributors                                                          // 550
 * Released under the MIT license                                                                              // 551
 * http://jquery.org/license                                                                                   // 552
 *                                                                                                             // 553
 * Date: 2015-10-17                                                                                            // 554
 */                                                                                                            // 555
(function( window ) {                                                                                          // 556
                                                                                                               // 557
var i,                                                                                                         // 558
	support,                                                                                                      // 559
	Expr,                                                                                                         // 560
	getText,                                                                                                      // 561
	isXML,                                                                                                        // 562
	tokenize,                                                                                                     // 563
	compile,                                                                                                      // 564
	select,                                                                                                       // 565
	outermostContext,                                                                                             // 566
	sortInput,                                                                                                    // 567
	hasDuplicate,                                                                                                 // 568
                                                                                                               // 569
	// Local document vars                                                                                        // 570
	setDocument,                                                                                                  // 571
	document,                                                                                                     // 572
	docElem,                                                                                                      // 573
	documentIsHTML,                                                                                               // 574
	rbuggyQSA,                                                                                                    // 575
	rbuggyMatches,                                                                                                // 576
	matches,                                                                                                      // 577
	contains,                                                                                                     // 578
                                                                                                               // 579
	// Instance-specific data                                                                                     // 580
	expando = "sizzle" + 1 * new Date(),                                                                          // 581
	preferredDoc = window.document,                                                                               // 582
	dirruns = 0,                                                                                                  // 583
	done = 0,                                                                                                     // 584
	classCache = createCache(),                                                                                   // 585
	tokenCache = createCache(),                                                                                   // 586
	compilerCache = createCache(),                                                                                // 587
	sortOrder = function( a, b ) {                                                                                // 588
		if ( a === b ) {                                                                                             // 589
			hasDuplicate = true;                                                                                        // 590
		}                                                                                                            // 591
		return 0;                                                                                                    // 592
	},                                                                                                            // 593
                                                                                                               // 594
	// General-purpose constants                                                                                  // 595
	MAX_NEGATIVE = 1 << 31,                                                                                       // 596
                                                                                                               // 597
	// Instance methods                                                                                           // 598
	hasOwn = ({}).hasOwnProperty,                                                                                 // 599
	arr = [],                                                                                                     // 600
	pop = arr.pop,                                                                                                // 601
	push_native = arr.push,                                                                                       // 602
	push = arr.push,                                                                                              // 603
	slice = arr.slice,                                                                                            // 604
	// Use a stripped-down indexOf as it's faster than native                                                     // 605
	// http://jsperf.com/thor-indexof-vs-for/5                                                                    // 606
	indexOf = function( list, elem ) {                                                                            // 607
		var i = 0,                                                                                                   // 608
			len = list.length;                                                                                          // 609
		for ( ; i < len; i++ ) {                                                                                     // 610
			if ( list[i] === elem ) {                                                                                   // 611
				return i;                                                                                                  // 612
			}                                                                                                           // 613
		}                                                                                                            // 614
		return -1;                                                                                                   // 615
	},                                                                                                            // 616
                                                                                                               // 617
	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
                                                                                                               // 619
	// Regular expressions                                                                                        // 620
                                                                                                               // 621
	// http://www.w3.org/TR/css3-selectors/#whitespace                                                            // 622
	whitespace = "[\\x20\\t\\r\\n\\f]",                                                                           // 623
                                                                                                               // 624
	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier                                               // 625
	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",                                                              // 626
                                                                                                               // 627
	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors                                   // 628
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +                                   // 629
		// Operator (capture 2)                                                                                      // 630
		"*([*^$|!~]?=)" + whitespace +                                                                               // 631
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"                // 632
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +              // 633
		"*\\]",                                                                                                      // 634
                                                                                                               // 635
	pseudos = ":(" + identifier + ")(?:\\((" +                                                                    // 636
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:                    // 637
		// 1. quoted (capture 3; capture 4 or capture 5)                                                             // 638
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +                                                    // 639
		// 2. simple (capture 6)                                                                                     // 640
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +                                                           // 641
		// 3. anything else (capture 2)                                                                              // 642
		".*" +                                                                                                       // 643
		")\\)|)",                                                                                                    // 644
                                                                                                               // 645
	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),                                                            // 647
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),              // 648
                                                                                                               // 649
	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),                                            // 650
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),             // 651
                                                                                                               // 652
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),              // 653
                                                                                                               // 654
	rpseudo = new RegExp( pseudos ),                                                                              // 655
	ridentifier = new RegExp( "^" + identifier + "$" ),                                                           // 656
                                                                                                               // 657
	matchExpr = {                                                                                                 // 658
		"ID": new RegExp( "^#(" + identifier + ")" ),                                                                // 659
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),                                                           // 660
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),                                                            // 661
		"ATTR": new RegExp( "^" + attributes ),                                                                      // 662
		"PSEUDO": new RegExp( "^" + pseudos ),                                                                       // 663
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +                 // 664
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +                                  // 665
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),                                                                // 666
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),                                                         // 667
		// For use in libraries implementing .is()                                                                   // 668
		// We use this for POS matching in `select`                                                                  // 669
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +          // 670
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )                                    // 671
	},                                                                                                            // 672
                                                                                                               // 673
	rinputs = /^(?:input|select|textarea|button)$/i,                                                              // 674
	rheader = /^h\d$/i,                                                                                           // 675
                                                                                                               // 676
	rnative = /^[^{]+\{\s*\[native \w/,                                                                           // 677
                                                                                                               // 678
	// Easily-parseable/retrievable ID or TAG or CLASS selectors                                                  // 679
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,                                                              // 680
                                                                                                               // 681
	rsibling = /[+~]/,                                                                                            // 682
	rescape = /'|\\/g,                                                                                            // 683
                                                                                                               // 684
	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters                                     // 685
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),              // 686
	funescape = function( _, escaped, escapedWhitespace ) {                                                       // 687
		var high = "0x" + escaped - 0x10000;                                                                         // 688
		// NaN means non-codepoint                                                                                   // 689
		// Support: Firefox<24                                                                                       // 690
		// Workaround erroneous numeric interpretation of +"0x"                                                      // 691
		return high !== high || escapedWhitespace ?                                                                  // 692
			escaped :                                                                                                   // 693
			high < 0 ?                                                                                                  // 694
				// BMP codepoint                                                                                           // 695
				String.fromCharCode( high + 0x10000 ) :                                                                    // 696
				// Supplemental Plane codepoint (surrogate pair)                                                           // 697
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );                                         // 698
	},                                                                                                            // 699
                                                                                                               // 700
	// Used for iframes                                                                                           // 701
	// See setDocument()                                                                                          // 702
	// Removing the function wrapper causes a "Permission Denied"                                                 // 703
	// error in IE                                                                                                // 704
	unloadHandler = function() {                                                                                  // 705
		setDocument();                                                                                               // 706
	};                                                                                                            // 707
                                                                                                               // 708
// Optimize for push.apply( _, NodeList )                                                                      // 709
try {                                                                                                          // 710
	push.apply(                                                                                                   // 711
		(arr = slice.call( preferredDoc.childNodes )),                                                               // 712
		preferredDoc.childNodes                                                                                      // 713
	);                                                                                                            // 714
	// Support: Android<4.0                                                                                       // 715
	// Detect silently failing push.apply                                                                         // 716
	arr[ preferredDoc.childNodes.length ].nodeType;                                                               // 717
} catch ( e ) {                                                                                                // 718
	push = { apply: arr.length ?                                                                                  // 719
                                                                                                               // 720
		// Leverage slice if possible                                                                                // 721
		function( target, els ) {                                                                                    // 722
			push_native.apply( target, slice.call(els) );                                                               // 723
		} :                                                                                                          // 724
                                                                                                               // 725
		// Support: IE<9                                                                                             // 726
		// Otherwise append directly                                                                                 // 727
		function( target, els ) {                                                                                    // 728
			var j = target.length,                                                                                      // 729
				i = 0;                                                                                                     // 730
			// Can't trust NodeList.length                                                                              // 731
			while ( (target[j++] = els[i++]) ) {}                                                                       // 732
			target.length = j - 1;                                                                                      // 733
		}                                                                                                            // 734
	};                                                                                                            // 735
}                                                                                                              // 736
                                                                                                               // 737
function Sizzle( selector, context, results, seed ) {                                                          // 738
	var m, i, elem, nid, nidselect, match, groups, newSelector,                                                   // 739
		newContext = context && context.ownerDocument,                                                               // 740
                                                                                                               // 741
		// nodeType defaults to 9, since context defaults to document                                                // 742
		nodeType = context ? context.nodeType : 9;                                                                   // 743
                                                                                                               // 744
	results = results || [];                                                                                      // 745
                                                                                                               // 746
	// Return early from calls with invalid selector or context                                                   // 747
	if ( typeof selector !== "string" || !selector ||                                                             // 748
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {                                                      // 749
                                                                                                               // 750
		return results;                                                                                              // 751
	}                                                                                                             // 752
                                                                                                               // 753
	// Try to shortcut find operations (as opposed to filters) in HTML documents                                  // 754
	if ( !seed ) {                                                                                                // 755
                                                                                                               // 756
		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {                          // 757
			setDocument( context );                                                                                     // 758
		}                                                                                                            // 759
		context = context || document;                                                                               // 760
                                                                                                               // 761
		if ( documentIsHTML ) {                                                                                      // 762
                                                                                                               // 763
			// If the selector is sufficiently simple, try using a "get*By*" DOM method                                 // 764
			// (excepting DocumentFragment context, where the methods don't exist)                                      // 765
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {                                           // 766
                                                                                                               // 767
				// ID selector                                                                                             // 768
				if ( (m = match[1]) ) {                                                                                    // 769
                                                                                                               // 770
					// Document context                                                                                       // 771
					if ( nodeType === 9 ) {                                                                                   // 772
						if ( (elem = context.getElementById( m )) ) {                                                            // 773
                                                                                                               // 774
							// Support: IE, Opera, Webkit                                                                           // 775
							// TODO: identify versions                                                                              // 776
							// getElementById can match elements by name instead of ID                                              // 777
							if ( elem.id === m ) {                                                                                  // 778
								results.push( elem );                                                                                  // 779
								return results;                                                                                        // 780
							}                                                                                                       // 781
						} else {                                                                                                 // 782
							return results;                                                                                         // 783
						}                                                                                                        // 784
                                                                                                               // 785
					// Element context                                                                                        // 786
					} else {                                                                                                  // 787
                                                                                                               // 788
						// Support: IE, Opera, Webkit                                                                            // 789
						// TODO: identify versions                                                                               // 790
						// getElementById can match elements by name instead of ID                                               // 791
						if ( newContext && (elem = newContext.getElementById( m )) &&                                            // 792
							contains( context, elem ) &&                                                                            // 793
							elem.id === m ) {                                                                                       // 794
                                                                                                               // 795
							results.push( elem );                                                                                   // 796
							return results;                                                                                         // 797
						}                                                                                                        // 798
					}                                                                                                         // 799
                                                                                                               // 800
				// Type selector                                                                                           // 801
				} else if ( match[2] ) {                                                                                   // 802
					push.apply( results, context.getElementsByTagName( selector ) );                                          // 803
					return results;                                                                                           // 804
                                                                                                               // 805
				// Class selector                                                                                          // 806
				} else if ( (m = match[3]) && support.getElementsByClassName &&                                            // 807
					context.getElementsByClassName ) {                                                                        // 808
                                                                                                               // 809
					push.apply( results, context.getElementsByClassName( m ) );                                               // 810
					return results;                                                                                           // 811
				}                                                                                                          // 812
			}                                                                                                           // 813
                                                                                                               // 814
			// Take advantage of querySelectorAll                                                                       // 815
			if ( support.qsa &&                                                                                         // 816
				!compilerCache[ selector + " " ] &&                                                                        // 817
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {                                                            // 818
                                                                                                               // 819
				if ( nodeType !== 1 ) {                                                                                    // 820
					newContext = context;                                                                                     // 821
					newSelector = selector;                                                                                   // 822
                                                                                                               // 823
				// qSA looks outside Element context, which is not what we want                                            // 824
				// Thanks to Andrew Dupont for this workaround technique                                                   // 825
				// Support: IE <=8                                                                                         // 826
				// Exclude object elements                                                                                 // 827
				} else if ( context.nodeName.toLowerCase() !== "object" ) {                                                // 828
                                                                                                               // 829
					// Capture the context ID, setting it first if necessary                                                  // 830
					if ( (nid = context.getAttribute( "id" )) ) {                                                             // 831
						nid = nid.replace( rescape, "\\$&" );                                                                    // 832
					} else {                                                                                                  // 833
						context.setAttribute( "id", (nid = expando) );                                                           // 834
					}                                                                                                         // 835
                                                                                                               // 836
					// Prefix every selector in the list                                                                      // 837
					groups = tokenize( selector );                                                                            // 838
					i = groups.length;                                                                                        // 839
					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";                                   // 840
					while ( i-- ) {                                                                                           // 841
						groups[i] = nidselect + " " + toSelector( groups[i] );                                                   // 842
					}                                                                                                         // 843
					newSelector = groups.join( "," );                                                                         // 844
                                                                                                               // 845
					// Expand context for sibling selectors                                                                   // 846
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||                            // 847
						context;                                                                                                 // 848
				}                                                                                                          // 849
                                                                                                               // 850
				if ( newSelector ) {                                                                                       // 851
					try {                                                                                                     // 852
						push.apply( results,                                                                                     // 853
							newContext.querySelectorAll( newSelector )                                                              // 854
						);                                                                                                       // 855
						return results;                                                                                          // 856
					} catch ( qsaError ) {                                                                                    // 857
					} finally {                                                                                               // 858
						if ( nid === expando ) {                                                                                 // 859
							context.removeAttribute( "id" );                                                                        // 860
						}                                                                                                        // 861
					}                                                                                                         // 862
				}                                                                                                          // 863
			}                                                                                                           // 864
		}                                                                                                            // 865
	}                                                                                                             // 866
                                                                                                               // 867
	// All others                                                                                                 // 868
	return select( selector.replace( rtrim, "$1" ), context, results, seed );                                     // 869
}                                                                                                              // 870
                                                                                                               // 871
/**                                                                                                            // 872
 * Create key-value caches of limited size                                                                     // 873
 * @returns {function(string, object)} Returns the Object data after storing it on itself with                 // 874
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)                // 875
 *	deleting the oldest entry                                                                                   // 876
 */                                                                                                            // 877
function createCache() {                                                                                       // 878
	var keys = [];                                                                                                // 879
                                                                                                               // 880
	function cache( key, value ) {                                                                                // 881
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)                      // 882
		if ( keys.push( key + " " ) > Expr.cacheLength ) {                                                           // 883
			// Only keep the most recent entries                                                                        // 884
			delete cache[ keys.shift() ];                                                                               // 885
		}                                                                                                            // 886
		return (cache[ key + " " ] = value);                                                                         // 887
	}                                                                                                             // 888
	return cache;                                                                                                 // 889
}                                                                                                              // 890
                                                                                                               // 891
/**                                                                                                            // 892
 * Mark a function for special use by Sizzle                                                                   // 893
 * @param {Function} fn The function to mark                                                                   // 894
 */                                                                                                            // 895
function markFunction( fn ) {                                                                                  // 896
	fn[ expando ] = true;                                                                                         // 897
	return fn;                                                                                                    // 898
}                                                                                                              // 899
                                                                                                               // 900
/**                                                                                                            // 901
 * Support testing using an element                                                                            // 902
 * @param {Function} fn Passed the created div and expects a boolean result                                    // 903
 */                                                                                                            // 904
function assert( fn ) {                                                                                        // 905
	var div = document.createElement("div");                                                                      // 906
                                                                                                               // 907
	try {                                                                                                         // 908
		return !!fn( div );                                                                                          // 909
	} catch (e) {                                                                                                 // 910
		return false;                                                                                                // 911
	} finally {                                                                                                   // 912
		// Remove from its parent by default                                                                         // 913
		if ( div.parentNode ) {                                                                                      // 914
			div.parentNode.removeChild( div );                                                                          // 915
		}                                                                                                            // 916
		// release memory in IE                                                                                      // 917
		div = null;                                                                                                  // 918
	}                                                                                                             // 919
}                                                                                                              // 920
                                                                                                               // 921
/**                                                                                                            // 922
 * Adds the same handler for all of the specified attrs                                                        // 923
 * @param {String} attrs Pipe-separated list of attributes                                                     // 924
 * @param {Function} handler The method that will be applied                                                   // 925
 */                                                                                                            // 926
function addHandle( attrs, handler ) {                                                                         // 927
	var arr = attrs.split("|"),                                                                                   // 928
		i = arr.length;                                                                                              // 929
                                                                                                               // 930
	while ( i-- ) {                                                                                               // 931
		Expr.attrHandle[ arr[i] ] = handler;                                                                         // 932
	}                                                                                                             // 933
}                                                                                                              // 934
                                                                                                               // 935
/**                                                                                                            // 936
 * Checks document order of two siblings                                                                       // 937
 * @param {Element} a                                                                                          // 938
 * @param {Element} b                                                                                          // 939
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b                        // 940
 */                                                                                                            // 941
function siblingCheck( a, b ) {                                                                                // 942
	var cur = b && a,                                                                                             // 943
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&                                                        // 944
			( ~b.sourceIndex || MAX_NEGATIVE ) -                                                                        // 945
			( ~a.sourceIndex || MAX_NEGATIVE );                                                                         // 946
                                                                                                               // 947
	// Use IE sourceIndex if available on both nodes                                                              // 948
	if ( diff ) {                                                                                                 // 949
		return diff;                                                                                                 // 950
	}                                                                                                             // 951
                                                                                                               // 952
	// Check if b follows a                                                                                       // 953
	if ( cur ) {                                                                                                  // 954
		while ( (cur = cur.nextSibling) ) {                                                                          // 955
			if ( cur === b ) {                                                                                          // 956
				return -1;                                                                                                 // 957
			}                                                                                                           // 958
		}                                                                                                            // 959
	}                                                                                                             // 960
                                                                                                               // 961
	return a ? 1 : -1;                                                                                            // 962
}                                                                                                              // 963
                                                                                                               // 964
/**                                                                                                            // 965
 * Returns a function to use in pseudos for input types                                                        // 966
 * @param {String} type                                                                                        // 967
 */                                                                                                            // 968
function createInputPseudo( type ) {                                                                           // 969
	return function( elem ) {                                                                                     // 970
		var name = elem.nodeName.toLowerCase();                                                                      // 971
		return name === "input" && elem.type === type;                                                               // 972
	};                                                                                                            // 973
}                                                                                                              // 974
                                                                                                               // 975
/**                                                                                                            // 976
 * Returns a function to use in pseudos for buttons                                                            // 977
 * @param {String} type                                                                                        // 978
 */                                                                                                            // 979
function createButtonPseudo( type ) {                                                                          // 980
	return function( elem ) {                                                                                     // 981
		var name = elem.nodeName.toLowerCase();                                                                      // 982
		return (name === "input" || name === "button") && elem.type === type;                                        // 983
	};                                                                                                            // 984
}                                                                                                              // 985
                                                                                                               // 986
/**                                                                                                            // 987
 * Returns a function to use in pseudos for positionals                                                        // 988
 * @param {Function} fn                                                                                        // 989
 */                                                                                                            // 990
function createPositionalPseudo( fn ) {                                                                        // 991
	return markFunction(function( argument ) {                                                                    // 992
		argument = +argument;                                                                                        // 993
		return markFunction(function( seed, matches ) {                                                              // 994
			var j,                                                                                                      // 995
				matchIndexes = fn( [], seed.length, argument ),                                                            // 996
				i = matchIndexes.length;                                                                                   // 997
                                                                                                               // 998
			// Match elements found at the specified indexes                                                            // 999
			while ( i-- ) {                                                                                             // 1000
				if ( seed[ (j = matchIndexes[i]) ] ) {                                                                     // 1001
					seed[j] = !(matches[j] = seed[j]);                                                                        // 1002
				}                                                                                                          // 1003
			}                                                                                                           // 1004
		});                                                                                                          // 1005
	});                                                                                                           // 1006
}                                                                                                              // 1007
                                                                                                               // 1008
/**                                                                                                            // 1009
 * Checks a node for validity as a Sizzle context                                                              // 1010
 * @param {Element|Object=} context                                                                            // 1011
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value                     // 1012
 */                                                                                                            // 1013
function testContext( context ) {                                                                              // 1014
	return context && typeof context.getElementsByTagName !== "undefined" && context;                             // 1015
}                                                                                                              // 1016
                                                                                                               // 1017
// Expose support vars for convenience                                                                         // 1018
support = Sizzle.support = {};                                                                                 // 1019
                                                                                                               // 1020
/**                                                                                                            // 1021
 * Detects XML nodes                                                                                           // 1022
 * @param {Element|Object} elem An element or a document                                                       // 1023
 * @returns {Boolean} True iff elem is a non-HTML XML node                                                     // 1024
 */                                                                                                            // 1025
isXML = Sizzle.isXML = function( elem ) {                                                                      // 1026
	// documentElement is verified for cases where it doesn't yet exist                                           // 1027
	// (such as loading iframes in IE - #4833)                                                                    // 1028
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;                                   // 1029
	return documentElement ? documentElement.nodeName !== "HTML" : false;                                         // 1030
};                                                                                                             // 1031
                                                                                                               // 1032
/**                                                                                                            // 1033
 * Sets document-related variables once based on the current document                                          // 1034
 * @param {Element|Object} [doc] An element or document object to use to set the document                      // 1035
 * @returns {Object} Returns the current document                                                              // 1036
 */                                                                                                            // 1037
setDocument = Sizzle.setDocument = function( node ) {                                                          // 1038
	var hasCompare, parent,                                                                                       // 1039
		doc = node ? node.ownerDocument || node : preferredDoc;                                                      // 1040
                                                                                                               // 1041
	// Return early if doc is invalid or already selected                                                         // 1042
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {                                       // 1043
		return document;                                                                                             // 1044
	}                                                                                                             // 1045
                                                                                                               // 1046
	// Update global variables                                                                                    // 1047
	document = doc;                                                                                               // 1048
	docElem = document.documentElement;                                                                           // 1049
	documentIsHTML = !isXML( document );                                                                          // 1050
                                                                                                               // 1051
	// Support: IE 9-11, Edge                                                                                     // 1052
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)                  // 1053
	if ( (parent = document.defaultView) && parent.top !== parent ) {                                             // 1054
		// Support: IE 11                                                                                            // 1055
		if ( parent.addEventListener ) {                                                                             // 1056
			parent.addEventListener( "unload", unloadHandler, false );                                                  // 1057
                                                                                                               // 1058
		// Support: IE 9 - 10 only                                                                                   // 1059
		} else if ( parent.attachEvent ) {                                                                           // 1060
			parent.attachEvent( "onunload", unloadHandler );                                                            // 1061
		}                                                                                                            // 1062
	}                                                                                                             // 1063
                                                                                                               // 1064
	/* Attributes                                                                                                 // 1065
	---------------------------------------------------------------------- */                                     // 1066
                                                                                                               // 1067
	// Support: IE<8                                                                                              // 1068
	// Verify that getAttribute really returns attributes and not properties                                      // 1069
	// (excepting IE8 booleans)                                                                                   // 1070
	support.attributes = assert(function( div ) {                                                                 // 1071
		div.className = "i";                                                                                         // 1072
		return !div.getAttribute("className");                                                                       // 1073
	});                                                                                                           // 1074
                                                                                                               // 1075
	/* getElement(s)By*                                                                                           // 1076
	---------------------------------------------------------------------- */                                     // 1077
                                                                                                               // 1078
	// Check if getElementsByTagName("*") returns only elements                                                   // 1079
	support.getElementsByTagName = assert(function( div ) {                                                       // 1080
		div.appendChild( document.createComment("") );                                                               // 1081
		return !div.getElementsByTagName("*").length;                                                                // 1082
	});                                                                                                           // 1083
                                                                                                               // 1084
	// Support: IE<9                                                                                              // 1085
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );                             // 1086
                                                                                                               // 1087
	// Support: IE<10                                                                                             // 1088
	// Check if getElementById returns elements by name                                                           // 1089
	// The broken getElementById methods don't pick up programatically-set names,                                 // 1090
	// so use a roundabout getElementsByName test                                                                 // 1091
	support.getById = assert(function( div ) {                                                                    // 1092
		docElem.appendChild( div ).id = expando;                                                                     // 1093
		return !document.getElementsByName || !document.getElementsByName( expando ).length;                         // 1094
	});                                                                                                           // 1095
                                                                                                               // 1096
	// ID find and filter                                                                                         // 1097
	if ( support.getById ) {                                                                                      // 1098
		Expr.find["ID"] = function( id, context ) {                                                                  // 1099
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {                                    // 1100
				var m = context.getElementById( id );                                                                      // 1101
				return m ? [ m ] : [];                                                                                     // 1102
			}                                                                                                           // 1103
		};                                                                                                           // 1104
		Expr.filter["ID"] = function( id ) {                                                                         // 1105
			var attrId = id.replace( runescape, funescape );                                                            // 1106
			return function( elem ) {                                                                                   // 1107
				return elem.getAttribute("id") === attrId;                                                                 // 1108
			};                                                                                                          // 1109
		};                                                                                                           // 1110
	} else {                                                                                                      // 1111
		// Support: IE6/7                                                                                            // 1112
		// getElementById is not reliable as a find shortcut                                                         // 1113
		delete Expr.find["ID"];                                                                                      // 1114
                                                                                                               // 1115
		Expr.filter["ID"] =  function( id ) {                                                                        // 1116
			var attrId = id.replace( runescape, funescape );                                                            // 1117
			return function( elem ) {                                                                                   // 1118
				var node = typeof elem.getAttributeNode !== "undefined" &&                                                 // 1119
					elem.getAttributeNode("id");                                                                              // 1120
				return node && node.value === attrId;                                                                      // 1121
			};                                                                                                          // 1122
		};                                                                                                           // 1123
	}                                                                                                             // 1124
                                                                                                               // 1125
	// Tag                                                                                                        // 1126
	Expr.find["TAG"] = support.getElementsByTagName ?                                                             // 1127
		function( tag, context ) {                                                                                   // 1128
			if ( typeof context.getElementsByTagName !== "undefined" ) {                                                // 1129
				return context.getElementsByTagName( tag );                                                                // 1130
                                                                                                               // 1131
			// DocumentFragment nodes don't have gEBTN                                                                  // 1132
			} else if ( support.qsa ) {                                                                                 // 1133
				return context.querySelectorAll( tag );                                                                    // 1134
			}                                                                                                           // 1135
		} :                                                                                                          // 1136
                                                                                                               // 1137
		function( tag, context ) {                                                                                   // 1138
			var elem,                                                                                                   // 1139
				tmp = [],                                                                                                  // 1140
				i = 0,                                                                                                     // 1141
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too                            // 1142
				results = context.getElementsByTagName( tag );                                                             // 1143
                                                                                                               // 1144
			// Filter out possible comments                                                                             // 1145
			if ( tag === "*" ) {                                                                                        // 1146
				while ( (elem = results[i++]) ) {                                                                          // 1147
					if ( elem.nodeType === 1 ) {                                                                              // 1148
						tmp.push( elem );                                                                                        // 1149
					}                                                                                                         // 1150
				}                                                                                                          // 1151
                                                                                                               // 1152
				return tmp;                                                                                                // 1153
			}                                                                                                           // 1154
			return results;                                                                                             // 1155
		};                                                                                                           // 1156
                                                                                                               // 1157
	// Class                                                                                                      // 1158
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {                       // 1159
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {                             // 1160
			return context.getElementsByClassName( className );                                                         // 1161
		}                                                                                                            // 1162
	};                                                                                                            // 1163
                                                                                                               // 1164
	/* QSA/matchesSelector                                                                                        // 1165
	---------------------------------------------------------------------- */                                     // 1166
                                                                                                               // 1167
	// QSA and matchesSelector support                                                                            // 1168
                                                                                                               // 1169
	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)                                          // 1170
	rbuggyMatches = [];                                                                                           // 1171
                                                                                                               // 1172
	// qSa(:focus) reports false when true (Chrome 21)                                                            // 1173
	// We allow this because of a bug in IE8/9 that throws an error                                               // 1174
	// whenever `document.activeElement` is accessed on an iframe                                                 // 1175
	// So, we allow :focus to pass through QSA all the time to avoid the IE error                                 // 1176
	// See http://bugs.jquery.com/ticket/13378                                                                    // 1177
	rbuggyQSA = [];                                                                                               // 1178
                                                                                                               // 1179
	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {                                            // 1180
		// Build QSA regex                                                                                           // 1181
		// Regex strategy adopted from Diego Perini                                                                  // 1182
		assert(function( div ) {                                                                                     // 1183
			// Select is set to empty string on purpose                                                                 // 1184
			// This is to test IE's treatment of not explicitly                                                         // 1185
			// setting a boolean content attribute,                                                                     // 1186
			// since its presence should be enough                                                                      // 1187
			// http://bugs.jquery.com/ticket/12359                                                                      // 1188
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +                                     // 1189
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +                                                   // 1190
				"<option selected=''></option></select>";                                                                  // 1191
                                                                                                               // 1192
			// Support: IE8, Opera 11-12.16                                                                             // 1193
			// Nothing should be selected when empty strings follow ^= or $= or *=                                      // 1194
			// The test attribute must be unknown in Opera but "safe" for WinRT                                         // 1195
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section                               // 1196
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {                                                // 1197
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );                                                  // 1198
			}                                                                                                           // 1199
                                                                                                               // 1200
			// Support: IE8                                                                                             // 1201
			// Boolean attributes and "value" are not treated correctly                                                 // 1202
			if ( !div.querySelectorAll("[selected]").length ) {                                                         // 1203
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );                                      // 1204
			}                                                                                                           // 1205
                                                                                                               // 1206
			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+                                 // 1207
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {                                           // 1208
				rbuggyQSA.push("~=");                                                                                      // 1209
			}                                                                                                           // 1210
                                                                                                               // 1211
			// Webkit/Opera - :checked should return selected option elements                                           // 1212
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked                                           // 1213
			// IE8 throws error here and will not see later tests                                                       // 1214
			if ( !div.querySelectorAll(":checked").length ) {                                                           // 1215
				rbuggyQSA.push(":checked");                                                                                // 1216
			}                                                                                                           // 1217
                                                                                                               // 1218
			// Support: Safari 8+, iOS 8+                                                                               // 1219
			// https://bugs.webkit.org/show_bug.cgi?id=136851                                                           // 1220
			// In-page `selector#id sibing-combinator selector` fails                                                   // 1221
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {                                              // 1222
				rbuggyQSA.push(".#.+[+~]");                                                                                // 1223
			}                                                                                                           // 1224
		});                                                                                                          // 1225
                                                                                                               // 1226
		assert(function( div ) {                                                                                     // 1227
			// Support: Windows 8 Native Apps                                                                           // 1228
			// The type and name attributes are restricted during .innerHTML assignment                                 // 1229
			var input = document.createElement("input");                                                                // 1230
			input.setAttribute( "type", "hidden" );                                                                     // 1231
			div.appendChild( input ).setAttribute( "name", "D" );                                                       // 1232
                                                                                                               // 1233
			// Support: IE8                                                                                             // 1234
			// Enforce case-sensitivity of name attribute                                                               // 1235
			if ( div.querySelectorAll("[name=d]").length ) {                                                            // 1236
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );                                                     // 1237
			}                                                                                                           // 1238
                                                                                                               // 1239
			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)                      // 1240
			// IE8 throws error here and will not see later tests                                                       // 1241
			if ( !div.querySelectorAll(":enabled").length ) {                                                           // 1242
				rbuggyQSA.push( ":enabled", ":disabled" );                                                                 // 1243
			}                                                                                                           // 1244
                                                                                                               // 1245
			// Opera 10-11 does not throw on post-comma invalid pseudos                                                 // 1246
			div.querySelectorAll("*,:x");                                                                               // 1247
			rbuggyQSA.push(",.*:");                                                                                     // 1248
		});                                                                                                          // 1249
	}                                                                                                             // 1250
                                                                                                               // 1251
	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||                                   // 1252
		docElem.webkitMatchesSelector ||                                                                             // 1253
		docElem.mozMatchesSelector ||                                                                                // 1254
		docElem.oMatchesSelector ||                                                                                  // 1255
		docElem.msMatchesSelector) )) ) {                                                                            // 1256
                                                                                                               // 1257
		assert(function( div ) {                                                                                     // 1258
			// Check to see if it's possible to do matchesSelector                                                      // 1259
			// on a disconnected node (IE 9)                                                                            // 1260
			support.disconnectedMatch = matches.call( div, "div" );                                                     // 1261
                                                                                                               // 1262
			// This should fail with an exception                                                                       // 1263
			// Gecko does not error, returns false instead                                                              // 1264
			matches.call( div, "[s!='']:x" );                                                                           // 1265
			rbuggyMatches.push( "!=", pseudos );                                                                        // 1266
		});                                                                                                          // 1267
	}                                                                                                             // 1268
                                                                                                               // 1269
	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );                                            // 1270
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );                                // 1271
                                                                                                               // 1272
	/* Contains                                                                                                   // 1273
	---------------------------------------------------------------------- */                                     // 1274
	hasCompare = rnative.test( docElem.compareDocumentPosition );                                                 // 1275
                                                                                                               // 1276
	// Element contains another                                                                                   // 1277
	// Purposefully self-exclusive                                                                                // 1278
	// As in, an element does not contain itself                                                                  // 1279
	contains = hasCompare || rnative.test( docElem.contains ) ?                                                   // 1280
		function( a, b ) {                                                                                           // 1281
			var adown = a.nodeType === 9 ? a.documentElement : a,                                                       // 1282
				bup = b && b.parentNode;                                                                                   // 1283
			return a === bup || !!( bup && bup.nodeType === 1 && (                                                      // 1284
				adown.contains ?                                                                                           // 1285
					adown.contains( bup ) :                                                                                   // 1286
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16                                        // 1287
			));                                                                                                         // 1288
		} :                                                                                                          // 1289
		function( a, b ) {                                                                                           // 1290
			if ( b ) {                                                                                                  // 1291
				while ( (b = b.parentNode) ) {                                                                             // 1292
					if ( b === a ) {                                                                                          // 1293
						return true;                                                                                             // 1294
					}                                                                                                         // 1295
				}                                                                                                          // 1296
			}                                                                                                           // 1297
			return false;                                                                                               // 1298
		};                                                                                                           // 1299
                                                                                                               // 1300
	/* Sorting                                                                                                    // 1301
	---------------------------------------------------------------------- */                                     // 1302
                                                                                                               // 1303
	// Document order sorting                                                                                     // 1304
	sortOrder = hasCompare ?                                                                                      // 1305
	function( a, b ) {                                                                                            // 1306
                                                                                                               // 1307
		// Flag for duplicate removal                                                                                // 1308
		if ( a === b ) {                                                                                             // 1309
			hasDuplicate = true;                                                                                        // 1310
			return 0;                                                                                                   // 1311
		}                                                                                                            // 1312
                                                                                                               // 1313
		// Sort on method existence if only one input has compareDocumentPosition                                    // 1314
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;                                       // 1315
		if ( compare ) {                                                                                             // 1316
			return compare;                                                                                             // 1317
		}                                                                                                            // 1318
                                                                                                               // 1319
		// Calculate position if both inputs belong to the same document                                             // 1320
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?                                            // 1321
			a.compareDocumentPosition( b ) :                                                                            // 1322
                                                                                                               // 1323
			// Otherwise we know they are disconnected                                                                  // 1324
			1;                                                                                                          // 1325
                                                                                                               // 1326
		// Disconnected nodes                                                                                        // 1327
		if ( compare & 1 ||                                                                                          // 1328
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {                                   // 1329
                                                                                                               // 1330
			// Choose the first element that is related to our preferred document                                       // 1331
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {                    // 1332
				return -1;                                                                                                 // 1333
			}                                                                                                           // 1334
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {                    // 1335
				return 1;                                                                                                  // 1336
			}                                                                                                           // 1337
                                                                                                               // 1338
			// Maintain original order                                                                                  // 1339
			return sortInput ?                                                                                          // 1340
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :                                                    // 1341
				0;                                                                                                         // 1342
		}                                                                                                            // 1343
                                                                                                               // 1344
		return compare & 4 ? -1 : 1;                                                                                 // 1345
	} :                                                                                                           // 1346
	function( a, b ) {                                                                                            // 1347
		// Exit early if the nodes are identical                                                                     // 1348
		if ( a === b ) {                                                                                             // 1349
			hasDuplicate = true;                                                                                        // 1350
			return 0;                                                                                                   // 1351
		}                                                                                                            // 1352
                                                                                                               // 1353
		var cur,                                                                                                     // 1354
			i = 0,                                                                                                      // 1355
			aup = a.parentNode,                                                                                         // 1356
			bup = b.parentNode,                                                                                         // 1357
			ap = [ a ],                                                                                                 // 1358
			bp = [ b ];                                                                                                 // 1359
                                                                                                               // 1360
		// Parentless nodes are either documents or disconnected                                                     // 1361
		if ( !aup || !bup ) {                                                                                        // 1362
			return a === document ? -1 :                                                                                // 1363
				b === document ? 1 :                                                                                       // 1364
				aup ? -1 :                                                                                                 // 1365
				bup ? 1 :                                                                                                  // 1366
				sortInput ?                                                                                                // 1367
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :                                                    // 1368
				0;                                                                                                         // 1369
                                                                                                               // 1370
		// If the nodes are siblings, we can do a quick check                                                        // 1371
		} else if ( aup === bup ) {                                                                                  // 1372
			return siblingCheck( a, b );                                                                                // 1373
		}                                                                                                            // 1374
                                                                                                               // 1375
		// Otherwise we need full lists of their ancestors for comparison                                            // 1376
		cur = a;                                                                                                     // 1377
		while ( (cur = cur.parentNode) ) {                                                                           // 1378
			ap.unshift( cur );                                                                                          // 1379
		}                                                                                                            // 1380
		cur = b;                                                                                                     // 1381
		while ( (cur = cur.parentNode) ) {                                                                           // 1382
			bp.unshift( cur );                                                                                          // 1383
		}                                                                                                            // 1384
                                                                                                               // 1385
		// Walk down the tree looking for a discrepancy                                                              // 1386
		while ( ap[i] === bp[i] ) {                                                                                  // 1387
			i++;                                                                                                        // 1388
		}                                                                                                            // 1389
                                                                                                               // 1390
		return i ?                                                                                                   // 1391
			// Do a sibling check if the nodes have a common ancestor                                                   // 1392
			siblingCheck( ap[i], bp[i] ) :                                                                              // 1393
                                                                                                               // 1394
			// Otherwise nodes in our document sort first                                                               // 1395
			ap[i] === preferredDoc ? -1 :                                                                               // 1396
			bp[i] === preferredDoc ? 1 :                                                                                // 1397
			0;                                                                                                          // 1398
	};                                                                                                            // 1399
                                                                                                               // 1400
	return document;                                                                                              // 1401
};                                                                                                             // 1402
                                                                                                               // 1403
Sizzle.matches = function( expr, elements ) {                                                                  // 1404
	return Sizzle( expr, null, null, elements );                                                                  // 1405
};                                                                                                             // 1406
                                                                                                               // 1407
Sizzle.matchesSelector = function( elem, expr ) {                                                              // 1408
	// Set document vars if needed                                                                                // 1409
	if ( ( elem.ownerDocument || elem ) !== document ) {                                                          // 1410
		setDocument( elem );                                                                                         // 1411
	}                                                                                                             // 1412
                                                                                                               // 1413
	// Make sure that attribute selectors are quoted                                                              // 1414
	expr = expr.replace( rattributeQuotes, "='$1']" );                                                            // 1415
                                                                                                               // 1416
	if ( support.matchesSelector && documentIsHTML &&                                                             // 1417
		!compilerCache[ expr + " " ] &&                                                                              // 1418
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&                                                         // 1419
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {                                                            // 1420
                                                                                                               // 1421
		try {                                                                                                        // 1422
			var ret = matches.call( elem, expr );                                                                       // 1423
                                                                                                               // 1424
			// IE 9's matchesSelector returns false on disconnected nodes                                               // 1425
			if ( ret || support.disconnectedMatch ||                                                                    // 1426
					// As well, disconnected nodes are said to be in a document                                               // 1427
					// fragment in IE 9                                                                                       // 1428
					elem.document && elem.document.nodeType !== 11 ) {                                                        // 1429
				return ret;                                                                                                // 1430
			}                                                                                                           // 1431
		} catch (e) {}                                                                                               // 1432
	}                                                                                                             // 1433
                                                                                                               // 1434
	return Sizzle( expr, document, null, [ elem ] ).length > 0;                                                   // 1435
};                                                                                                             // 1436
                                                                                                               // 1437
Sizzle.contains = function( context, elem ) {                                                                  // 1438
	// Set document vars if needed                                                                                // 1439
	if ( ( context.ownerDocument || context ) !== document ) {                                                    // 1440
		setDocument( context );                                                                                      // 1441
	}                                                                                                             // 1442
	return contains( context, elem );                                                                             // 1443
};                                                                                                             // 1444
                                                                                                               // 1445
Sizzle.attr = function( elem, name ) {                                                                         // 1446
	// Set document vars if needed                                                                                // 1447
	if ( ( elem.ownerDocument || elem ) !== document ) {                                                          // 1448
		setDocument( elem );                                                                                         // 1449
	}                                                                                                             // 1450
                                                                                                               // 1451
	var fn = Expr.attrHandle[ name.toLowerCase() ],                                                               // 1452
		// Don't get fooled by Object.prototype properties (jQuery #13807)                                           // 1453
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?                                             // 1454
			fn( elem, name, !documentIsHTML ) :                                                                         // 1455
			undefined;                                                                                                  // 1456
                                                                                                               // 1457
	return val !== undefined ?                                                                                    // 1458
		val :                                                                                                        // 1459
		support.attributes || !documentIsHTML ?                                                                      // 1460
			elem.getAttribute( name ) :                                                                                 // 1461
			(val = elem.getAttributeNode(name)) && val.specified ?                                                      // 1462
				val.value :                                                                                                // 1463
				null;                                                                                                      // 1464
};                                                                                                             // 1465
                                                                                                               // 1466
Sizzle.error = function( msg ) {                                                                               // 1467
	throw new Error( "Syntax error, unrecognized expression: " + msg );                                           // 1468
};                                                                                                             // 1469
                                                                                                               // 1470
/**                                                                                                            // 1471
 * Document sorting and removing duplicates                                                                    // 1472
 * @param {ArrayLike} results                                                                                  // 1473
 */                                                                                                            // 1474
Sizzle.uniqueSort = function( results ) {                                                                      // 1475
	var elem,                                                                                                     // 1476
		duplicates = [],                                                                                             // 1477
		j = 0,                                                                                                       // 1478
		i = 0;                                                                                                       // 1479
                                                                                                               // 1480
	// Unless we *know* we can detect duplicates, assume their presence                                           // 1481
	hasDuplicate = !support.detectDuplicates;                                                                     // 1482
	sortInput = !support.sortStable && results.slice( 0 );                                                        // 1483
	results.sort( sortOrder );                                                                                    // 1484
                                                                                                               // 1485
	if ( hasDuplicate ) {                                                                                         // 1486
		while ( (elem = results[i++]) ) {                                                                            // 1487
			if ( elem === results[ i ] ) {                                                                              // 1488
				j = duplicates.push( i );                                                                                  // 1489
			}                                                                                                           // 1490
		}                                                                                                            // 1491
		while ( j-- ) {                                                                                              // 1492
			results.splice( duplicates[ j ], 1 );                                                                       // 1493
		}                                                                                                            // 1494
	}                                                                                                             // 1495
                                                                                                               // 1496
	// Clear input after sorting to release objects                                                               // 1497
	// See https://github.com/jquery/sizzle/pull/225                                                              // 1498
	sortInput = null;                                                                                             // 1499
                                                                                                               // 1500
	return results;                                                                                               // 1501
};                                                                                                             // 1502
                                                                                                               // 1503
/**                                                                                                            // 1504
 * Utility function for retrieving the text value of an array of DOM nodes                                     // 1505
 * @param {Array|Element} elem                                                                                 // 1506
 */                                                                                                            // 1507
getText = Sizzle.getText = function( elem ) {                                                                  // 1508
	var node,                                                                                                     // 1509
		ret = "",                                                                                                    // 1510
		i = 0,                                                                                                       // 1511
		nodeType = elem.nodeType;                                                                                    // 1512
                                                                                                               // 1513
	if ( !nodeType ) {                                                                                            // 1514
		// If no nodeType, this is expected to be an array                                                           // 1515
		while ( (node = elem[i++]) ) {                                                                               // 1516
			// Do not traverse comment nodes                                                                            // 1517
			ret += getText( node );                                                                                     // 1518
		}                                                                                                            // 1519
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {                                           // 1520
		// Use textContent for elements                                                                              // 1521
		// innerText usage removed for consistency of new lines (jQuery #11153)                                      // 1522
		if ( typeof elem.textContent === "string" ) {                                                                // 1523
			return elem.textContent;                                                                                    // 1524
		} else {                                                                                                     // 1525
			// Traverse its children                                                                                    // 1526
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {                                             // 1527
				ret += getText( elem );                                                                                    // 1528
			}                                                                                                           // 1529
		}                                                                                                            // 1530
	} else if ( nodeType === 3 || nodeType === 4 ) {                                                              // 1531
		return elem.nodeValue;                                                                                       // 1532
	}                                                                                                             // 1533
	// Do not include comment or processing instruction nodes                                                     // 1534
                                                                                                               // 1535
	return ret;                                                                                                   // 1536
};                                                                                                             // 1537
                                                                                                               // 1538
Expr = Sizzle.selectors = {                                                                                    // 1539
                                                                                                               // 1540
	// Can be adjusted by the user                                                                                // 1541
	cacheLength: 50,                                                                                              // 1542
                                                                                                               // 1543
	createPseudo: markFunction,                                                                                   // 1544
                                                                                                               // 1545
	match: matchExpr,                                                                                             // 1546
                                                                                                               // 1547
	attrHandle: {},                                                                                               // 1548
                                                                                                               // 1549
	find: {},                                                                                                     // 1550
                                                                                                               // 1551
	relative: {                                                                                                   // 1552
		">": { dir: "parentNode", first: true },                                                                     // 1553
		" ": { dir: "parentNode" },                                                                                  // 1554
		"+": { dir: "previousSibling", first: true },                                                                // 1555
		"~": { dir: "previousSibling" }                                                                              // 1556
	},                                                                                                            // 1557
                                                                                                               // 1558
	preFilter: {                                                                                                  // 1559
		"ATTR": function( match ) {                                                                                  // 1560
			match[1] = match[1].replace( runescape, funescape );                                                        // 1561
                                                                                                               // 1562
			// Move the given value to match[3] whether quoted or unquoted                                              // 1563
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );                      // 1564
                                                                                                               // 1565
			if ( match[2] === "~=" ) {                                                                                  // 1566
				match[3] = " " + match[3] + " ";                                                                           // 1567
			}                                                                                                           // 1568
                                                                                                               // 1569
			return match.slice( 0, 4 );                                                                                 // 1570
		},                                                                                                           // 1571
                                                                                                               // 1572
		"CHILD": function( match ) {                                                                                 // 1573
			/* matches from matchExpr["CHILD"]                                                                          // 1574
				1 type (only|nth|...)                                                                                      // 1575
				2 what (child|of-type)                                                                                     // 1576
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)                                                               // 1577
				4 xn-component of xn+y argument ([+-]?\d*n|)                                                               // 1578
				5 sign of xn-component                                                                                     // 1579
				6 x of xn-component                                                                                        // 1580
				7 sign of y-component                                                                                      // 1581
				8 y of y-component                                                                                         // 1582
			*/                                                                                                          // 1583
			match[1] = match[1].toLowerCase();                                                                          // 1584
                                                                                                               // 1585
			if ( match[1].slice( 0, 3 ) === "nth" ) {                                                                   // 1586
				// nth-* requires argument                                                                                 // 1587
				if ( !match[3] ) {                                                                                         // 1588
					Sizzle.error( match[0] );                                                                                 // 1589
				}                                                                                                          // 1590
                                                                                                               // 1591
				// numeric x and y parameters for Expr.filter.CHILD                                                        // 1592
				// remember that false/true cast respectively to 0/1                                                       // 1593
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );                                             // 1595
                                                                                                               // 1596
			// other types prohibit arguments                                                                           // 1597
			} else if ( match[3] ) {                                                                                    // 1598
				Sizzle.error( match[0] );                                                                                  // 1599
			}                                                                                                           // 1600
                                                                                                               // 1601
			return match;                                                                                               // 1602
		},                                                                                                           // 1603
                                                                                                               // 1604
		"PSEUDO": function( match ) {                                                                                // 1605
			var excess,                                                                                                 // 1606
				unquoted = !match[6] && match[2];                                                                          // 1607
                                                                                                               // 1608
			if ( matchExpr["CHILD"].test( match[0] ) ) {                                                                // 1609
				return null;                                                                                               // 1610
			}                                                                                                           // 1611
                                                                                                               // 1612
			// Accept quoted arguments as-is                                                                            // 1613
			if ( match[3] ) {                                                                                           // 1614
				match[2] = match[4] || match[5] || "";                                                                     // 1615
                                                                                                               // 1616
			// Strip excess characters from unquoted arguments                                                          // 1617
			} else if ( unquoted && rpseudo.test( unquoted ) &&                                                         // 1618
				// Get excess from tokenize (recursively)                                                                  // 1619
				(excess = tokenize( unquoted, true )) &&                                                                   // 1620
				// advance to the next closing parenthesis                                                                 // 1621
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {                         // 1622
                                                                                                               // 1623
				// excess is a negative index                                                                              // 1624
				match[0] = match[0].slice( 0, excess );                                                                    // 1625
				match[2] = unquoted.slice( 0, excess );                                                                    // 1626
			}                                                                                                           // 1627
                                                                                                               // 1628
			// Return only captures needed by the pseudo filter method (type and argument)                              // 1629
			return match.slice( 0, 3 );                                                                                 // 1630
		}                                                                                                            // 1631
	},                                                                                                            // 1632
                                                                                                               // 1633
	filter: {                                                                                                     // 1634
                                                                                                               // 1635
		"TAG": function( nodeNameSelector ) {                                                                        // 1636
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();                              // 1637
			return nodeNameSelector === "*" ?                                                                           // 1638
				function() { return true; } :                                                                              // 1639
				function( elem ) {                                                                                         // 1640
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;                                         // 1641
				};                                                                                                         // 1642
		},                                                                                                           // 1643
                                                                                                               // 1644
		"CLASS": function( className ) {                                                                             // 1645
			var pattern = classCache[ className + " " ];                                                                // 1646
                                                                                                               // 1647
			return pattern ||                                                                                           // 1648
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&               // 1649
				classCache( className, function( elem ) {                                                                  // 1650
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});                                                                                                        // 1652
		},                                                                                                           // 1653
                                                                                                               // 1654
		"ATTR": function( name, operator, check ) {                                                                  // 1655
			return function( elem ) {                                                                                   // 1656
				var result = Sizzle.attr( elem, name );                                                                    // 1657
                                                                                                               // 1658
				if ( result == null ) {                                                                                    // 1659
					return operator === "!=";                                                                                 // 1660
				}                                                                                                          // 1661
				if ( !operator ) {                                                                                         // 1662
					return true;                                                                                              // 1663
				}                                                                                                          // 1664
                                                                                                               // 1665
				result += "";                                                                                              // 1666
                                                                                                               // 1667
				return operator === "=" ? result === check :                                                               // 1668
					operator === "!=" ? result !== check :                                                                    // 1669
					operator === "^=" ? check && result.indexOf( check ) === 0 :                                              // 1670
					operator === "*=" ? check && result.indexOf( check ) > -1 :                                               // 1671
					operator === "$=" ? check && result.slice( -check.length ) === check :                                    // 1672
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :            // 1673
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :             // 1674
					false;                                                                                                    // 1675
			};                                                                                                          // 1676
		},                                                                                                           // 1677
                                                                                                               // 1678
		"CHILD": function( type, what, argument, first, last ) {                                                     // 1679
			var simple = type.slice( 0, 3 ) !== "nth",                                                                  // 1680
				forward = type.slice( -4 ) !== "last",                                                                     // 1681
				ofType = what === "of-type";                                                                               // 1682
                                                                                                               // 1683
			return first === 1 && last === 0 ?                                                                          // 1684
                                                                                                               // 1685
				// Shortcut for :nth-*(n)                                                                                  // 1686
				function( elem ) {                                                                                         // 1687
					return !!elem.parentNode;                                                                                 // 1688
				} :                                                                                                        // 1689
                                                                                                               // 1690
				function( elem, context, xml ) {                                                                           // 1691
					var cache, uniqueCache, outerCache, node, nodeIndex, start,                                               // 1692
						dir = simple !== forward ? "nextSibling" : "previousSibling",                                            // 1693
						parent = elem.parentNode,                                                                                // 1694
						name = ofType && elem.nodeName.toLowerCase(),                                                            // 1695
						useCache = !xml && !ofType,                                                                              // 1696
						diff = false;                                                                                            // 1697
                                                                                                               // 1698
					if ( parent ) {                                                                                           // 1699
                                                                                                               // 1700
						// :(first|last|only)-(child|of-type)                                                                    // 1701
						if ( simple ) {                                                                                          // 1702
							while ( dir ) {                                                                                         // 1703
								node = elem;                                                                                           // 1704
								while ( (node = node[ dir ]) ) {                                                                       // 1705
									if ( ofType ?                                                                                         // 1706
										node.nodeName.toLowerCase() === name :                                                               // 1707
										node.nodeType === 1 ) {                                                                              // 1708
                                                                                                               // 1709
										return false;                                                                                        // 1710
									}                                                                                                     // 1711
								}                                                                                                      // 1712
								// Reverse direction for :only-* (if we haven't yet done so)                                           // 1713
								start = dir = type === "only" && !start && "nextSibling";                                              // 1714
							}                                                                                                       // 1715
							return true;                                                                                            // 1716
						}                                                                                                        // 1717
                                                                                                               // 1718
						start = [ forward ? parent.firstChild : parent.lastChild ];                                              // 1719
                                                                                                               // 1720
						// non-xml :nth-child(...) stores cache data on `parent`                                                 // 1721
						if ( forward && useCache ) {                                                                             // 1722
                                                                                                               // 1723
							// Seek `elem` from a previously-cached index                                                           // 1724
                                                                                                               // 1725
							// ...in a gzip-friendly way                                                                            // 1726
							node = parent;                                                                                          // 1727
							outerCache = node[ expando ] || (node[ expando ] = {});                                                 // 1728
                                                                                                               // 1729
							// Support: IE <9 only                                                                                  // 1730
							// Defend against cloned attroperties (jQuery gh-1709)                                                  // 1731
							uniqueCache = outerCache[ node.uniqueID ] ||                                                            // 1732
								(outerCache[ node.uniqueID ] = {});                                                                    // 1733
                                                                                                               // 1734
							cache = uniqueCache[ type ] || [];                                                                      // 1735
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];                                                       // 1736
							diff = nodeIndex && cache[ 2 ];                                                                         // 1737
							node = nodeIndex && parent.childNodes[ nodeIndex ];                                                     // 1738
                                                                                                               // 1739
							while ( (node = ++nodeIndex && node && node[ dir ] ||                                                   // 1740
                                                                                                               // 1741
								// Fallback to seeking `elem` from the start                                                           // 1742
								(diff = nodeIndex = 0) || start.pop()) ) {                                                             // 1743
                                                                                                               // 1744
								// When found, cache indexes on `parent` and break                                                     // 1745
								if ( node.nodeType === 1 && ++diff && node === elem ) {                                                // 1746
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];                                                   // 1747
									break;                                                                                                // 1748
								}                                                                                                      // 1749
							}                                                                                                       // 1750
                                                                                                               // 1751
						} else {                                                                                                 // 1752
							// Use previously-cached element index if available                                                     // 1753
							if ( useCache ) {                                                                                       // 1754
								// ...in a gzip-friendly way                                                                           // 1755
								node = elem;                                                                                           // 1756
								outerCache = node[ expando ] || (node[ expando ] = {});                                                // 1757
                                                                                                               // 1758
								// Support: IE <9 only                                                                                 // 1759
								// Defend against cloned attroperties (jQuery gh-1709)                                                 // 1760
								uniqueCache = outerCache[ node.uniqueID ] ||                                                           // 1761
									(outerCache[ node.uniqueID ] = {});                                                                   // 1762
                                                                                                               // 1763
								cache = uniqueCache[ type ] || [];                                                                     // 1764
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];                                                      // 1765
								diff = nodeIndex;                                                                                      // 1766
							}                                                                                                       // 1767
                                                                                                               // 1768
							// xml :nth-child(...)                                                                                  // 1769
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)                                                 // 1770
							if ( diff === false ) {                                                                                 // 1771
								// Use the same loop as above to seek `elem` from the start                                            // 1772
								while ( (node = ++nodeIndex && node && node[ dir ] ||                                                  // 1773
									(diff = nodeIndex = 0) || start.pop()) ) {                                                            // 1774
                                                                                                               // 1775
									if ( ( ofType ?                                                                                       // 1776
										node.nodeName.toLowerCase() === name :                                                               // 1777
										node.nodeType === 1 ) &&                                                                             // 1778
										++diff ) {                                                                                           // 1779
                                                                                                               // 1780
										// Cache the index of each encountered element                                                       // 1781
										if ( useCache ) {                                                                                    // 1782
											outerCache = node[ expando ] || (node[ expando ] = {});                                             // 1783
                                                                                                               // 1784
											// Support: IE <9 only                                                                              // 1785
											// Defend against cloned attroperties (jQuery gh-1709)                                              // 1786
											uniqueCache = outerCache[ node.uniqueID ] ||                                                        // 1787
												(outerCache[ node.uniqueID ] = {});                                                                // 1788
                                                                                                               // 1789
											uniqueCache[ type ] = [ dirruns, diff ];                                                            // 1790
										}                                                                                                    // 1791
                                                                                                               // 1792
										if ( node === elem ) {                                                                               // 1793
											break;                                                                                              // 1794
										}                                                                                                    // 1795
									}                                                                                                     // 1796
								}                                                                                                      // 1797
							}                                                                                                       // 1798
						}                                                                                                        // 1799
                                                                                                               // 1800
						// Incorporate the offset, then check against cycle size                                                 // 1801
						diff -= last;                                                                                            // 1802
						return diff === first || ( diff % first === 0 && diff / first >= 0 );                                    // 1803
					}                                                                                                         // 1804
				};                                                                                                         // 1805
		},                                                                                                           // 1806
                                                                                                               // 1807
		"PSEUDO": function( pseudo, argument ) {                                                                     // 1808
			// pseudo-class names are case-insensitive                                                                  // 1809
			// http://www.w3.org/TR/selectors/#pseudo-classes                                                           // 1810
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters                   // 1811
			// Remember that setFilters inherits from pseudos                                                           // 1812
			var args,                                                                                                   // 1813
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||                                  // 1814
					Sizzle.error( "unsupported pseudo: " + pseudo );                                                          // 1815
                                                                                                               // 1816
			// The user may use createPseudo to indicate that                                                           // 1817
			// arguments are needed to create the filter function                                                       // 1818
			// just as Sizzle does                                                                                      // 1819
			if ( fn[ expando ] ) {                                                                                      // 1820
				return fn( argument );                                                                                     // 1821
			}                                                                                                           // 1822
                                                                                                               // 1823
			// But maintain support for old signatures                                                                  // 1824
			if ( fn.length > 1 ) {                                                                                      // 1825
				args = [ pseudo, pseudo, "", argument ];                                                                   // 1826
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?                                            // 1827
					markFunction(function( seed, matches ) {                                                                  // 1828
						var idx,                                                                                                 // 1829
							matched = fn( seed, argument ),                                                                         // 1830
							i = matched.length;                                                                                     // 1831
						while ( i-- ) {                                                                                          // 1832
							idx = indexOf( seed, matched[i] );                                                                      // 1833
							seed[ idx ] = !( matches[ idx ] = matched[i] );                                                         // 1834
						}                                                                                                        // 1835
					}) :                                                                                                      // 1836
					function( elem ) {                                                                                        // 1837
						return fn( elem, 0, args );                                                                              // 1838
					};                                                                                                        // 1839
			}                                                                                                           // 1840
                                                                                                               // 1841
			return fn;                                                                                                  // 1842
		}                                                                                                            // 1843
	},                                                                                                            // 1844
                                                                                                               // 1845
	pseudos: {                                                                                                    // 1846
		// Potentially complex pseudos                                                                               // 1847
		"not": markFunction(function( selector ) {                                                                   // 1848
			// Trim the selector passed to compile                                                                      // 1849
			// to avoid treating leading and trailing                                                                   // 1850
			// spaces as combinators                                                                                    // 1851
			var input = [],                                                                                             // 1852
				results = [],                                                                                              // 1853
				matcher = compile( selector.replace( rtrim, "$1" ) );                                                      // 1854
                                                                                                               // 1855
			return matcher[ expando ] ?                                                                                 // 1856
				markFunction(function( seed, matches, context, xml ) {                                                     // 1857
					var elem,                                                                                                 // 1858
						unmatched = matcher( seed, null, xml, [] ),                                                              // 1859
						i = seed.length;                                                                                         // 1860
                                                                                                               // 1861
					// Match elements unmatched by `matcher`                                                                  // 1862
					while ( i-- ) {                                                                                           // 1863
						if ( (elem = unmatched[i]) ) {                                                                           // 1864
							seed[i] = !(matches[i] = elem);                                                                         // 1865
						}                                                                                                        // 1866
					}                                                                                                         // 1867
				}) :                                                                                                       // 1868
				function( elem, context, xml ) {                                                                           // 1869
					input[0] = elem;                                                                                          // 1870
					matcher( input, null, xml, results );                                                                     // 1871
					// Don't keep the element (issue #299)                                                                    // 1872
					input[0] = null;                                                                                          // 1873
					return !results.pop();                                                                                    // 1874
				};                                                                                                         // 1875
		}),                                                                                                          // 1876
                                                                                                               // 1877
		"has": markFunction(function( selector ) {                                                                   // 1878
			return function( elem ) {                                                                                   // 1879
				return Sizzle( selector, elem ).length > 0;                                                                // 1880
			};                                                                                                          // 1881
		}),                                                                                                          // 1882
                                                                                                               // 1883
		"contains": markFunction(function( text ) {                                                                  // 1884
			text = text.replace( runescape, funescape );                                                                // 1885
			return function( elem ) {                                                                                   // 1886
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;                     // 1887
			};                                                                                                          // 1888
		}),                                                                                                          // 1889
                                                                                                               // 1890
		// "Whether an element is represented by a :lang() selector                                                  // 1891
		// is based solely on the element's language value                                                           // 1892
		// being equal to the identifier C,                                                                          // 1893
		// or beginning with the identifier C immediately followed by "-".                                           // 1894
		// The matching of C against the element's language value is performed case-insensitively.                   // 1895
		// The identifier C does not have to be a valid language name."                                              // 1896
		// http://www.w3.org/TR/selectors/#lang-pseudo                                                               // 1897
		"lang": markFunction( function( lang ) {                                                                     // 1898
			// lang value must be a valid identifier                                                                    // 1899
			if ( !ridentifier.test(lang || "") ) {                                                                      // 1900
				Sizzle.error( "unsupported lang: " + lang );                                                               // 1901
			}                                                                                                           // 1902
			lang = lang.replace( runescape, funescape ).toLowerCase();                                                  // 1903
			return function( elem ) {                                                                                   // 1904
				var elemLang;                                                                                              // 1905
				do {                                                                                                       // 1906
					if ( (elemLang = documentIsHTML ?                                                                         // 1907
						elem.lang :                                                                                              // 1908
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {                                          // 1909
                                                                                                               // 1910
						elemLang = elemLang.toLowerCase();                                                                       // 1911
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;                                        // 1912
					}                                                                                                         // 1913
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );                                               // 1914
				return false;                                                                                              // 1915
			};                                                                                                          // 1916
		}),                                                                                                          // 1917
                                                                                                               // 1918
		// Miscellaneous                                                                                             // 1919
		"target": function( elem ) {                                                                                 // 1920
			var hash = window.location && window.location.hash;                                                         // 1921
			return hash && hash.slice( 1 ) === elem.id;                                                                 // 1922
		},                                                                                                           // 1923
                                                                                                               // 1924
		"root": function( elem ) {                                                                                   // 1925
			return elem === docElem;                                                                                    // 1926
		},                                                                                                           // 1927
                                                                                                               // 1928
		"focus": function( elem ) {                                                                                  // 1929
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},                                                                                                           // 1931
                                                                                                               // 1932
		// Boolean properties                                                                                        // 1933
		"enabled": function( elem ) {                                                                                // 1934
			return elem.disabled === false;                                                                             // 1935
		},                                                                                                           // 1936
                                                                                                               // 1937
		"disabled": function( elem ) {                                                                               // 1938
			return elem.disabled === true;                                                                              // 1939
		},                                                                                                           // 1940
                                                                                                               // 1941
		"checked": function( elem ) {                                                                                // 1942
			// In CSS3, :checked should return both checked and selected elements                                       // 1943
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked                                           // 1944
			var nodeName = elem.nodeName.toLowerCase();                                                                 // 1945
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);              // 1946
		},                                                                                                           // 1947
                                                                                                               // 1948
		"selected": function( elem ) {                                                                               // 1949
			// Accessing this property makes selected-by-default                                                        // 1950
			// options in Safari work properly                                                                          // 1951
			if ( elem.parentNode ) {                                                                                    // 1952
				elem.parentNode.selectedIndex;                                                                             // 1953
			}                                                                                                           // 1954
                                                                                                               // 1955
			return elem.selected === true;                                                                              // 1956
		},                                                                                                           // 1957
                                                                                                               // 1958
		// Contents                                                                                                  // 1959
		"empty": function( elem ) {                                                                                  // 1960
			// http://www.w3.org/TR/selectors/#empty-pseudo                                                             // 1961
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),                    // 1962
			//   but not by others (comment: 8; processing instruction: 7; etc.)                                        // 1963
			// nodeType < 6 works because attributes (2) do not appear as children                                      // 1964
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {                                             // 1965
				if ( elem.nodeType < 6 ) {                                                                                 // 1966
					return false;                                                                                             // 1967
				}                                                                                                          // 1968
			}                                                                                                           // 1969
			return true;                                                                                                // 1970
		},                                                                                                           // 1971
                                                                                                               // 1972
		"parent": function( elem ) {                                                                                 // 1973
			return !Expr.pseudos["empty"]( elem );                                                                      // 1974
		},                                                                                                           // 1975
                                                                                                               // 1976
		// Element/input types                                                                                       // 1977
		"header": function( elem ) {                                                                                 // 1978
			return rheader.test( elem.nodeName );                                                                       // 1979
		},                                                                                                           // 1980
                                                                                                               // 1981
		"input": function( elem ) {                                                                                  // 1982
			return rinputs.test( elem.nodeName );                                                                       // 1983
		},                                                                                                           // 1984
                                                                                                               // 1985
		"button": function( elem ) {                                                                                 // 1986
			var name = elem.nodeName.toLowerCase();                                                                     // 1987
			return name === "input" && elem.type === "button" || name === "button";                                     // 1988
		},                                                                                                           // 1989
                                                                                                               // 1990
		"text": function( elem ) {                                                                                   // 1991
			var attr;                                                                                                   // 1992
			return elem.nodeName.toLowerCase() === "input" &&                                                           // 1993
				elem.type === "text" &&                                                                                    // 1994
                                                                                                               // 1995
				// Support: IE<8                                                                                           // 1996
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"                            // 1997
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );                           // 1998
		},                                                                                                           // 1999
                                                                                                               // 2000
		// Position-in-collection                                                                                    // 2001
		"first": createPositionalPseudo(function() {                                                                 // 2002
			return [ 0 ];                                                                                               // 2003
		}),                                                                                                          // 2004
                                                                                                               // 2005
		"last": createPositionalPseudo(function( matchIndexes, length ) {                                            // 2006
			return [ length - 1 ];                                                                                      // 2007
		}),                                                                                                          // 2008
                                                                                                               // 2009
		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {                                    // 2010
			return [ argument < 0 ? argument + length : argument ];                                                     // 2011
		}),                                                                                                          // 2012
                                                                                                               // 2013
		"even": createPositionalPseudo(function( matchIndexes, length ) {                                            // 2014
			var i = 0;                                                                                                  // 2015
			for ( ; i < length; i += 2 ) {                                                                              // 2016
				matchIndexes.push( i );                                                                                    // 2017
			}                                                                                                           // 2018
			return matchIndexes;                                                                                        // 2019
		}),                                                                                                          // 2020
                                                                                                               // 2021
		"odd": createPositionalPseudo(function( matchIndexes, length ) {                                             // 2022
			var i = 1;                                                                                                  // 2023
			for ( ; i < length; i += 2 ) {                                                                              // 2024
				matchIndexes.push( i );                                                                                    // 2025
			}                                                                                                           // 2026
			return matchIndexes;                                                                                        // 2027
		}),                                                                                                          // 2028
                                                                                                               // 2029
		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {                                    // 2030
			var i = argument < 0 ? argument + length : argument;                                                        // 2031
			for ( ; --i >= 0; ) {                                                                                       // 2032
				matchIndexes.push( i );                                                                                    // 2033
			}                                                                                                           // 2034
			return matchIndexes;                                                                                        // 2035
		}),                                                                                                          // 2036
                                                                                                               // 2037
		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {                                    // 2038
			var i = argument < 0 ? argument + length : argument;                                                        // 2039
			for ( ; ++i < length; ) {                                                                                   // 2040
				matchIndexes.push( i );                                                                                    // 2041
			}                                                                                                           // 2042
			return matchIndexes;                                                                                        // 2043
		})                                                                                                           // 2044
	}                                                                                                             // 2045
};                                                                                                             // 2046
                                                                                                               // 2047
Expr.pseudos["nth"] = Expr.pseudos["eq"];                                                                      // 2048
                                                                                                               // 2049
// Add button/input type pseudos                                                                               // 2050
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {                        // 2051
	Expr.pseudos[ i ] = createInputPseudo( i );                                                                   // 2052
}                                                                                                              // 2053
for ( i in { submit: true, reset: true } ) {                                                                   // 2054
	Expr.pseudos[ i ] = createButtonPseudo( i );                                                                  // 2055
}                                                                                                              // 2056
                                                                                                               // 2057
// Easy API for creating new setFilters                                                                        // 2058
function setFilters() {}                                                                                       // 2059
setFilters.prototype = Expr.filters = Expr.pseudos;                                                            // 2060
Expr.setFilters = new setFilters();                                                                            // 2061
                                                                                                               // 2062
tokenize = Sizzle.tokenize = function( selector, parseOnly ) {                                                 // 2063
	var matched, match, tokens, type,                                                                             // 2064
		soFar, groups, preFilters,                                                                                   // 2065
		cached = tokenCache[ selector + " " ];                                                                       // 2066
                                                                                                               // 2067
	if ( cached ) {                                                                                               // 2068
		return parseOnly ? 0 : cached.slice( 0 );                                                                    // 2069
	}                                                                                                             // 2070
                                                                                                               // 2071
	soFar = selector;                                                                                             // 2072
	groups = [];                                                                                                  // 2073
	preFilters = Expr.preFilter;                                                                                  // 2074
                                                                                                               // 2075
	while ( soFar ) {                                                                                             // 2076
                                                                                                               // 2077
		// Comma and first run                                                                                       // 2078
		if ( !matched || (match = rcomma.exec( soFar )) ) {                                                          // 2079
			if ( match ) {                                                                                              // 2080
				// Don't consume trailing commas as valid                                                                  // 2081
				soFar = soFar.slice( match[0].length ) || soFar;                                                           // 2082
			}                                                                                                           // 2083
			groups.push( (tokens = []) );                                                                               // 2084
		}                                                                                                            // 2085
                                                                                                               // 2086
		matched = false;                                                                                             // 2087
                                                                                                               // 2088
		// Combinators                                                                                               // 2089
		if ( (match = rcombinators.exec( soFar )) ) {                                                                // 2090
			matched = match.shift();                                                                                    // 2091
			tokens.push({                                                                                               // 2092
				value: matched,                                                                                            // 2093
				// Cast descendant combinators to space                                                                    // 2094
				type: match[0].replace( rtrim, " " )                                                                       // 2095
			});                                                                                                         // 2096
			soFar = soFar.slice( matched.length );                                                                      // 2097
		}                                                                                                            // 2098
                                                                                                               // 2099
		// Filters                                                                                                   // 2100
		for ( type in Expr.filter ) {                                                                                // 2101
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||                                   // 2102
				(match = preFilters[ type ]( match ))) ) {                                                                 // 2103
				matched = match.shift();                                                                                   // 2104
				tokens.push({                                                                                              // 2105
					value: matched,                                                                                           // 2106
					type: type,                                                                                               // 2107
					matches: match                                                                                            // 2108
				});                                                                                                        // 2109
				soFar = soFar.slice( matched.length );                                                                     // 2110
			}                                                                                                           // 2111
		}                                                                                                            // 2112
                                                                                                               // 2113
		if ( !matched ) {                                                                                            // 2114
			break;                                                                                                      // 2115
		}                                                                                                            // 2116
	}                                                                                                             // 2117
                                                                                                               // 2118
	// Return the length of the invalid excess                                                                    // 2119
	// if we're just parsing                                                                                      // 2120
	// Otherwise, throw an error or return tokens                                                                 // 2121
	return parseOnly ?                                                                                            // 2122
		soFar.length :                                                                                               // 2123
		soFar ?                                                                                                      // 2124
			Sizzle.error( selector ) :                                                                                  // 2125
			// Cache the tokens                                                                                         // 2126
			tokenCache( selector, groups ).slice( 0 );                                                                  // 2127
};                                                                                                             // 2128
                                                                                                               // 2129
function toSelector( tokens ) {                                                                                // 2130
	var i = 0,                                                                                                    // 2131
		len = tokens.length,                                                                                         // 2132
		selector = "";                                                                                               // 2133
	for ( ; i < len; i++ ) {                                                                                      // 2134
		selector += tokens[i].value;                                                                                 // 2135
	}                                                                                                             // 2136
	return selector;                                                                                              // 2137
}                                                                                                              // 2138
                                                                                                               // 2139
function addCombinator( matcher, combinator, base ) {                                                          // 2140
	var dir = combinator.dir,                                                                                     // 2141
		checkNonElements = base && dir === "parentNode",                                                             // 2142
		doneName = done++;                                                                                           // 2143
                                                                                                               // 2144
	return combinator.first ?                                                                                     // 2145
		// Check against closest ancestor/preceding element                                                          // 2146
		function( elem, context, xml ) {                                                                             // 2147
			while ( (elem = elem[ dir ]) ) {                                                                            // 2148
				if ( elem.nodeType === 1 || checkNonElements ) {                                                           // 2149
					return matcher( elem, context, xml );                                                                     // 2150
				}                                                                                                          // 2151
			}                                                                                                           // 2152
		} :                                                                                                          // 2153
                                                                                                               // 2154
		// Check against all ancestor/preceding elements                                                             // 2155
		function( elem, context, xml ) {                                                                             // 2156
			var oldCache, uniqueCache, outerCache,                                                                      // 2157
				newCache = [ dirruns, doneName ];                                                                          // 2158
                                                                                                               // 2159
			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching                  // 2160
			if ( xml ) {                                                                                                // 2161
				while ( (elem = elem[ dir ]) ) {                                                                           // 2162
					if ( elem.nodeType === 1 || checkNonElements ) {                                                          // 2163
						if ( matcher( elem, context, xml ) ) {                                                                   // 2164
							return true;                                                                                            // 2165
						}                                                                                                        // 2166
					}                                                                                                         // 2167
				}                                                                                                          // 2168
			} else {                                                                                                    // 2169
				while ( (elem = elem[ dir ]) ) {                                                                           // 2170
					if ( elem.nodeType === 1 || checkNonElements ) {                                                          // 2171
						outerCache = elem[ expando ] || (elem[ expando ] = {});                                                  // 2172
                                                                                                               // 2173
						// Support: IE <9 only                                                                                   // 2174
						// Defend against cloned attroperties (jQuery gh-1709)                                                   // 2175
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});                         // 2176
                                                                                                               // 2177
						if ( (oldCache = uniqueCache[ dir ]) &&                                                                  // 2178
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {                                             // 2179
                                                                                                               // 2180
							// Assign to newCache so results back-propagate to previous elements                                    // 2181
							return (newCache[ 2 ] = oldCache[ 2 ]);                                                                 // 2182
						} else {                                                                                                 // 2183
							// Reuse newcache so results back-propagate to previous elements                                        // 2184
							uniqueCache[ dir ] = newCache;                                                                          // 2185
                                                                                                               // 2186
							// A match means we're done; a fail means we have to keep checking                                      // 2187
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {                                                // 2188
								return true;                                                                                           // 2189
							}                                                                                                       // 2190
						}                                                                                                        // 2191
					}                                                                                                         // 2192
				}                                                                                                          // 2193
			}                                                                                                           // 2194
		};                                                                                                           // 2195
}                                                                                                              // 2196
                                                                                                               // 2197
function elementMatcher( matchers ) {                                                                          // 2198
	return matchers.length > 1 ?                                                                                  // 2199
		function( elem, context, xml ) {                                                                             // 2200
			var i = matchers.length;                                                                                    // 2201
			while ( i-- ) {                                                                                             // 2202
				if ( !matchers[i]( elem, context, xml ) ) {                                                                // 2203
					return false;                                                                                             // 2204
				}                                                                                                          // 2205
			}                                                                                                           // 2206
			return true;                                                                                                // 2207
		} :                                                                                                          // 2208
		matchers[0];                                                                                                 // 2209
}                                                                                                              // 2210
                                                                                                               // 2211
function multipleContexts( selector, contexts, results ) {                                                     // 2212
	var i = 0,                                                                                                    // 2213
		len = contexts.length;                                                                                       // 2214
	for ( ; i < len; i++ ) {                                                                                      // 2215
		Sizzle( selector, contexts[i], results );                                                                    // 2216
	}                                                                                                             // 2217
	return results;                                                                                               // 2218
}                                                                                                              // 2219
                                                                                                               // 2220
function condense( unmatched, map, filter, context, xml ) {                                                    // 2221
	var elem,                                                                                                     // 2222
		newUnmatched = [],                                                                                           // 2223
		i = 0,                                                                                                       // 2224
		len = unmatched.length,                                                                                      // 2225
		mapped = map != null;                                                                                        // 2226
                                                                                                               // 2227
	for ( ; i < len; i++ ) {                                                                                      // 2228
		if ( (elem = unmatched[i]) ) {                                                                               // 2229
			if ( !filter || filter( elem, context, xml ) ) {                                                            // 2230
				newUnmatched.push( elem );                                                                                 // 2231
				if ( mapped ) {                                                                                            // 2232
					map.push( i );                                                                                            // 2233
				}                                                                                                          // 2234
			}                                                                                                           // 2235
		}                                                                                                            // 2236
	}                                                                                                             // 2237
                                                                                                               // 2238
	return newUnmatched;                                                                                          // 2239
}                                                                                                              // 2240
                                                                                                               // 2241
function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {                    // 2242
	if ( postFilter && !postFilter[ expando ] ) {                                                                 // 2243
		postFilter = setMatcher( postFilter );                                                                       // 2244
	}                                                                                                             // 2245
	if ( postFinder && !postFinder[ expando ] ) {                                                                 // 2246
		postFinder = setMatcher( postFinder, postSelector );                                                         // 2247
	}                                                                                                             // 2248
	return markFunction(function( seed, results, context, xml ) {                                                 // 2249
		var temp, i, elem,                                                                                           // 2250
			preMap = [],                                                                                                // 2251
			postMap = [],                                                                                               // 2252
			preexisting = results.length,                                                                               // 2253
                                                                                                               // 2254
			// Get initial elements from seed or context                                                                // 2255
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),          // 2256
                                                                                                               // 2257
			// Prefilter to get matcher input, preserving a map for seed-results synchronization                        // 2258
			matcherIn = preFilter && ( seed || !selector ) ?                                                            // 2259
				condense( elems, preMap, preFilter, context, xml ) :                                                       // 2260
				elems,                                                                                                     // 2261
                                                                                                               // 2262
			matcherOut = matcher ?                                                                                      // 2263
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,               // 2264
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?                                           // 2265
                                                                                                               // 2266
					// ...intermediate processing is necessary                                                                // 2267
					[] :                                                                                                      // 2268
                                                                                                               // 2269
					// ...otherwise use results directly                                                                      // 2270
					results :                                                                                                 // 2271
				matcherIn;                                                                                                 // 2272
                                                                                                               // 2273
		// Find primary matches                                                                                      // 2274
		if ( matcher ) {                                                                                             // 2275
			matcher( matcherIn, matcherOut, context, xml );                                                             // 2276
		}                                                                                                            // 2277
                                                                                                               // 2278
		// Apply postFilter                                                                                          // 2279
		if ( postFilter ) {                                                                                          // 2280
			temp = condense( matcherOut, postMap );                                                                     // 2281
			postFilter( temp, [], context, xml );                                                                       // 2282
                                                                                                               // 2283
			// Un-match failing elements by moving them back to matcherIn                                               // 2284
			i = temp.length;                                                                                            // 2285
			while ( i-- ) {                                                                                             // 2286
				if ( (elem = temp[i]) ) {                                                                                  // 2287
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);                                             // 2288
				}                                                                                                          // 2289
			}                                                                                                           // 2290
		}                                                                                                            // 2291
                                                                                                               // 2292
		if ( seed ) {                                                                                                // 2293
			if ( postFinder || preFilter ) {                                                                            // 2294
				if ( postFinder ) {                                                                                        // 2295
					// Get the final matcherOut by condensing this intermediate into postFinder contexts                      // 2296
					temp = [];                                                                                                // 2297
					i = matcherOut.length;                                                                                    // 2298
					while ( i-- ) {                                                                                           // 2299
						if ( (elem = matcherOut[i]) ) {                                                                          // 2300
							// Restore matcherIn since elem is not yet a final match                                                // 2301
							temp.push( (matcherIn[i] = elem) );                                                                     // 2302
						}                                                                                                        // 2303
					}                                                                                                         // 2304
					postFinder( null, (matcherOut = []), temp, xml );                                                         // 2305
				}                                                                                                          // 2306
                                                                                                               // 2307
				// Move matched elements from seed to results to keep them synchronized                                    // 2308
				i = matcherOut.length;                                                                                     // 2309
				while ( i-- ) {                                                                                            // 2310
					if ( (elem = matcherOut[i]) &&                                                                            // 2311
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {                                         // 2312
                                                                                                               // 2313
						seed[temp] = !(results[temp] = elem);                                                                    // 2314
					}                                                                                                         // 2315
				}                                                                                                          // 2316
			}                                                                                                           // 2317
                                                                                                               // 2318
		// Add elements to results, through postFinder if defined                                                    // 2319
		} else {                                                                                                     // 2320
			matcherOut = condense(                                                                                      // 2321
				matcherOut === results ?                                                                                   // 2322
					matcherOut.splice( preexisting, matcherOut.length ) :                                                     // 2323
					matcherOut                                                                                                // 2324
			);                                                                                                          // 2325
			if ( postFinder ) {                                                                                         // 2326
				postFinder( null, results, matcherOut, xml );                                                              // 2327
			} else {                                                                                                    // 2328
				push.apply( results, matcherOut );                                                                         // 2329
			}                                                                                                           // 2330
		}                                                                                                            // 2331
	});                                                                                                           // 2332
}                                                                                                              // 2333
                                                                                                               // 2334
function matcherFromTokens( tokens ) {                                                                         // 2335
	var checkContext, matcher, j,                                                                                 // 2336
		len = tokens.length,                                                                                         // 2337
		leadingRelative = Expr.relative[ tokens[0].type ],                                                           // 2338
		implicitRelative = leadingRelative || Expr.relative[" "],                                                    // 2339
		i = leadingRelative ? 1 : 0,                                                                                 // 2340
                                                                                                               // 2341
		// The foundational matcher ensures that elements are reachable from top-level context(s)                    // 2342
		matchContext = addCombinator( function( elem ) {                                                             // 2343
			return elem === checkContext;                                                                               // 2344
		}, implicitRelative, true ),                                                                                 // 2345
		matchAnyContext = addCombinator( function( elem ) {                                                          // 2346
			return indexOf( checkContext, elem ) > -1;                                                                  // 2347
		}, implicitRelative, true ),                                                                                 // 2348
		matchers = [ function( elem, context, xml ) {                                                                // 2349
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (                              // 2350
				(checkContext = context).nodeType ?                                                                        // 2351
					matchContext( elem, context, xml ) :                                                                      // 2352
					matchAnyContext( elem, context, xml ) );                                                                  // 2353
			// Avoid hanging onto element (issue #299)                                                                  // 2354
			checkContext = null;                                                                                        // 2355
			return ret;                                                                                                 // 2356
		} ];                                                                                                         // 2357
                                                                                                               // 2358
	for ( ; i < len; i++ ) {                                                                                      // 2359
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {                                                         // 2360
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];                                          // 2361
		} else {                                                                                                     // 2362
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );                                   // 2363
                                                                                                               // 2364
			// Return special upon seeing a positional matcher                                                          // 2365
			if ( matcher[ expando ] ) {                                                                                 // 2366
				// Find the next relative operator (if any) for proper handling                                            // 2367
				j = ++i;                                                                                                   // 2368
				for ( ; j < len; j++ ) {                                                                                   // 2369
					if ( Expr.relative[ tokens[j].type ] ) {                                                                  // 2370
						break;                                                                                                   // 2371
					}                                                                                                         // 2372
				}                                                                                                          // 2373
				return setMatcher(                                                                                         // 2374
					i > 1 && elementMatcher( matchers ),                                                                      // 2375
					i > 1 && toSelector(                                                                                      // 2376
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`                // 2377
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })                      // 2378
					).replace( rtrim, "$1" ),                                                                                 // 2379
					matcher,                                                                                                  // 2380
					i < j && matcherFromTokens( tokens.slice( i, j ) ),                                                       // 2381
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),                                             // 2382
					j < len && toSelector( tokens )                                                                           // 2383
				);                                                                                                         // 2384
			}                                                                                                           // 2385
			matchers.push( matcher );                                                                                   // 2386
		}                                                                                                            // 2387
	}                                                                                                             // 2388
                                                                                                               // 2389
	return elementMatcher( matchers );                                                                            // 2390
}                                                                                                              // 2391
                                                                                                               // 2392
function matcherFromGroupMatchers( elementMatchers, setMatchers ) {                                            // 2393
	var bySet = setMatchers.length > 0,                                                                           // 2394
		byElement = elementMatchers.length > 0,                                                                      // 2395
		superMatcher = function( seed, context, xml, results, outermost ) {                                          // 2396
			var elem, j, matcher,                                                                                       // 2397
				matchedCount = 0,                                                                                          // 2398
				i = "0",                                                                                                   // 2399
				unmatched = seed && [],                                                                                    // 2400
				setMatched = [],                                                                                           // 2401
				contextBackup = outermostContext,                                                                          // 2402
				// We must always have either seed elements or outermost context                                           // 2403
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),                                           // 2404
				// Use integer dirruns iff this is the outermost matcher                                                   // 2405
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),                             // 2406
				len = elems.length;                                                                                        // 2407
                                                                                                               // 2408
			if ( outermost ) {                                                                                          // 2409
				outermostContext = context === document || context || outermost;                                           // 2410
			}                                                                                                           // 2411
                                                                                                               // 2412
			// Add elements passing elementMatchers directly to results                                                 // 2413
			// Support: IE<9, Safari                                                                                    // 2414
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id                    // 2415
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {                                                     // 2416
				if ( byElement && elem ) {                                                                                 // 2417
					j = 0;                                                                                                    // 2418
					if ( !context && elem.ownerDocument !== document ) {                                                      // 2419
						setDocument( elem );                                                                                     // 2420
						xml = !documentIsHTML;                                                                                   // 2421
					}                                                                                                         // 2422
					while ( (matcher = elementMatchers[j++]) ) {                                                              // 2423
						if ( matcher( elem, context || document, xml) ) {                                                        // 2424
							results.push( elem );                                                                                   // 2425
							break;                                                                                                  // 2426
						}                                                                                                        // 2427
					}                                                                                                         // 2428
					if ( outermost ) {                                                                                        // 2429
						dirruns = dirrunsUnique;                                                                                 // 2430
					}                                                                                                         // 2431
				}                                                                                                          // 2432
                                                                                                               // 2433
				// Track unmatched elements for set filters                                                                // 2434
				if ( bySet ) {                                                                                             // 2435
					// They will have gone through all possible matchers                                                      // 2436
					if ( (elem = !matcher && elem) ) {                                                                        // 2437
						matchedCount--;                                                                                          // 2438
					}                                                                                                         // 2439
                                                                                                               // 2440
					// Lengthen the array for every element, matched or not                                                   // 2441
					if ( seed ) {                                                                                             // 2442
						unmatched.push( elem );                                                                                  // 2443
					}                                                                                                         // 2444
				}                                                                                                          // 2445
			}                                                                                                           // 2446
                                                                                                               // 2447
			// `i` is now the count of elements visited above, and adding it to `matchedCount`                          // 2448
			// makes the latter nonnegative.                                                                            // 2449
			matchedCount += i;                                                                                          // 2450
                                                                                                               // 2451
			// Apply set filters to unmatched elements                                                                  // 2452
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`                       // 2453
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have                     // 2454
			// no element matchers and no seed.                                                                         // 2455
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that                      // 2456
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also                       // 2457
			// numerically zero.                                                                                        // 2458
			if ( bySet && i !== matchedCount ) {                                                                        // 2459
				j = 0;                                                                                                     // 2460
				while ( (matcher = setMatchers[j++]) ) {                                                                   // 2461
					matcher( unmatched, setMatched, context, xml );                                                           // 2462
				}                                                                                                          // 2463
                                                                                                               // 2464
				if ( seed ) {                                                                                              // 2465
					// Reintegrate element matches to eliminate the need for sorting                                          // 2466
					if ( matchedCount > 0 ) {                                                                                 // 2467
						while ( i-- ) {                                                                                          // 2468
							if ( !(unmatched[i] || setMatched[i]) ) {                                                               // 2469
								setMatched[i] = pop.call( results );                                                                   // 2470
							}                                                                                                       // 2471
						}                                                                                                        // 2472
					}                                                                                                         // 2473
                                                                                                               // 2474
					// Discard index placeholder values to get only actual matches                                            // 2475
					setMatched = condense( setMatched );                                                                      // 2476
				}                                                                                                          // 2477
                                                                                                               // 2478
				// Add matches to results                                                                                  // 2479
				push.apply( results, setMatched );                                                                         // 2480
                                                                                                               // 2481
				// Seedless set matches succeeding multiple successful matchers stipulate sorting                          // 2482
				if ( outermost && !seed && setMatched.length > 0 &&                                                        // 2483
					( matchedCount + setMatchers.length ) > 1 ) {                                                             // 2484
                                                                                                               // 2485
					Sizzle.uniqueSort( results );                                                                             // 2486
				}                                                                                                          // 2487
			}                                                                                                           // 2488
                                                                                                               // 2489
			// Override manipulation of globals by nested matchers                                                      // 2490
			if ( outermost ) {                                                                                          // 2491
				dirruns = dirrunsUnique;                                                                                   // 2492
				outermostContext = contextBackup;                                                                          // 2493
			}                                                                                                           // 2494
                                                                                                               // 2495
			return unmatched;                                                                                           // 2496
		};                                                                                                           // 2497
                                                                                                               // 2498
	return bySet ?                                                                                                // 2499
		markFunction( superMatcher ) :                                                                               // 2500
		superMatcher;                                                                                                // 2501
}                                                                                                              // 2502
                                                                                                               // 2503
compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {                               // 2504
	var i,                                                                                                        // 2505
		setMatchers = [],                                                                                            // 2506
		elementMatchers = [],                                                                                        // 2507
		cached = compilerCache[ selector + " " ];                                                                    // 2508
                                                                                                               // 2509
	if ( !cached ) {                                                                                              // 2510
		// Generate a function of recursive functions that can be used to check each element                         // 2511
		if ( !match ) {                                                                                              // 2512
			match = tokenize( selector );                                                                               // 2513
		}                                                                                                            // 2514
		i = match.length;                                                                                            // 2515
		while ( i-- ) {                                                                                              // 2516
			cached = matcherFromTokens( match[i] );                                                                     // 2517
			if ( cached[ expando ] ) {                                                                                  // 2518
				setMatchers.push( cached );                                                                                // 2519
			} else {                                                                                                    // 2520
				elementMatchers.push( cached );                                                                            // 2521
			}                                                                                                           // 2522
		}                                                                                                            // 2523
                                                                                                               // 2524
		// Cache the compiled function                                                                               // 2525
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );                // 2526
                                                                                                               // 2527
		// Save selector and tokenization                                                                            // 2528
		cached.selector = selector;                                                                                  // 2529
	}                                                                                                             // 2530
	return cached;                                                                                                // 2531
};                                                                                                             // 2532
                                                                                                               // 2533
/**                                                                                                            // 2534
 * A low-level selection function that works with Sizzle's compiled                                            // 2535
 *  selector functions                                                                                         // 2536
 * @param {String|Function} selector A selector or a pre-compiled                                              // 2537
 *  selector function built with Sizzle.compile                                                                // 2538
 * @param {Element} context                                                                                    // 2539
 * @param {Array} [results]                                                                                    // 2540
 * @param {Array} [seed] A set of elements to match against                                                    // 2541
 */                                                                                                            // 2542
select = Sizzle.select = function( selector, context, results, seed ) {                                        // 2543
	var i, tokens, token, type, find,                                                                             // 2544
		compiled = typeof selector === "function" && selector,                                                       // 2545
		match = !seed && tokenize( (selector = compiled.selector || selector) );                                     // 2546
                                                                                                               // 2547
	results = results || [];                                                                                      // 2548
                                                                                                               // 2549
	// Try to minimize operations if there is only one selector in the list and no seed                           // 2550
	// (the latter of which guarantees us context)                                                                // 2551
	if ( match.length === 1 ) {                                                                                   // 2552
                                                                                                               // 2553
		// Reduce context if the leading compound selector is an ID                                                  // 2554
		tokens = match[0] = match[0].slice( 0 );                                                                     // 2555
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&                                               // 2556
				support.getById && context.nodeType === 9 && documentIsHTML &&                                             // 2557
				Expr.relative[ tokens[1].type ] ) {                                                                        // 2558
                                                                                                               // 2559
			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];          // 2560
			if ( !context ) {                                                                                           // 2561
				return results;                                                                                            // 2562
                                                                                                               // 2563
			// Precompiled matchers will still verify ancestry, so step up a level                                      // 2564
			} else if ( compiled ) {                                                                                    // 2565
				context = context.parentNode;                                                                              // 2566
			}                                                                                                           // 2567
                                                                                                               // 2568
			selector = selector.slice( tokens.shift().value.length );                                                   // 2569
		}                                                                                                            // 2570
                                                                                                               // 2571
		// Fetch a seed set for right-to-left matching                                                               // 2572
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;                                          // 2573
		while ( i-- ) {                                                                                              // 2574
			token = tokens[i];                                                                                          // 2575
                                                                                                               // 2576
			// Abort if we hit a combinator                                                                             // 2577
			if ( Expr.relative[ (type = token.type) ] ) {                                                               // 2578
				break;                                                                                                     // 2579
			}                                                                                                           // 2580
			if ( (find = Expr.find[ type ]) ) {                                                                         // 2581
				// Search, expanding context for leading sibling combinators                                               // 2582
				if ( (seed = find(                                                                                         // 2583
					token.matches[0].replace( runescape, funescape ),                                                         // 2584
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context                           // 2585
				)) ) {                                                                                                     // 2586
                                                                                                               // 2587
					// If seed is empty or no tokens remain, we can return early                                              // 2588
					tokens.splice( i, 1 );                                                                                    // 2589
					selector = seed.length && toSelector( tokens );                                                           // 2590
					if ( !selector ) {                                                                                        // 2591
						push.apply( results, seed );                                                                             // 2592
						return results;                                                                                          // 2593
					}                                                                                                         // 2594
                                                                                                               // 2595
					break;                                                                                                    // 2596
				}                                                                                                          // 2597
			}                                                                                                           // 2598
		}                                                                                                            // 2599
	}                                                                                                             // 2600
                                                                                                               // 2601
	// Compile and execute a filtering function if one is not provided                                            // 2602
	// Provide `match` to avoid retokenization if we modified the selector above                                  // 2603
	( compiled || compile( selector, match ) )(                                                                   // 2604
		seed,                                                                                                        // 2605
		context,                                                                                                     // 2606
		!documentIsHTML,                                                                                             // 2607
		results,                                                                                                     // 2608
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context                        // 2609
	);                                                                                                            // 2610
	return results;                                                                                               // 2611
};                                                                                                             // 2612
                                                                                                               // 2613
// One-time assignments                                                                                        // 2614
                                                                                                               // 2615
// Sort stability                                                                                              // 2616
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;                                 // 2617
                                                                                                               // 2618
// Support: Chrome 14-35+                                                                                      // 2619
// Always assume duplicates if they aren't passed to the comparison function                                   // 2620
support.detectDuplicates = !!hasDuplicate;                                                                     // 2621
                                                                                                               // 2622
// Initialize against the default document                                                                     // 2623
setDocument();                                                                                                 // 2624
                                                                                                               // 2625
// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)                                        // 2626
// Detached nodes confoundingly follow *each other*                                                            // 2627
support.sortDetached = assert(function( div1 ) {                                                               // 2628
	// Should return 1, but returns 4 (following)                                                                 // 2629
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;                                     // 2630
});                                                                                                            // 2631
                                                                                                               // 2632
// Support: IE<8                                                                                               // 2633
// Prevent attribute/property "interpolation"                                                                  // 2634
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx                                            // 2635
if ( !assert(function( div ) {                                                                                 // 2636
	div.innerHTML = "<a href='#'></a>";                                                                           // 2637
	return div.firstChild.getAttribute("href") === "#" ;                                                          // 2638
}) ) {                                                                                                         // 2639
	addHandle( "type|href|height|width", function( elem, name, isXML ) {                                          // 2640
		if ( !isXML ) {                                                                                              // 2641
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );                                    // 2642
		}                                                                                                            // 2643
	});                                                                                                           // 2644
}                                                                                                              // 2645
                                                                                                               // 2646
// Support: IE<9                                                                                               // 2647
// Use defaultValue in place of getAttribute("value")                                                          // 2648
if ( !support.attributes || !assert(function( div ) {                                                          // 2649
	div.innerHTML = "<input/>";                                                                                   // 2650
	div.firstChild.setAttribute( "value", "" );                                                                   // 2651
	return div.firstChild.getAttribute( "value" ) === "";                                                         // 2652
}) ) {                                                                                                         // 2653
	addHandle( "value", function( elem, name, isXML ) {                                                           // 2654
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {                                                   // 2655
			return elem.defaultValue;                                                                                   // 2656
		}                                                                                                            // 2657
	});                                                                                                           // 2658
}                                                                                                              // 2659
                                                                                                               // 2660
// Support: IE<9                                                                                               // 2661
// Use getAttributeNode to fetch booleans when getAttribute lies                                               // 2662
if ( !assert(function( div ) {                                                                                 // 2663
	return div.getAttribute("disabled") == null;                                                                  // 2664
}) ) {                                                                                                         // 2665
	addHandle( booleans, function( elem, name, isXML ) {                                                          // 2666
		var val;                                                                                                     // 2667
		if ( !isXML ) {                                                                                              // 2668
			return elem[ name ] === true ? name.toLowerCase() :                                                         // 2669
					(val = elem.getAttributeNode( name )) && val.specified ?                                                  // 2670
					val.value :                                                                                               // 2671
				null;                                                                                                      // 2672
		}                                                                                                            // 2673
	});                                                                                                           // 2674
}                                                                                                              // 2675
                                                                                                               // 2676
return Sizzle;                                                                                                 // 2677
                                                                                                               // 2678
})( window );                                                                                                  // 2679
                                                                                                               // 2680
                                                                                                               // 2681
                                                                                                               // 2682
jQuery.find = Sizzle;                                                                                          // 2683
jQuery.expr = Sizzle.selectors;                                                                                // 2684
jQuery.expr[ ":" ] = jQuery.expr.pseudos;                                                                      // 2685
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;                                                         // 2686
jQuery.text = Sizzle.getText;                                                                                  // 2687
jQuery.isXMLDoc = Sizzle.isXML;                                                                                // 2688
jQuery.contains = Sizzle.contains;                                                                             // 2689
                                                                                                               // 2690
                                                                                                               // 2691
                                                                                                               // 2692
var dir = function( elem, dir, until ) {                                                                       // 2693
	var matched = [],                                                                                             // 2694
		truncate = until !== undefined;                                                                              // 2695
                                                                                                               // 2696
	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {                                                     // 2697
		if ( elem.nodeType === 1 ) {                                                                                 // 2698
			if ( truncate && jQuery( elem ).is( until ) ) {                                                             // 2699
				break;                                                                                                     // 2700
			}                                                                                                           // 2701
			matched.push( elem );                                                                                       // 2702
		}                                                                                                            // 2703
	}                                                                                                             // 2704
	return matched;                                                                                               // 2705
};                                                                                                             // 2706
                                                                                                               // 2707
                                                                                                               // 2708
var siblings = function( n, elem ) {                                                                           // 2709
	var matched = [];                                                                                             // 2710
                                                                                                               // 2711
	for ( ; n; n = n.nextSibling ) {                                                                              // 2712
		if ( n.nodeType === 1 && n !== elem ) {                                                                      // 2713
			matched.push( n );                                                                                          // 2714
		}                                                                                                            // 2715
	}                                                                                                             // 2716
                                                                                                               // 2717
	return matched;                                                                                               // 2718
};                                                                                                             // 2719
                                                                                                               // 2720
                                                                                                               // 2721
var rneedsContext = jQuery.expr.match.needsContext;                                                            // 2722
                                                                                                               // 2723
var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );                                                          // 2724
                                                                                                               // 2725
                                                                                                               // 2726
                                                                                                               // 2727
var risSimple = /^.[^:#\[\.,]*$/;                                                                              // 2728
                                                                                                               // 2729
// Implement the identical functionality for filter and not                                                    // 2730
function winnow( elements, qualifier, not ) {                                                                  // 2731
	if ( jQuery.isFunction( qualifier ) ) {                                                                       // 2732
		return jQuery.grep( elements, function( elem, i ) {                                                          // 2733
			/* jshint -W018 */                                                                                          // 2734
			return !!qualifier.call( elem, i, elem ) !== not;                                                           // 2735
		} );                                                                                                         // 2736
                                                                                                               // 2737
	}                                                                                                             // 2738
                                                                                                               // 2739
	if ( qualifier.nodeType ) {                                                                                   // 2740
		return jQuery.grep( elements, function( elem ) {                                                             // 2741
			return ( elem === qualifier ) !== not;                                                                      // 2742
		} );                                                                                                         // 2743
                                                                                                               // 2744
	}                                                                                                             // 2745
                                                                                                               // 2746
	if ( typeof qualifier === "string" ) {                                                                        // 2747
		if ( risSimple.test( qualifier ) ) {                                                                         // 2748
			return jQuery.filter( qualifier, elements, not );                                                           // 2749
		}                                                                                                            // 2750
                                                                                                               // 2751
		qualifier = jQuery.filter( qualifier, elements );                                                            // 2752
	}                                                                                                             // 2753
                                                                                                               // 2754
	return jQuery.grep( elements, function( elem ) {                                                              // 2755
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not;                                                     // 2756
	} );                                                                                                          // 2757
}                                                                                                              // 2758
                                                                                                               // 2759
jQuery.filter = function( expr, elems, not ) {                                                                 // 2760
	var elem = elems[ 0 ];                                                                                        // 2761
                                                                                                               // 2762
	if ( not ) {                                                                                                  // 2763
		expr = ":not(" + expr + ")";                                                                                 // 2764
	}                                                                                                             // 2765
                                                                                                               // 2766
	return elems.length === 1 && elem.nodeType === 1 ?                                                            // 2767
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :                                                  // 2768
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {                                            // 2769
			return elem.nodeType === 1;                                                                                 // 2770
		} ) );                                                                                                       // 2771
};                                                                                                             // 2772
                                                                                                               // 2773
jQuery.fn.extend( {                                                                                            // 2774
	find: function( selector ) {                                                                                  // 2775
		var i,                                                                                                       // 2776
			len = this.length,                                                                                          // 2777
			ret = [],                                                                                                   // 2778
			self = this;                                                                                                // 2779
                                                                                                               // 2780
		if ( typeof selector !== "string" ) {                                                                        // 2781
			return this.pushStack( jQuery( selector ).filter( function() {                                              // 2782
				for ( i = 0; i < len; i++ ) {                                                                              // 2783
					if ( jQuery.contains( self[ i ], this ) ) {                                                               // 2784
						return true;                                                                                             // 2785
					}                                                                                                         // 2786
				}                                                                                                          // 2787
			} ) );                                                                                                      // 2788
		}                                                                                                            // 2789
                                                                                                               // 2790
		for ( i = 0; i < len; i++ ) {                                                                                // 2791
			jQuery.find( selector, self[ i ], ret );                                                                    // 2792
		}                                                                                                            // 2793
                                                                                                               // 2794
		// Needed because $( selector, context ) becomes $( context ).find( selector )                               // 2795
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );                                                // 2796
		ret.selector = this.selector ? this.selector + " " + selector : selector;                                    // 2797
		return ret;                                                                                                  // 2798
	},                                                                                                            // 2799
	filter: function( selector ) {                                                                                // 2800
		return this.pushStack( winnow( this, selector || [], false ) );                                              // 2801
	},                                                                                                            // 2802
	not: function( selector ) {                                                                                   // 2803
		return this.pushStack( winnow( this, selector || [], true ) );                                               // 2804
	},                                                                                                            // 2805
	is: function( selector ) {                                                                                    // 2806
		return !!winnow(                                                                                             // 2807
			this,                                                                                                       // 2808
                                                                                                               // 2809
			// If this is a positional/relative selector, check membership in the returned set                          // 2810
			// so $("p:first").is("p:last") won't return true for a doc with two "p".                                   // 2811
			typeof selector === "string" && rneedsContext.test( selector ) ?                                            // 2812
				jQuery( selector ) :                                                                                       // 2813
				selector || [],                                                                                            // 2814
			false                                                                                                       // 2815
		).length;                                                                                                    // 2816
	}                                                                                                             // 2817
} );                                                                                                           // 2818
                                                                                                               // 2819
                                                                                                               // 2820
// Initialize a jQuery object                                                                                  // 2821
                                                                                                               // 2822
                                                                                                               // 2823
// A central reference to the root jQuery(document)                                                            // 2824
var rootjQuery,                                                                                                // 2825
                                                                                                               // 2826
	// A simple way to check for HTML strings                                                                     // 2827
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)                                           // 2828
	// Strict HTML recognition (#11290: must start with <)                                                        // 2829
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,                                                           // 2830
                                                                                                               // 2831
	init = jQuery.fn.init = function( selector, context, root ) {                                                 // 2832
		var match, elem;                                                                                             // 2833
                                                                                                               // 2834
		// HANDLE: $(""), $(null), $(undefined), $(false)                                                            // 2835
		if ( !selector ) {                                                                                           // 2836
			return this;                                                                                                // 2837
		}                                                                                                            // 2838
                                                                                                               // 2839
		// Method init() accepts an alternate rootjQuery                                                             // 2840
		// so migrate can support jQuery.sub (gh-2101)                                                               // 2841
		root = root || rootjQuery;                                                                                   // 2842
                                                                                                               // 2843
		// Handle HTML strings                                                                                       // 2844
		if ( typeof selector === "string" ) {                                                                        // 2845
			if ( selector[ 0 ] === "<" &&                                                                               // 2846
				selector[ selector.length - 1 ] === ">" &&                                                                 // 2847
				selector.length >= 3 ) {                                                                                   // 2848
                                                                                                               // 2849
				// Assume that strings that start and end with <> are HTML and skip the regex check                        // 2850
				match = [ null, selector, null ];                                                                          // 2851
                                                                                                               // 2852
			} else {                                                                                                    // 2853
				match = rquickExpr.exec( selector );                                                                       // 2854
			}                                                                                                           // 2855
                                                                                                               // 2856
			// Match html or make sure no context is specified for #id                                                  // 2857
			if ( match && ( match[ 1 ] || !context ) ) {                                                                // 2858
                                                                                                               // 2859
				// HANDLE: $(html) -> $(array)                                                                             // 2860
				if ( match[ 1 ] ) {                                                                                        // 2861
					context = context instanceof jQuery ? context[ 0 ] : context;                                             // 2862
                                                                                                               // 2863
					// Option to run scripts is true for back-compat                                                          // 2864
					// Intentionally let the error be thrown if parseHTML is not present                                      // 2865
					jQuery.merge( this, jQuery.parseHTML(                                                                     // 2866
						match[ 1 ],                                                                                              // 2867
						context && context.nodeType ? context.ownerDocument || context : document,                               // 2868
						true                                                                                                     // 2869
					) );                                                                                                      // 2870
                                                                                                               // 2871
					// HANDLE: $(html, props)                                                                                 // 2872
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {                                 // 2873
						for ( match in context ) {                                                                               // 2874
                                                                                                               // 2875
							// Properties of context are called as methods if possible                                              // 2876
							if ( jQuery.isFunction( this[ match ] ) ) {                                                             // 2877
								this[ match ]( context[ match ] );                                                                     // 2878
                                                                                                               // 2879
							// ...and otherwise set as attributes                                                                   // 2880
							} else {                                                                                                // 2881
								this.attr( match, context[ match ] );                                                                  // 2882
							}                                                                                                       // 2883
						}                                                                                                        // 2884
					}                                                                                                         // 2885
                                                                                                               // 2886
					return this;                                                                                              // 2887
                                                                                                               // 2888
				// HANDLE: $(#id)                                                                                          // 2889
				} else {                                                                                                   // 2890
					elem = document.getElementById( match[ 2 ] );                                                             // 2891
                                                                                                               // 2892
					// Support: Blackberry 4.6                                                                                // 2893
					// gEBID returns nodes no longer in the document (#6963)                                                  // 2894
					if ( elem && elem.parentNode ) {                                                                          // 2895
                                                                                                               // 2896
						// Inject the element directly into the jQuery object                                                    // 2897
						this.length = 1;                                                                                         // 2898
						this[ 0 ] = elem;                                                                                        // 2899
					}                                                                                                         // 2900
                                                                                                               // 2901
					this.context = document;                                                                                  // 2902
					this.selector = selector;                                                                                 // 2903
					return this;                                                                                              // 2904
				}                                                                                                          // 2905
                                                                                                               // 2906
			// HANDLE: $(expr, $(...))                                                                                  // 2907
			} else if ( !context || context.jquery ) {                                                                  // 2908
				return ( context || root ).find( selector );                                                               // 2909
                                                                                                               // 2910
			// HANDLE: $(expr, context)                                                                                 // 2911
			// (which is just equivalent to: $(context).find(expr)                                                      // 2912
			} else {                                                                                                    // 2913
				return this.constructor( context ).find( selector );                                                       // 2914
			}                                                                                                           // 2915
                                                                                                               // 2916
		// HANDLE: $(DOMElement)                                                                                     // 2917
		} else if ( selector.nodeType ) {                                                                            // 2918
			this.context = this[ 0 ] = selector;                                                                        // 2919
			this.length = 1;                                                                                            // 2920
			return this;                                                                                                // 2921
                                                                                                               // 2922
		// HANDLE: $(function)                                                                                       // 2923
		// Shortcut for document ready                                                                               // 2924
		} else if ( jQuery.isFunction( selector ) ) {                                                                // 2925
			return root.ready !== undefined ?                                                                           // 2926
				root.ready( selector ) :                                                                                   // 2927
                                                                                                               // 2928
				// Execute immediately if ready is not present                                                             // 2929
				selector( jQuery );                                                                                        // 2930
		}                                                                                                            // 2931
                                                                                                               // 2932
		if ( selector.selector !== undefined ) {                                                                     // 2933
			this.selector = selector.selector;                                                                          // 2934
			this.context = selector.context;                                                                            // 2935
		}                                                                                                            // 2936
                                                                                                               // 2937
		return jQuery.makeArray( selector, this );                                                                   // 2938
	};                                                                                                            // 2939
                                                                                                               // 2940
// Give the init function the jQuery prototype for later instantiation                                         // 2941
init.prototype = jQuery.fn;                                                                                    // 2942
                                                                                                               // 2943
// Initialize central reference                                                                                // 2944
rootjQuery = jQuery( document );                                                                               // 2945
                                                                                                               // 2946
                                                                                                               // 2947
var rparentsprev = /^(?:parents|prev(?:Until|All))/,                                                           // 2948
                                                                                                               // 2949
	// Methods guaranteed to produce a unique set when starting from a unique set                                 // 2950
	guaranteedUnique = {                                                                                          // 2951
		children: true,                                                                                              // 2952
		contents: true,                                                                                              // 2953
		next: true,                                                                                                  // 2954
		prev: true                                                                                                   // 2955
	};                                                                                                            // 2956
                                                                                                               // 2957
jQuery.fn.extend( {                                                                                            // 2958
	has: function( target ) {                                                                                     // 2959
		var targets = jQuery( target, this ),                                                                        // 2960
			l = targets.length;                                                                                         // 2961
                                                                                                               // 2962
		return this.filter( function() {                                                                             // 2963
			var i = 0;                                                                                                  // 2964
			for ( ; i < l; i++ ) {                                                                                      // 2965
				if ( jQuery.contains( this, targets[ i ] ) ) {                                                             // 2966
					return true;                                                                                              // 2967
				}                                                                                                          // 2968
			}                                                                                                           // 2969
		} );                                                                                                         // 2970
	},                                                                                                            // 2971
                                                                                                               // 2972
	closest: function( selectors, context ) {                                                                     // 2973
		var cur,                                                                                                     // 2974
			i = 0,                                                                                                      // 2975
			l = this.length,                                                                                            // 2976
			matched = [],                                                                                               // 2977
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?                                    // 2978
				jQuery( selectors, context || this.context ) :                                                             // 2979
				0;                                                                                                         // 2980
                                                                                                               // 2981
		for ( ; i < l; i++ ) {                                                                                       // 2982
			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {                                     // 2983
                                                                                                               // 2984
				// Always skip document fragments                                                                          // 2985
				if ( cur.nodeType < 11 && ( pos ?                                                                          // 2986
					pos.index( cur ) > -1 :                                                                                   // 2987
                                                                                                               // 2988
					// Don't pass non-elements to Sizzle                                                                      // 2989
					cur.nodeType === 1 &&                                                                                     // 2990
						jQuery.find.matchesSelector( cur, selectors ) ) ) {                                                      // 2991
                                                                                                               // 2992
					matched.push( cur );                                                                                      // 2993
					break;                                                                                                    // 2994
				}                                                                                                          // 2995
			}                                                                                                           // 2996
		}                                                                                                            // 2997
                                                                                                               // 2998
		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );                        // 2999
	},                                                                                                            // 3000
                                                                                                               // 3001
	// Determine the position of an element within the set                                                        // 3002
	index: function( elem ) {                                                                                     // 3003
                                                                                                               // 3004
		// No argument, return index in parent                                                                       // 3005
		if ( !elem ) {                                                                                               // 3006
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;                          // 3007
		}                                                                                                            // 3008
                                                                                                               // 3009
		// Index in selector                                                                                         // 3010
		if ( typeof elem === "string" ) {                                                                            // 3011
			return indexOf.call( jQuery( elem ), this[ 0 ] );                                                           // 3012
		}                                                                                                            // 3013
                                                                                                               // 3014
		// Locate the position of the desired element                                                                // 3015
		return indexOf.call( this,                                                                                   // 3016
                                                                                                               // 3017
			// If it receives a jQuery object, the first element is used                                                // 3018
			elem.jquery ? elem[ 0 ] : elem                                                                              // 3019
		);                                                                                                           // 3020
	},                                                                                                            // 3021
                                                                                                               // 3022
	add: function( selector, context ) {                                                                          // 3023
		return this.pushStack(                                                                                       // 3024
			jQuery.uniqueSort(                                                                                          // 3025
				jQuery.merge( this.get(), jQuery( selector, context ) )                                                    // 3026
			)                                                                                                           // 3027
		);                                                                                                           // 3028
	},                                                                                                            // 3029
                                                                                                               // 3030
	addBack: function( selector ) {                                                                               // 3031
		return this.add( selector == null ?                                                                          // 3032
			this.prevObject : this.prevObject.filter( selector )                                                        // 3033
		);                                                                                                           // 3034
	}                                                                                                             // 3035
} );                                                                                                           // 3036
                                                                                                               // 3037
function sibling( cur, dir ) {                                                                                 // 3038
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}                                                       // 3039
	return cur;                                                                                                   // 3040
}                                                                                                              // 3041
                                                                                                               // 3042
jQuery.each( {                                                                                                 // 3043
	parent: function( elem ) {                                                                                    // 3044
		var parent = elem.parentNode;                                                                                // 3045
		return parent && parent.nodeType !== 11 ? parent : null;                                                     // 3046
	},                                                                                                            // 3047
	parents: function( elem ) {                                                                                   // 3048
		return dir( elem, "parentNode" );                                                                            // 3049
	},                                                                                                            // 3050
	parentsUntil: function( elem, i, until ) {                                                                    // 3051
		return dir( elem, "parentNode", until );                                                                     // 3052
	},                                                                                                            // 3053
	next: function( elem ) {                                                                                      // 3054
		return sibling( elem, "nextSibling" );                                                                       // 3055
	},                                                                                                            // 3056
	prev: function( elem ) {                                                                                      // 3057
		return sibling( elem, "previousSibling" );                                                                   // 3058
	},                                                                                                            // 3059
	nextAll: function( elem ) {                                                                                   // 3060
		return dir( elem, "nextSibling" );                                                                           // 3061
	},                                                                                                            // 3062
	prevAll: function( elem ) {                                                                                   // 3063
		return dir( elem, "previousSibling" );                                                                       // 3064
	},                                                                                                            // 3065
	nextUntil: function( elem, i, until ) {                                                                       // 3066
		return dir( elem, "nextSibling", until );                                                                    // 3067
	},                                                                                                            // 3068
	prevUntil: function( elem, i, until ) {                                                                       // 3069
		return dir( elem, "previousSibling", until );                                                                // 3070
	},                                                                                                            // 3071
	siblings: function( elem ) {                                                                                  // 3072
		return siblings( ( elem.parentNode || {} ).firstChild, elem );                                               // 3073
	},                                                                                                            // 3074
	children: function( elem ) {                                                                                  // 3075
		return siblings( elem.firstChild );                                                                          // 3076
	},                                                                                                            // 3077
	contents: function( elem ) {                                                                                  // 3078
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );                                          // 3079
	}                                                                                                             // 3080
}, function( name, fn ) {                                                                                      // 3081
	jQuery.fn[ name ] = function( until, selector ) {                                                             // 3082
		var matched = jQuery.map( this, fn, until );                                                                 // 3083
                                                                                                               // 3084
		if ( name.slice( -5 ) !== "Until" ) {                                                                        // 3085
			selector = until;                                                                                           // 3086
		}                                                                                                            // 3087
                                                                                                               // 3088
		if ( selector && typeof selector === "string" ) {                                                            // 3089
			matched = jQuery.filter( selector, matched );                                                               // 3090
		}                                                                                                            // 3091
                                                                                                               // 3092
		if ( this.length > 1 ) {                                                                                     // 3093
                                                                                                               // 3094
			// Remove duplicates                                                                                        // 3095
			if ( !guaranteedUnique[ name ] ) {                                                                          // 3096
				jQuery.uniqueSort( matched );                                                                              // 3097
			}                                                                                                           // 3098
                                                                                                               // 3099
			// Reverse order for parents* and prev-derivatives                                                          // 3100
			if ( rparentsprev.test( name ) ) {                                                                          // 3101
				matched.reverse();                                                                                         // 3102
			}                                                                                                           // 3103
		}                                                                                                            // 3104
                                                                                                               // 3105
		return this.pushStack( matched );                                                                            // 3106
	};                                                                                                            // 3107
} );                                                                                                           // 3108
var rnotwhite = ( /\S+/g );                                                                                    // 3109
                                                                                                               // 3110
                                                                                                               // 3111
                                                                                                               // 3112
// Convert String-formatted options into Object-formatted ones                                                 // 3113
function createOptions( options ) {                                                                            // 3114
	var object = {};                                                                                              // 3115
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {                                          // 3116
		object[ flag ] = true;                                                                                       // 3117
	} );                                                                                                          // 3118
	return object;                                                                                                // 3119
}                                                                                                              // 3120
                                                                                                               // 3121
/*                                                                                                             // 3122
 * Create a callback list using the following parameters:                                                      // 3123
 *                                                                                                             // 3124
 *	options: an optional list of space-separated options that will change how                                   // 3125
 *			the callback list behaves or a more traditional option object                                             // 3126
 *                                                                                                             // 3127
 * By default a callback list will act like an event callback list and can be                                  // 3128
 * "fired" multiple times.                                                                                     // 3129
 *                                                                                                             // 3130
 * Possible options:                                                                                           // 3131
 *                                                                                                             // 3132
 *	once:			will ensure the callback list can only be fired once (like a Deferred)                              // 3133
 *                                                                                                             // 3134
 *	memory:			will keep track of previous values and will call any callback added                               // 3135
 *					after the list has been fired right away with the latest "memorized"                                    // 3136
 *					values (like a Deferred)                                                                                // 3137
 *                                                                                                             // 3138
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)                          // 3139
 *                                                                                                             // 3140
 *	stopOnFalse:	interrupt callings when a callback returns false                                               // 3141
 *                                                                                                             // 3142
 */                                                                                                            // 3143
jQuery.Callbacks = function( options ) {                                                                       // 3144
                                                                                                               // 3145
	// Convert options from String-formatted to Object-formatted if needed                                        // 3146
	// (we check in cache first)                                                                                  // 3147
	options = typeof options === "string" ?                                                                       // 3148
		createOptions( options ) :                                                                                   // 3149
		jQuery.extend( {}, options );                                                                                // 3150
                                                                                                               // 3151
	var // Flag to know if list is currently firing                                                               // 3152
		firing,                                                                                                      // 3153
                                                                                                               // 3154
		// Last fire value for non-forgettable lists                                                                 // 3155
		memory,                                                                                                      // 3156
                                                                                                               // 3157
		// Flag to know if list was already fired                                                                    // 3158
		fired,                                                                                                       // 3159
                                                                                                               // 3160
		// Flag to prevent firing                                                                                    // 3161
		locked,                                                                                                      // 3162
                                                                                                               // 3163
		// Actual callback list                                                                                      // 3164
		list = [],                                                                                                   // 3165
                                                                                                               // 3166
		// Queue of execution data for repeatable lists                                                              // 3167
		queue = [],                                                                                                  // 3168
                                                                                                               // 3169
		// Index of currently firing callback (modified by add/remove as needed)                                     // 3170
		firingIndex = -1,                                                                                            // 3171
                                                                                                               // 3172
		// Fire callbacks                                                                                            // 3173
		fire = function() {                                                                                          // 3174
                                                                                                               // 3175
			// Enforce single-firing                                                                                    // 3176
			locked = options.once;                                                                                      // 3177
                                                                                                               // 3178
			// Execute callbacks for all pending executions,                                                            // 3179
			// respecting firingIndex overrides and runtime changes                                                     // 3180
			fired = firing = true;                                                                                      // 3181
			for ( ; queue.length; firingIndex = -1 ) {                                                                  // 3182
				memory = queue.shift();                                                                                    // 3183
				while ( ++firingIndex < list.length ) {                                                                    // 3184
                                                                                                               // 3185
					// Run callback and check for early termination                                                           // 3186
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&                                   // 3187
						options.stopOnFalse ) {                                                                                  // 3188
                                                                                                               // 3189
						// Jump to end and forget the data so .add doesn't re-fire                                               // 3190
						firingIndex = list.length;                                                                               // 3191
						memory = false;                                                                                          // 3192
					}                                                                                                         // 3193
				}                                                                                                          // 3194
			}                                                                                                           // 3195
                                                                                                               // 3196
			// Forget the data if we're done with it                                                                    // 3197
			if ( !options.memory ) {                                                                                    // 3198
				memory = false;                                                                                            // 3199
			}                                                                                                           // 3200
                                                                                                               // 3201
			firing = false;                                                                                             // 3202
                                                                                                               // 3203
			// Clean up if we're done firing for good                                                                   // 3204
			if ( locked ) {                                                                                             // 3205
                                                                                                               // 3206
				// Keep an empty list if we have data for future add calls                                                 // 3207
				if ( memory ) {                                                                                            // 3208
					list = [];                                                                                                // 3209
                                                                                                               // 3210
				// Otherwise, this object is spent                                                                         // 3211
				} else {                                                                                                   // 3212
					list = "";                                                                                                // 3213
				}                                                                                                          // 3214
			}                                                                                                           // 3215
		},                                                                                                           // 3216
                                                                                                               // 3217
		// Actual Callbacks object                                                                                   // 3218
		self = {                                                                                                     // 3219
                                                                                                               // 3220
			// Add a callback or a collection of callbacks to the list                                                  // 3221
			add: function() {                                                                                           // 3222
				if ( list ) {                                                                                              // 3223
                                                                                                               // 3224
					// If we have memory from a past run, we should fire after adding                                         // 3225
					if ( memory && !firing ) {                                                                                // 3226
						firingIndex = list.length - 1;                                                                           // 3227
						queue.push( memory );                                                                                    // 3228
					}                                                                                                         // 3229
                                                                                                               // 3230
					( function add( args ) {                                                                                  // 3231
						jQuery.each( args, function( _, arg ) {                                                                  // 3232
							if ( jQuery.isFunction( arg ) ) {                                                                       // 3233
								if ( !options.unique || !self.has( arg ) ) {                                                           // 3234
									list.push( arg );                                                                                     // 3235
								}                                                                                                      // 3236
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {                                    // 3237
                                                                                                               // 3238
								// Inspect recursively                                                                                 // 3239
								add( arg );                                                                                            // 3240
							}                                                                                                       // 3241
						} );                                                                                                     // 3242
					} )( arguments );                                                                                         // 3243
                                                                                                               // 3244
					if ( memory && !firing ) {                                                                                // 3245
						fire();                                                                                                  // 3246
					}                                                                                                         // 3247
				}                                                                                                          // 3248
				return this;                                                                                               // 3249
			},                                                                                                          // 3250
                                                                                                               // 3251
			// Remove a callback from the list                                                                          // 3252
			remove: function() {                                                                                        // 3253
				jQuery.each( arguments, function( _, arg ) {                                                               // 3254
					var index;                                                                                                // 3255
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {                                           // 3256
						list.splice( index, 1 );                                                                                 // 3257
                                                                                                               // 3258
						// Handle firing indexes                                                                                 // 3259
						if ( index <= firingIndex ) {                                                                            // 3260
							firingIndex--;                                                                                          // 3261
						}                                                                                                        // 3262
					}                                                                                                         // 3263
				} );                                                                                                       // 3264
				return this;                                                                                               // 3265
			},                                                                                                          // 3266
                                                                                                               // 3267
			// Check if a given callback is in the list.                                                                // 3268
			// If no argument is given, return whether or not list has callbacks attached.                              // 3269
			has: function( fn ) {                                                                                       // 3270
				return fn ?                                                                                                // 3271
					jQuery.inArray( fn, list ) > -1 :                                                                         // 3272
					list.length > 0;                                                                                          // 3273
			},                                                                                                          // 3274
                                                                                                               // 3275
			// Remove all callbacks from the list                                                                       // 3276
			empty: function() {                                                                                         // 3277
				if ( list ) {                                                                                              // 3278
					list = [];                                                                                                // 3279
				}                                                                                                          // 3280
				return this;                                                                                               // 3281
			},                                                                                                          // 3282
                                                                                                               // 3283
			// Disable .fire and .add                                                                                   // 3284
			// Abort any current/pending executions                                                                     // 3285
			// Clear all callbacks and values                                                                           // 3286
			disable: function() {                                                                                       // 3287
				locked = queue = [];                                                                                       // 3288
				list = memory = "";                                                                                        // 3289
				return this;                                                                                               // 3290
			},                                                                                                          // 3291
			disabled: function() {                                                                                      // 3292
				return !list;                                                                                              // 3293
			},                                                                                                          // 3294
                                                                                                               // 3295
			// Disable .fire                                                                                            // 3296
			// Also disable .add unless we have memory (since it would have no effect)                                  // 3297
			// Abort any pending executions                                                                             // 3298
			lock: function() {                                                                                          // 3299
				locked = queue = [];                                                                                       // 3300
				if ( !memory ) {                                                                                           // 3301
					list = memory = "";                                                                                       // 3302
				}                                                                                                          // 3303
				return this;                                                                                               // 3304
			},                                                                                                          // 3305
			locked: function() {                                                                                        // 3306
				return !!locked;                                                                                           // 3307
			},                                                                                                          // 3308
                                                                                                               // 3309
			// Call all callbacks with the given context and arguments                                                  // 3310
			fireWith: function( context, args ) {                                                                       // 3311
				if ( !locked ) {                                                                                           // 3312
					args = args || [];                                                                                        // 3313
					args = [ context, args.slice ? args.slice() : args ];                                                     // 3314
					queue.push( args );                                                                                       // 3315
					if ( !firing ) {                                                                                          // 3316
						fire();                                                                                                  // 3317
					}                                                                                                         // 3318
				}                                                                                                          // 3319
				return this;                                                                                               // 3320
			},                                                                                                          // 3321
                                                                                                               // 3322
			// Call all the callbacks with the given arguments                                                          // 3323
			fire: function() {                                                                                          // 3324
				self.fireWith( this, arguments );                                                                          // 3325
				return this;                                                                                               // 3326
			},                                                                                                          // 3327
                                                                                                               // 3328
			// To know if the callbacks have already been called at least once                                          // 3329
			fired: function() {                                                                                         // 3330
				return !!fired;                                                                                            // 3331
			}                                                                                                           // 3332
		};                                                                                                           // 3333
                                                                                                               // 3334
	return self;                                                                                                  // 3335
};                                                                                                             // 3336
                                                                                                               // 3337
                                                                                                               // 3338
jQuery.extend( {                                                                                               // 3339
                                                                                                               // 3340
	Deferred: function( func ) {                                                                                  // 3341
		var tuples = [                                                                                               // 3342
                                                                                                               // 3343
				// action, add listener, listener list, final state                                                        // 3344
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],                                      // 3345
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],                                       // 3346
				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]                                                     // 3347
			],                                                                                                          // 3348
			state = "pending",                                                                                          // 3349
			promise = {                                                                                                 // 3350
				state: function() {                                                                                        // 3351
					return state;                                                                                             // 3352
				},                                                                                                         // 3353
				always: function() {                                                                                       // 3354
					deferred.done( arguments ).fail( arguments );                                                             // 3355
					return this;                                                                                              // 3356
				},                                                                                                         // 3357
				then: function( /* fnDone, fnFail, fnProgress */ ) {                                                       // 3358
					var fns = arguments;                                                                                      // 3359
					return jQuery.Deferred( function( newDefer ) {                                                            // 3360
						jQuery.each( tuples, function( i, tuple ) {                                                              // 3361
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];                                                     // 3362
                                                                                                               // 3363
							// deferred[ done | fail | progress ] for forwarding actions to newDefer                                // 3364
							deferred[ tuple[ 1 ] ]( function() {                                                                    // 3365
								var returned = fn && fn.apply( this, arguments );                                                      // 3366
								if ( returned && jQuery.isFunction( returned.promise ) ) {                                             // 3367
									returned.promise()                                                                                    // 3368
										.progress( newDefer.notify )                                                                         // 3369
										.done( newDefer.resolve )                                                                            // 3370
										.fail( newDefer.reject );                                                                            // 3371
								} else {                                                                                               // 3372
									newDefer[ tuple[ 0 ] + "With" ](                                                                      // 3373
										this === promise ? newDefer.promise() : this,                                                        // 3374
										fn ? [ returned ] : arguments                                                                        // 3375
									);                                                                                                    // 3376
								}                                                                                                      // 3377
							} );                                                                                                    // 3378
						} );                                                                                                     // 3379
						fns = null;                                                                                              // 3380
					} ).promise();                                                                                            // 3381
				},                                                                                                         // 3382
                                                                                                               // 3383
				// Get a promise for this deferred                                                                         // 3384
				// If obj is provided, the promise aspect is added to the object                                           // 3385
				promise: function( obj ) {                                                                                 // 3386
					return obj != null ? jQuery.extend( obj, promise ) : promise;                                             // 3387
				}                                                                                                          // 3388
			},                                                                                                          // 3389
			deferred = {};                                                                                              // 3390
                                                                                                               // 3391
		// Keep pipe for back-compat                                                                                 // 3392
		promise.pipe = promise.then;                                                                                 // 3393
                                                                                                               // 3394
		// Add list-specific methods                                                                                 // 3395
		jQuery.each( tuples, function( i, tuple ) {                                                                  // 3396
			var list = tuple[ 2 ],                                                                                      // 3397
				stateString = tuple[ 3 ];                                                                                  // 3398
                                                                                                               // 3399
			// promise[ done | fail | progress ] = list.add                                                             // 3400
			promise[ tuple[ 1 ] ] = list.add;                                                                           // 3401
                                                                                                               // 3402
			// Handle state                                                                                             // 3403
			if ( stateString ) {                                                                                        // 3404
				list.add( function() {                                                                                     // 3405
                                                                                                               // 3406
					// state = [ resolved | rejected ]                                                                        // 3407
					state = stateString;                                                                                      // 3408
                                                                                                               // 3409
				// [ reject_list | resolve_list ].disable; progress_list.lock                                              // 3410
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );                                                  // 3411
			}                                                                                                           // 3412
                                                                                                               // 3413
			// deferred[ resolve | reject | notify ]                                                                    // 3414
			deferred[ tuple[ 0 ] ] = function() {                                                                       // 3415
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );                          // 3416
				return this;                                                                                               // 3417
			};                                                                                                          // 3418
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;                                                            // 3419
		} );                                                                                                         // 3420
                                                                                                               // 3421
		// Make the deferred a promise                                                                               // 3422
		promise.promise( deferred );                                                                                 // 3423
                                                                                                               // 3424
		// Call given func if any                                                                                    // 3425
		if ( func ) {                                                                                                // 3426
			func.call( deferred, deferred );                                                                            // 3427
		}                                                                                                            // 3428
                                                                                                               // 3429
		// All done!                                                                                                 // 3430
		return deferred;                                                                                             // 3431
	},                                                                                                            // 3432
                                                                                                               // 3433
	// Deferred helper                                                                                            // 3434
	when: function( subordinate /* , ..., subordinateN */ ) {                                                     // 3435
		var i = 0,                                                                                                   // 3436
			resolveValues = slice.call( arguments ),                                                                    // 3437
			length = resolveValues.length,                                                                              // 3438
                                                                                                               // 3439
			// the count of uncompleted subordinates                                                                    // 3440
			remaining = length !== 1 ||                                                                                 // 3441
				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,                                  // 3442
                                                                                                               // 3443
			// the master Deferred.                                                                                     // 3444
			// If resolveValues consist of only a single Deferred, just use that.                                       // 3445
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),                                               // 3446
                                                                                                               // 3447
			// Update function for both resolve and progress values                                                     // 3448
			updateFunc = function( i, contexts, values ) {                                                              // 3449
				return function( value ) {                                                                                 // 3450
					contexts[ i ] = this;                                                                                     // 3451
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;                                     // 3452
					if ( values === progressValues ) {                                                                        // 3453
						deferred.notifyWith( contexts, values );                                                                 // 3454
					} else if ( !( --remaining ) ) {                                                                          // 3455
						deferred.resolveWith( contexts, values );                                                                // 3456
					}                                                                                                         // 3457
				};                                                                                                         // 3458
			},                                                                                                          // 3459
                                                                                                               // 3460
			progressValues, progressContexts, resolveContexts;                                                          // 3461
                                                                                                               // 3462
		// Add listeners to Deferred subordinates; treat others as resolved                                          // 3463
		if ( length > 1 ) {                                                                                          // 3464
			progressValues = new Array( length );                                                                       // 3465
			progressContexts = new Array( length );                                                                     // 3466
			resolveContexts = new Array( length );                                                                      // 3467
			for ( ; i < length; i++ ) {                                                                                 // 3468
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {                             // 3469
					resolveValues[ i ].promise()                                                                              // 3470
						.progress( updateFunc( i, progressContexts, progressValues ) )                                           // 3471
						.done( updateFunc( i, resolveContexts, resolveValues ) )                                                 // 3472
						.fail( deferred.reject );                                                                                // 3473
				} else {                                                                                                   // 3474
					--remaining;                                                                                              // 3475
				}                                                                                                          // 3476
			}                                                                                                           // 3477
		}                                                                                                            // 3478
                                                                                                               // 3479
		// If we're not waiting on anything, resolve the master                                                      // 3480
		if ( !remaining ) {                                                                                          // 3481
			deferred.resolveWith( resolveContexts, resolveValues );                                                     // 3482
		}                                                                                                            // 3483
                                                                                                               // 3484
		return deferred.promise();                                                                                   // 3485
	}                                                                                                             // 3486
} );                                                                                                           // 3487
                                                                                                               // 3488
                                                                                                               // 3489
// The deferred used on DOM ready                                                                              // 3490
var readyList;                                                                                                 // 3491
                                                                                                               // 3492
jQuery.fn.ready = function( fn ) {                                                                             // 3493
                                                                                                               // 3494
	// Add the callback                                                                                           // 3495
	jQuery.ready.promise().done( fn );                                                                            // 3496
                                                                                                               // 3497
	return this;                                                                                                  // 3498
};                                                                                                             // 3499
                                                                                                               // 3500
jQuery.extend( {                                                                                               // 3501
                                                                                                               // 3502
	// Is the DOM ready to be used? Set to true once it occurs.                                                   // 3503
	isReady: false,                                                                                               // 3504
                                                                                                               // 3505
	// A counter to track how many items to wait for before                                                       // 3506
	// the ready event fires. See #6781                                                                           // 3507
	readyWait: 1,                                                                                                 // 3508
                                                                                                               // 3509
	// Hold (or release) the ready event                                                                          // 3510
	holdReady: function( hold ) {                                                                                 // 3511
		if ( hold ) {                                                                                                // 3512
			jQuery.readyWait++;                                                                                         // 3513
		} else {                                                                                                     // 3514
			jQuery.ready( true );                                                                                       // 3515
		}                                                                                                            // 3516
	},                                                                                                            // 3517
                                                                                                               // 3518
	// Handle when the DOM is ready                                                                               // 3519
	ready: function( wait ) {                                                                                     // 3520
                                                                                                               // 3521
		// Abort if there are pending holds or we're already ready                                                   // 3522
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {                                                 // 3523
			return;                                                                                                     // 3524
		}                                                                                                            // 3525
                                                                                                               // 3526
		// Remember that the DOM is ready                                                                            // 3527
		jQuery.isReady = true;                                                                                       // 3528
                                                                                                               // 3529
		// If a normal DOM Ready event fired, decrement, and wait if need be                                         // 3530
		if ( wait !== true && --jQuery.readyWait > 0 ) {                                                             // 3531
			return;                                                                                                     // 3532
		}                                                                                                            // 3533
                                                                                                               // 3534
		// If there are functions bound, to execute                                                                  // 3535
		readyList.resolveWith( document, [ jQuery ] );                                                               // 3536
                                                                                                               // 3537
		// Trigger any bound ready events                                                                            // 3538
		if ( jQuery.fn.triggerHandler ) {                                                                            // 3539
			jQuery( document ).triggerHandler( "ready" );                                                               // 3540
			jQuery( document ).off( "ready" );                                                                          // 3541
		}                                                                                                            // 3542
	}                                                                                                             // 3543
} );                                                                                                           // 3544
                                                                                                               // 3545
/**                                                                                                            // 3546
 * The ready event handler and self cleanup method                                                             // 3547
 */                                                                                                            // 3548
function completed() {                                                                                         // 3549
	document.removeEventListener( "DOMContentLoaded", completed );                                                // 3550
	window.removeEventListener( "load", completed );                                                              // 3551
	jQuery.ready();                                                                                               // 3552
}                                                                                                              // 3553
                                                                                                               // 3554
jQuery.ready.promise = function( obj ) {                                                                       // 3555
	if ( !readyList ) {                                                                                           // 3556
                                                                                                               // 3557
		readyList = jQuery.Deferred();                                                                               // 3558
                                                                                                               // 3559
		// Catch cases where $(document).ready() is called                                                           // 3560
		// after the browser event has already occurred.                                                             // 3561
		// Support: IE9-10 only                                                                                      // 3562
		// Older IE sometimes signals "interactive" too soon                                                         // 3563
		if ( document.readyState === "complete" ||                                                                   // 3564
			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {                             // 3565
                                                                                                               // 3566
			// Handle it asynchronously to allow scripts the opportunity to delay ready                                 // 3567
			window.setTimeout( jQuery.ready );                                                                          // 3568
                                                                                                               // 3569
		} else {                                                                                                     // 3570
                                                                                                               // 3571
			// Use the handy event callback                                                                             // 3572
			document.addEventListener( "DOMContentLoaded", completed );                                                 // 3573
                                                                                                               // 3574
			// A fallback to window.onload, that will always work                                                       // 3575
			window.addEventListener( "load", completed );                                                               // 3576
		}                                                                                                            // 3577
	}                                                                                                             // 3578
	return readyList.promise( obj );                                                                              // 3579
};                                                                                                             // 3580
                                                                                                               // 3581
// Kick off the DOM ready check even if the user does not                                                      // 3582
jQuery.ready.promise();                                                                                        // 3583
                                                                                                               // 3584
                                                                                                               // 3585
                                                                                                               // 3586
                                                                                                               // 3587
// Multifunctional method to get and set values of a collection                                                // 3588
// The value/s can optionally be executed if it's a function                                                   // 3589
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {                                     // 3590
	var i = 0,                                                                                                    // 3591
		len = elems.length,                                                                                          // 3592
		bulk = key == null;                                                                                          // 3593
                                                                                                               // 3594
	// Sets many values                                                                                           // 3595
	if ( jQuery.type( key ) === "object" ) {                                                                      // 3596
		chainable = true;                                                                                            // 3597
		for ( i in key ) {                                                                                           // 3598
			access( elems, fn, i, key[ i ], true, emptyGet, raw );                                                      // 3599
		}                                                                                                            // 3600
                                                                                                               // 3601
	// Sets one value                                                                                             // 3602
	} else if ( value !== undefined ) {                                                                           // 3603
		chainable = true;                                                                                            // 3604
                                                                                                               // 3605
		if ( !jQuery.isFunction( value ) ) {                                                                         // 3606
			raw = true;                                                                                                 // 3607
		}                                                                                                            // 3608
                                                                                                               // 3609
		if ( bulk ) {                                                                                                // 3610
                                                                                                               // 3611
			// Bulk operations run against the entire set                                                               // 3612
			if ( raw ) {                                                                                                // 3613
				fn.call( elems, value );                                                                                   // 3614
				fn = null;                                                                                                 // 3615
                                                                                                               // 3616
			// ...except when executing function values                                                                 // 3617
			} else {                                                                                                    // 3618
				bulk = fn;                                                                                                 // 3619
				fn = function( elem, key, value ) {                                                                        // 3620
					return bulk.call( jQuery( elem ), value );                                                                // 3621
				};                                                                                                         // 3622
			}                                                                                                           // 3623
		}                                                                                                            // 3624
                                                                                                               // 3625
		if ( fn ) {                                                                                                  // 3626
			for ( ; i < len; i++ ) {                                                                                    // 3627
				fn(                                                                                                        // 3628
					elems[ i ], key, raw ?                                                                                    // 3629
					value :                                                                                                   // 3630
					value.call( elems[ i ], i, fn( elems[ i ], key ) )                                                        // 3631
				);                                                                                                         // 3632
			}                                                                                                           // 3633
		}                                                                                                            // 3634
	}                                                                                                             // 3635
                                                                                                               // 3636
	return chainable ?                                                                                            // 3637
		elems :                                                                                                      // 3638
                                                                                                               // 3639
		// Gets                                                                                                      // 3640
		bulk ?                                                                                                       // 3641
			fn.call( elems ) :                                                                                          // 3642
			len ? fn( elems[ 0 ], key ) : emptyGet;                                                                     // 3643
};                                                                                                             // 3644
var acceptData = function( owner ) {                                                                           // 3645
                                                                                                               // 3646
	// Accepts only:                                                                                              // 3647
	//  - Node                                                                                                    // 3648
	//    - Node.ELEMENT_NODE                                                                                     // 3649
	//    - Node.DOCUMENT_NODE                                                                                    // 3650
	//  - Object                                                                                                  // 3651
	//    - Any                                                                                                   // 3652
	/* jshint -W018 */                                                                                            // 3653
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );                                  // 3654
};                                                                                                             // 3655
                                                                                                               // 3656
                                                                                                               // 3657
                                                                                                               // 3658
                                                                                                               // 3659
function Data() {                                                                                              // 3660
	this.expando = jQuery.expando + Data.uid++;                                                                   // 3661
}                                                                                                              // 3662
                                                                                                               // 3663
Data.uid = 1;                                                                                                  // 3664
                                                                                                               // 3665
Data.prototype = {                                                                                             // 3666
                                                                                                               // 3667
	register: function( owner, initial ) {                                                                        // 3668
		var value = initial || {};                                                                                   // 3669
                                                                                                               // 3670
		// If it is a node unlikely to be stringify-ed or looped over                                                // 3671
		// use plain assignment                                                                                      // 3672
		if ( owner.nodeType ) {                                                                                      // 3673
			owner[ this.expando ] = value;                                                                              // 3674
                                                                                                               // 3675
		// Otherwise secure it in a non-enumerable, non-writable property                                            // 3676
		// configurability must be true to allow the property to be                                                  // 3677
		// deleted with the delete operator                                                                          // 3678
		} else {                                                                                                     // 3679
			Object.defineProperty( owner, this.expando, {                                                               // 3680
				value: value,                                                                                              // 3681
				writable: true,                                                                                            // 3682
				configurable: true                                                                                         // 3683
			} );                                                                                                        // 3684
		}                                                                                                            // 3685
		return owner[ this.expando ];                                                                                // 3686
	},                                                                                                            // 3687
	cache: function( owner ) {                                                                                    // 3688
                                                                                                               // 3689
		// We can accept data for non-element nodes in modern browsers,                                              // 3690
		// but we should not, see #8335.                                                                             // 3691
		// Always return an empty object.                                                                            // 3692
		if ( !acceptData( owner ) ) {                                                                                // 3693
			return {};                                                                                                  // 3694
		}                                                                                                            // 3695
                                                                                                               // 3696
		// Check if the owner object already has a cache                                                             // 3697
		var value = owner[ this.expando ];                                                                           // 3698
                                                                                                               // 3699
		// If not, create one                                                                                        // 3700
		if ( !value ) {                                                                                              // 3701
			value = {};                                                                                                 // 3702
                                                                                                               // 3703
			// We can accept data for non-element nodes in modern browsers,                                             // 3704
			// but we should not, see #8335.                                                                            // 3705
			// Always return an empty object.                                                                           // 3706
			if ( acceptData( owner ) ) {                                                                                // 3707
                                                                                                               // 3708
				// If it is a node unlikely to be stringify-ed or looped over                                              // 3709
				// use plain assignment                                                                                    // 3710
				if ( owner.nodeType ) {                                                                                    // 3711
					owner[ this.expando ] = value;                                                                            // 3712
                                                                                                               // 3713
				// Otherwise secure it in a non-enumerable property                                                        // 3714
				// configurable must be true to allow the property to be                                                   // 3715
				// deleted when data is removed                                                                            // 3716
				} else {                                                                                                   // 3717
					Object.defineProperty( owner, this.expando, {                                                             // 3718
						value: value,                                                                                            // 3719
						configurable: true                                                                                       // 3720
					} );                                                                                                      // 3721
				}                                                                                                          // 3722
			}                                                                                                           // 3723
		}                                                                                                            // 3724
                                                                                                               // 3725
		return value;                                                                                                // 3726
	},                                                                                                            // 3727
	set: function( owner, data, value ) {                                                                         // 3728
		var prop,                                                                                                    // 3729
			cache = this.cache( owner );                                                                                // 3730
                                                                                                               // 3731
		// Handle: [ owner, key, value ] args                                                                        // 3732
		if ( typeof data === "string" ) {                                                                            // 3733
			cache[ data ] = value;                                                                                      // 3734
                                                                                                               // 3735
		// Handle: [ owner, { properties } ] args                                                                    // 3736
		} else {                                                                                                     // 3737
                                                                                                               // 3738
			// Copy the properties one-by-one to the cache object                                                       // 3739
			for ( prop in data ) {                                                                                      // 3740
				cache[ prop ] = data[ prop ];                                                                              // 3741
			}                                                                                                           // 3742
		}                                                                                                            // 3743
		return cache;                                                                                                // 3744
	},                                                                                                            // 3745
	get: function( owner, key ) {                                                                                 // 3746
		return key === undefined ?                                                                                   // 3747
			this.cache( owner ) :                                                                                       // 3748
			owner[ this.expando ] && owner[ this.expando ][ key ];                                                      // 3749
	},                                                                                                            // 3750
	access: function( owner, key, value ) {                                                                       // 3751
		var stored;                                                                                                  // 3752
                                                                                                               // 3753
		// In cases where either:                                                                                    // 3754
		//                                                                                                           // 3755
		//   1. No key was specified                                                                                 // 3756
		//   2. A string key was specified, but no value provided                                                    // 3757
		//                                                                                                           // 3758
		// Take the "read" path and allow the get method to determine                                                // 3759
		// which value to return, respectively either:                                                               // 3760
		//                                                                                                           // 3761
		//   1. The entire cache object                                                                              // 3762
		//   2. The data stored at the key                                                                           // 3763
		//                                                                                                           // 3764
		if ( key === undefined ||                                                                                    // 3765
				( ( key && typeof key === "string" ) && value === undefined ) ) {                                          // 3766
                                                                                                               // 3767
			stored = this.get( owner, key );                                                                            // 3768
                                                                                                               // 3769
			return stored !== undefined ?                                                                               // 3770
				stored : this.get( owner, jQuery.camelCase( key ) );                                                       // 3771
		}                                                                                                            // 3772
                                                                                                               // 3773
		// When the key is not a string, or both a key and value                                                     // 3774
		// are specified, set or extend (existing objects) with either:                                              // 3775
		//                                                                                                           // 3776
		//   1. An object of properties                                                                              // 3777
		//   2. A key and value                                                                                      // 3778
		//                                                                                                           // 3779
		this.set( owner, key, value );                                                                               // 3780
                                                                                                               // 3781
		// Since the "set" path can have two possible entry points                                                   // 3782
		// return the expected data based on which path was taken[*]                                                 // 3783
		return value !== undefined ? value : key;                                                                    // 3784
	},                                                                                                            // 3785
	remove: function( owner, key ) {                                                                              // 3786
		var i, name, camel,                                                                                          // 3787
			cache = owner[ this.expando ];                                                                              // 3788
                                                                                                               // 3789
		if ( cache === undefined ) {                                                                                 // 3790
			return;                                                                                                     // 3791
		}                                                                                                            // 3792
                                                                                                               // 3793
		if ( key === undefined ) {                                                                                   // 3794
			this.register( owner );                                                                                     // 3795
                                                                                                               // 3796
		} else {                                                                                                     // 3797
                                                                                                               // 3798
			// Support array or space separated string of keys                                                          // 3799
			if ( jQuery.isArray( key ) ) {                                                                              // 3800
                                                                                                               // 3801
				// If "name" is an array of keys...                                                                        // 3802
				// When data is initially created, via ("key", "val") signature,                                           // 3803
				// keys will be converted to camelCase.                                                                    // 3804
				// Since there is no way to tell _how_ a key was added, remove                                             // 3805
				// both plain key and camelCase key. #12786                                                                // 3806
				// This will only penalize the array argument path.                                                        // 3807
				name = key.concat( key.map( jQuery.camelCase ) );                                                          // 3808
			} else {                                                                                                    // 3809
				camel = jQuery.camelCase( key );                                                                           // 3810
                                                                                                               // 3811
				// Try the string as a key before any manipulation                                                         // 3812
				if ( key in cache ) {                                                                                      // 3813
					name = [ key, camel ];                                                                                    // 3814
				} else {                                                                                                   // 3815
                                                                                                               // 3816
					// If a key with the spaces exists, use it.                                                               // 3817
					// Otherwise, create an array by matching non-whitespace                                                  // 3818
					name = camel;                                                                                             // 3819
					name = name in cache ?                                                                                    // 3820
						[ name ] : ( name.match( rnotwhite ) || [] );                                                            // 3821
				}                                                                                                          // 3822
			}                                                                                                           // 3823
                                                                                                               // 3824
			i = name.length;                                                                                            // 3825
                                                                                                               // 3826
			while ( i-- ) {                                                                                             // 3827
				delete cache[ name[ i ] ];                                                                                 // 3828
			}                                                                                                           // 3829
		}                                                                                                            // 3830
                                                                                                               // 3831
		// Remove the expando if there's no more data                                                                // 3832
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {                                                  // 3833
                                                                                                               // 3834
			// Support: Chrome <= 35-45+                                                                                // 3835
			// Webkit & Blink performance suffers when deleting properties                                              // 3836
			// from DOM nodes, so set to undefined instead                                                              // 3837
			// https://code.google.com/p/chromium/issues/detail?id=378607                                               // 3838
			if ( owner.nodeType ) {                                                                                     // 3839
				owner[ this.expando ] = undefined;                                                                         // 3840
			} else {                                                                                                    // 3841
				delete owner[ this.expando ];                                                                              // 3842
			}                                                                                                           // 3843
		}                                                                                                            // 3844
	},                                                                                                            // 3845
	hasData: function( owner ) {                                                                                  // 3846
		var cache = owner[ this.expando ];                                                                           // 3847
		return cache !== undefined && !jQuery.isEmptyObject( cache );                                                // 3848
	}                                                                                                             // 3849
};                                                                                                             // 3850
var dataPriv = new Data();                                                                                     // 3851
                                                                                                               // 3852
var dataUser = new Data();                                                                                     // 3853
                                                                                                               // 3854
                                                                                                               // 3855
                                                                                                               // 3856
//	Implementation Summary                                                                                      // 3857
//                                                                                                             // 3858
//	1. Enforce API surface and semantic compatibility with 1.9.x branch                                         // 3859
//	2. Improve the module's maintainability by reducing the storage                                             // 3860
//		paths to a single mechanism.                                                                               // 3861
//	3. Use the same single mechanism to support "private" and "user" data.                                      // 3862
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)                               // 3863
//	5. Avoid exposing implementation details on user objects (eg. expando properties)                           // 3864
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014                                       // 3865
                                                                                                               // 3866
var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,                                                                  // 3867
	rmultiDash = /[A-Z]/g;                                                                                        // 3868
                                                                                                               // 3869
function dataAttr( elem, key, data ) {                                                                         // 3870
	var name;                                                                                                     // 3871
                                                                                                               // 3872
	// If nothing was found internally, try to fetch any                                                          // 3873
	// data from the HTML5 data-* attribute                                                                       // 3874
	if ( data === undefined && elem.nodeType === 1 ) {                                                            // 3875
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();                                             // 3876
		data = elem.getAttribute( name );                                                                            // 3877
                                                                                                               // 3878
		if ( typeof data === "string" ) {                                                                            // 3879
			try {                                                                                                       // 3880
				data = data === "true" ? true :                                                                            // 3881
					data === "false" ? false :                                                                                // 3882
					data === "null" ? null :                                                                                  // 3883
                                                                                                               // 3884
					// Only convert to a number if it doesn't change the string                                               // 3885
					+data + "" === data ? +data :                                                                             // 3886
					rbrace.test( data ) ? jQuery.parseJSON( data ) :                                                          // 3887
					data;                                                                                                     // 3888
			} catch ( e ) {}                                                                                            // 3889
                                                                                                               // 3890
			// Make sure we set the data so it isn't changed later                                                      // 3891
			dataUser.set( elem, key, data );                                                                            // 3892
		} else {                                                                                                     // 3893
			data = undefined;                                                                                           // 3894
		}                                                                                                            // 3895
	}                                                                                                             // 3896
	return data;                                                                                                  // 3897
}                                                                                                              // 3898
                                                                                                               // 3899
jQuery.extend( {                                                                                               // 3900
	hasData: function( elem ) {                                                                                   // 3901
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );                                                 // 3902
	},                                                                                                            // 3903
                                                                                                               // 3904
	data: function( elem, name, data ) {                                                                          // 3905
		return dataUser.access( elem, name, data );                                                                  // 3906
	},                                                                                                            // 3907
                                                                                                               // 3908
	removeData: function( elem, name ) {                                                                          // 3909
		dataUser.remove( elem, name );                                                                               // 3910
	},                                                                                                            // 3911
                                                                                                               // 3912
	// TODO: Now that all calls to _data and _removeData have been replaced                                       // 3913
	// with direct calls to dataPriv methods, these can be deprecated.                                            // 3914
	_data: function( elem, name, data ) {                                                                         // 3915
		return dataPriv.access( elem, name, data );                                                                  // 3916
	},                                                                                                            // 3917
                                                                                                               // 3918
	_removeData: function( elem, name ) {                                                                         // 3919
		dataPriv.remove( elem, name );                                                                               // 3920
	}                                                                                                             // 3921
} );                                                                                                           // 3922
                                                                                                               // 3923
jQuery.fn.extend( {                                                                                            // 3924
	data: function( key, value ) {                                                                                // 3925
		var i, name, data,                                                                                           // 3926
			elem = this[ 0 ],                                                                                           // 3927
			attrs = elem && elem.attributes;                                                                            // 3928
                                                                                                               // 3929
		// Gets all values                                                                                           // 3930
		if ( key === undefined ) {                                                                                   // 3931
			if ( this.length ) {                                                                                        // 3932
				data = dataUser.get( elem );                                                                               // 3933
                                                                                                               // 3934
				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {                                      // 3935
					i = attrs.length;                                                                                         // 3936
					while ( i-- ) {                                                                                           // 3937
                                                                                                               // 3938
						// Support: IE11+                                                                                        // 3939
						// The attrs elements can be null (#14894)                                                               // 3940
						if ( attrs[ i ] ) {                                                                                      // 3941
							name = attrs[ i ].name;                                                                                 // 3942
							if ( name.indexOf( "data-" ) === 0 ) {                                                                  // 3943
								name = jQuery.camelCase( name.slice( 5 ) );                                                            // 3944
								dataAttr( elem, name, data[ name ] );                                                                  // 3945
							}                                                                                                       // 3946
						}                                                                                                        // 3947
					}                                                                                                         // 3948
					dataPriv.set( elem, "hasDataAttrs", true );                                                               // 3949
				}                                                                                                          // 3950
			}                                                                                                           // 3951
                                                                                                               // 3952
			return data;                                                                                                // 3953
		}                                                                                                            // 3954
                                                                                                               // 3955
		// Sets multiple values                                                                                      // 3956
		if ( typeof key === "object" ) {                                                                             // 3957
			return this.each( function() {                                                                              // 3958
				dataUser.set( this, key );                                                                                 // 3959
			} );                                                                                                        // 3960
		}                                                                                                            // 3961
                                                                                                               // 3962
		return access( this, function( value ) {                                                                     // 3963
			var data, camelKey;                                                                                         // 3964
                                                                                                               // 3965
			// The calling jQuery object (element matches) is not empty                                                 // 3966
			// (and therefore has an element appears at this[ 0 ]) and the                                              // 3967
			// `value` parameter was not undefined. An empty jQuery object                                              // 3968
			// will result in `undefined` for elem = this[ 0 ] which will                                               // 3969
			// throw an exception if an attempt to read a data cache is made.                                           // 3970
			if ( elem && value === undefined ) {                                                                        // 3971
                                                                                                               // 3972
				// Attempt to get data from the cache                                                                      // 3973
				// with the key as-is                                                                                      // 3974
				data = dataUser.get( elem, key ) ||                                                                        // 3975
                                                                                                               // 3976
					// Try to find dashed key if it exists (gh-2779)                                                          // 3977
					// This is for 2.2.x only                                                                                 // 3978
					dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );                                     // 3979
                                                                                                               // 3980
				if ( data !== undefined ) {                                                                                // 3981
					return data;                                                                                              // 3982
				}                                                                                                          // 3983
                                                                                                               // 3984
				camelKey = jQuery.camelCase( key );                                                                        // 3985
                                                                                                               // 3986
				// Attempt to get data from the cache                                                                      // 3987
				// with the key camelized                                                                                  // 3988
				data = dataUser.get( elem, camelKey );                                                                     // 3989
				if ( data !== undefined ) {                                                                                // 3990
					return data;                                                                                              // 3991
				}                                                                                                          // 3992
                                                                                                               // 3993
				// Attempt to "discover" the data in                                                                       // 3994
				// HTML5 custom data-* attrs                                                                               // 3995
				data = dataAttr( elem, camelKey, undefined );                                                              // 3996
				if ( data !== undefined ) {                                                                                // 3997
					return data;                                                                                              // 3998
				}                                                                                                          // 3999
                                                                                                               // 4000
				// We tried really hard, but the data doesn't exist.                                                       // 4001
				return;                                                                                                    // 4002
			}                                                                                                           // 4003
                                                                                                               // 4004
			// Set the data...                                                                                          // 4005
			camelKey = jQuery.camelCase( key );                                                                         // 4006
			this.each( function() {                                                                                     // 4007
                                                                                                               // 4008
				// First, attempt to store a copy or reference of any                                                      // 4009
				// data that might've been store with a camelCased key.                                                    // 4010
				var data = dataUser.get( this, camelKey );                                                                 // 4011
                                                                                                               // 4012
				// For HTML5 data-* attribute interop, we have to                                                          // 4013
				// store property names with dashes in a camelCase form.                                                   // 4014
				// This might not apply to all properties...*                                                              // 4015
				dataUser.set( this, camelKey, value );                                                                     // 4016
                                                                                                               // 4017
				// *... In the case of properties that might _actually_                                                    // 4018
				// have dashes, we need to also store a copy of that                                                       // 4019
				// unchanged property.                                                                                     // 4020
				if ( key.indexOf( "-" ) > -1 && data !== undefined ) {                                                     // 4021
					dataUser.set( this, key, value );                                                                         // 4022
				}                                                                                                          // 4023
			} );                                                                                                        // 4024
		}, null, value, arguments.length > 1, null, true );                                                          // 4025
	},                                                                                                            // 4026
                                                                                                               // 4027
	removeData: function( key ) {                                                                                 // 4028
		return this.each( function() {                                                                               // 4029
			dataUser.remove( this, key );                                                                               // 4030
		} );                                                                                                         // 4031
	}                                                                                                             // 4032
} );                                                                                                           // 4033
                                                                                                               // 4034
                                                                                                               // 4035
jQuery.extend( {                                                                                               // 4036
	queue: function( elem, type, data ) {                                                                         // 4037
		var queue;                                                                                                   // 4038
                                                                                                               // 4039
		if ( elem ) {                                                                                                // 4040
			type = ( type || "fx" ) + "queue";                                                                          // 4041
			queue = dataPriv.get( elem, type );                                                                         // 4042
                                                                                                               // 4043
			// Speed up dequeue by getting out quickly if this is just a lookup                                         // 4044
			if ( data ) {                                                                                               // 4045
				if ( !queue || jQuery.isArray( data ) ) {                                                                  // 4046
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );                                          // 4047
				} else {                                                                                                   // 4048
					queue.push( data );                                                                                       // 4049
				}                                                                                                          // 4050
			}                                                                                                           // 4051
			return queue || [];                                                                                         // 4052
		}                                                                                                            // 4053
	},                                                                                                            // 4054
                                                                                                               // 4055
	dequeue: function( elem, type ) {                                                                             // 4056
		type = type || "fx";                                                                                         // 4057
                                                                                                               // 4058
		var queue = jQuery.queue( elem, type ),                                                                      // 4059
			startLength = queue.length,                                                                                 // 4060
			fn = queue.shift(),                                                                                         // 4061
			hooks = jQuery._queueHooks( elem, type ),                                                                   // 4062
			next = function() {                                                                                         // 4063
				jQuery.dequeue( elem, type );                                                                              // 4064
			};                                                                                                          // 4065
                                                                                                               // 4066
		// If the fx queue is dequeued, always remove the progress sentinel                                          // 4067
		if ( fn === "inprogress" ) {                                                                                 // 4068
			fn = queue.shift();                                                                                         // 4069
			startLength--;                                                                                              // 4070
		}                                                                                                            // 4071
                                                                                                               // 4072
		if ( fn ) {                                                                                                  // 4073
                                                                                                               // 4074
			// Add a progress sentinel to prevent the fx queue from being                                               // 4075
			// automatically dequeued                                                                                   // 4076
			if ( type === "fx" ) {                                                                                      // 4077
				queue.unshift( "inprogress" );                                                                             // 4078
			}                                                                                                           // 4079
                                                                                                               // 4080
			// Clear up the last queue stop function                                                                    // 4081
			delete hooks.stop;                                                                                          // 4082
			fn.call( elem, next, hooks );                                                                               // 4083
		}                                                                                                            // 4084
                                                                                                               // 4085
		if ( !startLength && hooks ) {                                                                               // 4086
			hooks.empty.fire();                                                                                         // 4087
		}                                                                                                            // 4088
	},                                                                                                            // 4089
                                                                                                               // 4090
	// Not public - generate a queueHooks object, or return the current one                                       // 4091
	_queueHooks: function( elem, type ) {                                                                         // 4092
		var key = type + "queueHooks";                                                                               // 4093
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {                                            // 4094
			empty: jQuery.Callbacks( "once memory" ).add( function() {                                                  // 4095
				dataPriv.remove( elem, [ type + "queue", key ] );                                                          // 4096
			} )                                                                                                         // 4097
		} );                                                                                                         // 4098
	}                                                                                                             // 4099
} );                                                                                                           // 4100
                                                                                                               // 4101
jQuery.fn.extend( {                                                                                            // 4102
	queue: function( type, data ) {                                                                               // 4103
		var setter = 2;                                                                                              // 4104
                                                                                                               // 4105
		if ( typeof type !== "string" ) {                                                                            // 4106
			data = type;                                                                                                // 4107
			type = "fx";                                                                                                // 4108
			setter--;                                                                                                   // 4109
		}                                                                                                            // 4110
                                                                                                               // 4111
		if ( arguments.length < setter ) {                                                                           // 4112
			return jQuery.queue( this[ 0 ], type );                                                                     // 4113
		}                                                                                                            // 4114
                                                                                                               // 4115
		return data === undefined ?                                                                                  // 4116
			this :                                                                                                      // 4117
			this.each( function() {                                                                                     // 4118
				var queue = jQuery.queue( this, type, data );                                                              // 4119
                                                                                                               // 4120
				// Ensure a hooks for this queue                                                                           // 4121
				jQuery._queueHooks( this, type );                                                                          // 4122
                                                                                                               // 4123
				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {                                                      // 4124
					jQuery.dequeue( this, type );                                                                             // 4125
				}                                                                                                          // 4126
			} );                                                                                                        // 4127
	},                                                                                                            // 4128
	dequeue: function( type ) {                                                                                   // 4129
		return this.each( function() {                                                                               // 4130
			jQuery.dequeue( this, type );                                                                               // 4131
		} );                                                                                                         // 4132
	},                                                                                                            // 4133
	clearQueue: function( type ) {                                                                                // 4134
		return this.queue( type || "fx", [] );                                                                       // 4135
	},                                                                                                            // 4136
                                                                                                               // 4137
	// Get a promise resolved when queues of a certain type                                                       // 4138
	// are emptied (fx is the type by default)                                                                    // 4139
	promise: function( type, obj ) {                                                                              // 4140
		var tmp,                                                                                                     // 4141
			count = 1,                                                                                                  // 4142
			defer = jQuery.Deferred(),                                                                                  // 4143
			elements = this,                                                                                            // 4144
			i = this.length,                                                                                            // 4145
			resolve = function() {                                                                                      // 4146
				if ( !( --count ) ) {                                                                                      // 4147
					defer.resolveWith( elements, [ elements ] );                                                              // 4148
				}                                                                                                          // 4149
			};                                                                                                          // 4150
                                                                                                               // 4151
		if ( typeof type !== "string" ) {                                                                            // 4152
			obj = type;                                                                                                 // 4153
			type = undefined;                                                                                           // 4154
		}                                                                                                            // 4155
		type = type || "fx";                                                                                         // 4156
                                                                                                               // 4157
		while ( i-- ) {                                                                                              // 4158
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );                                                   // 4159
			if ( tmp && tmp.empty ) {                                                                                   // 4160
				count++;                                                                                                   // 4161
				tmp.empty.add( resolve );                                                                                  // 4162
			}                                                                                                           // 4163
		}                                                                                                            // 4164
		resolve();                                                                                                   // 4165
		return defer.promise( obj );                                                                                 // 4166
	}                                                                                                             // 4167
} );                                                                                                           // 4168
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;                                                   // 4169
                                                                                                               // 4170
var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );                                      // 4171
                                                                                                               // 4172
                                                                                                               // 4173
var cssExpand = [ "Top", "Right", "Bottom", "Left" ];                                                          // 4174
                                                                                                               // 4175
var isHidden = function( elem, el ) {                                                                          // 4176
                                                                                                               // 4177
		// isHidden might be called from jQuery#filter function;                                                     // 4178
		// in that case, element will be second argument                                                             // 4179
		elem = el || elem;                                                                                           // 4180
		return jQuery.css( elem, "display" ) === "none" ||                                                           // 4181
			!jQuery.contains( elem.ownerDocument, elem );                                                               // 4182
	};                                                                                                            // 4183
                                                                                                               // 4184
                                                                                                               // 4185
                                                                                                               // 4186
function adjustCSS( elem, prop, valueParts, tween ) {                                                          // 4187
	var adjusted,                                                                                                 // 4188
		scale = 1,                                                                                                   // 4189
		maxIterations = 20,                                                                                          // 4190
		currentValue = tween ?                                                                                       // 4191
			function() { return tween.cur(); } :                                                                        // 4192
			function() { return jQuery.css( elem, prop, "" ); },                                                        // 4193
		initial = currentValue(),                                                                                    // 4194
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),                            // 4195
                                                                                                               // 4196
		// Starting value computation is required for potential unit mismatches                                      // 4197
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&                                 // 4198
			rcssNum.exec( jQuery.css( elem, prop ) );                                                                   // 4199
                                                                                                               // 4200
	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {                                                         // 4201
                                                                                                               // 4202
		// Trust units reported by jQuery.css                                                                        // 4203
		unit = unit || initialInUnit[ 3 ];                                                                           // 4204
                                                                                                               // 4205
		// Make sure we update the tween properties later on                                                         // 4206
		valueParts = valueParts || [];                                                                               // 4207
                                                                                                               // 4208
		// Iteratively approximate from a nonzero starting point                                                     // 4209
		initialInUnit = +initial || 1;                                                                               // 4210
                                                                                                               // 4211
		do {                                                                                                         // 4212
                                                                                                               // 4213
			// If previous iteration zeroed out, double until we get *something*.                                       // 4214
			// Use string for doubling so we don't accidentally see scale as unchanged below                            // 4215
			scale = scale || ".5";                                                                                      // 4216
                                                                                                               // 4217
			// Adjust and apply                                                                                         // 4218
			initialInUnit = initialInUnit / scale;                                                                      // 4219
			jQuery.style( elem, prop, initialInUnit + unit );                                                           // 4220
                                                                                                               // 4221
		// Update scale, tolerating zero or NaN from tween.cur()                                                     // 4222
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.                             // 4223
		} while (                                                                                                    // 4224
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations                            // 4225
		);                                                                                                           // 4226
	}                                                                                                             // 4227
                                                                                                               // 4228
	if ( valueParts ) {                                                                                           // 4229
		initialInUnit = +initialInUnit || +initial || 0;                                                             // 4230
                                                                                                               // 4231
		// Apply relative offset (+=/-=) if specified                                                                // 4232
		adjusted = valueParts[ 1 ] ?                                                                                 // 4233
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :                                                 // 4234
			+valueParts[ 2 ];                                                                                           // 4235
		if ( tween ) {                                                                                               // 4236
			tween.unit = unit;                                                                                          // 4237
			tween.start = initialInUnit;                                                                                // 4238
			tween.end = adjusted;                                                                                       // 4239
		}                                                                                                            // 4240
	}                                                                                                             // 4241
	return adjusted;                                                                                              // 4242
}                                                                                                              // 4243
var rcheckableType = ( /^(?:checkbox|radio)$/i );                                                              // 4244
                                                                                                               // 4245
var rtagName = ( /<([\w:-]+)/ );                                                                               // 4246
                                                                                                               // 4247
var rscriptType = ( /^$|\/(?:java|ecma)script/i );                                                             // 4248
                                                                                                               // 4249
                                                                                                               // 4250
                                                                                                               // 4251
// We have to close these tags to support XHTML (#13200)                                                       // 4252
var wrapMap = {                                                                                                // 4253
                                                                                                               // 4254
	// Support: IE9                                                                                               // 4255
	option: [ 1, "<select multiple='multiple'>", "</select>" ],                                                   // 4256
                                                                                                               // 4257
	// XHTML parsers do not magically insert elements in the                                                      // 4258
	// same way that tag soup parsers do. So we cannot shorten                                                    // 4259
	// this by omitting <tbody> or other required elements.                                                       // 4260
	thead: [ 1, "<table>", "</table>" ],                                                                          // 4261
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],                                                       // 4262
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],                                                              // 4263
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],                                                     // 4264
                                                                                                               // 4265
	_default: [ 0, "", "" ]                                                                                       // 4266
};                                                                                                             // 4267
                                                                                                               // 4268
// Support: IE9                                                                                                // 4269
wrapMap.optgroup = wrapMap.option;                                                                             // 4270
                                                                                                               // 4271
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;                            // 4272
wrapMap.th = wrapMap.td;                                                                                       // 4273
                                                                                                               // 4274
                                                                                                               // 4275
function getAll( context, tag ) {                                                                              // 4276
                                                                                                               // 4277
	// Support: IE9-11+                                                                                           // 4278
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)                               // 4279
	var ret = typeof context.getElementsByTagName !== "undefined" ?                                               // 4280
			context.getElementsByTagName( tag || "*" ) :                                                                // 4281
			typeof context.querySelectorAll !== "undefined" ?                                                           // 4282
				context.querySelectorAll( tag || "*" ) :                                                                   // 4283
			[];                                                                                                         // 4284
                                                                                                               // 4285
	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?                                          // 4286
		jQuery.merge( [ context ], ret ) :                                                                           // 4287
		ret;                                                                                                         // 4288
}                                                                                                              // 4289
                                                                                                               // 4290
                                                                                                               // 4291
// Mark scripts as having already been evaluated                                                               // 4292
function setGlobalEval( elems, refElements ) {                                                                 // 4293
	var i = 0,                                                                                                    // 4294
		l = elems.length;                                                                                            // 4295
                                                                                                               // 4296
	for ( ; i < l; i++ ) {                                                                                        // 4297
		dataPriv.set(                                                                                                // 4298
			elems[ i ],                                                                                                 // 4299
			"globalEval",                                                                                               // 4300
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )                                              // 4301
		);                                                                                                           // 4302
	}                                                                                                             // 4303
}                                                                                                              // 4304
                                                                                                               // 4305
                                                                                                               // 4306
var rhtml = /<|&#?\w+;/;                                                                                       // 4307
                                                                                                               // 4308
function buildFragment( elems, context, scripts, selection, ignored ) {                                        // 4309
	var elem, tmp, tag, wrap, contains, j,                                                                        // 4310
		fragment = context.createDocumentFragment(),                                                                 // 4311
		nodes = [],                                                                                                  // 4312
		i = 0,                                                                                                       // 4313
		l = elems.length;                                                                                            // 4314
                                                                                                               // 4315
	for ( ; i < l; i++ ) {                                                                                        // 4316
		elem = elems[ i ];                                                                                           // 4317
                                                                                                               // 4318
		if ( elem || elem === 0 ) {                                                                                  // 4319
                                                                                                               // 4320
			// Add nodes directly                                                                                       // 4321
			if ( jQuery.type( elem ) === "object" ) {                                                                   // 4322
                                                                                                               // 4323
				// Support: Android<4.1, PhantomJS<2                                                                       // 4324
				// push.apply(_, arraylike) throws on ancient WebKit                                                       // 4325
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );                                                    // 4326
                                                                                                               // 4327
			// Convert non-html into a text node                                                                        // 4328
			} else if ( !rhtml.test( elem ) ) {                                                                         // 4329
				nodes.push( context.createTextNode( elem ) );                                                              // 4330
                                                                                                               // 4331
			// Convert html into DOM nodes                                                                              // 4332
			} else {                                                                                                    // 4333
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );                                       // 4334
                                                                                                               // 4335
				// Deserialize a standard representation                                                                   // 4336
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();                                          // 4337
				wrap = wrapMap[ tag ] || wrapMap._default;                                                                 // 4338
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];                                      // 4339
                                                                                                               // 4340
				// Descend through wrappers to the right content                                                           // 4341
				j = wrap[ 0 ];                                                                                             // 4342
				while ( j-- ) {                                                                                            // 4343
					tmp = tmp.lastChild;                                                                                      // 4344
				}                                                                                                          // 4345
                                                                                                               // 4346
				// Support: Android<4.1, PhantomJS<2                                                                       // 4347
				// push.apply(_, arraylike) throws on ancient WebKit                                                       // 4348
				jQuery.merge( nodes, tmp.childNodes );                                                                     // 4349
                                                                                                               // 4350
				// Remember the top-level container                                                                        // 4351
				tmp = fragment.firstChild;                                                                                 // 4352
                                                                                                               // 4353
				// Ensure the created nodes are orphaned (#12392)                                                          // 4354
				tmp.textContent = "";                                                                                      // 4355
			}                                                                                                           // 4356
		}                                                                                                            // 4357
	}                                                                                                             // 4358
                                                                                                               // 4359
	// Remove wrapper from fragment                                                                               // 4360
	fragment.textContent = "";                                                                                    // 4361
                                                                                                               // 4362
	i = 0;                                                                                                        // 4363
	while ( ( elem = nodes[ i++ ] ) ) {                                                                           // 4364
                                                                                                               // 4365
		// Skip elements already in the context collection (trac-4087)                                               // 4366
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {                                                 // 4367
			if ( ignored ) {                                                                                            // 4368
				ignored.push( elem );                                                                                      // 4369
			}                                                                                                           // 4370
			continue;                                                                                                   // 4371
		}                                                                                                            // 4372
                                                                                                               // 4373
		contains = jQuery.contains( elem.ownerDocument, elem );                                                      // 4374
                                                                                                               // 4375
		// Append to fragment                                                                                        // 4376
		tmp = getAll( fragment.appendChild( elem ), "script" );                                                      // 4377
                                                                                                               // 4378
		// Preserve script evaluation history                                                                        // 4379
		if ( contains ) {                                                                                            // 4380
			setGlobalEval( tmp );                                                                                       // 4381
		}                                                                                                            // 4382
                                                                                                               // 4383
		// Capture executables                                                                                       // 4384
		if ( scripts ) {                                                                                             // 4385
			j = 0;                                                                                                      // 4386
			while ( ( elem = tmp[ j++ ] ) ) {                                                                           // 4387
				if ( rscriptType.test( elem.type || "" ) ) {                                                               // 4388
					scripts.push( elem );                                                                                     // 4389
				}                                                                                                          // 4390
			}                                                                                                           // 4391
		}                                                                                                            // 4392
	}                                                                                                             // 4393
                                                                                                               // 4394
	return fragment;                                                                                              // 4395
}                                                                                                              // 4396
                                                                                                               // 4397
                                                                                                               // 4398
( function() {                                                                                                 // 4399
	var fragment = document.createDocumentFragment(),                                                             // 4400
		div = fragment.appendChild( document.createElement( "div" ) ),                                               // 4401
		input = document.createElement( "input" );                                                                   // 4402
                                                                                                               // 4403
	// Support: Android 4.0-4.3, Safari<=5.1                                                                      // 4404
	// Check state lost if the name is set (#11217)                                                               // 4405
	// Support: Windows Web Apps (WWA)                                                                            // 4406
	// `name` and `type` must use .setAttribute for WWA (#14901)                                                  // 4407
	input.setAttribute( "type", "radio" );                                                                        // 4408
	input.setAttribute( "checked", "checked" );                                                                   // 4409
	input.setAttribute( "name", "t" );                                                                            // 4410
                                                                                                               // 4411
	div.appendChild( input );                                                                                     // 4412
                                                                                                               // 4413
	// Support: Safari<=5.1, Android<4.2                                                                          // 4414
	// Older WebKit doesn't clone checked state correctly in fragments                                            // 4415
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;                               // 4416
                                                                                                               // 4417
	// Support: IE<=11+                                                                                           // 4418
	// Make sure textarea (and checkbox) defaultValue is properly cloned                                          // 4419
	div.innerHTML = "<textarea>x</textarea>";                                                                     // 4420
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;                                      // 4421
} )();                                                                                                         // 4422
                                                                                                               // 4423
                                                                                                               // 4424
var                                                                                                            // 4425
	rkeyEvent = /^key/,                                                                                           // 4426
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,                                               // 4427
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;                                                                       // 4428
                                                                                                               // 4429
function returnTrue() {                                                                                        // 4430
	return true;                                                                                                  // 4431
}                                                                                                              // 4432
                                                                                                               // 4433
function returnFalse() {                                                                                       // 4434
	return false;                                                                                                 // 4435
}                                                                                                              // 4436
                                                                                                               // 4437
// Support: IE9                                                                                                // 4438
// See #13393 for more info                                                                                    // 4439
function safeActiveElement() {                                                                                 // 4440
	try {                                                                                                         // 4441
		return document.activeElement;                                                                               // 4442
	} catch ( err ) { }                                                                                           // 4443
}                                                                                                              // 4444
                                                                                                               // 4445
function on( elem, types, selector, data, fn, one ) {                                                          // 4446
	var origFn, type;                                                                                             // 4447
                                                                                                               // 4448
	// Types can be a map of types/handlers                                                                       // 4449
	if ( typeof types === "object" ) {                                                                            // 4450
                                                                                                               // 4451
		// ( types-Object, selector, data )                                                                          // 4452
		if ( typeof selector !== "string" ) {                                                                        // 4453
                                                                                                               // 4454
			// ( types-Object, data )                                                                                   // 4455
			data = data || selector;                                                                                    // 4456
			selector = undefined;                                                                                       // 4457
		}                                                                                                            // 4458
		for ( type in types ) {                                                                                      // 4459
			on( elem, type, selector, data, types[ type ], one );                                                       // 4460
		}                                                                                                            // 4461
		return elem;                                                                                                 // 4462
	}                                                                                                             // 4463
                                                                                                               // 4464
	if ( data == null && fn == null ) {                                                                           // 4465
                                                                                                               // 4466
		// ( types, fn )                                                                                             // 4467
		fn = selector;                                                                                               // 4468
		data = selector = undefined;                                                                                 // 4469
	} else if ( fn == null ) {                                                                                    // 4470
		if ( typeof selector === "string" ) {                                                                        // 4471
                                                                                                               // 4472
			// ( types, selector, fn )                                                                                  // 4473
			fn = data;                                                                                                  // 4474
			data = undefined;                                                                                           // 4475
		} else {                                                                                                     // 4476
                                                                                                               // 4477
			// ( types, data, fn )                                                                                      // 4478
			fn = data;                                                                                                  // 4479
			data = selector;                                                                                            // 4480
			selector = undefined;                                                                                       // 4481
		}                                                                                                            // 4482
	}                                                                                                             // 4483
	if ( fn === false ) {                                                                                         // 4484
		fn = returnFalse;                                                                                            // 4485
	} else if ( !fn ) {                                                                                           // 4486
		return elem;                                                                                                 // 4487
	}                                                                                                             // 4488
                                                                                                               // 4489
	if ( one === 1 ) {                                                                                            // 4490
		origFn = fn;                                                                                                 // 4491
		fn = function( event ) {                                                                                     // 4492
                                                                                                               // 4493
			// Can use an empty set, since event contains the info                                                      // 4494
			jQuery().off( event );                                                                                      // 4495
			return origFn.apply( this, arguments );                                                                     // 4496
		};                                                                                                           // 4497
                                                                                                               // 4498
		// Use same guid so caller can remove using origFn                                                           // 4499
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );                                                    // 4500
	}                                                                                                             // 4501
	return elem.each( function() {                                                                                // 4502
		jQuery.event.add( this, types, fn, data, selector );                                                         // 4503
	} );                                                                                                          // 4504
}                                                                                                              // 4505
                                                                                                               // 4506
/*                                                                                                             // 4507
 * Helper functions for managing events -- not part of the public interface.                                   // 4508
 * Props to Dean Edwards' addEvent library for many of the ideas.                                              // 4509
 */                                                                                                            // 4510
jQuery.event = {                                                                                               // 4511
                                                                                                               // 4512
	global: {},                                                                                                   // 4513
                                                                                                               // 4514
	add: function( elem, types, handler, data, selector ) {                                                       // 4515
                                                                                                               // 4516
		var handleObjIn, eventHandle, tmp,                                                                           // 4517
			events, t, handleObj,                                                                                       // 4518
			special, handlers, type, namespaces, origType,                                                              // 4519
			elemData = dataPriv.get( elem );                                                                            // 4520
                                                                                                               // 4521
		// Don't attach events to noData or text/comment nodes (but allow plain objects)                             // 4522
		if ( !elemData ) {                                                                                           // 4523
			return;                                                                                                     // 4524
		}                                                                                                            // 4525
                                                                                                               // 4526
		// Caller can pass in an object of custom data in lieu of the handler                                        // 4527
		if ( handler.handler ) {                                                                                     // 4528
			handleObjIn = handler;                                                                                      // 4529
			handler = handleObjIn.handler;                                                                              // 4530
			selector = handleObjIn.selector;                                                                            // 4531
		}                                                                                                            // 4532
                                                                                                               // 4533
		// Make sure that the handler has a unique ID, used to find/remove it later                                  // 4534
		if ( !handler.guid ) {                                                                                       // 4535
			handler.guid = jQuery.guid++;                                                                               // 4536
		}                                                                                                            // 4537
                                                                                                               // 4538
		// Init the element's event structure and main handler, if this is the first                                 // 4539
		if ( !( events = elemData.events ) ) {                                                                       // 4540
			events = elemData.events = {};                                                                              // 4541
		}                                                                                                            // 4542
		if ( !( eventHandle = elemData.handle ) ) {                                                                  // 4543
			eventHandle = elemData.handle = function( e ) {                                                             // 4544
                                                                                                               // 4545
				// Discard the second event of a jQuery.event.trigger() and                                                // 4546
				// when an event is called after a page has unloaded                                                       // 4547
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?                                // 4548
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;                                               // 4549
			};                                                                                                          // 4550
		}                                                                                                            // 4551
                                                                                                               // 4552
		// Handle multiple events separated by a space                                                               // 4553
		types = ( types || "" ).match( rnotwhite ) || [ "" ];                                                        // 4554
		t = types.length;                                                                                            // 4555
		while ( t-- ) {                                                                                              // 4556
			tmp = rtypenamespace.exec( types[ t ] ) || [];                                                              // 4557
			type = origType = tmp[ 1 ];                                                                                 // 4558
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();                                                        // 4559
                                                                                                               // 4560
			// There *must* be a type, no attaching namespace-only handlers                                             // 4561
			if ( !type ) {                                                                                              // 4562
				continue;                                                                                                  // 4563
			}                                                                                                           // 4564
                                                                                                               // 4565
			// If event changes its type, use the special event handlers for the changed type                           // 4566
			special = jQuery.event.special[ type ] || {};                                                               // 4567
                                                                                                               // 4568
			// If selector defined, determine special event api type, otherwise given type                              // 4569
			type = ( selector ? special.delegateType : special.bindType ) || type;                                      // 4570
                                                                                                               // 4571
			// Update special based on newly reset type                                                                 // 4572
			special = jQuery.event.special[ type ] || {};                                                               // 4573
                                                                                                               // 4574
			// handleObj is passed to all event handlers                                                                // 4575
			handleObj = jQuery.extend( {                                                                                // 4576
				type: type,                                                                                                // 4577
				origType: origType,                                                                                        // 4578
				data: data,                                                                                                // 4579
				handler: handler,                                                                                          // 4580
				guid: handler.guid,                                                                                        // 4581
				selector: selector,                                                                                        // 4582
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),                                 // 4583
				namespace: namespaces.join( "." )                                                                          // 4584
			}, handleObjIn );                                                                                           // 4585
                                                                                                               // 4586
			// Init the event handler queue if we're the first                                                          // 4587
			if ( !( handlers = events[ type ] ) ) {                                                                     // 4588
				handlers = events[ type ] = [];                                                                            // 4589
				handlers.delegateCount = 0;                                                                                // 4590
                                                                                                               // 4591
				// Only use addEventListener if the special events handler returns false                                   // 4592
				if ( !special.setup ||                                                                                     // 4593
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {                                   // 4594
                                                                                                               // 4595
					if ( elem.addEventListener ) {                                                                            // 4596
						elem.addEventListener( type, eventHandle );                                                              // 4597
					}                                                                                                         // 4598
				}                                                                                                          // 4599
			}                                                                                                           // 4600
                                                                                                               // 4601
			if ( special.add ) {                                                                                        // 4602
				special.add.call( elem, handleObj );                                                                       // 4603
                                                                                                               // 4604
				if ( !handleObj.handler.guid ) {                                                                           // 4605
					handleObj.handler.guid = handler.guid;                                                                    // 4606
				}                                                                                                          // 4607
			}                                                                                                           // 4608
                                                                                                               // 4609
			// Add to the element's handler list, delegates in front                                                    // 4610
			if ( selector ) {                                                                                           // 4611
				handlers.splice( handlers.delegateCount++, 0, handleObj );                                                 // 4612
			} else {                                                                                                    // 4613
				handlers.push( handleObj );                                                                                // 4614
			}                                                                                                           // 4615
                                                                                                               // 4616
			// Keep track of which events have ever been used, for event optimization                                   // 4617
			jQuery.event.global[ type ] = true;                                                                         // 4618
		}                                                                                                            // 4619
                                                                                                               // 4620
	},                                                                                                            // 4621
                                                                                                               // 4622
	// Detach an event or set of events from an element                                                           // 4623
	remove: function( elem, types, handler, selector, mappedTypes ) {                                             // 4624
                                                                                                               // 4625
		var j, origCount, tmp,                                                                                       // 4626
			events, t, handleObj,                                                                                       // 4627
			special, handlers, type, namespaces, origType,                                                              // 4628
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );                                                // 4629
                                                                                                               // 4630
		if ( !elemData || !( events = elemData.events ) ) {                                                          // 4631
			return;                                                                                                     // 4632
		}                                                                                                            // 4633
                                                                                                               // 4634
		// Once for each type.namespace in types; type may be omitted                                                // 4635
		types = ( types || "" ).match( rnotwhite ) || [ "" ];                                                        // 4636
		t = types.length;                                                                                            // 4637
		while ( t-- ) {                                                                                              // 4638
			tmp = rtypenamespace.exec( types[ t ] ) || [];                                                              // 4639
			type = origType = tmp[ 1 ];                                                                                 // 4640
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();                                                        // 4641
                                                                                                               // 4642
			// Unbind all events (on this namespace, if provided) for the element                                       // 4643
			if ( !type ) {                                                                                              // 4644
				for ( type in events ) {                                                                                   // 4645
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );                                  // 4646
				}                                                                                                          // 4647
				continue;                                                                                                  // 4648
			}                                                                                                           // 4649
                                                                                                               // 4650
			special = jQuery.event.special[ type ] || {};                                                               // 4651
			type = ( selector ? special.delegateType : special.bindType ) || type;                                      // 4652
			handlers = events[ type ] || [];                                                                            // 4653
			tmp = tmp[ 2 ] &&                                                                                           // 4654
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );                                  // 4655
                                                                                                               // 4656
			// Remove matching events                                                                                   // 4657
			origCount = j = handlers.length;                                                                            // 4658
			while ( j-- ) {                                                                                             // 4659
				handleObj = handlers[ j ];                                                                                 // 4660
                                                                                                               // 4661
				if ( ( mappedTypes || origType === handleObj.origType ) &&                                                 // 4662
					( !handler || handler.guid === handleObj.guid ) &&                                                        // 4663
					( !tmp || tmp.test( handleObj.namespace ) ) &&                                                            // 4664
					( !selector || selector === handleObj.selector ||                                                         // 4665
						selector === "**" && handleObj.selector ) ) {                                                            // 4666
					handlers.splice( j, 1 );                                                                                  // 4667
                                                                                                               // 4668
					if ( handleObj.selector ) {                                                                               // 4669
						handlers.delegateCount--;                                                                                // 4670
					}                                                                                                         // 4671
					if ( special.remove ) {                                                                                   // 4672
						special.remove.call( elem, handleObj );                                                                  // 4673
					}                                                                                                         // 4674
				}                                                                                                          // 4675
			}                                                                                                           // 4676
                                                                                                               // 4677
			// Remove generic event handler if we removed something and no more handlers exist                          // 4678
			// (avoids potential for endless recursion during removal of special event handlers)                        // 4679
			if ( origCount && !handlers.length ) {                                                                      // 4680
				if ( !special.teardown ||                                                                                  // 4681
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {                                  // 4682
                                                                                                               // 4683
					jQuery.removeEvent( elem, type, elemData.handle );                                                        // 4684
				}                                                                                                          // 4685
                                                                                                               // 4686
				delete events[ type ];                                                                                     // 4687
			}                                                                                                           // 4688
		}                                                                                                            // 4689
                                                                                                               // 4690
		// Remove data and the expando if it's no longer used                                                        // 4691
		if ( jQuery.isEmptyObject( events ) ) {                                                                      // 4692
			dataPriv.remove( elem, "handle events" );                                                                   // 4693
		}                                                                                                            // 4694
	},                                                                                                            // 4695
                                                                                                               // 4696
	dispatch: function( event ) {                                                                                 // 4697
                                                                                                               // 4698
		// Make a writable jQuery.Event from the native event object                                                 // 4699
		event = jQuery.event.fix( event );                                                                           // 4700
                                                                                                               // 4701
		var i, j, ret, matched, handleObj,                                                                           // 4702
			handlerQueue = [],                                                                                          // 4703
			args = slice.call( arguments ),                                                                             // 4704
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],                                    // 4705
			special = jQuery.event.special[ event.type ] || {};                                                         // 4706
                                                                                                               // 4707
		// Use the fix-ed jQuery.Event rather than the (read-only) native event                                      // 4708
		args[ 0 ] = event;                                                                                           // 4709
		event.delegateTarget = this;                                                                                 // 4710
                                                                                                               // 4711
		// Call the preDispatch hook for the mapped type, and let it bail if desired                                 // 4712
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {                            // 4713
			return;                                                                                                     // 4714
		}                                                                                                            // 4715
                                                                                                               // 4716
		// Determine handlers                                                                                        // 4717
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );                                          // 4718
                                                                                                               // 4719
		// Run delegates first; they may want to stop propagation beneath us                                         // 4720
		i = 0;                                                                                                       // 4721
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {                               // 4722
			event.currentTarget = matched.elem;                                                                         // 4723
                                                                                                               // 4724
			j = 0;                                                                                                      // 4725
			while ( ( handleObj = matched.handlers[ j++ ] ) &&                                                          // 4726
				!event.isImmediatePropagationStopped() ) {                                                                 // 4727
                                                                                                               // 4728
				// Triggered event must either 1) have no namespace, or 2) have namespace(s)                               // 4729
				// a subset or equal to those in the bound event (both can have no namespace).                             // 4730
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {                                 // 4731
                                                                                                               // 4732
					event.handleObj = handleObj;                                                                              // 4733
					event.data = handleObj.data;                                                                              // 4734
                                                                                                               // 4735
					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||                                    // 4736
						handleObj.handler ).apply( matched.elem, args );                                                         // 4737
                                                                                                               // 4738
					if ( ret !== undefined ) {                                                                                // 4739
						if ( ( event.result = ret ) === false ) {                                                                // 4740
							event.preventDefault();                                                                                 // 4741
							event.stopPropagation();                                                                                // 4742
						}                                                                                                        // 4743
					}                                                                                                         // 4744
				}                                                                                                          // 4745
			}                                                                                                           // 4746
		}                                                                                                            // 4747
                                                                                                               // 4748
		// Call the postDispatch hook for the mapped type                                                            // 4749
		if ( special.postDispatch ) {                                                                                // 4750
			special.postDispatch.call( this, event );                                                                   // 4751
		}                                                                                                            // 4752
                                                                                                               // 4753
		return event.result;                                                                                         // 4754
	},                                                                                                            // 4755
                                                                                                               // 4756
	handlers: function( event, handlers ) {                                                                       // 4757
		var i, matches, sel, handleObj,                                                                              // 4758
			handlerQueue = [],                                                                                          // 4759
			delegateCount = handlers.delegateCount,                                                                     // 4760
			cur = event.target;                                                                                         // 4761
                                                                                                               // 4762
		// Support (at least): Chrome, IE9                                                                           // 4763
		// Find delegate handlers                                                                                    // 4764
		// Black-hole SVG <use> instance trees (#13180)                                                              // 4765
		//                                                                                                           // 4766
		// Support: Firefox<=42+                                                                                     // 4767
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)                               // 4768
		if ( delegateCount && cur.nodeType &&                                                                        // 4769
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {                                 // 4770
                                                                                                               // 4771
			for ( ; cur !== this; cur = cur.parentNode || this ) {                                                      // 4772
                                                                                                               // 4773
				// Don't check non-elements (#13208)                                                                       // 4774
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)                                // 4775
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {                         // 4776
					matches = [];                                                                                             // 4777
					for ( i = 0; i < delegateCount; i++ ) {                                                                   // 4778
						handleObj = handlers[ i ];                                                                               // 4779
                                                                                                               // 4780
						// Don't conflict with Object.prototype properties (#13203)                                              // 4781
						sel = handleObj.selector + " ";                                                                          // 4782
                                                                                                               // 4783
						if ( matches[ sel ] === undefined ) {                                                                    // 4784
							matches[ sel ] = handleObj.needsContext ?                                                               // 4785
								jQuery( sel, this ).index( cur ) > -1 :                                                                // 4786
								jQuery.find( sel, this, null, [ cur ] ).length;                                                        // 4787
						}                                                                                                        // 4788
						if ( matches[ sel ] ) {                                                                                  // 4789
							matches.push( handleObj );                                                                              // 4790
						}                                                                                                        // 4791
					}                                                                                                         // 4792
					if ( matches.length ) {                                                                                   // 4793
						handlerQueue.push( { elem: cur, handlers: matches } );                                                   // 4794
					}                                                                                                         // 4795
				}                                                                                                          // 4796
			}                                                                                                           // 4797
		}                                                                                                            // 4798
                                                                                                               // 4799
		// Add the remaining (directly-bound) handlers                                                               // 4800
		if ( delegateCount < handlers.length ) {                                                                     // 4801
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );                             // 4802
		}                                                                                                            // 4803
                                                                                                               // 4804
		return handlerQueue;                                                                                         // 4805
	},                                                                                                            // 4806
                                                                                                               // 4807
	// Includes some event props shared by KeyEvent and MouseEvent                                                // 4808
	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +                               // 4809
		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),                                 // 4810
                                                                                                               // 4811
	fixHooks: {},                                                                                                 // 4812
                                                                                                               // 4813
	keyHooks: {                                                                                                   // 4814
		props: "char charCode key keyCode".split( " " ),                                                             // 4815
		filter: function( event, original ) {                                                                        // 4816
                                                                                                               // 4817
			// Add which for key events                                                                                 // 4818
			if ( event.which == null ) {                                                                                // 4819
				event.which = original.charCode != null ? original.charCode : original.keyCode;                            // 4820
			}                                                                                                           // 4821
                                                                                                               // 4822
			return event;                                                                                               // 4823
		}                                                                                                            // 4824
	},                                                                                                            // 4825
                                                                                                               // 4826
	mouseHooks: {                                                                                                 // 4827
		props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +                                     // 4828
			"screenX screenY toElement" ).split( " " ),                                                                 // 4829
		filter: function( event, original ) {                                                                        // 4830
			var eventDoc, doc, body,                                                                                    // 4831
				button = original.button;                                                                                  // 4832
                                                                                                               // 4833
			// Calculate pageX/Y if missing and clientX/Y available                                                     // 4834
			if ( event.pageX == null && original.clientX != null ) {                                                    // 4835
				eventDoc = event.target.ownerDocument || document;                                                         // 4836
				doc = eventDoc.documentElement;                                                                            // 4837
				body = eventDoc.body;                                                                                      // 4838
                                                                                                               // 4839
				event.pageX = original.clientX +                                                                           // 4840
					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -                                               // 4841
					( doc && doc.clientLeft || body && body.clientLeft || 0 );                                                // 4842
				event.pageY = original.clientY +                                                                           // 4843
					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -                                               // 4844
					( doc && doc.clientTop  || body && body.clientTop  || 0 );                                                // 4845
			}                                                                                                           // 4846
                                                                                                               // 4847
			// Add which for click: 1 === left; 2 === middle; 3 === right                                               // 4848
			// Note: button is not normalized, so don't use it                                                          // 4849
			if ( !event.which && button !== undefined ) {                                                               // 4850
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );                            // 4851
			}                                                                                                           // 4852
                                                                                                               // 4853
			return event;                                                                                               // 4854
		}                                                                                                            // 4855
	},                                                                                                            // 4856
                                                                                                               // 4857
	fix: function( event ) {                                                                                      // 4858
		if ( event[ jQuery.expando ] ) {                                                                             // 4859
			return event;                                                                                               // 4860
		}                                                                                                            // 4861
                                                                                                               // 4862
		// Create a writable copy of the event object and normalize some properties                                  // 4863
		var i, prop, copy,                                                                                           // 4864
			type = event.type,                                                                                          // 4865
			originalEvent = event,                                                                                      // 4866
			fixHook = this.fixHooks[ type ];                                                                            // 4867
                                                                                                               // 4868
		if ( !fixHook ) {                                                                                            // 4869
			this.fixHooks[ type ] = fixHook =                                                                           // 4870
				rmouseEvent.test( type ) ? this.mouseHooks :                                                               // 4871
				rkeyEvent.test( type ) ? this.keyHooks :                                                                   // 4872
				{};                                                                                                        // 4873
		}                                                                                                            // 4874
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;                                      // 4875
                                                                                                               // 4876
		event = new jQuery.Event( originalEvent );                                                                   // 4877
                                                                                                               // 4878
		i = copy.length;                                                                                             // 4879
		while ( i-- ) {                                                                                              // 4880
			prop = copy[ i ];                                                                                           // 4881
			event[ prop ] = originalEvent[ prop ];                                                                      // 4882
		}                                                                                                            // 4883
                                                                                                               // 4884
		// Support: Cordova 2.5 (WebKit) (#13255)                                                                    // 4885
		// All events should have a target; Cordova deviceready doesn't                                              // 4886
		if ( !event.target ) {                                                                                       // 4887
			event.target = document;                                                                                    // 4888
		}                                                                                                            // 4889
                                                                                                               // 4890
		// Support: Safari 6.0+, Chrome<28                                                                           // 4891
		// Target should not be a text node (#504, #13143)                                                           // 4892
		if ( event.target.nodeType === 3 ) {                                                                         // 4893
			event.target = event.target.parentNode;                                                                     // 4894
		}                                                                                                            // 4895
                                                                                                               // 4896
		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;                                      // 4897
	},                                                                                                            // 4898
                                                                                                               // 4899
	special: {                                                                                                    // 4900
		load: {                                                                                                      // 4901
                                                                                                               // 4902
			// Prevent triggered image.load events from bubbling to window.load                                         // 4903
			noBubble: true                                                                                              // 4904
		},                                                                                                           // 4905
		focus: {                                                                                                     // 4906
                                                                                                               // 4907
			// Fire native event if possible so blur/focus sequence is correct                                          // 4908
			trigger: function() {                                                                                       // 4909
				if ( this !== safeActiveElement() && this.focus ) {                                                        // 4910
					this.focus();                                                                                             // 4911
					return false;                                                                                             // 4912
				}                                                                                                          // 4913
			},                                                                                                          // 4914
			delegateType: "focusin"                                                                                     // 4915
		},                                                                                                           // 4916
		blur: {                                                                                                      // 4917
			trigger: function() {                                                                                       // 4918
				if ( this === safeActiveElement() && this.blur ) {                                                         // 4919
					this.blur();                                                                                              // 4920
					return false;                                                                                             // 4921
				}                                                                                                          // 4922
			},                                                                                                          // 4923
			delegateType: "focusout"                                                                                    // 4924
		},                                                                                                           // 4925
		click: {                                                                                                     // 4926
                                                                                                               // 4927
			// For checkbox, fire native event so checked state will be right                                           // 4928
			trigger: function() {                                                                                       // 4929
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {                        // 4930
					this.click();                                                                                             // 4931
					return false;                                                                                             // 4932
				}                                                                                                          // 4933
			},                                                                                                          // 4934
                                                                                                               // 4935
			// For cross-browser consistency, don't fire native .click() on links                                       // 4936
			_default: function( event ) {                                                                               // 4937
				return jQuery.nodeName( event.target, "a" );                                                               // 4938
			}                                                                                                           // 4939
		},                                                                                                           // 4940
                                                                                                               // 4941
		beforeunload: {                                                                                              // 4942
			postDispatch: function( event ) {                                                                           // 4943
                                                                                                               // 4944
				// Support: Firefox 20+                                                                                    // 4945
				// Firefox doesn't alert if the returnValue field is not set.                                              // 4946
				if ( event.result !== undefined && event.originalEvent ) {                                                 // 4947
					event.originalEvent.returnValue = event.result;                                                           // 4948
				}                                                                                                          // 4949
			}                                                                                                           // 4950
		}                                                                                                            // 4951
	}                                                                                                             // 4952
};                                                                                                             // 4953
                                                                                                               // 4954
jQuery.removeEvent = function( elem, type, handle ) {                                                          // 4955
                                                                                                               // 4956
	// This "if" is needed for plain objects                                                                      // 4957
	if ( elem.removeEventListener ) {                                                                             // 4958
		elem.removeEventListener( type, handle );                                                                    // 4959
	}                                                                                                             // 4960
};                                                                                                             // 4961
                                                                                                               // 4962
jQuery.Event = function( src, props ) {                                                                        // 4963
                                                                                                               // 4964
	// Allow instantiation without the 'new' keyword                                                              // 4965
	if ( !( this instanceof jQuery.Event ) ) {                                                                    // 4966
		return new jQuery.Event( src, props );                                                                       // 4967
	}                                                                                                             // 4968
                                                                                                               // 4969
	// Event object                                                                                               // 4970
	if ( src && src.type ) {                                                                                      // 4971
		this.originalEvent = src;                                                                                    // 4972
		this.type = src.type;                                                                                        // 4973
                                                                                                               // 4974
		// Events bubbling up the document may have been marked as prevented                                         // 4975
		// by a handler lower down the tree; reflect the correct value.                                              // 4976
		this.isDefaultPrevented = src.defaultPrevented ||                                                            // 4977
				src.defaultPrevented === undefined &&                                                                      // 4978
                                                                                                               // 4979
				// Support: Android<4.0                                                                                    // 4980
				src.returnValue === false ?                                                                                // 4981
			returnTrue :                                                                                                // 4982
			returnFalse;                                                                                                // 4983
                                                                                                               // 4984
	// Event type                                                                                                 // 4985
	} else {                                                                                                      // 4986
		this.type = src;                                                                                             // 4987
	}                                                                                                             // 4988
                                                                                                               // 4989
	// Put explicitly provided properties onto the event object                                                   // 4990
	if ( props ) {                                                                                                // 4991
		jQuery.extend( this, props );                                                                                // 4992
	}                                                                                                             // 4993
                                                                                                               // 4994
	// Create a timestamp if incoming event doesn't have one                                                      // 4995
	this.timeStamp = src && src.timeStamp || jQuery.now();                                                        // 4996
                                                                                                               // 4997
	// Mark it as fixed                                                                                           // 4998
	this[ jQuery.expando ] = true;                                                                                // 4999
};                                                                                                             // 5000
                                                                                                               // 5001
// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding                        // 5002
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html                           // 5003
jQuery.Event.prototype = {                                                                                     // 5004
	constructor: jQuery.Event,                                                                                    // 5005
	isDefaultPrevented: returnFalse,                                                                              // 5006
	isPropagationStopped: returnFalse,                                                                            // 5007
	isImmediatePropagationStopped: returnFalse,                                                                   // 5008
	isSimulated: false,                                                                                           // 5009
                                                                                                               // 5010
	preventDefault: function() {                                                                                  // 5011
		var e = this.originalEvent;                                                                                  // 5012
                                                                                                               // 5013
		this.isDefaultPrevented = returnTrue;                                                                        // 5014
                                                                                                               // 5015
		if ( e && !this.isSimulated ) {                                                                              // 5016
			e.preventDefault();                                                                                         // 5017
		}                                                                                                            // 5018
	},                                                                                                            // 5019
	stopPropagation: function() {                                                                                 // 5020
		var e = this.originalEvent;                                                                                  // 5021
                                                                                                               // 5022
		this.isPropagationStopped = returnTrue;                                                                      // 5023
                                                                                                               // 5024
		if ( e && !this.isSimulated ) {                                                                              // 5025
			e.stopPropagation();                                                                                        // 5026
		}                                                                                                            // 5027
	},                                                                                                            // 5028
	stopImmediatePropagation: function() {                                                                        // 5029
		var e = this.originalEvent;                                                                                  // 5030
                                                                                                               // 5031
		this.isImmediatePropagationStopped = returnTrue;                                                             // 5032
                                                                                                               // 5033
		if ( e && !this.isSimulated ) {                                                                              // 5034
			e.stopImmediatePropagation();                                                                               // 5035
		}                                                                                                            // 5036
                                                                                                               // 5037
		this.stopPropagation();                                                                                      // 5038
	}                                                                                                             // 5039
};                                                                                                             // 5040
                                                                                                               // 5041
// Create mouseenter/leave events using mouseover/out and event-time checks                                    // 5042
// so that event delegation works in jQuery.                                                                   // 5043
// Do the same for pointerenter/pointerleave and pointerover/pointerout                                        // 5044
//                                                                                                             // 5045
// Support: Safari 7 only                                                                                      // 5046
// Safari sends mouseenter too often; see:                                                                     // 5047
// https://code.google.com/p/chromium/issues/detail?id=470258                                                  // 5048
// for the description of the bug (it existed in older Chrome versions as well).                               // 5049
jQuery.each( {                                                                                                 // 5050
	mouseenter: "mouseover",                                                                                      // 5051
	mouseleave: "mouseout",                                                                                       // 5052
	pointerenter: "pointerover",                                                                                  // 5053
	pointerleave: "pointerout"                                                                                    // 5054
}, function( orig, fix ) {                                                                                     // 5055
	jQuery.event.special[ orig ] = {                                                                              // 5056
		delegateType: fix,                                                                                           // 5057
		bindType: fix,                                                                                               // 5058
                                                                                                               // 5059
		handle: function( event ) {                                                                                  // 5060
			var ret,                                                                                                    // 5061
				target = this,                                                                                             // 5062
				related = event.relatedTarget,                                                                             // 5063
				handleObj = event.handleObj;                                                                               // 5064
                                                                                                               // 5065
			// For mouseenter/leave call the handler if related is outside the target.                                  // 5066
			// NB: No relatedTarget if the mouse left/entered the browser window                                        // 5067
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {                          // 5068
				event.type = handleObj.origType;                                                                           // 5069
				ret = handleObj.handler.apply( this, arguments );                                                          // 5070
				event.type = fix;                                                                                          // 5071
			}                                                                                                           // 5072
			return ret;                                                                                                 // 5073
		}                                                                                                            // 5074
	};                                                                                                            // 5075
} );                                                                                                           // 5076
                                                                                                               // 5077
jQuery.fn.extend( {                                                                                            // 5078
	on: function( types, selector, data, fn ) {                                                                   // 5079
		return on( this, types, selector, data, fn );                                                                // 5080
	},                                                                                                            // 5081
	one: function( types, selector, data, fn ) {                                                                  // 5082
		return on( this, types, selector, data, fn, 1 );                                                             // 5083
	},                                                                                                            // 5084
	off: function( types, selector, fn ) {                                                                        // 5085
		var handleObj, type;                                                                                         // 5086
		if ( types && types.preventDefault && types.handleObj ) {                                                    // 5087
                                                                                                               // 5088
			// ( event )  dispatched jQuery.Event                                                                       // 5089
			handleObj = types.handleObj;                                                                                // 5090
			jQuery( types.delegateTarget ).off(                                                                         // 5091
				handleObj.namespace ?                                                                                      // 5092
					handleObj.origType + "." + handleObj.namespace :                                                          // 5093
					handleObj.origType,                                                                                       // 5094
				handleObj.selector,                                                                                        // 5095
				handleObj.handler                                                                                          // 5096
			);                                                                                                          // 5097
			return this;                                                                                                // 5098
		}                                                                                                            // 5099
		if ( typeof types === "object" ) {                                                                           // 5100
                                                                                                               // 5101
			// ( types-object [, selector] )                                                                            // 5102
			for ( type in types ) {                                                                                     // 5103
				this.off( type, selector, types[ type ] );                                                                 // 5104
			}                                                                                                           // 5105
			return this;                                                                                                // 5106
		}                                                                                                            // 5107
		if ( selector === false || typeof selector === "function" ) {                                                // 5108
                                                                                                               // 5109
			// ( types [, fn] )                                                                                         // 5110
			fn = selector;                                                                                              // 5111
			selector = undefined;                                                                                       // 5112
		}                                                                                                            // 5113
		if ( fn === false ) {                                                                                        // 5114
			fn = returnFalse;                                                                                           // 5115
		}                                                                                                            // 5116
		return this.each( function() {                                                                               // 5117
			jQuery.event.remove( this, types, fn, selector );                                                           // 5118
		} );                                                                                                         // 5119
	}                                                                                                             // 5120
} );                                                                                                           // 5121
                                                                                                               // 5122
                                                                                                               // 5123
var                                                                                                            // 5124
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,                       // 5125
                                                                                                               // 5126
	// Support: IE 10-11, Edge 10240+                                                                             // 5127
	// In IE/Edge using regex groups here causes severe slowdowns.                                                // 5128
	// See https://connect.microsoft.com/IE/feedback/details/1736512/                                             // 5129
	rnoInnerhtml = /<script|<style|<link/i,                                                                       // 5130
                                                                                                               // 5131
	// checked="checked" or checked                                                                               // 5132
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,                                                               // 5133
	rscriptTypeMasked = /^true\/(.*)/,                                                                            // 5134
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;                                                    // 5135
                                                                                                               // 5136
// Manipulating tables requires a tbody                                                                        // 5137
function manipulationTarget( elem, content ) {                                                                 // 5138
	return jQuery.nodeName( elem, "table" ) &&                                                                    // 5139
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?                            // 5140
                                                                                                               // 5141
		elem.getElementsByTagName( "tbody" )[ 0 ] ||                                                                 // 5142
			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :                                           // 5143
		elem;                                                                                                        // 5144
}                                                                                                              // 5145
                                                                                                               // 5146
// Replace/restore the type attribute of script elements for safe DOM manipulation                             // 5147
function disableScript( elem ) {                                                                               // 5148
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;                                       // 5149
	return elem;                                                                                                  // 5150
}                                                                                                              // 5151
function restoreScript( elem ) {                                                                               // 5152
	var match = rscriptTypeMasked.exec( elem.type );                                                              // 5153
                                                                                                               // 5154
	if ( match ) {                                                                                                // 5155
		elem.type = match[ 1 ];                                                                                      // 5156
	} else {                                                                                                      // 5157
		elem.removeAttribute( "type" );                                                                              // 5158
	}                                                                                                             // 5159
                                                                                                               // 5160
	return elem;                                                                                                  // 5161
}                                                                                                              // 5162
                                                                                                               // 5163
function cloneCopyEvent( src, dest ) {                                                                         // 5164
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;                                               // 5165
                                                                                                               // 5166
	if ( dest.nodeType !== 1 ) {                                                                                  // 5167
		return;                                                                                                      // 5168
	}                                                                                                             // 5169
                                                                                                               // 5170
	// 1. Copy private data: events, handlers, etc.                                                               // 5171
	if ( dataPriv.hasData( src ) ) {                                                                              // 5172
		pdataOld = dataPriv.access( src );                                                                           // 5173
		pdataCur = dataPriv.set( dest, pdataOld );                                                                   // 5174
		events = pdataOld.events;                                                                                    // 5175
                                                                                                               // 5176
		if ( events ) {                                                                                              // 5177
			delete pdataCur.handle;                                                                                     // 5178
			pdataCur.events = {};                                                                                       // 5179
                                                                                                               // 5180
			for ( type in events ) {                                                                                    // 5181
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {                                                     // 5182
					jQuery.event.add( dest, type, events[ type ][ i ] );                                                      // 5183
				}                                                                                                          // 5184
			}                                                                                                           // 5185
		}                                                                                                            // 5186
	}                                                                                                             // 5187
                                                                                                               // 5188
	// 2. Copy user data                                                                                          // 5189
	if ( dataUser.hasData( src ) ) {                                                                              // 5190
		udataOld = dataUser.access( src );                                                                           // 5191
		udataCur = jQuery.extend( {}, udataOld );                                                                    // 5192
                                                                                                               // 5193
		dataUser.set( dest, udataCur );                                                                              // 5194
	}                                                                                                             // 5195
}                                                                                                              // 5196
                                                                                                               // 5197
// Fix IE bugs, see support tests                                                                              // 5198
function fixInput( src, dest ) {                                                                               // 5199
	var nodeName = dest.nodeName.toLowerCase();                                                                   // 5200
                                                                                                               // 5201
	// Fails to persist the checked state of a cloned checkbox or radio button.                                   // 5202
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {                                              // 5203
		dest.checked = src.checked;                                                                                  // 5204
                                                                                                               // 5205
	// Fails to return the selected option to the default selected state when cloning options                     // 5206
	} else if ( nodeName === "input" || nodeName === "textarea" ) {                                               // 5207
		dest.defaultValue = src.defaultValue;                                                                        // 5208
	}                                                                                                             // 5209
}                                                                                                              // 5210
                                                                                                               // 5211
function domManip( collection, args, callback, ignored ) {                                                     // 5212
                                                                                                               // 5213
	// Flatten any nested arrays                                                                                  // 5214
	args = concat.apply( [], args );                                                                              // 5215
                                                                                                               // 5216
	var fragment, first, scripts, hasScripts, node, doc,                                                          // 5217
		i = 0,                                                                                                       // 5218
		l = collection.length,                                                                                       // 5219
		iNoClone = l - 1,                                                                                            // 5220
		value = args[ 0 ],                                                                                           // 5221
		isFunction = jQuery.isFunction( value );                                                                     // 5222
                                                                                                               // 5223
	// We can't cloneNode fragments that contain checked, in WebKit                                               // 5224
	if ( isFunction ||                                                                                            // 5225
			( l > 1 && typeof value === "string" &&                                                                     // 5226
				!support.checkClone && rchecked.test( value ) ) ) {                                                        // 5227
		return collection.each( function( index ) {                                                                  // 5228
			var self = collection.eq( index );                                                                          // 5229
			if ( isFunction ) {                                                                                         // 5230
				args[ 0 ] = value.call( this, index, self.html() );                                                        // 5231
			}                                                                                                           // 5232
			domManip( self, args, callback, ignored );                                                                  // 5233
		} );                                                                                                         // 5234
	}                                                                                                             // 5235
                                                                                                               // 5236
	if ( l ) {                                                                                                    // 5237
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );                 // 5238
		first = fragment.firstChild;                                                                                 // 5239
                                                                                                               // 5240
		if ( fragment.childNodes.length === 1 ) {                                                                    // 5241
			fragment = first;                                                                                           // 5242
		}                                                                                                            // 5243
                                                                                                               // 5244
		// Require either new content or an interest in ignored elements to invoke the callback                      // 5245
		if ( first || ignored ) {                                                                                    // 5246
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );                                        // 5247
			hasScripts = scripts.length;                                                                                // 5248
                                                                                                               // 5249
			// Use the original fragment for the last item                                                              // 5250
			// instead of the first because it can end up                                                               // 5251
			// being emptied incorrectly in certain situations (#8070).                                                 // 5252
			for ( ; i < l; i++ ) {                                                                                      // 5253
				node = fragment;                                                                                           // 5254
                                                                                                               // 5255
				if ( i !== iNoClone ) {                                                                                    // 5256
					node = jQuery.clone( node, true, true );                                                                  // 5257
                                                                                                               // 5258
					// Keep references to cloned scripts for later restoration                                                // 5259
					if ( hasScripts ) {                                                                                       // 5260
                                                                                                               // 5261
						// Support: Android<4.1, PhantomJS<2                                                                     // 5262
						// push.apply(_, arraylike) throws on ancient WebKit                                                     // 5263
						jQuery.merge( scripts, getAll( node, "script" ) );                                                       // 5264
					}                                                                                                         // 5265
				}                                                                                                          // 5266
                                                                                                               // 5267
				callback.call( collection[ i ], node, i );                                                                 // 5268
			}                                                                                                           // 5269
                                                                                                               // 5270
			if ( hasScripts ) {                                                                                         // 5271
				doc = scripts[ scripts.length - 1 ].ownerDocument;                                                         // 5272
                                                                                                               // 5273
				// Reenable scripts                                                                                        // 5274
				jQuery.map( scripts, restoreScript );                                                                      // 5275
                                                                                                               // 5276
				// Evaluate executable scripts on first document insertion                                                 // 5277
				for ( i = 0; i < hasScripts; i++ ) {                                                                       // 5278
					node = scripts[ i ];                                                                                      // 5279
					if ( rscriptType.test( node.type || "" ) &&                                                               // 5280
						!dataPriv.access( node, "globalEval" ) &&                                                                // 5281
						jQuery.contains( doc, node ) ) {                                                                         // 5282
                                                                                                               // 5283
						if ( node.src ) {                                                                                        // 5284
                                                                                                               // 5285
							// Optional AJAX dependency, but won't run scripts if not present                                       // 5286
							if ( jQuery._evalUrl ) {                                                                                // 5287
								jQuery._evalUrl( node.src );                                                                           // 5288
							}                                                                                                       // 5289
						} else {                                                                                                 // 5290
							jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );                                      // 5291
						}                                                                                                        // 5292
					}                                                                                                         // 5293
				}                                                                                                          // 5294
			}                                                                                                           // 5295
		}                                                                                                            // 5296
	}                                                                                                             // 5297
                                                                                                               // 5298
	return collection;                                                                                            // 5299
}                                                                                                              // 5300
                                                                                                               // 5301
function remove( elem, selector, keepData ) {                                                                  // 5302
	var node,                                                                                                     // 5303
		nodes = selector ? jQuery.filter( selector, elem ) : elem,                                                   // 5304
		i = 0;                                                                                                       // 5305
                                                                                                               // 5306
	for ( ; ( node = nodes[ i ] ) != null; i++ ) {                                                                // 5307
		if ( !keepData && node.nodeType === 1 ) {                                                                    // 5308
			jQuery.cleanData( getAll( node ) );                                                                         // 5309
		}                                                                                                            // 5310
                                                                                                               // 5311
		if ( node.parentNode ) {                                                                                     // 5312
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {                                            // 5313
				setGlobalEval( getAll( node, "script" ) );                                                                 // 5314
			}                                                                                                           // 5315
			node.parentNode.removeChild( node );                                                                        // 5316
		}                                                                                                            // 5317
	}                                                                                                             // 5318
                                                                                                               // 5319
	return elem;                                                                                                  // 5320
}                                                                                                              // 5321
                                                                                                               // 5322
jQuery.extend( {                                                                                               // 5323
	htmlPrefilter: function( html ) {                                                                             // 5324
		return html.replace( rxhtmlTag, "<$1></$2>" );                                                               // 5325
	},                                                                                                            // 5326
                                                                                                               // 5327
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {                                                   // 5328
		var i, l, srcElements, destElements,                                                                         // 5329
			clone = elem.cloneNode( true ),                                                                             // 5330
			inPage = jQuery.contains( elem.ownerDocument, elem );                                                       // 5331
                                                                                                               // 5332
		// Fix IE cloning issues                                                                                     // 5333
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&                           // 5334
				!jQuery.isXMLDoc( elem ) ) {                                                                               // 5335
                                                                                                               // 5336
			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2                      // 5337
			destElements = getAll( clone );                                                                             // 5338
			srcElements = getAll( elem );                                                                               // 5339
                                                                                                               // 5340
			for ( i = 0, l = srcElements.length; i < l; i++ ) {                                                         // 5341
				fixInput( srcElements[ i ], destElements[ i ] );                                                           // 5342
			}                                                                                                           // 5343
		}                                                                                                            // 5344
                                                                                                               // 5345
		// Copy the events from the original to the clone                                                            // 5346
		if ( dataAndEvents ) {                                                                                       // 5347
			if ( deepDataAndEvents ) {                                                                                  // 5348
				srcElements = srcElements || getAll( elem );                                                               // 5349
				destElements = destElements || getAll( clone );                                                            // 5350
                                                                                                               // 5351
				for ( i = 0, l = srcElements.length; i < l; i++ ) {                                                        // 5352
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );                                                    // 5353
				}                                                                                                          // 5354
			} else {                                                                                                    // 5355
				cloneCopyEvent( elem, clone );                                                                             // 5356
			}                                                                                                           // 5357
		}                                                                                                            // 5358
                                                                                                               // 5359
		// Preserve script evaluation history                                                                        // 5360
		destElements = getAll( clone, "script" );                                                                    // 5361
		if ( destElements.length > 0 ) {                                                                             // 5362
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );                                         // 5363
		}                                                                                                            // 5364
                                                                                                               // 5365
		// Return the cloned set                                                                                     // 5366
		return clone;                                                                                                // 5367
	},                                                                                                            // 5368
                                                                                                               // 5369
	cleanData: function( elems ) {                                                                                // 5370
		var data, elem, type,                                                                                        // 5371
			special = jQuery.event.special,                                                                             // 5372
			i = 0;                                                                                                      // 5373
                                                                                                               // 5374
		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {                                                         // 5375
			if ( acceptData( elem ) ) {                                                                                 // 5376
				if ( ( data = elem[ dataPriv.expando ] ) ) {                                                               // 5377
					if ( data.events ) {                                                                                      // 5378
						for ( type in data.events ) {                                                                            // 5379
							if ( special[ type ] ) {                                                                                // 5380
								jQuery.event.remove( elem, type );                                                                     // 5381
                                                                                                               // 5382
							// This is a shortcut to avoid jQuery.event.remove's overhead                                           // 5383
							} else {                                                                                                // 5384
								jQuery.removeEvent( elem, type, data.handle );                                                         // 5385
							}                                                                                                       // 5386
						}                                                                                                        // 5387
					}                                                                                                         // 5388
                                                                                                               // 5389
					// Support: Chrome <= 35-45+                                                                              // 5390
					// Assign undefined instead of using delete, see Data#remove                                              // 5391
					elem[ dataPriv.expando ] = undefined;                                                                     // 5392
				}                                                                                                          // 5393
				if ( elem[ dataUser.expando ] ) {                                                                          // 5394
                                                                                                               // 5395
					// Support: Chrome <= 35-45+                                                                              // 5396
					// Assign undefined instead of using delete, see Data#remove                                              // 5397
					elem[ dataUser.expando ] = undefined;                                                                     // 5398
				}                                                                                                          // 5399
			}                                                                                                           // 5400
		}                                                                                                            // 5401
	}                                                                                                             // 5402
} );                                                                                                           // 5403
                                                                                                               // 5404
jQuery.fn.extend( {                                                                                            // 5405
                                                                                                               // 5406
	// Keep domManip exposed until 3.0 (gh-2225)                                                                  // 5407
	domManip: domManip,                                                                                           // 5408
                                                                                                               // 5409
	detach: function( selector ) {                                                                                // 5410
		return remove( this, selector, true );                                                                       // 5411
	},                                                                                                            // 5412
                                                                                                               // 5413
	remove: function( selector ) {                                                                                // 5414
		return remove( this, selector );                                                                             // 5415
	},                                                                                                            // 5416
                                                                                                               // 5417
	text: function( value ) {                                                                                     // 5418
		return access( this, function( value ) {                                                                     // 5419
			return value === undefined ?                                                                                // 5420
				jQuery.text( this ) :                                                                                      // 5421
				this.empty().each( function() {                                                                            // 5422
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {                               // 5423
						this.textContent = value;                                                                                // 5424
					}                                                                                                         // 5425
				} );                                                                                                       // 5426
		}, null, value, arguments.length );                                                                          // 5427
	},                                                                                                            // 5428
                                                                                                               // 5429
	append: function() {                                                                                          // 5430
		return domManip( this, arguments, function( elem ) {                                                         // 5431
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {                                 // 5432
				var target = manipulationTarget( this, elem );                                                             // 5433
				target.appendChild( elem );                                                                                // 5434
			}                                                                                                           // 5435
		} );                                                                                                         // 5436
	},                                                                                                            // 5437
                                                                                                               // 5438
	prepend: function() {                                                                                         // 5439
		return domManip( this, arguments, function( elem ) {                                                         // 5440
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {                                 // 5441
				var target = manipulationTarget( this, elem );                                                             // 5442
				target.insertBefore( elem, target.firstChild );                                                            // 5443
			}                                                                                                           // 5444
		} );                                                                                                         // 5445
	},                                                                                                            // 5446
                                                                                                               // 5447
	before: function() {                                                                                          // 5448
		return domManip( this, arguments, function( elem ) {                                                         // 5449
			if ( this.parentNode ) {                                                                                    // 5450
				this.parentNode.insertBefore( elem, this );                                                                // 5451
			}                                                                                                           // 5452
		} );                                                                                                         // 5453
	},                                                                                                            // 5454
                                                                                                               // 5455
	after: function() {                                                                                           // 5456
		return domManip( this, arguments, function( elem ) {                                                         // 5457
			if ( this.parentNode ) {                                                                                    // 5458
				this.parentNode.insertBefore( elem, this.nextSibling );                                                    // 5459
			}                                                                                                           // 5460
		} );                                                                                                         // 5461
	},                                                                                                            // 5462
                                                                                                               // 5463
	empty: function() {                                                                                           // 5464
		var elem,                                                                                                    // 5465
			i = 0;                                                                                                      // 5466
                                                                                                               // 5467
		for ( ; ( elem = this[ i ] ) != null; i++ ) {                                                                // 5468
			if ( elem.nodeType === 1 ) {                                                                                // 5469
                                                                                                               // 5470
				// Prevent memory leaks                                                                                    // 5471
				jQuery.cleanData( getAll( elem, false ) );                                                                 // 5472
                                                                                                               // 5473
				// Remove any remaining nodes                                                                              // 5474
				elem.textContent = "";                                                                                     // 5475
			}                                                                                                           // 5476
		}                                                                                                            // 5477
                                                                                                               // 5478
		return this;                                                                                                 // 5479
	},                                                                                                            // 5480
                                                                                                               // 5481
	clone: function( dataAndEvents, deepDataAndEvents ) {                                                         // 5482
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;                                               // 5483
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;                           // 5484
                                                                                                               // 5485
		return this.map( function() {                                                                                // 5486
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );                                              // 5487
		} );                                                                                                         // 5488
	},                                                                                                            // 5489
                                                                                                               // 5490
	html: function( value ) {                                                                                     // 5491
		return access( this, function( value ) {                                                                     // 5492
			var elem = this[ 0 ] || {},                                                                                 // 5493
				i = 0,                                                                                                     // 5494
				l = this.length;                                                                                           // 5495
                                                                                                               // 5496
			if ( value === undefined && elem.nodeType === 1 ) {                                                         // 5497
				return elem.innerHTML;                                                                                     // 5498
			}                                                                                                           // 5499
                                                                                                               // 5500
			// See if we can take a shortcut and just use innerHTML                                                     // 5501
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&                                            // 5502
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {                                // 5503
                                                                                                               // 5504
				value = jQuery.htmlPrefilter( value );                                                                     // 5505
                                                                                                               // 5506
				try {                                                                                                      // 5507
					for ( ; i < l; i++ ) {                                                                                    // 5508
						elem = this[ i ] || {};                                                                                  // 5509
                                                                                                               // 5510
						// Remove element nodes and prevent memory leaks                                                         // 5511
						if ( elem.nodeType === 1 ) {                                                                             // 5512
							jQuery.cleanData( getAll( elem, false ) );                                                              // 5513
							elem.innerHTML = value;                                                                                 // 5514
						}                                                                                                        // 5515
					}                                                                                                         // 5516
                                                                                                               // 5517
					elem = 0;                                                                                                 // 5518
                                                                                                               // 5519
				// If using innerHTML throws an exception, use the fallback method                                         // 5520
				} catch ( e ) {}                                                                                           // 5521
			}                                                                                                           // 5522
                                                                                                               // 5523
			if ( elem ) {                                                                                               // 5524
				this.empty().append( value );                                                                              // 5525
			}                                                                                                           // 5526
		}, null, value, arguments.length );                                                                          // 5527
	},                                                                                                            // 5528
                                                                                                               // 5529
	replaceWith: function() {                                                                                     // 5530
		var ignored = [];                                                                                            // 5531
                                                                                                               // 5532
		// Make the changes, replacing each non-ignored context element with the new content                         // 5533
		return domManip( this, arguments, function( elem ) {                                                         // 5534
			var parent = this.parentNode;                                                                               // 5535
                                                                                                               // 5536
			if ( jQuery.inArray( this, ignored ) < 0 ) {                                                                // 5537
				jQuery.cleanData( getAll( this ) );                                                                        // 5538
				if ( parent ) {                                                                                            // 5539
					parent.replaceChild( elem, this );                                                                        // 5540
				}                                                                                                          // 5541
			}                                                                                                           // 5542
                                                                                                               // 5543
		// Force callback invocation                                                                                 // 5544
		}, ignored );                                                                                                // 5545
	}                                                                                                             // 5546
} );                                                                                                           // 5547
                                                                                                               // 5548
jQuery.each( {                                                                                                 // 5549
	appendTo: "append",                                                                                           // 5550
	prependTo: "prepend",                                                                                         // 5551
	insertBefore: "before",                                                                                       // 5552
	insertAfter: "after",                                                                                         // 5553
	replaceAll: "replaceWith"                                                                                     // 5554
}, function( name, original ) {                                                                                // 5555
	jQuery.fn[ name ] = function( selector ) {                                                                    // 5556
		var elems,                                                                                                   // 5557
			ret = [],                                                                                                   // 5558
			insert = jQuery( selector ),                                                                                // 5559
			last = insert.length - 1,                                                                                   // 5560
			i = 0;                                                                                                      // 5561
                                                                                                               // 5562
		for ( ; i <= last; i++ ) {                                                                                   // 5563
			elems = i === last ? this : this.clone( true );                                                             // 5564
			jQuery( insert[ i ] )[ original ]( elems );                                                                 // 5565
                                                                                                               // 5566
			// Support: QtWebKit                                                                                        // 5567
			// .get() because push.apply(_, arraylike) throws                                                           // 5568
			push.apply( ret, elems.get() );                                                                             // 5569
		}                                                                                                            // 5570
                                                                                                               // 5571
		return this.pushStack( ret );                                                                                // 5572
	};                                                                                                            // 5573
} );                                                                                                           // 5574
                                                                                                               // 5575
                                                                                                               // 5576
var iframe,                                                                                                    // 5577
	elemdisplay = {                                                                                               // 5578
                                                                                                               // 5579
		// Support: Firefox                                                                                          // 5580
		// We have to pre-define these values for FF (#10227)                                                        // 5581
		HTML: "block",                                                                                               // 5582
		BODY: "block"                                                                                                // 5583
	};                                                                                                            // 5584
                                                                                                               // 5585
/**                                                                                                            // 5586
 * Retrieve the actual display of a element                                                                    // 5587
 * @param {String} name nodeName of the element                                                                // 5588
 * @param {Object} doc Document object                                                                         // 5589
 */                                                                                                            // 5590
                                                                                                               // 5591
// Called only from within defaultDisplay                                                                      // 5592
function actualDisplay( name, doc ) {                                                                          // 5593
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),                                          // 5594
                                                                                                               // 5595
		display = jQuery.css( elem[ 0 ], "display" );                                                                // 5596
                                                                                                               // 5597
	// We don't have any data stored on the element,                                                              // 5598
	// so use "detach" method as fast way to get rid of the element                                               // 5599
	elem.detach();                                                                                                // 5600
                                                                                                               // 5601
	return display;                                                                                               // 5602
}                                                                                                              // 5603
                                                                                                               // 5604
/**                                                                                                            // 5605
 * Try to determine the default display value of an element                                                    // 5606
 * @param {String} nodeName                                                                                    // 5607
 */                                                                                                            // 5608
function defaultDisplay( nodeName ) {                                                                          // 5609
	var doc = document,                                                                                           // 5610
		display = elemdisplay[ nodeName ];                                                                           // 5611
                                                                                                               // 5612
	if ( !display ) {                                                                                             // 5613
		display = actualDisplay( nodeName, doc );                                                                    // 5614
                                                                                                               // 5615
		// If the simple way fails, read from inside an iframe                                                       // 5616
		if ( display === "none" || !display ) {                                                                      // 5617
                                                                                                               // 5618
			// Use the already-created iframe if possible                                                               // 5619
			iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )                           // 5620
				.appendTo( doc.documentElement );                                                                          // 5621
                                                                                                               // 5622
			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse                              // 5623
			doc = iframe[ 0 ].contentDocument;                                                                          // 5624
                                                                                                               // 5625
			// Support: IE                                                                                              // 5626
			doc.write();                                                                                                // 5627
			doc.close();                                                                                                // 5628
                                                                                                               // 5629
			display = actualDisplay( nodeName, doc );                                                                   // 5630
			iframe.detach();                                                                                            // 5631
		}                                                                                                            // 5632
                                                                                                               // 5633
		// Store the correct default display                                                                         // 5634
		elemdisplay[ nodeName ] = display;                                                                           // 5635
	}                                                                                                             // 5636
                                                                                                               // 5637
	return display;                                                                                               // 5638
}                                                                                                              // 5639
var rmargin = ( /^margin/ );                                                                                   // 5640
                                                                                                               // 5641
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );                                            // 5642
                                                                                                               // 5643
var getStyles = function( elem ) {                                                                             // 5644
                                                                                                               // 5645
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)                                                           // 5646
		// IE throws on elements created in popups                                                                   // 5647
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"                              // 5648
		var view = elem.ownerDocument.defaultView;                                                                   // 5649
                                                                                                               // 5650
		if ( !view || !view.opener ) {                                                                               // 5651
			view = window;                                                                                              // 5652
		}                                                                                                            // 5653
                                                                                                               // 5654
		return view.getComputedStyle( elem );                                                                        // 5655
	};                                                                                                            // 5656
                                                                                                               // 5657
var swap = function( elem, options, callback, args ) {                                                         // 5658
	var ret, name,                                                                                                // 5659
		old = {};                                                                                                    // 5660
                                                                                                               // 5661
	// Remember the old values, and insert the new ones                                                           // 5662
	for ( name in options ) {                                                                                     // 5663
		old[ name ] = elem.style[ name ];                                                                            // 5664
		elem.style[ name ] = options[ name ];                                                                        // 5665
	}                                                                                                             // 5666
                                                                                                               // 5667
	ret = callback.apply( elem, args || [] );                                                                     // 5668
                                                                                                               // 5669
	// Revert the old values                                                                                      // 5670
	for ( name in options ) {                                                                                     // 5671
		elem.style[ name ] = old[ name ];                                                                            // 5672
	}                                                                                                             // 5673
                                                                                                               // 5674
	return ret;                                                                                                   // 5675
};                                                                                                             // 5676
                                                                                                               // 5677
                                                                                                               // 5678
var documentElement = document.documentElement;                                                                // 5679
                                                                                                               // 5680
                                                                                                               // 5681
                                                                                                               // 5682
( function() {                                                                                                 // 5683
	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,                       // 5684
		container = document.createElement( "div" ),                                                                 // 5685
		div = document.createElement( "div" );                                                                       // 5686
                                                                                                               // 5687
	// Finish early in limited (non-browser) environments                                                         // 5688
	if ( !div.style ) {                                                                                           // 5689
		return;                                                                                                      // 5690
	}                                                                                                             // 5691
                                                                                                               // 5692
	// Support: IE9-11+                                                                                           // 5693
	// Style of cloned element affects source element cloned (#8908)                                              // 5694
	div.style.backgroundClip = "content-box";                                                                     // 5695
	div.cloneNode( true ).style.backgroundClip = "";                                                              // 5696
	support.clearCloneStyle = div.style.backgroundClip === "content-box";                                         // 5697
                                                                                                               // 5698
	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +                                 // 5699
		"padding:0;margin-top:1px;position:absolute";                                                                // 5700
	container.appendChild( div );                                                                                 // 5701
                                                                                                               // 5702
	// Executing both pixelPosition & boxSizingReliable tests require only one layout                             // 5703
	// so they're executed at the same time to save the second computation.                                       // 5704
	function computeStyleTests() {                                                                                // 5705
		div.style.cssText =                                                                                          // 5706
                                                                                                               // 5707
			// Support: Firefox<29, Android 2.3                                                                         // 5708
			// Vendor-prefix box-sizing                                                                                 // 5709
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +                         // 5710
			"position:relative;display:block;" +                                                                        // 5711
			"margin:auto;border:1px;padding:1px;" +                                                                     // 5712
			"top:1%;width:50%";                                                                                         // 5713
		div.innerHTML = "";                                                                                          // 5714
		documentElement.appendChild( container );                                                                    // 5715
                                                                                                               // 5716
		var divStyle = window.getComputedStyle( div );                                                               // 5717
		pixelPositionVal = divStyle.top !== "1%";                                                                    // 5718
		reliableMarginLeftVal = divStyle.marginLeft === "2px";                                                       // 5719
		boxSizingReliableVal = divStyle.width === "4px";                                                             // 5720
                                                                                                               // 5721
		// Support: Android 4.0 - 4.3 only                                                                           // 5722
		// Some styles come back with percentage values, even though they shouldn't                                  // 5723
		div.style.marginRight = "50%";                                                                               // 5724
		pixelMarginRightVal = divStyle.marginRight === "4px";                                                        // 5725
                                                                                                               // 5726
		documentElement.removeChild( container );                                                                    // 5727
	}                                                                                                             // 5728
                                                                                                               // 5729
	jQuery.extend( support, {                                                                                     // 5730
		pixelPosition: function() {                                                                                  // 5731
                                                                                                               // 5732
			// This test is executed only once but we still do memoizing                                                // 5733
			// since we can use the boxSizingReliable pre-computing.                                                    // 5734
			// No need to check if the test was already performed, though.                                              // 5735
			computeStyleTests();                                                                                        // 5736
			return pixelPositionVal;                                                                                    // 5737
		},                                                                                                           // 5738
		boxSizingReliable: function() {                                                                              // 5739
			if ( boxSizingReliableVal == null ) {                                                                       // 5740
				computeStyleTests();                                                                                       // 5741
			}                                                                                                           // 5742
			return boxSizingReliableVal;                                                                                // 5743
		},                                                                                                           // 5744
		pixelMarginRight: function() {                                                                               // 5745
                                                                                                               // 5746
			// Support: Android 4.0-4.3                                                                                 // 5747
			// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal                              // 5748
			// since that compresses better and they're computed together anyway.                                       // 5749
			if ( boxSizingReliableVal == null ) {                                                                       // 5750
				computeStyleTests();                                                                                       // 5751
			}                                                                                                           // 5752
			return pixelMarginRightVal;                                                                                 // 5753
		},                                                                                                           // 5754
		reliableMarginLeft: function() {                                                                             // 5755
                                                                                                               // 5756
			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37                                           // 5757
			if ( boxSizingReliableVal == null ) {                                                                       // 5758
				computeStyleTests();                                                                                       // 5759
			}                                                                                                           // 5760
			return reliableMarginLeftVal;                                                                               // 5761
		},                                                                                                           // 5762
		reliableMarginRight: function() {                                                                            // 5763
                                                                                                               // 5764
			// Support: Android 2.3                                                                                     // 5765
			// Check if div with explicit width and no margin-right incorrectly                                         // 5766
			// gets computed margin-right based on width of container. (#3333)                                          // 5767
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right                                 // 5768
			// This support function is only executed once so no memoizing is needed.                                   // 5769
			var ret,                                                                                                    // 5770
				marginDiv = div.appendChild( document.createElement( "div" ) );                                            // 5771
                                                                                                               // 5772
			// Reset CSS: box-sizing; display; margin; border; padding                                                  // 5773
			marginDiv.style.cssText = div.style.cssText =                                                               // 5774
                                                                                                               // 5775
				// Support: Android 2.3                                                                                    // 5776
				// Vendor-prefix box-sizing                                                                                // 5777
				"-webkit-box-sizing:content-box;box-sizing:content-box;" +                                                 // 5778
				"display:block;margin:0;border:0;padding:0";                                                               // 5779
			marginDiv.style.marginRight = marginDiv.style.width = "0";                                                  // 5780
			div.style.width = "1px";                                                                                    // 5781
			documentElement.appendChild( container );                                                                   // 5782
                                                                                                               // 5783
			ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );                                      // 5784
                                                                                                               // 5785
			documentElement.removeChild( container );                                                                   // 5786
			div.removeChild( marginDiv );                                                                               // 5787
                                                                                                               // 5788
			return ret;                                                                                                 // 5789
		}                                                                                                            // 5790
	} );                                                                                                          // 5791
} )();                                                                                                         // 5792
                                                                                                               // 5793
                                                                                                               // 5794
function curCSS( elem, name, computed ) {                                                                      // 5795
	var width, minWidth, maxWidth, ret,                                                                           // 5796
		style = elem.style;                                                                                          // 5797
                                                                                                               // 5798
	computed = computed || getStyles( elem );                                                                     // 5799
	ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;                           // 5800
                                                                                                               // 5801
	// Support: Opera 12.1x only                                                                                  // 5802
	// Fall back to style even without computed                                                                   // 5803
	// computed is undefined for elems on document fragments                                                      // 5804
	if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {                  // 5805
		ret = jQuery.style( elem, name );                                                                            // 5806
	}                                                                                                             // 5807
                                                                                                               // 5808
	// Support: IE9                                                                                               // 5809
	// getPropertyValue is only needed for .css('filter') (#12537)                                                // 5810
	if ( computed ) {                                                                                             // 5811
                                                                                                               // 5812
		// A tribute to the "awesome hack by Dean Edwards"                                                           // 5813
		// Android Browser returns percentage for some values,                                                       // 5814
		// but width seems to be reliably pixels.                                                                    // 5815
		// This is against the CSSOM draft spec:                                                                     // 5816
		// http://dev.w3.org/csswg/cssom/#resolved-values                                                            // 5817
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {                        // 5818
                                                                                                               // 5819
			// Remember the original values                                                                             // 5820
			width = style.width;                                                                                        // 5821
			minWidth = style.minWidth;                                                                                  // 5822
			maxWidth = style.maxWidth;                                                                                  // 5823
                                                                                                               // 5824
			// Put in the new values to get a computed value out                                                        // 5825
			style.minWidth = style.maxWidth = style.width = ret;                                                        // 5826
			ret = computed.width;                                                                                       // 5827
                                                                                                               // 5828
			// Revert the changed values                                                                                // 5829
			style.width = width;                                                                                        // 5830
			style.minWidth = minWidth;                                                                                  // 5831
			style.maxWidth = maxWidth;                                                                                  // 5832
		}                                                                                                            // 5833
	}                                                                                                             // 5834
                                                                                                               // 5835
	return ret !== undefined ?                                                                                    // 5836
                                                                                                               // 5837
		// Support: IE9-11+                                                                                          // 5838
		// IE returns zIndex value as an integer.                                                                    // 5839
		ret + "" :                                                                                                   // 5840
		ret;                                                                                                         // 5841
}                                                                                                              // 5842
                                                                                                               // 5843
                                                                                                               // 5844
function addGetHookIf( conditionFn, hookFn ) {                                                                 // 5845
                                                                                                               // 5846
	// Define the hook, we'll check on the first run if it's really needed.                                       // 5847
	return {                                                                                                      // 5848
		get: function() {                                                                                            // 5849
			if ( conditionFn() ) {                                                                                      // 5850
                                                                                                               // 5851
				// Hook not needed (or it's not possible to use it due                                                     // 5852
				// to missing dependency), remove it.                                                                      // 5853
				delete this.get;                                                                                           // 5854
				return;                                                                                                    // 5855
			}                                                                                                           // 5856
                                                                                                               // 5857
			// Hook needed; redefine it so that the support test is not executed again.                                 // 5858
			return ( this.get = hookFn ).apply( this, arguments );                                                      // 5859
		}                                                                                                            // 5860
	};                                                                                                            // 5861
}                                                                                                              // 5862
                                                                                                               // 5863
                                                                                                               // 5864
var                                                                                                            // 5865
                                                                                                               // 5866
	// Swappable if display is none or starts with table                                                          // 5867
	// except "table", "table-cell", or "table-caption"                                                           // 5868
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display                          // 5869
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,                                                                   // 5870
                                                                                                               // 5871
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },                                   // 5872
	cssNormalTransform = {                                                                                        // 5873
		letterSpacing: "0",                                                                                          // 5874
		fontWeight: "400"                                                                                            // 5875
	},                                                                                                            // 5876
                                                                                                               // 5877
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],                                                                 // 5878
	emptyStyle = document.createElement( "div" ).style;                                                           // 5879
                                                                                                               // 5880
// Return a css property mapped to a potentially vendor prefixed property                                      // 5881
function vendorPropName( name ) {                                                                              // 5882
                                                                                                               // 5883
	// Shortcut for names that are not vendor prefixed                                                            // 5884
	if ( name in emptyStyle ) {                                                                                   // 5885
		return name;                                                                                                 // 5886
	}                                                                                                             // 5887
                                                                                                               // 5888
	// Check for vendor prefixed names                                                                            // 5889
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),                                                      // 5890
		i = cssPrefixes.length;                                                                                      // 5891
                                                                                                               // 5892
	while ( i-- ) {                                                                                               // 5893
		name = cssPrefixes[ i ] + capName;                                                                           // 5894
		if ( name in emptyStyle ) {                                                                                  // 5895
			return name;                                                                                                // 5896
		}                                                                                                            // 5897
	}                                                                                                             // 5898
}                                                                                                              // 5899
                                                                                                               // 5900
function setPositiveNumber( elem, value, subtract ) {                                                          // 5901
                                                                                                               // 5902
	// Any relative (+/-) values have already been                                                                // 5903
	// normalized at this point                                                                                   // 5904
	var matches = rcssNum.exec( value );                                                                          // 5905
	return matches ?                                                                                              // 5906
                                                                                                               // 5907
		// Guard against undefined "subtract", e.g., when used as in cssHooks                                        // 5908
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :                                 // 5909
		value;                                                                                                       // 5910
}                                                                                                              // 5911
                                                                                                               // 5912
function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {                                      // 5913
	var i = extra === ( isBorderBox ? "border" : "content" ) ?                                                    // 5914
                                                                                                               // 5915
		// If we already have the right measurement, avoid augmentation                                              // 5916
		4 :                                                                                                          // 5917
                                                                                                               // 5918
		// Otherwise initialize for horizontal or vertical properties                                                // 5919
		name === "width" ? 1 : 0,                                                                                    // 5920
                                                                                                               // 5921
		val = 0;                                                                                                     // 5922
                                                                                                               // 5923
	for ( ; i < 4; i += 2 ) {                                                                                     // 5924
                                                                                                               // 5925
		// Both box models exclude margin, so add it if we want it                                                   // 5926
		if ( extra === "margin" ) {                                                                                  // 5927
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );                                            // 5928
		}                                                                                                            // 5929
                                                                                                               // 5930
		if ( isBorderBox ) {                                                                                         // 5931
                                                                                                               // 5932
			// border-box includes padding, so remove it if we want content                                             // 5933
			if ( extra === "content" ) {                                                                                // 5934
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );                                       // 5935
			}                                                                                                           // 5936
                                                                                                               // 5937
			// At this point, extra isn't border nor margin, so remove border                                           // 5938
			if ( extra !== "margin" ) {                                                                                 // 5939
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );                              // 5940
			}                                                                                                           // 5941
		} else {                                                                                                     // 5942
                                                                                                               // 5943
			// At this point, extra isn't content, so add padding                                                       // 5944
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );                                        // 5945
                                                                                                               // 5946
			// At this point, extra isn't content nor padding, so add border                                            // 5947
			if ( extra !== "padding" ) {                                                                                // 5948
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );                              // 5949
			}                                                                                                           // 5950
		}                                                                                                            // 5951
	}                                                                                                             // 5952
                                                                                                               // 5953
	return val;                                                                                                   // 5954
}                                                                                                              // 5955
                                                                                                               // 5956
function getWidthOrHeight( elem, name, extra ) {                                                               // 5957
                                                                                                               // 5958
	// Start with offset property, which is equivalent to the border-box value                                    // 5959
	var valueIsBorderBox = true,                                                                                  // 5960
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,                                               // 5961
		styles = getStyles( elem ),                                                                                  // 5962
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";                               // 5963
                                                                                                               // 5964
	// Some non-html elements return undefined for offsetWidth, so check for null/undefined                       // 5965
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285                                                  // 5966
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668                                               // 5967
	if ( val <= 0 || val == null ) {                                                                              // 5968
                                                                                                               // 5969
		// Fall back to computed then uncomputed css if necessary                                                    // 5970
		val = curCSS( elem, name, styles );                                                                          // 5971
		if ( val < 0 || val == null ) {                                                                              // 5972
			val = elem.style[ name ];                                                                                   // 5973
		}                                                                                                            // 5974
                                                                                                               // 5975
		// Computed unit is not pixels. Stop here and return.                                                        // 5976
		if ( rnumnonpx.test( val ) ) {                                                                               // 5977
			return val;                                                                                                 // 5978
		}                                                                                                            // 5979
                                                                                                               // 5980
		// Check for style in case a browser which returns unreliable values                                         // 5981
		// for getComputedStyle silently falls back to the reliable elem.style                                       // 5982
		valueIsBorderBox = isBorderBox &&                                                                            // 5983
			( support.boxSizingReliable() || val === elem.style[ name ] );                                              // 5984
                                                                                                               // 5985
		// Normalize "", auto, and prepare for extra                                                                 // 5986
		val = parseFloat( val ) || 0;                                                                                // 5987
	}                                                                                                             // 5988
                                                                                                               // 5989
	// Use the active box-sizing model to add/subtract irrelevant styles                                          // 5990
	return ( val +                                                                                                // 5991
		augmentWidthOrHeight(                                                                                        // 5992
			elem,                                                                                                       // 5993
			name,                                                                                                       // 5994
			extra || ( isBorderBox ? "border" : "content" ),                                                            // 5995
			valueIsBorderBox,                                                                                           // 5996
			styles                                                                                                      // 5997
		)                                                                                                            // 5998
	) + "px";                                                                                                     // 5999
}                                                                                                              // 6000
                                                                                                               // 6001
function showHide( elements, show ) {                                                                          // 6002
	var display, elem, hidden,                                                                                    // 6003
		values = [],                                                                                                 // 6004
		index = 0,                                                                                                   // 6005
		length = elements.length;                                                                                    // 6006
                                                                                                               // 6007
	for ( ; index < length; index++ ) {                                                                           // 6008
		elem = elements[ index ];                                                                                    // 6009
		if ( !elem.style ) {                                                                                         // 6010
			continue;                                                                                                   // 6011
		}                                                                                                            // 6012
                                                                                                               // 6013
		values[ index ] = dataPriv.get( elem, "olddisplay" );                                                        // 6014
		display = elem.style.display;                                                                                // 6015
		if ( show ) {                                                                                                // 6016
                                                                                                               // 6017
			// Reset the inline display of this element to learn if it is                                               // 6018
			// being hidden by cascaded rules or not                                                                    // 6019
			if ( !values[ index ] && display === "none" ) {                                                             // 6020
				elem.style.display = "";                                                                                   // 6021
			}                                                                                                           // 6022
                                                                                                               // 6023
			// Set elements which have been overridden with display: none                                               // 6024
			// in a stylesheet to whatever the default browser style is                                                 // 6025
			// for such an element                                                                                      // 6026
			if ( elem.style.display === "" && isHidden( elem ) ) {                                                      // 6027
				values[ index ] = dataPriv.access(                                                                         // 6028
					elem,                                                                                                     // 6029
					"olddisplay",                                                                                             // 6030
					defaultDisplay( elem.nodeName )                                                                           // 6031
				);                                                                                                         // 6032
			}                                                                                                           // 6033
		} else {                                                                                                     // 6034
			hidden = isHidden( elem );                                                                                  // 6035
                                                                                                               // 6036
			if ( display !== "none" || !hidden ) {                                                                      // 6037
				dataPriv.set(                                                                                              // 6038
					elem,                                                                                                     // 6039
					"olddisplay",                                                                                             // 6040
					hidden ? display : jQuery.css( elem, "display" )                                                          // 6041
				);                                                                                                         // 6042
			}                                                                                                           // 6043
		}                                                                                                            // 6044
	}                                                                                                             // 6045
                                                                                                               // 6046
	// Set the display of most of the elements in a second loop                                                   // 6047
	// to avoid the constant reflow                                                                               // 6048
	for ( index = 0; index < length; index++ ) {                                                                  // 6049
		elem = elements[ index ];                                                                                    // 6050
		if ( !elem.style ) {                                                                                         // 6051
			continue;                                                                                                   // 6052
		}                                                                                                            // 6053
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {                                 // 6054
			elem.style.display = show ? values[ index ] || "" : "none";                                                 // 6055
		}                                                                                                            // 6056
	}                                                                                                             // 6057
                                                                                                               // 6058
	return elements;                                                                                              // 6059
}                                                                                                              // 6060
                                                                                                               // 6061
jQuery.extend( {                                                                                               // 6062
                                                                                                               // 6063
	// Add in style property hooks for overriding the default                                                     // 6064
	// behavior of getting and setting a style property                                                           // 6065
	cssHooks: {                                                                                                   // 6066
		opacity: {                                                                                                   // 6067
			get: function( elem, computed ) {                                                                           // 6068
				if ( computed ) {                                                                                          // 6069
                                                                                                               // 6070
					// We should always get a number back from opacity                                                        // 6071
					var ret = curCSS( elem, "opacity" );                                                                      // 6072
					return ret === "" ? "1" : ret;                                                                            // 6073
				}                                                                                                          // 6074
			}                                                                                                           // 6075
		}                                                                                                            // 6076
	},                                                                                                            // 6077
                                                                                                               // 6078
	// Don't automatically add "px" to these possibly-unitless properties                                         // 6079
	cssNumber: {                                                                                                  // 6080
		"animationIterationCount": true,                                                                             // 6081
		"columnCount": true,                                                                                         // 6082
		"fillOpacity": true,                                                                                         // 6083
		"flexGrow": true,                                                                                            // 6084
		"flexShrink": true,                                                                                          // 6085
		"fontWeight": true,                                                                                          // 6086
		"lineHeight": true,                                                                                          // 6087
		"opacity": true,                                                                                             // 6088
		"order": true,                                                                                               // 6089
		"orphans": true,                                                                                             // 6090
		"widows": true,                                                                                              // 6091
		"zIndex": true,                                                                                              // 6092
		"zoom": true                                                                                                 // 6093
	},                                                                                                            // 6094
                                                                                                               // 6095
	// Add in properties whose names you wish to fix before                                                       // 6096
	// setting or getting the value                                                                               // 6097
	cssProps: {                                                                                                   // 6098
		"float": "cssFloat"                                                                                          // 6099
	},                                                                                                            // 6100
                                                                                                               // 6101
	// Get and set the style property on a DOM Node                                                               // 6102
	style: function( elem, name, value, extra ) {                                                                 // 6103
                                                                                                               // 6104
		// Don't set styles on text and comment nodes                                                                // 6105
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {                                  // 6106
			return;                                                                                                     // 6107
		}                                                                                                            // 6108
                                                                                                               // 6109
		// Make sure that we're working with the right name                                                          // 6110
		var ret, type, hooks,                                                                                        // 6111
			origName = jQuery.camelCase( name ),                                                                        // 6112
			style = elem.style;                                                                                         // 6113
                                                                                                               // 6114
		name = jQuery.cssProps[ origName ] ||                                                                        // 6115
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );                                   // 6116
                                                                                                               // 6117
		// Gets hook for the prefixed version, then unprefixed version                                               // 6118
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];                                              // 6119
                                                                                                               // 6120
		// Check if we're setting a value                                                                            // 6121
		if ( value !== undefined ) {                                                                                 // 6122
			type = typeof value;                                                                                        // 6123
                                                                                                               // 6124
			// Convert "+=" or "-=" to relative numbers (#7345)                                                         // 6125
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {                                   // 6126
				value = adjustCSS( elem, name, ret );                                                                      // 6127
                                                                                                               // 6128
				// Fixes bug #9237                                                                                         // 6129
				type = "number";                                                                                           // 6130
			}                                                                                                           // 6131
                                                                                                               // 6132
			// Make sure that null and NaN values aren't set (#7116)                                                    // 6133
			if ( value == null || value !== value ) {                                                                   // 6134
				return;                                                                                                    // 6135
			}                                                                                                           // 6136
                                                                                                               // 6137
			// If a number was passed in, add the unit (except for certain CSS properties)                              // 6138
			if ( type === "number" ) {                                                                                  // 6139
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );                                  // 6140
			}                                                                                                           // 6141
                                                                                                               // 6142
			// Support: IE9-11+                                                                                         // 6143
			// background-* props affect original clone's values                                                        // 6144
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {                     // 6145
				style[ name ] = "inherit";                                                                                 // 6146
			}                                                                                                           // 6147
                                                                                                               // 6148
			// If a hook was provided, use that value, otherwise just set the specified value                           // 6149
			if ( !hooks || !( "set" in hooks ) ||                                                                       // 6150
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {                                              // 6151
                                                                                                               // 6152
				style[ name ] = value;                                                                                     // 6153
			}                                                                                                           // 6154
                                                                                                               // 6155
		} else {                                                                                                     // 6156
                                                                                                               // 6157
			// If a hook was provided get the non-computed value from there                                             // 6158
			if ( hooks && "get" in hooks &&                                                                             // 6159
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {                                                // 6160
                                                                                                               // 6161
				return ret;                                                                                                // 6162
			}                                                                                                           // 6163
                                                                                                               // 6164
			// Otherwise just get the value from the style object                                                       // 6165
			return style[ name ];                                                                                       // 6166
		}                                                                                                            // 6167
	},                                                                                                            // 6168
                                                                                                               // 6169
	css: function( elem, name, extra, styles ) {                                                                  // 6170
		var val, num, hooks,                                                                                         // 6171
			origName = jQuery.camelCase( name );                                                                        // 6172
                                                                                                               // 6173
		// Make sure that we're working with the right name                                                          // 6174
		name = jQuery.cssProps[ origName ] ||                                                                        // 6175
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );                                   // 6176
                                                                                                               // 6177
		// Try prefixed name followed by the unprefixed name                                                         // 6178
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];                                              // 6179
                                                                                                               // 6180
		// If a hook was provided get the computed value from there                                                  // 6181
		if ( hooks && "get" in hooks ) {                                                                             // 6182
			val = hooks.get( elem, true, extra );                                                                       // 6183
		}                                                                                                            // 6184
                                                                                                               // 6185
		// Otherwise, if a way to get the computed value exists, use that                                            // 6186
		if ( val === undefined ) {                                                                                   // 6187
			val = curCSS( elem, name, styles );                                                                         // 6188
		}                                                                                                            // 6189
                                                                                                               // 6190
		// Convert "normal" to computed value                                                                        // 6191
		if ( val === "normal" && name in cssNormalTransform ) {                                                      // 6192
			val = cssNormalTransform[ name ];                                                                           // 6193
		}                                                                                                            // 6194
                                                                                                               // 6195
		// Make numeric if forced or a qualifier was provided and val looks numeric                                  // 6196
		if ( extra === "" || extra ) {                                                                               // 6197
			num = parseFloat( val );                                                                                    // 6198
			return extra === true || isFinite( num ) ? num || 0 : val;                                                  // 6199
		}                                                                                                            // 6200
		return val;                                                                                                  // 6201
	}                                                                                                             // 6202
} );                                                                                                           // 6203
                                                                                                               // 6204
jQuery.each( [ "height", "width" ], function( i, name ) {                                                      // 6205
	jQuery.cssHooks[ name ] = {                                                                                   // 6206
		get: function( elem, computed, extra ) {                                                                     // 6207
			if ( computed ) {                                                                                           // 6208
                                                                                                               // 6209
				// Certain elements can have dimension info if we invisibly show them                                      // 6210
				// but it must have a current display style that would benefit                                             // 6211
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&                                               // 6212
					elem.offsetWidth === 0 ?                                                                                  // 6213
						swap( elem, cssShow, function() {                                                                        // 6214
							return getWidthOrHeight( elem, name, extra );                                                           // 6215
						} ) :                                                                                                    // 6216
						getWidthOrHeight( elem, name, extra );                                                                   // 6217
			}                                                                                                           // 6218
		},                                                                                                           // 6219
                                                                                                               // 6220
		set: function( elem, value, extra ) {                                                                        // 6221
			var matches,                                                                                                // 6222
				styles = extra && getStyles( elem ),                                                                       // 6223
				subtract = extra && augmentWidthOrHeight(                                                                  // 6224
					elem,                                                                                                     // 6225
					name,                                                                                                     // 6226
					extra,                                                                                                    // 6227
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",                                          // 6228
					styles                                                                                                    // 6229
				);                                                                                                         // 6230
                                                                                                               // 6231
			// Convert to pixels if value adjustment is needed                                                          // 6232
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&                                                     // 6233
				( matches[ 3 ] || "px" ) !== "px" ) {                                                                      // 6234
                                                                                                               // 6235
				elem.style[ name ] = value;                                                                                // 6236
				value = jQuery.css( elem, name );                                                                          // 6237
			}                                                                                                           // 6238
                                                                                                               // 6239
			return setPositiveNumber( elem, value, subtract );                                                          // 6240
		}                                                                                                            // 6241
	};                                                                                                            // 6242
} );                                                                                                           // 6243
                                                                                                               // 6244
jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,                                         // 6245
	function( elem, computed ) {                                                                                  // 6246
		if ( computed ) {                                                                                            // 6247
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||                                                      // 6248
				elem.getBoundingClientRect().left -                                                                        // 6249
					swap( elem, { marginLeft: 0 }, function() {                                                               // 6250
						return elem.getBoundingClientRect().left;                                                                // 6251
					} )                                                                                                       // 6252
				) + "px";                                                                                                  // 6253
		}                                                                                                            // 6254
	}                                                                                                             // 6255
);                                                                                                             // 6256
                                                                                                               // 6257
// Support: Android 2.3                                                                                        // 6258
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,                                       // 6259
	function( elem, computed ) {                                                                                  // 6260
		if ( computed ) {                                                                                            // 6261
			return swap( elem, { "display": "inline-block" },                                                           // 6262
				curCSS, [ elem, "marginRight" ] );                                                                         // 6263
		}                                                                                                            // 6264
	}                                                                                                             // 6265
);                                                                                                             // 6266
                                                                                                               // 6267
// These hooks are used by animate to expand properties                                                        // 6268
jQuery.each( {                                                                                                 // 6269
	margin: "",                                                                                                   // 6270
	padding: "",                                                                                                  // 6271
	border: "Width"                                                                                               // 6272
}, function( prefix, suffix ) {                                                                                // 6273
	jQuery.cssHooks[ prefix + suffix ] = {                                                                        // 6274
		expand: function( value ) {                                                                                  // 6275
			var i = 0,                                                                                                  // 6276
				expanded = {},                                                                                             // 6277
                                                                                                               // 6278
				// Assumes a single number if not a string                                                                 // 6279
				parts = typeof value === "string" ? value.split( " " ) : [ value ];                                        // 6280
                                                                                                               // 6281
			for ( ; i < 4; i++ ) {                                                                                      // 6282
				expanded[ prefix + cssExpand[ i ] + suffix ] =                                                             // 6283
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];                                                               // 6284
			}                                                                                                           // 6285
                                                                                                               // 6286
			return expanded;                                                                                            // 6287
		}                                                                                                            // 6288
	};                                                                                                            // 6289
                                                                                                               // 6290
	if ( !rmargin.test( prefix ) ) {                                                                              // 6291
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;                                                  // 6292
	}                                                                                                             // 6293
} );                                                                                                           // 6294
                                                                                                               // 6295
jQuery.fn.extend( {                                                                                            // 6296
	css: function( name, value ) {                                                                                // 6297
		return access( this, function( elem, name, value ) {                                                         // 6298
			var styles, len,                                                                                            // 6299
				map = {},                                                                                                  // 6300
				i = 0;                                                                                                     // 6301
                                                                                                               // 6302
			if ( jQuery.isArray( name ) ) {                                                                             // 6303
				styles = getStyles( elem );                                                                                // 6304
				len = name.length;                                                                                         // 6305
                                                                                                               // 6306
				for ( ; i < len; i++ ) {                                                                                   // 6307
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );                                          // 6308
				}                                                                                                          // 6309
                                                                                                               // 6310
				return map;                                                                                                // 6311
			}                                                                                                           // 6312
                                                                                                               // 6313
			return value !== undefined ?                                                                                // 6314
				jQuery.style( elem, name, value ) :                                                                        // 6315
				jQuery.css( elem, name );                                                                                  // 6316
		}, name, value, arguments.length > 1 );                                                                      // 6317
	},                                                                                                            // 6318
	show: function() {                                                                                            // 6319
		return showHide( this, true );                                                                               // 6320
	},                                                                                                            // 6321
	hide: function() {                                                                                            // 6322
		return showHide( this );                                                                                     // 6323
	},                                                                                                            // 6324
	toggle: function( state ) {                                                                                   // 6325
		if ( typeof state === "boolean" ) {                                                                          // 6326
			return state ? this.show() : this.hide();                                                                   // 6327
		}                                                                                                            // 6328
                                                                                                               // 6329
		return this.each( function() {                                                                               // 6330
			if ( isHidden( this ) ) {                                                                                   // 6331
				jQuery( this ).show();                                                                                     // 6332
			} else {                                                                                                    // 6333
				jQuery( this ).hide();                                                                                     // 6334
			}                                                                                                           // 6335
		} );                                                                                                         // 6336
	}                                                                                                             // 6337
} );                                                                                                           // 6338
                                                                                                               // 6339
                                                                                                               // 6340
function Tween( elem, options, prop, end, easing ) {                                                           // 6341
	return new Tween.prototype.init( elem, options, prop, end, easing );                                          // 6342
}                                                                                                              // 6343
jQuery.Tween = Tween;                                                                                          // 6344
                                                                                                               // 6345
Tween.prototype = {                                                                                            // 6346
	constructor: Tween,                                                                                           // 6347
	init: function( elem, options, prop, end, easing, unit ) {                                                    // 6348
		this.elem = elem;                                                                                            // 6349
		this.prop = prop;                                                                                            // 6350
		this.easing = easing || jQuery.easing._default;                                                              // 6351
		this.options = options;                                                                                      // 6352
		this.start = this.now = this.cur();                                                                          // 6353
		this.end = end;                                                                                              // 6354
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );                                                // 6355
	},                                                                                                            // 6356
	cur: function() {                                                                                             // 6357
		var hooks = Tween.propHooks[ this.prop ];                                                                    // 6358
                                                                                                               // 6359
		return hooks && hooks.get ?                                                                                  // 6360
			hooks.get( this ) :                                                                                         // 6361
			Tween.propHooks._default.get( this );                                                                       // 6362
	},                                                                                                            // 6363
	run: function( percent ) {                                                                                    // 6364
		var eased,                                                                                                   // 6365
			hooks = Tween.propHooks[ this.prop ];                                                                       // 6366
                                                                                                               // 6367
		if ( this.options.duration ) {                                                                               // 6368
			this.pos = eased = jQuery.easing[ this.easing ](                                                            // 6369
				percent, this.options.duration * percent, 0, 1, this.options.duration                                      // 6370
			);                                                                                                          // 6371
		} else {                                                                                                     // 6372
			this.pos = eased = percent;                                                                                 // 6373
		}                                                                                                            // 6374
		this.now = ( this.end - this.start ) * eased + this.start;                                                   // 6375
                                                                                                               // 6376
		if ( this.options.step ) {                                                                                   // 6377
			this.options.step.call( this.elem, this.now, this );                                                        // 6378
		}                                                                                                            // 6379
                                                                                                               // 6380
		if ( hooks && hooks.set ) {                                                                                  // 6381
			hooks.set( this );                                                                                          // 6382
		} else {                                                                                                     // 6383
			Tween.propHooks._default.set( this );                                                                       // 6384
		}                                                                                                            // 6385
		return this;                                                                                                 // 6386
	}                                                                                                             // 6387
};                                                                                                             // 6388
                                                                                                               // 6389
Tween.prototype.init.prototype = Tween.prototype;                                                              // 6390
                                                                                                               // 6391
Tween.propHooks = {                                                                                            // 6392
	_default: {                                                                                                   // 6393
		get: function( tween ) {                                                                                     // 6394
			var result;                                                                                                 // 6395
                                                                                                               // 6396
			// Use a property on the element directly when it is not a DOM element,                                     // 6397
			// or when there is no matching style property that exists.                                                 // 6398
			if ( tween.elem.nodeType !== 1 ||                                                                           // 6399
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {                             // 6400
				return tween.elem[ tween.prop ];                                                                           // 6401
			}                                                                                                           // 6402
                                                                                                               // 6403
			// Passing an empty string as a 3rd parameter to .css will automatically                                    // 6404
			// attempt a parseFloat and fallback to a string if the parse fails.                                        // 6405
			// Simple values such as "10px" are parsed to Float;                                                        // 6406
			// complex values such as "rotate(1rad)" are returned as-is.                                                // 6407
			result = jQuery.css( tween.elem, tween.prop, "" );                                                          // 6408
                                                                                                               // 6409
			// Empty strings, null, undefined and "auto" are converted to 0.                                            // 6410
			return !result || result === "auto" ? 0 : result;                                                           // 6411
		},                                                                                                           // 6412
		set: function( tween ) {                                                                                     // 6413
                                                                                                               // 6414
			// Use step hook for back compat.                                                                           // 6415
			// Use cssHook if its there.                                                                                // 6416
			// Use .style if available and use plain properties where available.                                        // 6417
			if ( jQuery.fx.step[ tween.prop ] ) {                                                                       // 6418
				jQuery.fx.step[ tween.prop ]( tween );                                                                     // 6419
			} else if ( tween.elem.nodeType === 1 &&                                                                    // 6420
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||                                             // 6421
					jQuery.cssHooks[ tween.prop ] ) ) {                                                                       // 6422
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );                                            // 6423
			} else {                                                                                                    // 6424
				tween.elem[ tween.prop ] = tween.now;                                                                      // 6425
			}                                                                                                           // 6426
		}                                                                                                            // 6427
	}                                                                                                             // 6428
};                                                                                                             // 6429
                                                                                                               // 6430
// Support: IE9                                                                                                // 6431
// Panic based approach to setting things on disconnected nodes                                                // 6432
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {                                                     // 6433
	set: function( tween ) {                                                                                      // 6434
		if ( tween.elem.nodeType && tween.elem.parentNode ) {                                                        // 6435
			tween.elem[ tween.prop ] = tween.now;                                                                       // 6436
		}                                                                                                            // 6437
	}                                                                                                             // 6438
};                                                                                                             // 6439
                                                                                                               // 6440
jQuery.easing = {                                                                                              // 6441
	linear: function( p ) {                                                                                       // 6442
		return p;                                                                                                    // 6443
	},                                                                                                            // 6444
	swing: function( p ) {                                                                                        // 6445
		return 0.5 - Math.cos( p * Math.PI ) / 2;                                                                    // 6446
	},                                                                                                            // 6447
	_default: "swing"                                                                                             // 6448
};                                                                                                             // 6449
                                                                                                               // 6450
jQuery.fx = Tween.prototype.init;                                                                              // 6451
                                                                                                               // 6452
// Back Compat <1.8 extension point                                                                            // 6453
jQuery.fx.step = {};                                                                                           // 6454
                                                                                                               // 6455
                                                                                                               // 6456
                                                                                                               // 6457
                                                                                                               // 6458
var                                                                                                            // 6459
	fxNow, timerId,                                                                                               // 6460
	rfxtypes = /^(?:toggle|show|hide)$/,                                                                          // 6461
	rrun = /queueHooks$/;                                                                                         // 6462
                                                                                                               // 6463
// Animations created synchronously will run synchronously                                                     // 6464
function createFxNow() {                                                                                       // 6465
	window.setTimeout( function() {                                                                               // 6466
		fxNow = undefined;                                                                                           // 6467
	} );                                                                                                          // 6468
	return ( fxNow = jQuery.now() );                                                                              // 6469
}                                                                                                              // 6470
                                                                                                               // 6471
// Generate parameters to create a standard animation                                                          // 6472
function genFx( type, includeWidth ) {                                                                         // 6473
	var which,                                                                                                    // 6474
		i = 0,                                                                                                       // 6475
		attrs = { height: type };                                                                                    // 6476
                                                                                                               // 6477
	// If we include width, step value is 1 to do all cssExpand values,                                           // 6478
	// otherwise step value is 2 to skip over Left and Right                                                      // 6479
	includeWidth = includeWidth ? 1 : 0;                                                                          // 6480
	for ( ; i < 4 ; i += 2 - includeWidth ) {                                                                     // 6481
		which = cssExpand[ i ];                                                                                      // 6482
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;                                               // 6483
	}                                                                                                             // 6484
                                                                                                               // 6485
	if ( includeWidth ) {                                                                                         // 6486
		attrs.opacity = attrs.width = type;                                                                          // 6487
	}                                                                                                             // 6488
                                                                                                               // 6489
	return attrs;                                                                                                 // 6490
}                                                                                                              // 6491
                                                                                                               // 6492
function createTween( value, prop, animation ) {                                                               // 6493
	var tween,                                                                                                    // 6494
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),                       // 6495
		index = 0,                                                                                                   // 6496
		length = collection.length;                                                                                  // 6497
	for ( ; index < length; index++ ) {                                                                           // 6498
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {                                      // 6499
                                                                                                               // 6500
			// We're done with this property                                                                            // 6501
			return tween;                                                                                               // 6502
		}                                                                                                            // 6503
	}                                                                                                             // 6504
}                                                                                                              // 6505
                                                                                                               // 6506
function defaultPrefilter( elem, props, opts ) {                                                               // 6507
	/* jshint validthis: true */                                                                                  // 6508
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,                                        // 6509
		anim = this,                                                                                                 // 6510
		orig = {},                                                                                                   // 6511
		style = elem.style,                                                                                          // 6512
		hidden = elem.nodeType && isHidden( elem ),                                                                  // 6513
		dataShow = dataPriv.get( elem, "fxshow" );                                                                   // 6514
                                                                                                               // 6515
	// Handle queue: false promises                                                                               // 6516
	if ( !opts.queue ) {                                                                                          // 6517
		hooks = jQuery._queueHooks( elem, "fx" );                                                                    // 6518
		if ( hooks.unqueued == null ) {                                                                              // 6519
			hooks.unqueued = 0;                                                                                         // 6520
			oldfire = hooks.empty.fire;                                                                                 // 6521
			hooks.empty.fire = function() {                                                                             // 6522
				if ( !hooks.unqueued ) {                                                                                   // 6523
					oldfire();                                                                                                // 6524
				}                                                                                                          // 6525
			};                                                                                                          // 6526
		}                                                                                                            // 6527
		hooks.unqueued++;                                                                                            // 6528
                                                                                                               // 6529
		anim.always( function() {                                                                                    // 6530
                                                                                                               // 6531
			// Ensure the complete handler is called before this completes                                              // 6532
			anim.always( function() {                                                                                   // 6533
				hooks.unqueued--;                                                                                          // 6534
				if ( !jQuery.queue( elem, "fx" ).length ) {                                                                // 6535
					hooks.empty.fire();                                                                                       // 6536
				}                                                                                                          // 6537
			} );                                                                                                        // 6538
		} );                                                                                                         // 6539
	}                                                                                                             // 6540
                                                                                                               // 6541
	// Height/width overflow pass                                                                                 // 6542
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {                                     // 6543
                                                                                                               // 6544
		// Make sure that nothing sneaks out                                                                         // 6545
		// Record all 3 overflow attributes because IE9-10 do not                                                    // 6546
		// change the overflow attribute when overflowX and                                                          // 6547
		// overflowY are set to the same value                                                                       // 6548
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];                                        // 6549
                                                                                                               // 6550
		// Set display property to inline-block for height/width                                                     // 6551
		// animations on inline elements that are having width/height animated                                       // 6552
		display = jQuery.css( elem, "display" );                                                                     // 6553
                                                                                                               // 6554
		// Test default display if display is currently "none"                                                       // 6555
		checkDisplay = display === "none" ?                                                                          // 6556
			dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;                            // 6557
                                                                                                               // 6558
		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {                                 // 6559
			style.display = "inline-block";                                                                             // 6560
		}                                                                                                            // 6561
	}                                                                                                             // 6562
                                                                                                               // 6563
	if ( opts.overflow ) {                                                                                        // 6564
		style.overflow = "hidden";                                                                                   // 6565
		anim.always( function() {                                                                                    // 6566
			style.overflow = opts.overflow[ 0 ];                                                                        // 6567
			style.overflowX = opts.overflow[ 1 ];                                                                       // 6568
			style.overflowY = opts.overflow[ 2 ];                                                                       // 6569
		} );                                                                                                         // 6570
	}                                                                                                             // 6571
                                                                                                               // 6572
	// show/hide pass                                                                                             // 6573
	for ( prop in props ) {                                                                                       // 6574
		value = props[ prop ];                                                                                       // 6575
		if ( rfxtypes.exec( value ) ) {                                                                              // 6576
			delete props[ prop ];                                                                                       // 6577
			toggle = toggle || value === "toggle";                                                                      // 6578
			if ( value === ( hidden ? "hide" : "show" ) ) {                                                             // 6579
                                                                                                               // 6580
				// If there is dataShow left over from a stopped hide or show                                              // 6581
				// and we are going to proceed with show, we should pretend to be hidden                                   // 6582
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {                                    // 6583
					hidden = true;                                                                                            // 6584
				} else {                                                                                                   // 6585
					continue;                                                                                                 // 6586
				}                                                                                                          // 6587
			}                                                                                                           // 6588
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );                                  // 6589
                                                                                                               // 6590
		// Any non-fx value stops us from restoring the original display value                                       // 6591
		} else {                                                                                                     // 6592
			display = undefined;                                                                                        // 6593
		}                                                                                                            // 6594
	}                                                                                                             // 6595
                                                                                                               // 6596
	if ( !jQuery.isEmptyObject( orig ) ) {                                                                        // 6597
		if ( dataShow ) {                                                                                            // 6598
			if ( "hidden" in dataShow ) {                                                                               // 6599
				hidden = dataShow.hidden;                                                                                  // 6600
			}                                                                                                           // 6601
		} else {                                                                                                     // 6602
			dataShow = dataPriv.access( elem, "fxshow", {} );                                                           // 6603
		}                                                                                                            // 6604
                                                                                                               // 6605
		// Store state if its toggle - enables .stop().toggle() to "reverse"                                         // 6606
		if ( toggle ) {                                                                                              // 6607
			dataShow.hidden = !hidden;                                                                                  // 6608
		}                                                                                                            // 6609
		if ( hidden ) {                                                                                              // 6610
			jQuery( elem ).show();                                                                                      // 6611
		} else {                                                                                                     // 6612
			anim.done( function() {                                                                                     // 6613
				jQuery( elem ).hide();                                                                                     // 6614
			} );                                                                                                        // 6615
		}                                                                                                            // 6616
		anim.done( function() {                                                                                      // 6617
			var prop;                                                                                                   // 6618
                                                                                                               // 6619
			dataPriv.remove( elem, "fxshow" );                                                                          // 6620
			for ( prop in orig ) {                                                                                      // 6621
				jQuery.style( elem, prop, orig[ prop ] );                                                                  // 6622
			}                                                                                                           // 6623
		} );                                                                                                         // 6624
		for ( prop in orig ) {                                                                                       // 6625
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );                                           // 6626
                                                                                                               // 6627
			if ( !( prop in dataShow ) ) {                                                                              // 6628
				dataShow[ prop ] = tween.start;                                                                            // 6629
				if ( hidden ) {                                                                                            // 6630
					tween.end = tween.start;                                                                                  // 6631
					tween.start = prop === "width" || prop === "height" ? 1 : 0;                                              // 6632
				}                                                                                                          // 6633
			}                                                                                                           // 6634
		}                                                                                                            // 6635
                                                                                                               // 6636
	// If this is a noop like .hide().hide(), restore an overwritten display value                                // 6637
	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {               // 6638
		style.display = display;                                                                                     // 6639
	}                                                                                                             // 6640
}                                                                                                              // 6641
                                                                                                               // 6642
function propFilter( props, specialEasing ) {                                                                  // 6643
	var index, name, easing, value, hooks;                                                                        // 6644
                                                                                                               // 6645
	// camelCase, specialEasing and expand cssHook pass                                                           // 6646
	for ( index in props ) {                                                                                      // 6647
		name = jQuery.camelCase( index );                                                                            // 6648
		easing = specialEasing[ name ];                                                                              // 6649
		value = props[ index ];                                                                                      // 6650
		if ( jQuery.isArray( value ) ) {                                                                             // 6651
			easing = value[ 1 ];                                                                                        // 6652
			value = props[ index ] = value[ 0 ];                                                                        // 6653
		}                                                                                                            // 6654
                                                                                                               // 6655
		if ( index !== name ) {                                                                                      // 6656
			props[ name ] = value;                                                                                      // 6657
			delete props[ index ];                                                                                      // 6658
		}                                                                                                            // 6659
                                                                                                               // 6660
		hooks = jQuery.cssHooks[ name ];                                                                             // 6661
		if ( hooks && "expand" in hooks ) {                                                                          // 6662
			value = hooks.expand( value );                                                                              // 6663
			delete props[ name ];                                                                                       // 6664
                                                                                                               // 6665
			// Not quite $.extend, this won't overwrite existing keys.                                                  // 6666
			// Reusing 'index' because we have the correct "name"                                                       // 6667
			for ( index in value ) {                                                                                    // 6668
				if ( !( index in props ) ) {                                                                               // 6669
					props[ index ] = value[ index ];                                                                          // 6670
					specialEasing[ index ] = easing;                                                                          // 6671
				}                                                                                                          // 6672
			}                                                                                                           // 6673
		} else {                                                                                                     // 6674
			specialEasing[ name ] = easing;                                                                             // 6675
		}                                                                                                            // 6676
	}                                                                                                             // 6677
}                                                                                                              // 6678
                                                                                                               // 6679
function Animation( elem, properties, options ) {                                                              // 6680
	var result,                                                                                                   // 6681
		stopped,                                                                                                     // 6682
		index = 0,                                                                                                   // 6683
		length = Animation.prefilters.length,                                                                        // 6684
		deferred = jQuery.Deferred().always( function() {                                                            // 6685
                                                                                                               // 6686
			// Don't match elem in the :animated selector                                                               // 6687
			delete tick.elem;                                                                                           // 6688
		} ),                                                                                                         // 6689
		tick = function() {                                                                                          // 6690
			if ( stopped ) {                                                                                            // 6691
				return false;                                                                                              // 6692
			}                                                                                                           // 6693
			var currentTime = fxNow || createFxNow(),                                                                   // 6694
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),                         // 6695
                                                                                                               // 6696
				// Support: Android 2.3                                                                                    // 6697
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)                                     // 6698
				temp = remaining / animation.duration || 0,                                                                // 6699
				percent = 1 - temp,                                                                                        // 6700
				index = 0,                                                                                                 // 6701
				length = animation.tweens.length;                                                                          // 6702
                                                                                                               // 6703
			for ( ; index < length ; index++ ) {                                                                        // 6704
				animation.tweens[ index ].run( percent );                                                                  // 6705
			}                                                                                                           // 6706
                                                                                                               // 6707
			deferred.notifyWith( elem, [ animation, percent, remaining ] );                                             // 6708
                                                                                                               // 6709
			if ( percent < 1 && length ) {                                                                              // 6710
				return remaining;                                                                                          // 6711
			} else {                                                                                                    // 6712
				deferred.resolveWith( elem, [ animation ] );                                                               // 6713
				return false;                                                                                              // 6714
			}                                                                                                           // 6715
		},                                                                                                           // 6716
		animation = deferred.promise( {                                                                              // 6717
			elem: elem,                                                                                                 // 6718
			props: jQuery.extend( {}, properties ),                                                                     // 6719
			opts: jQuery.extend( true, {                                                                                // 6720
				specialEasing: {},                                                                                         // 6721
				easing: jQuery.easing._default                                                                             // 6722
			}, options ),                                                                                               // 6723
			originalProperties: properties,                                                                             // 6724
			originalOptions: options,                                                                                   // 6725
			startTime: fxNow || createFxNow(),                                                                          // 6726
			duration: options.duration,                                                                                 // 6727
			tweens: [],                                                                                                 // 6728
			createTween: function( prop, end ) {                                                                        // 6729
				var tween = jQuery.Tween( elem, animation.opts, prop, end,                                                 // 6730
						animation.opts.specialEasing[ prop ] || animation.opts.easing );                                         // 6731
				animation.tweens.push( tween );                                                                            // 6732
				return tween;                                                                                              // 6733
			},                                                                                                          // 6734
			stop: function( gotoEnd ) {                                                                                 // 6735
				var index = 0,                                                                                             // 6736
                                                                                                               // 6737
					// If we are going to the end, we want to run all the tweens                                              // 6738
					// otherwise we skip this part                                                                            // 6739
					length = gotoEnd ? animation.tweens.length : 0;                                                           // 6740
				if ( stopped ) {                                                                                           // 6741
					return this;                                                                                              // 6742
				}                                                                                                          // 6743
				stopped = true;                                                                                            // 6744
				for ( ; index < length ; index++ ) {                                                                       // 6745
					animation.tweens[ index ].run( 1 );                                                                       // 6746
				}                                                                                                          // 6747
                                                                                                               // 6748
				// Resolve when we played the last frame; otherwise, reject                                                // 6749
				if ( gotoEnd ) {                                                                                           // 6750
					deferred.notifyWith( elem, [ animation, 1, 0 ] );                                                         // 6751
					deferred.resolveWith( elem, [ animation, gotoEnd ] );                                                     // 6752
				} else {                                                                                                   // 6753
					deferred.rejectWith( elem, [ animation, gotoEnd ] );                                                      // 6754
				}                                                                                                          // 6755
				return this;                                                                                               // 6756
			}                                                                                                           // 6757
		} ),                                                                                                         // 6758
		props = animation.props;                                                                                     // 6759
                                                                                                               // 6760
	propFilter( props, animation.opts.specialEasing );                                                            // 6761
                                                                                                               // 6762
	for ( ; index < length ; index++ ) {                                                                          // 6763
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );                       // 6764
		if ( result ) {                                                                                              // 6765
			if ( jQuery.isFunction( result.stop ) ) {                                                                   // 6766
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =                                          // 6767
					jQuery.proxy( result.stop, result );                                                                      // 6768
			}                                                                                                           // 6769
			return result;                                                                                              // 6770
		}                                                                                                            // 6771
	}                                                                                                             // 6772
                                                                                                               // 6773
	jQuery.map( props, createTween, animation );                                                                  // 6774
                                                                                                               // 6775
	if ( jQuery.isFunction( animation.opts.start ) ) {                                                            // 6776
		animation.opts.start.call( elem, animation );                                                                // 6777
	}                                                                                                             // 6778
                                                                                                               // 6779
	jQuery.fx.timer(                                                                                              // 6780
		jQuery.extend( tick, {                                                                                       // 6781
			elem: elem,                                                                                                 // 6782
			anim: animation,                                                                                            // 6783
			queue: animation.opts.queue                                                                                 // 6784
		} )                                                                                                          // 6785
	);                                                                                                            // 6786
                                                                                                               // 6787
	// attach callbacks from options                                                                              // 6788
	return animation.progress( animation.opts.progress )                                                          // 6789
		.done( animation.opts.done, animation.opts.complete )                                                        // 6790
		.fail( animation.opts.fail )                                                                                 // 6791
		.always( animation.opts.always );                                                                            // 6792
}                                                                                                              // 6793
                                                                                                               // 6794
jQuery.Animation = jQuery.extend( Animation, {                                                                 // 6795
	tweeners: {                                                                                                   // 6796
		"*": [ function( prop, value ) {                                                                             // 6797
			var tween = this.createTween( prop, value );                                                                // 6798
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );                                                // 6799
			return tween;                                                                                               // 6800
		} ]                                                                                                          // 6801
	},                                                                                                            // 6802
                                                                                                               // 6803
	tweener: function( props, callback ) {                                                                        // 6804
		if ( jQuery.isFunction( props ) ) {                                                                          // 6805
			callback = props;                                                                                           // 6806
			props = [ "*" ];                                                                                            // 6807
		} else {                                                                                                     // 6808
			props = props.match( rnotwhite );                                                                           // 6809
		}                                                                                                            // 6810
                                                                                                               // 6811
		var prop,                                                                                                    // 6812
			index = 0,                                                                                                  // 6813
			length = props.length;                                                                                      // 6814
                                                                                                               // 6815
		for ( ; index < length ; index++ ) {                                                                         // 6816
			prop = props[ index ];                                                                                      // 6817
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];                                              // 6818
			Animation.tweeners[ prop ].unshift( callback );                                                             // 6819
		}                                                                                                            // 6820
	},                                                                                                            // 6821
                                                                                                               // 6822
	prefilters: [ defaultPrefilter ],                                                                             // 6823
                                                                                                               // 6824
	prefilter: function( callback, prepend ) {                                                                    // 6825
		if ( prepend ) {                                                                                             // 6826
			Animation.prefilters.unshift( callback );                                                                   // 6827
		} else {                                                                                                     // 6828
			Animation.prefilters.push( callback );                                                                      // 6829
		}                                                                                                            // 6830
	}                                                                                                             // 6831
} );                                                                                                           // 6832
                                                                                                               // 6833
jQuery.speed = function( speed, easing, fn ) {                                                                 // 6834
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {                                 // 6835
		complete: fn || !fn && easing ||                                                                             // 6836
			jQuery.isFunction( speed ) && speed,                                                                        // 6837
		duration: speed,                                                                                             // 6838
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing                                     // 6839
	};                                                                                                            // 6840
                                                                                                               // 6841
	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?                                         // 6842
		opt.duration : opt.duration in jQuery.fx.speeds ?                                                            // 6843
			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;                                               // 6844
                                                                                                               // 6845
	// Normalize opt.queue - true/undefined/null -> "fx"                                                          // 6846
	if ( opt.queue == null || opt.queue === true ) {                                                              // 6847
		opt.queue = "fx";                                                                                            // 6848
	}                                                                                                             // 6849
                                                                                                               // 6850
	// Queueing                                                                                                   // 6851
	opt.old = opt.complete;                                                                                       // 6852
                                                                                                               // 6853
	opt.complete = function() {                                                                                   // 6854
		if ( jQuery.isFunction( opt.old ) ) {                                                                        // 6855
			opt.old.call( this );                                                                                       // 6856
		}                                                                                                            // 6857
                                                                                                               // 6858
		if ( opt.queue ) {                                                                                           // 6859
			jQuery.dequeue( this, opt.queue );                                                                          // 6860
		}                                                                                                            // 6861
	};                                                                                                            // 6862
                                                                                                               // 6863
	return opt;                                                                                                   // 6864
};                                                                                                             // 6865
                                                                                                               // 6866
jQuery.fn.extend( {                                                                                            // 6867
	fadeTo: function( speed, to, easing, callback ) {                                                             // 6868
                                                                                                               // 6869
		// Show any hidden elements after setting opacity to 0                                                       // 6870
		return this.filter( isHidden ).css( "opacity", 0 ).show()                                                    // 6871
                                                                                                               // 6872
			// Animate to the value specified                                                                           // 6873
			.end().animate( { opacity: to }, speed, easing, callback );                                                 // 6874
	},                                                                                                            // 6875
	animate: function( prop, speed, easing, callback ) {                                                          // 6876
		var empty = jQuery.isEmptyObject( prop ),                                                                    // 6877
			optall = jQuery.speed( speed, easing, callback ),                                                           // 6878
			doAnimation = function() {                                                                                  // 6879
                                                                                                               // 6880
				// Operate on a copy of prop so per-property easing won't be lost                                          // 6881
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );                                           // 6882
                                                                                                               // 6883
				// Empty animations, or finishing resolves immediately                                                     // 6884
				if ( empty || dataPriv.get( this, "finish" ) ) {                                                           // 6885
					anim.stop( true );                                                                                        // 6886
				}                                                                                                          // 6887
			};                                                                                                          // 6888
			doAnimation.finish = doAnimation;                                                                           // 6889
                                                                                                               // 6890
		return empty || optall.queue === false ?                                                                     // 6891
			this.each( doAnimation ) :                                                                                  // 6892
			this.queue( optall.queue, doAnimation );                                                                    // 6893
	},                                                                                                            // 6894
	stop: function( type, clearQueue, gotoEnd ) {                                                                 // 6895
		var stopQueue = function( hooks ) {                                                                          // 6896
			var stop = hooks.stop;                                                                                      // 6897
			delete hooks.stop;                                                                                          // 6898
			stop( gotoEnd );                                                                                            // 6899
		};                                                                                                           // 6900
                                                                                                               // 6901
		if ( typeof type !== "string" ) {                                                                            // 6902
			gotoEnd = clearQueue;                                                                                       // 6903
			clearQueue = type;                                                                                          // 6904
			type = undefined;                                                                                           // 6905
		}                                                                                                            // 6906
		if ( clearQueue && type !== false ) {                                                                        // 6907
			this.queue( type || "fx", [] );                                                                             // 6908
		}                                                                                                            // 6909
                                                                                                               // 6910
		return this.each( function() {                                                                               // 6911
			var dequeue = true,                                                                                         // 6912
				index = type != null && type + "queueHooks",                                                               // 6913
				timers = jQuery.timers,                                                                                    // 6914
				data = dataPriv.get( this );                                                                               // 6915
                                                                                                               // 6916
			if ( index ) {                                                                                              // 6917
				if ( data[ index ] && data[ index ].stop ) {                                                               // 6918
					stopQueue( data[ index ] );                                                                               // 6919
				}                                                                                                          // 6920
			} else {                                                                                                    // 6921
				for ( index in data ) {                                                                                    // 6922
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {                                        // 6923
						stopQueue( data[ index ] );                                                                              // 6924
					}                                                                                                         // 6925
				}                                                                                                          // 6926
			}                                                                                                           // 6927
                                                                                                               // 6928
			for ( index = timers.length; index--; ) {                                                                   // 6929
				if ( timers[ index ].elem === this &&                                                                      // 6930
					( type == null || timers[ index ].queue === type ) ) {                                                    // 6931
                                                                                                               // 6932
					timers[ index ].anim.stop( gotoEnd );                                                                     // 6933
					dequeue = false;                                                                                          // 6934
					timers.splice( index, 1 );                                                                                // 6935
				}                                                                                                          // 6936
			}                                                                                                           // 6937
                                                                                                               // 6938
			// Start the next in the queue if the last step wasn't forced.                                              // 6939
			// Timers currently will call their complete callbacks, which                                               // 6940
			// will dequeue but only if they were gotoEnd.                                                              // 6941
			if ( dequeue || !gotoEnd ) {                                                                                // 6942
				jQuery.dequeue( this, type );                                                                              // 6943
			}                                                                                                           // 6944
		} );                                                                                                         // 6945
	},                                                                                                            // 6946
	finish: function( type ) {                                                                                    // 6947
		if ( type !== false ) {                                                                                      // 6948
			type = type || "fx";                                                                                        // 6949
		}                                                                                                            // 6950
		return this.each( function() {                                                                               // 6951
			var index,                                                                                                  // 6952
				data = dataPriv.get( this ),                                                                               // 6953
				queue = data[ type + "queue" ],                                                                            // 6954
				hooks = data[ type + "queueHooks" ],                                                                       // 6955
				timers = jQuery.timers,                                                                                    // 6956
				length = queue ? queue.length : 0;                                                                         // 6957
                                                                                                               // 6958
			// Enable finishing flag on private data                                                                    // 6959
			data.finish = true;                                                                                         // 6960
                                                                                                               // 6961
			// Empty the queue first                                                                                    // 6962
			jQuery.queue( this, type, [] );                                                                             // 6963
                                                                                                               // 6964
			if ( hooks && hooks.stop ) {                                                                                // 6965
				hooks.stop.call( this, true );                                                                             // 6966
			}                                                                                                           // 6967
                                                                                                               // 6968
			// Look for any active animations, and finish them                                                          // 6969
			for ( index = timers.length; index--; ) {                                                                   // 6970
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {                                   // 6971
					timers[ index ].anim.stop( true );                                                                        // 6972
					timers.splice( index, 1 );                                                                                // 6973
				}                                                                                                          // 6974
			}                                                                                                           // 6975
                                                                                                               // 6976
			// Look for any animations in the old queue and finish them                                                 // 6977
			for ( index = 0; index < length; index++ ) {                                                                // 6978
				if ( queue[ index ] && queue[ index ].finish ) {                                                           // 6979
					queue[ index ].finish.call( this );                                                                       // 6980
				}                                                                                                          // 6981
			}                                                                                                           // 6982
                                                                                                               // 6983
			// Turn off finishing flag                                                                                  // 6984
			delete data.finish;                                                                                         // 6985
		} );                                                                                                         // 6986
	}                                                                                                             // 6987
} );                                                                                                           // 6988
                                                                                                               // 6989
jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {                                               // 6990
	var cssFn = jQuery.fn[ name ];                                                                                // 6991
	jQuery.fn[ name ] = function( speed, easing, callback ) {                                                     // 6992
		return speed == null || typeof speed === "boolean" ?                                                         // 6993
			cssFn.apply( this, arguments ) :                                                                            // 6994
			this.animate( genFx( name, true ), speed, easing, callback );                                               // 6995
	};                                                                                                            // 6996
} );                                                                                                           // 6997
                                                                                                               // 6998
// Generate shortcuts for custom animations                                                                    // 6999
jQuery.each( {                                                                                                 // 7000
	slideDown: genFx( "show" ),                                                                                   // 7001
	slideUp: genFx( "hide" ),                                                                                     // 7002
	slideToggle: genFx( "toggle" ),                                                                               // 7003
	fadeIn: { opacity: "show" },                                                                                  // 7004
	fadeOut: { opacity: "hide" },                                                                                 // 7005
	fadeToggle: { opacity: "toggle" }                                                                             // 7006
}, function( name, props ) {                                                                                   // 7007
	jQuery.fn[ name ] = function( speed, easing, callback ) {                                                     // 7008
		return this.animate( props, speed, easing, callback );                                                       // 7009
	};                                                                                                            // 7010
} );                                                                                                           // 7011
                                                                                                               // 7012
jQuery.timers = [];                                                                                            // 7013
jQuery.fx.tick = function() {                                                                                  // 7014
	var timer,                                                                                                    // 7015
		i = 0,                                                                                                       // 7016
		timers = jQuery.timers;                                                                                      // 7017
                                                                                                               // 7018
	fxNow = jQuery.now();                                                                                         // 7019
                                                                                                               // 7020
	for ( ; i < timers.length; i++ ) {                                                                            // 7021
		timer = timers[ i ];                                                                                         // 7022
                                                                                                               // 7023
		// Checks the timer has not already been removed                                                             // 7024
		if ( !timer() && timers[ i ] === timer ) {                                                                   // 7025
			timers.splice( i--, 1 );                                                                                    // 7026
		}                                                                                                            // 7027
	}                                                                                                             // 7028
                                                                                                               // 7029
	if ( !timers.length ) {                                                                                       // 7030
		jQuery.fx.stop();                                                                                            // 7031
	}                                                                                                             // 7032
	fxNow = undefined;                                                                                            // 7033
};                                                                                                             // 7034
                                                                                                               // 7035
jQuery.fx.timer = function( timer ) {                                                                          // 7036
	jQuery.timers.push( timer );                                                                                  // 7037
	if ( timer() ) {                                                                                              // 7038
		jQuery.fx.start();                                                                                           // 7039
	} else {                                                                                                      // 7040
		jQuery.timers.pop();                                                                                         // 7041
	}                                                                                                             // 7042
};                                                                                                             // 7043
                                                                                                               // 7044
jQuery.fx.interval = 13;                                                                                       // 7045
jQuery.fx.start = function() {                                                                                 // 7046
	if ( !timerId ) {                                                                                             // 7047
		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );                                          // 7048
	}                                                                                                             // 7049
};                                                                                                             // 7050
                                                                                                               // 7051
jQuery.fx.stop = function() {                                                                                  // 7052
	window.clearInterval( timerId );                                                                              // 7053
                                                                                                               // 7054
	timerId = null;                                                                                               // 7055
};                                                                                                             // 7056
                                                                                                               // 7057
jQuery.fx.speeds = {                                                                                           // 7058
	slow: 600,                                                                                                    // 7059
	fast: 200,                                                                                                    // 7060
                                                                                                               // 7061
	// Default speed                                                                                              // 7062
	_default: 400                                                                                                 // 7063
};                                                                                                             // 7064
                                                                                                               // 7065
                                                                                                               // 7066
// Based off of the plugin by Clint Helfers, with permission.                                                  // 7067
// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/           // 7068
jQuery.fn.delay = function( time, type ) {                                                                     // 7069
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;                                                   // 7070
	type = type || "fx";                                                                                          // 7071
                                                                                                               // 7072
	return this.queue( type, function( next, hooks ) {                                                            // 7073
		var timeout = window.setTimeout( next, time );                                                               // 7074
		hooks.stop = function() {                                                                                    // 7075
			window.clearTimeout( timeout );                                                                             // 7076
		};                                                                                                           // 7077
	} );                                                                                                          // 7078
};                                                                                                             // 7079
                                                                                                               // 7080
                                                                                                               // 7081
( function() {                                                                                                 // 7082
	var input = document.createElement( "input" ),                                                                // 7083
		select = document.createElement( "select" ),                                                                 // 7084
		opt = select.appendChild( document.createElement( "option" ) );                                              // 7085
                                                                                                               // 7086
	input.type = "checkbox";                                                                                      // 7087
                                                                                                               // 7088
	// Support: iOS<=5.1, Android<=4.2+                                                                           // 7089
	// Default value for a checkbox should be "on"                                                                // 7090
	support.checkOn = input.value !== "";                                                                         // 7091
                                                                                                               // 7092
	// Support: IE<=11+                                                                                           // 7093
	// Must access selectedIndex to make default options select                                                   // 7094
	support.optSelected = opt.selected;                                                                           // 7095
                                                                                                               // 7096
	// Support: Android<=2.3                                                                                      // 7097
	// Options inside disabled selects are incorrectly marked as disabled                                         // 7098
	select.disabled = true;                                                                                       // 7099
	support.optDisabled = !opt.disabled;                                                                          // 7100
                                                                                                               // 7101
	// Support: IE<=11+                                                                                           // 7102
	// An input loses its value after becoming a radio                                                            // 7103
	input = document.createElement( "input" );                                                                    // 7104
	input.value = "t";                                                                                            // 7105
	input.type = "radio";                                                                                         // 7106
	support.radioValue = input.value === "t";                                                                     // 7107
} )();                                                                                                         // 7108
                                                                                                               // 7109
                                                                                                               // 7110
var boolHook,                                                                                                  // 7111
	attrHandle = jQuery.expr.attrHandle;                                                                          // 7112
                                                                                                               // 7113
jQuery.fn.extend( {                                                                                            // 7114
	attr: function( name, value ) {                                                                               // 7115
		return access( this, jQuery.attr, name, value, arguments.length > 1 );                                       // 7116
	},                                                                                                            // 7117
                                                                                                               // 7118
	removeAttr: function( name ) {                                                                                // 7119
		return this.each( function() {                                                                               // 7120
			jQuery.removeAttr( this, name );                                                                            // 7121
		} );                                                                                                         // 7122
	}                                                                                                             // 7123
} );                                                                                                           // 7124
                                                                                                               // 7125
jQuery.extend( {                                                                                               // 7126
	attr: function( elem, name, value ) {                                                                         // 7127
		var ret, hooks,                                                                                              // 7128
			nType = elem.nodeType;                                                                                      // 7129
                                                                                                               // 7130
		// Don't get/set attributes on text, comment and attribute nodes                                             // 7131
		if ( nType === 3 || nType === 8 || nType === 2 ) {                                                           // 7132
			return;                                                                                                     // 7133
		}                                                                                                            // 7134
                                                                                                               // 7135
		// Fallback to prop when attributes are not supported                                                        // 7136
		if ( typeof elem.getAttribute === "undefined" ) {                                                            // 7137
			return jQuery.prop( elem, name, value );                                                                    // 7138
		}                                                                                                            // 7139
                                                                                                               // 7140
		// All attributes are lowercase                                                                              // 7141
		// Grab necessary hook if one is defined                                                                     // 7142
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {                                                             // 7143
			name = name.toLowerCase();                                                                                  // 7144
			hooks = jQuery.attrHooks[ name ] ||                                                                         // 7145
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );                                            // 7146
		}                                                                                                            // 7147
                                                                                                               // 7148
		if ( value !== undefined ) {                                                                                 // 7149
			if ( value === null ) {                                                                                     // 7150
				jQuery.removeAttr( elem, name );                                                                           // 7151
				return;                                                                                                    // 7152
			}                                                                                                           // 7153
                                                                                                               // 7154
			if ( hooks && "set" in hooks &&                                                                             // 7155
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {                                                 // 7156
				return ret;                                                                                                // 7157
			}                                                                                                           // 7158
                                                                                                               // 7159
			elem.setAttribute( name, value + "" );                                                                      // 7160
			return value;                                                                                               // 7161
		}                                                                                                            // 7162
                                                                                                               // 7163
		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {                               // 7164
			return ret;                                                                                                 // 7165
		}                                                                                                            // 7166
                                                                                                               // 7167
		ret = jQuery.find.attr( elem, name );                                                                        // 7168
                                                                                                               // 7169
		// Non-existent attributes return null, we normalize to undefined                                            // 7170
		return ret == null ? undefined : ret;                                                                        // 7171
	},                                                                                                            // 7172
                                                                                                               // 7173
	attrHooks: {                                                                                                  // 7174
		type: {                                                                                                      // 7175
			set: function( elem, value ) {                                                                              // 7176
				if ( !support.radioValue && value === "radio" &&                                                           // 7177
					jQuery.nodeName( elem, "input" ) ) {                                                                      // 7178
					var val = elem.value;                                                                                     // 7179
					elem.setAttribute( "type", value );                                                                       // 7180
					if ( val ) {                                                                                              // 7181
						elem.value = val;                                                                                        // 7182
					}                                                                                                         // 7183
					return value;                                                                                             // 7184
				}                                                                                                          // 7185
			}                                                                                                           // 7186
		}                                                                                                            // 7187
	},                                                                                                            // 7188
                                                                                                               // 7189
	removeAttr: function( elem, value ) {                                                                         // 7190
		var name, propName,                                                                                          // 7191
			i = 0,                                                                                                      // 7192
			attrNames = value && value.match( rnotwhite );                                                              // 7193
                                                                                                               // 7194
		if ( attrNames && elem.nodeType === 1 ) {                                                                    // 7195
			while ( ( name = attrNames[ i++ ] ) ) {                                                                     // 7196
				propName = jQuery.propFix[ name ] || name;                                                                 // 7197
                                                                                                               // 7198
				// Boolean attributes get special treatment (#10870)                                                       // 7199
				if ( jQuery.expr.match.bool.test( name ) ) {                                                               // 7200
                                                                                                               // 7201
					// Set corresponding property to false                                                                    // 7202
					elem[ propName ] = false;                                                                                 // 7203
				}                                                                                                          // 7204
                                                                                                               // 7205
				elem.removeAttribute( name );                                                                              // 7206
			}                                                                                                           // 7207
		}                                                                                                            // 7208
	}                                                                                                             // 7209
} );                                                                                                           // 7210
                                                                                                               // 7211
// Hooks for boolean attributes                                                                                // 7212
boolHook = {                                                                                                   // 7213
	set: function( elem, value, name ) {                                                                          // 7214
		if ( value === false ) {                                                                                     // 7215
                                                                                                               // 7216
			// Remove boolean attributes when set to false                                                              // 7217
			jQuery.removeAttr( elem, name );                                                                            // 7218
		} else {                                                                                                     // 7219
			elem.setAttribute( name, name );                                                                            // 7220
		}                                                                                                            // 7221
		return name;                                                                                                 // 7222
	}                                                                                                             // 7223
};                                                                                                             // 7224
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {                              // 7225
	var getter = attrHandle[ name ] || jQuery.find.attr;                                                          // 7226
                                                                                                               // 7227
	attrHandle[ name ] = function( elem, name, isXML ) {                                                          // 7228
		var ret, handle;                                                                                             // 7229
		if ( !isXML ) {                                                                                              // 7230
                                                                                                               // 7231
			// Avoid an infinite loop by temporarily removing this function from the getter                             // 7232
			handle = attrHandle[ name ];                                                                                // 7233
			attrHandle[ name ] = ret;                                                                                   // 7234
			ret = getter( elem, name, isXML ) != null ?                                                                 // 7235
				name.toLowerCase() :                                                                                       // 7236
				null;                                                                                                      // 7237
			attrHandle[ name ] = handle;                                                                                // 7238
		}                                                                                                            // 7239
		return ret;                                                                                                  // 7240
	};                                                                                                            // 7241
} );                                                                                                           // 7242
                                                                                                               // 7243
                                                                                                               // 7244
                                                                                                               // 7245
                                                                                                               // 7246
var rfocusable = /^(?:input|select|textarea|button)$/i,                                                        // 7247
	rclickable = /^(?:a|area)$/i;                                                                                 // 7248
                                                                                                               // 7249
jQuery.fn.extend( {                                                                                            // 7250
	prop: function( name, value ) {                                                                               // 7251
		return access( this, jQuery.prop, name, value, arguments.length > 1 );                                       // 7252
	},                                                                                                            // 7253
                                                                                                               // 7254
	removeProp: function( name ) {                                                                                // 7255
		return this.each( function() {                                                                               // 7256
			delete this[ jQuery.propFix[ name ] || name ];                                                              // 7257
		} );                                                                                                         // 7258
	}                                                                                                             // 7259
} );                                                                                                           // 7260
                                                                                                               // 7261
jQuery.extend( {                                                                                               // 7262
	prop: function( elem, name, value ) {                                                                         // 7263
		var ret, hooks,                                                                                              // 7264
			nType = elem.nodeType;                                                                                      // 7265
                                                                                                               // 7266
		// Don't get/set properties on text, comment and attribute nodes                                             // 7267
		if ( nType === 3 || nType === 8 || nType === 2 ) {                                                           // 7268
			return;                                                                                                     // 7269
		}                                                                                                            // 7270
                                                                                                               // 7271
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {                                                             // 7272
                                                                                                               // 7273
			// Fix name and attach hooks                                                                                // 7274
			name = jQuery.propFix[ name ] || name;                                                                      // 7275
			hooks = jQuery.propHooks[ name ];                                                                           // 7276
		}                                                                                                            // 7277
                                                                                                               // 7278
		if ( value !== undefined ) {                                                                                 // 7279
			if ( hooks && "set" in hooks &&                                                                             // 7280
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {                                                 // 7281
				return ret;                                                                                                // 7282
			}                                                                                                           // 7283
                                                                                                               // 7284
			return ( elem[ name ] = value );                                                                            // 7285
		}                                                                                                            // 7286
                                                                                                               // 7287
		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {                               // 7288
			return ret;                                                                                                 // 7289
		}                                                                                                            // 7290
                                                                                                               // 7291
		return elem[ name ];                                                                                         // 7292
	},                                                                                                            // 7293
                                                                                                               // 7294
	propHooks: {                                                                                                  // 7295
		tabIndex: {                                                                                                  // 7296
			get: function( elem ) {                                                                                     // 7297
                                                                                                               // 7298
				// elem.tabIndex doesn't always return the                                                                 // 7299
				// correct value when it hasn't been explicitly set                                                        // 7300
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/   // 7301
				// Use proper attribute retrieval(#12072)                                                                  // 7302
				var tabindex = jQuery.find.attr( elem, "tabindex" );                                                       // 7303
                                                                                                               // 7304
				return tabindex ?                                                                                          // 7305
					parseInt( tabindex, 10 ) :                                                                                // 7306
					rfocusable.test( elem.nodeName ) ||                                                                       // 7307
						rclickable.test( elem.nodeName ) && elem.href ?                                                          // 7308
							0 :                                                                                                     // 7309
							-1;                                                                                                     // 7310
			}                                                                                                           // 7311
		}                                                                                                            // 7312
	},                                                                                                            // 7313
                                                                                                               // 7314
	propFix: {                                                                                                    // 7315
		"for": "htmlFor",                                                                                            // 7316
		"class": "className"                                                                                         // 7317
	}                                                                                                             // 7318
} );                                                                                                           // 7319
                                                                                                               // 7320
// Support: IE <=11 only                                                                                       // 7321
// Accessing the selectedIndex property                                                                        // 7322
// forces the browser to respect setting selected                                                              // 7323
// on the option                                                                                               // 7324
// The getter ensures a default option is selected                                                             // 7325
// when in an optgroup                                                                                         // 7326
if ( !support.optSelected ) {                                                                                  // 7327
	jQuery.propHooks.selected = {                                                                                 // 7328
		get: function( elem ) {                                                                                      // 7329
			var parent = elem.parentNode;                                                                               // 7330
			if ( parent && parent.parentNode ) {                                                                        // 7331
				parent.parentNode.selectedIndex;                                                                           // 7332
			}                                                                                                           // 7333
			return null;                                                                                                // 7334
		},                                                                                                           // 7335
		set: function( elem ) {                                                                                      // 7336
			var parent = elem.parentNode;                                                                               // 7337
			if ( parent ) {                                                                                             // 7338
				parent.selectedIndex;                                                                                      // 7339
                                                                                                               // 7340
				if ( parent.parentNode ) {                                                                                 // 7341
					parent.parentNode.selectedIndex;                                                                          // 7342
				}                                                                                                          // 7343
			}                                                                                                           // 7344
		}                                                                                                            // 7345
	};                                                                                                            // 7346
}                                                                                                              // 7347
                                                                                                               // 7348
jQuery.each( [                                                                                                 // 7349
	"tabIndex",                                                                                                   // 7350
	"readOnly",                                                                                                   // 7351
	"maxLength",                                                                                                  // 7352
	"cellSpacing",                                                                                                // 7353
	"cellPadding",                                                                                                // 7354
	"rowSpan",                                                                                                    // 7355
	"colSpan",                                                                                                    // 7356
	"useMap",                                                                                                     // 7357
	"frameBorder",                                                                                                // 7358
	"contentEditable"                                                                                             // 7359
], function() {                                                                                                // 7360
	jQuery.propFix[ this.toLowerCase() ] = this;                                                                  // 7361
} );                                                                                                           // 7362
                                                                                                               // 7363
                                                                                                               // 7364
                                                                                                               // 7365
                                                                                                               // 7366
var rclass = /[\t\r\n\f]/g;                                                                                    // 7367
                                                                                                               // 7368
function getClass( elem ) {                                                                                    // 7369
	return elem.getAttribute && elem.getAttribute( "class" ) || "";                                               // 7370
}                                                                                                              // 7371
                                                                                                               // 7372
jQuery.fn.extend( {                                                                                            // 7373
	addClass: function( value ) {                                                                                 // 7374
		var classes, elem, cur, curValue, clazz, j, finalValue,                                                      // 7375
			i = 0;                                                                                                      // 7376
                                                                                                               // 7377
		if ( jQuery.isFunction( value ) ) {                                                                          // 7378
			return this.each( function( j ) {                                                                           // 7379
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );                                        // 7380
			} );                                                                                                        // 7381
		}                                                                                                            // 7382
                                                                                                               // 7383
		if ( typeof value === "string" && value ) {                                                                  // 7384
			classes = value.match( rnotwhite ) || [];                                                                   // 7385
                                                                                                               // 7386
			while ( ( elem = this[ i++ ] ) ) {                                                                          // 7387
				curValue = getClass( elem );                                                                               // 7388
				cur = elem.nodeType === 1 &&                                                                               // 7389
					( " " + curValue + " " ).replace( rclass, " " );                                                          // 7390
                                                                                                               // 7391
				if ( cur ) {                                                                                               // 7392
					j = 0;                                                                                                    // 7393
					while ( ( clazz = classes[ j++ ] ) ) {                                                                    // 7394
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {                                                            // 7395
							cur += clazz + " ";                                                                                     // 7396
						}                                                                                                        // 7397
					}                                                                                                         // 7398
                                                                                                               // 7399
					// Only assign if different to avoid unneeded rendering.                                                  // 7400
					finalValue = jQuery.trim( cur );                                                                          // 7401
					if ( curValue !== finalValue ) {                                                                          // 7402
						elem.setAttribute( "class", finalValue );                                                                // 7403
					}                                                                                                         // 7404
				}                                                                                                          // 7405
			}                                                                                                           // 7406
		}                                                                                                            // 7407
                                                                                                               // 7408
		return this;                                                                                                 // 7409
	},                                                                                                            // 7410
                                                                                                               // 7411
	removeClass: function( value ) {                                                                              // 7412
		var classes, elem, cur, curValue, clazz, j, finalValue,                                                      // 7413
			i = 0;                                                                                                      // 7414
                                                                                                               // 7415
		if ( jQuery.isFunction( value ) ) {                                                                          // 7416
			return this.each( function( j ) {                                                                           // 7417
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );                                     // 7418
			} );                                                                                                        // 7419
		}                                                                                                            // 7420
                                                                                                               // 7421
		if ( !arguments.length ) {                                                                                   // 7422
			return this.attr( "class", "" );                                                                            // 7423
		}                                                                                                            // 7424
                                                                                                               // 7425
		if ( typeof value === "string" && value ) {                                                                  // 7426
			classes = value.match( rnotwhite ) || [];                                                                   // 7427
                                                                                                               // 7428
			while ( ( elem = this[ i++ ] ) ) {                                                                          // 7429
				curValue = getClass( elem );                                                                               // 7430
                                                                                                               // 7431
				// This expression is here for better compressibility (see addClass)                                       // 7432
				cur = elem.nodeType === 1 &&                                                                               // 7433
					( " " + curValue + " " ).replace( rclass, " " );                                                          // 7434
                                                                                                               // 7435
				if ( cur ) {                                                                                               // 7436
					j = 0;                                                                                                    // 7437
					while ( ( clazz = classes[ j++ ] ) ) {                                                                    // 7438
                                                                                                               // 7439
						// Remove *all* instances                                                                                // 7440
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {                                                        // 7441
							cur = cur.replace( " " + clazz + " ", " " );                                                            // 7442
						}                                                                                                        // 7443
					}                                                                                                         // 7444
                                                                                                               // 7445
					// Only assign if different to avoid unneeded rendering.                                                  // 7446
					finalValue = jQuery.trim( cur );                                                                          // 7447
					if ( curValue !== finalValue ) {                                                                          // 7448
						elem.setAttribute( "class", finalValue );                                                                // 7449
					}                                                                                                         // 7450
				}                                                                                                          // 7451
			}                                                                                                           // 7452
		}                                                                                                            // 7453
                                                                                                               // 7454
		return this;                                                                                                 // 7455
	},                                                                                                            // 7456
                                                                                                               // 7457
	toggleClass: function( value, stateVal ) {                                                                    // 7458
		var type = typeof value;                                                                                     // 7459
                                                                                                               // 7460
		if ( typeof stateVal === "boolean" && type === "string" ) {                                                  // 7461
			return stateVal ? this.addClass( value ) : this.removeClass( value );                                       // 7462
		}                                                                                                            // 7463
                                                                                                               // 7464
		if ( jQuery.isFunction( value ) ) {                                                                          // 7465
			return this.each( function( i ) {                                                                           // 7466
				jQuery( this ).toggleClass(                                                                                // 7467
					value.call( this, i, getClass( this ), stateVal ),                                                        // 7468
					stateVal                                                                                                  // 7469
				);                                                                                                         // 7470
			} );                                                                                                        // 7471
		}                                                                                                            // 7472
                                                                                                               // 7473
		return this.each( function() {                                                                               // 7474
			var className, i, self, classNames;                                                                         // 7475
                                                                                                               // 7476
			if ( type === "string" ) {                                                                                  // 7477
                                                                                                               // 7478
				// Toggle individual class names                                                                           // 7479
				i = 0;                                                                                                     // 7480
				self = jQuery( this );                                                                                     // 7481
				classNames = value.match( rnotwhite ) || [];                                                               // 7482
                                                                                                               // 7483
				while ( ( className = classNames[ i++ ] ) ) {                                                              // 7484
                                                                                                               // 7485
					// Check each className given, space separated list                                                       // 7486
					if ( self.hasClass( className ) ) {                                                                       // 7487
						self.removeClass( className );                                                                           // 7488
					} else {                                                                                                  // 7489
						self.addClass( className );                                                                              // 7490
					}                                                                                                         // 7491
				}                                                                                                          // 7492
                                                                                                               // 7493
			// Toggle whole class name                                                                                  // 7494
			} else if ( value === undefined || type === "boolean" ) {                                                   // 7495
				className = getClass( this );                                                                              // 7496
				if ( className ) {                                                                                         // 7497
                                                                                                               // 7498
					// Store className if set                                                                                 // 7499
					dataPriv.set( this, "__className__", className );                                                         // 7500
				}                                                                                                          // 7501
                                                                                                               // 7502
				// If the element has a class name or if we're passed `false`,                                             // 7503
				// then remove the whole classname (if there was one, the above saved it).                                 // 7504
				// Otherwise bring back whatever was previously saved (if anything),                                       // 7505
				// falling back to the empty string if nothing was stored.                                                 // 7506
				if ( this.setAttribute ) {                                                                                 // 7507
					this.setAttribute( "class",                                                                               // 7508
						className || value === false ?                                                                           // 7509
						"" :                                                                                                     // 7510
						dataPriv.get( this, "__className__" ) || ""                                                              // 7511
					);                                                                                                        // 7512
				}                                                                                                          // 7513
			}                                                                                                           // 7514
		} );                                                                                                         // 7515
	},                                                                                                            // 7516
                                                                                                               // 7517
	hasClass: function( selector ) {                                                                              // 7518
		var className, elem,                                                                                         // 7519
			i = 0;                                                                                                      // 7520
                                                                                                               // 7521
		className = " " + selector + " ";                                                                            // 7522
		while ( ( elem = this[ i++ ] ) ) {                                                                           // 7523
			if ( elem.nodeType === 1 &&                                                                                 // 7524
				( " " + getClass( elem ) + " " ).replace( rclass, " " )                                                    // 7525
					.indexOf( className ) > -1                                                                                // 7526
			) {                                                                                                         // 7527
				return true;                                                                                               // 7528
			}                                                                                                           // 7529
		}                                                                                                            // 7530
                                                                                                               // 7531
		return false;                                                                                                // 7532
	}                                                                                                             // 7533
} );                                                                                                           // 7534
                                                                                                               // 7535
                                                                                                               // 7536
                                                                                                               // 7537
                                                                                                               // 7538
var rreturn = /\r/g,                                                                                           // 7539
	rspaces = /[\x20\t\r\n\f]+/g;                                                                                 // 7540
                                                                                                               // 7541
jQuery.fn.extend( {                                                                                            // 7542
	val: function( value ) {                                                                                      // 7543
		var hooks, ret, isFunction,                                                                                  // 7544
			elem = this[ 0 ];                                                                                           // 7545
                                                                                                               // 7546
		if ( !arguments.length ) {                                                                                   // 7547
			if ( elem ) {                                                                                               // 7548
				hooks = jQuery.valHooks[ elem.type ] ||                                                                    // 7549
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];                                                           // 7550
                                                                                                               // 7551
				if ( hooks &&                                                                                              // 7552
					"get" in hooks &&                                                                                         // 7553
					( ret = hooks.get( elem, "value" ) ) !== undefined                                                        // 7554
				) {                                                                                                        // 7555
					return ret;                                                                                               // 7556
				}                                                                                                          // 7557
                                                                                                               // 7558
				ret = elem.value;                                                                                          // 7559
                                                                                                               // 7560
				return typeof ret === "string" ?                                                                           // 7561
                                                                                                               // 7562
					// Handle most common string cases                                                                        // 7563
					ret.replace( rreturn, "" ) :                                                                              // 7564
                                                                                                               // 7565
					// Handle cases where value is null/undef or number                                                       // 7566
					ret == null ? "" : ret;                                                                                   // 7567
			}                                                                                                           // 7568
                                                                                                               // 7569
			return;                                                                                                     // 7570
		}                                                                                                            // 7571
                                                                                                               // 7572
		isFunction = jQuery.isFunction( value );                                                                     // 7573
                                                                                                               // 7574
		return this.each( function( i ) {                                                                            // 7575
			var val;                                                                                                    // 7576
                                                                                                               // 7577
			if ( this.nodeType !== 1 ) {                                                                                // 7578
				return;                                                                                                    // 7579
			}                                                                                                           // 7580
                                                                                                               // 7581
			if ( isFunction ) {                                                                                         // 7582
				val = value.call( this, i, jQuery( this ).val() );                                                         // 7583
			} else {                                                                                                    // 7584
				val = value;                                                                                               // 7585
			}                                                                                                           // 7586
                                                                                                               // 7587
			// Treat null/undefined as ""; convert numbers to string                                                    // 7588
			if ( val == null ) {                                                                                        // 7589
				val = "";                                                                                                  // 7590
                                                                                                               // 7591
			} else if ( typeof val === "number" ) {                                                                     // 7592
				val += "";                                                                                                 // 7593
                                                                                                               // 7594
			} else if ( jQuery.isArray( val ) ) {                                                                       // 7595
				val = jQuery.map( val, function( value ) {                                                                 // 7596
					return value == null ? "" : value + "";                                                                   // 7597
				} );                                                                                                       // 7598
			}                                                                                                           // 7599
                                                                                                               // 7600
			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];                     // 7601
                                                                                                               // 7602
			// If set returns undefined, fall back to normal setting                                                    // 7603
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {                     // 7604
				this.value = val;                                                                                          // 7605
			}                                                                                                           // 7606
		} );                                                                                                         // 7607
	}                                                                                                             // 7608
} );                                                                                                           // 7609
                                                                                                               // 7610
jQuery.extend( {                                                                                               // 7611
	valHooks: {                                                                                                   // 7612
		option: {                                                                                                    // 7613
			get: function( elem ) {                                                                                     // 7614
                                                                                                               // 7615
				var val = jQuery.find.attr( elem, "value" );                                                               // 7616
				return val != null ?                                                                                       // 7617
					val :                                                                                                     // 7618
                                                                                                               // 7619
					// Support: IE10-11+                                                                                      // 7620
					// option.text throws exceptions (#14686, #14858)                                                         // 7621
					// Strip and collapse whitespace                                                                          // 7622
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace                                            // 7623
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );                                               // 7624
			}                                                                                                           // 7625
		},                                                                                                           // 7626
		select: {                                                                                                    // 7627
			get: function( elem ) {                                                                                     // 7628
				var value, option,                                                                                         // 7629
					options = elem.options,                                                                                   // 7630
					index = elem.selectedIndex,                                                                               // 7631
					one = elem.type === "select-one" || index < 0,                                                            // 7632
					values = one ? null : [],                                                                                 // 7633
					max = one ? index + 1 : options.length,                                                                   // 7634
					i = index < 0 ?                                                                                           // 7635
						max :                                                                                                    // 7636
						one ? index : 0;                                                                                         // 7637
                                                                                                               // 7638
				// Loop through all the selected options                                                                   // 7639
				for ( ; i < max; i++ ) {                                                                                   // 7640
					option = options[ i ];                                                                                    // 7641
                                                                                                               // 7642
					// IE8-9 doesn't update selected after form reset (#2551)                                                 // 7643
					if ( ( option.selected || i === index ) &&                                                                // 7644
                                                                                                               // 7645
							// Don't return options that are disabled or in a disabled optgroup                                     // 7646
							( support.optDisabled ?                                                                                 // 7647
								!option.disabled : option.getAttribute( "disabled" ) === null ) &&                                     // 7648
							( !option.parentNode.disabled ||                                                                        // 7649
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {                                                // 7650
                                                                                                               // 7651
						// Get the specific value for the option                                                                 // 7652
						value = jQuery( option ).val();                                                                          // 7653
                                                                                                               // 7654
						// We don't need an array for one selects                                                                // 7655
						if ( one ) {                                                                                             // 7656
							return value;                                                                                           // 7657
						}                                                                                                        // 7658
                                                                                                               // 7659
						// Multi-Selects return an array                                                                         // 7660
						values.push( value );                                                                                    // 7661
					}                                                                                                         // 7662
				}                                                                                                          // 7663
                                                                                                               // 7664
				return values;                                                                                             // 7665
			},                                                                                                          // 7666
                                                                                                               // 7667
			set: function( elem, value ) {                                                                              // 7668
				var optionSet, option,                                                                                     // 7669
					options = elem.options,                                                                                   // 7670
					values = jQuery.makeArray( value ),                                                                       // 7671
					i = options.length;                                                                                       // 7672
                                                                                                               // 7673
				while ( i-- ) {                                                                                            // 7674
					option = options[ i ];                                                                                    // 7675
					if ( option.selected =                                                                                    // 7676
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1                                      // 7677
					) {                                                                                                       // 7678
						optionSet = true;                                                                                        // 7679
					}                                                                                                         // 7680
				}                                                                                                          // 7681
                                                                                                               // 7682
				// Force browsers to behave consistently when non-matching value is set                                    // 7683
				if ( !optionSet ) {                                                                                        // 7684
					elem.selectedIndex = -1;                                                                                  // 7685
				}                                                                                                          // 7686
				return values;                                                                                             // 7687
			}                                                                                                           // 7688
		}                                                                                                            // 7689
	}                                                                                                             // 7690
} );                                                                                                           // 7691
                                                                                                               // 7692
// Radios and checkboxes getter/setter                                                                         // 7693
jQuery.each( [ "radio", "checkbox" ], function() {                                                             // 7694
	jQuery.valHooks[ this ] = {                                                                                   // 7695
		set: function( elem, value ) {                                                                               // 7696
			if ( jQuery.isArray( value ) ) {                                                                            // 7697
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );                              // 7698
			}                                                                                                           // 7699
		}                                                                                                            // 7700
	};                                                                                                            // 7701
	if ( !support.checkOn ) {                                                                                     // 7702
		jQuery.valHooks[ this ].get = function( elem ) {                                                             // 7703
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;                                           // 7704
		};                                                                                                           // 7705
	}                                                                                                             // 7706
} );                                                                                                           // 7707
                                                                                                               // 7708
                                                                                                               // 7709
                                                                                                               // 7710
                                                                                                               // 7711
// Return jQuery for attributes-only inclusion                                                                 // 7712
                                                                                                               // 7713
                                                                                                               // 7714
var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;                                                           // 7715
                                                                                                               // 7716
jQuery.extend( jQuery.event, {                                                                                 // 7717
                                                                                                               // 7718
	trigger: function( event, data, elem, onlyHandlers ) {                                                        // 7719
                                                                                                               // 7720
		var i, cur, tmp, bubbleType, ontype, handle, special,                                                        // 7721
			eventPath = [ elem || document ],                                                                           // 7722
			type = hasOwn.call( event, "type" ) ? event.type : event,                                                   // 7723
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];                         // 7724
                                                                                                               // 7725
		cur = tmp = elem = elem || document;                                                                         // 7726
                                                                                                               // 7727
		// Don't do events on text and comment nodes                                                                 // 7728
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {                                                          // 7729
			return;                                                                                                     // 7730
		}                                                                                                            // 7731
                                                                                                               // 7732
		// focus/blur morphs to focusin/out; ensure we're not firing them right now                                  // 7733
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {                                                   // 7734
			return;                                                                                                     // 7735
		}                                                                                                            // 7736
                                                                                                               // 7737
		if ( type.indexOf( "." ) > -1 ) {                                                                            // 7738
                                                                                                               // 7739
			// Namespaced trigger; create a regexp to match event type in handle()                                      // 7740
			namespaces = type.split( "." );                                                                             // 7741
			type = namespaces.shift();                                                                                  // 7742
			namespaces.sort();                                                                                          // 7743
		}                                                                                                            // 7744
		ontype = type.indexOf( ":" ) < 0 && "on" + type;                                                             // 7745
                                                                                                               // 7746
		// Caller can pass in a jQuery.Event object, Object, or just an event type string                            // 7747
		event = event[ jQuery.expando ] ?                                                                            // 7748
			event :                                                                                                     // 7749
			new jQuery.Event( type, typeof event === "object" && event );                                               // 7750
                                                                                                               // 7751
		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)                                    // 7752
		event.isTrigger = onlyHandlers ? 2 : 3;                                                                      // 7753
		event.namespace = namespaces.join( "." );                                                                    // 7754
		event.rnamespace = event.namespace ?                                                                         // 7755
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :                                  // 7756
			null;                                                                                                       // 7757
                                                                                                               // 7758
		// Clean up the event in case it is being reused                                                             // 7759
		event.result = undefined;                                                                                    // 7760
		if ( !event.target ) {                                                                                       // 7761
			event.target = elem;                                                                                        // 7762
		}                                                                                                            // 7763
                                                                                                               // 7764
		// Clone any incoming data and prepend the event, creating the handler arg list                              // 7765
		data = data == null ?                                                                                        // 7766
			[ event ] :                                                                                                 // 7767
			jQuery.makeArray( data, [ event ] );                                                                        // 7768
                                                                                                               // 7769
		// Allow special events to draw outside the lines                                                            // 7770
		special = jQuery.event.special[ type ] || {};                                                                // 7771
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {                   // 7772
			return;                                                                                                     // 7773
		}                                                                                                            // 7774
                                                                                                               // 7775
		// Determine event propagation path in advance, per W3C events spec (#9951)                                  // 7776
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)                       // 7777
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {                                      // 7778
                                                                                                               // 7779
			bubbleType = special.delegateType || type;                                                                  // 7780
			if ( !rfocusMorph.test( bubbleType + type ) ) {                                                             // 7781
				cur = cur.parentNode;                                                                                      // 7782
			}                                                                                                           // 7783
			for ( ; cur; cur = cur.parentNode ) {                                                                       // 7784
				eventPath.push( cur );                                                                                     // 7785
				tmp = cur;                                                                                                 // 7786
			}                                                                                                           // 7787
                                                                                                               // 7788
			// Only add window if we got to document (e.g., not plain obj or detached DOM)                              // 7789
			if ( tmp === ( elem.ownerDocument || document ) ) {                                                         // 7790
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );                                           // 7791
			}                                                                                                           // 7792
		}                                                                                                            // 7793
                                                                                                               // 7794
		// Fire handlers on the event path                                                                           // 7795
		i = 0;                                                                                                       // 7796
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {                                      // 7797
                                                                                                               // 7798
			event.type = i > 1 ?                                                                                        // 7799
				bubbleType :                                                                                               // 7800
				special.bindType || type;                                                                                  // 7801
                                                                                                               // 7802
			// jQuery handler                                                                                           // 7803
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&                                           // 7804
				dataPriv.get( cur, "handle" );                                                                             // 7805
			if ( handle ) {                                                                                             // 7806
				handle.apply( cur, data );                                                                                 // 7807
			}                                                                                                           // 7808
                                                                                                               // 7809
			// Native handler                                                                                           // 7810
			handle = ontype && cur[ ontype ];                                                                           // 7811
			if ( handle && handle.apply && acceptData( cur ) ) {                                                        // 7812
				event.result = handle.apply( cur, data );                                                                  // 7813
				if ( event.result === false ) {                                                                            // 7814
					event.preventDefault();                                                                                   // 7815
				}                                                                                                          // 7816
			}                                                                                                           // 7817
		}                                                                                                            // 7818
		event.type = type;                                                                                           // 7819
                                                                                                               // 7820
		// If nobody prevented the default action, do it now                                                         // 7821
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {                                                        // 7822
                                                                                                               // 7823
			if ( ( !special._default ||                                                                                 // 7824
				special._default.apply( eventPath.pop(), data ) === false ) &&                                             // 7825
				acceptData( elem ) ) {                                                                                     // 7826
                                                                                                               // 7827
				// Call a native DOM method on the target with the same name name as the event.                            // 7828
				// Don't do default actions on window, that's where global variables be (#6170)                            // 7829
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {                           // 7830
                                                                                                               // 7831
					// Don't re-trigger an onFOO event when we call its FOO() method                                          // 7832
					tmp = elem[ ontype ];                                                                                     // 7833
                                                                                                               // 7834
					if ( tmp ) {                                                                                              // 7835
						elem[ ontype ] = null;                                                                                   // 7836
					}                                                                                                         // 7837
                                                                                                               // 7838
					// Prevent re-triggering of the same event, since we already bubbled it above                             // 7839
					jQuery.event.triggered = type;                                                                            // 7840
					elem[ type ]();                                                                                           // 7841
					jQuery.event.triggered = undefined;                                                                       // 7842
                                                                                                               // 7843
					if ( tmp ) {                                                                                              // 7844
						elem[ ontype ] = tmp;                                                                                    // 7845
					}                                                                                                         // 7846
				}                                                                                                          // 7847
			}                                                                                                           // 7848
		}                                                                                                            // 7849
                                                                                                               // 7850
		return event.result;                                                                                         // 7851
	},                                                                                                            // 7852
                                                                                                               // 7853
	// Piggyback on a donor event to simulate a different one                                                     // 7854
	// Used only for `focus(in | out)` events                                                                     // 7855
	simulate: function( type, elem, event ) {                                                                     // 7856
		var e = jQuery.extend(                                                                                       // 7857
			new jQuery.Event(),                                                                                         // 7858
			event,                                                                                                      // 7859
			{                                                                                                           // 7860
				type: type,                                                                                                // 7861
				isSimulated: true                                                                                          // 7862
			}                                                                                                           // 7863
		);                                                                                                           // 7864
                                                                                                               // 7865
		jQuery.event.trigger( e, null, elem );                                                                       // 7866
	}                                                                                                             // 7867
                                                                                                               // 7868
} );                                                                                                           // 7869
                                                                                                               // 7870
jQuery.fn.extend( {                                                                                            // 7871
                                                                                                               // 7872
	trigger: function( type, data ) {                                                                             // 7873
		return this.each( function() {                                                                               // 7874
			jQuery.event.trigger( type, data, this );                                                                   // 7875
		} );                                                                                                         // 7876
	},                                                                                                            // 7877
	triggerHandler: function( type, data ) {                                                                      // 7878
		var elem = this[ 0 ];                                                                                        // 7879
		if ( elem ) {                                                                                                // 7880
			return jQuery.event.trigger( type, data, elem, true );                                                      // 7881
		}                                                                                                            // 7882
	}                                                                                                             // 7883
} );                                                                                                           // 7884
                                                                                                               // 7885
                                                                                                               // 7886
jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +                       // 7887
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +                                     // 7888
	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),                               // 7889
	function( i, name ) {                                                                                         // 7890
                                                                                                               // 7891
	// Handle event binding                                                                                       // 7892
	jQuery.fn[ name ] = function( data, fn ) {                                                                    // 7893
		return arguments.length > 0 ?                                                                                // 7894
			this.on( name, null, data, fn ) :                                                                           // 7895
			this.trigger( name );                                                                                       // 7896
	};                                                                                                            // 7897
} );                                                                                                           // 7898
                                                                                                               // 7899
jQuery.fn.extend( {                                                                                            // 7900
	hover: function( fnOver, fnOut ) {                                                                            // 7901
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );                                              // 7902
	}                                                                                                             // 7903
} );                                                                                                           // 7904
                                                                                                               // 7905
                                                                                                               // 7906
                                                                                                               // 7907
                                                                                                               // 7908
support.focusin = "onfocusin" in window;                                                                       // 7909
                                                                                                               // 7910
                                                                                                               // 7911
// Support: Firefox                                                                                            // 7912
// Firefox doesn't have focus(in | out) events                                                                 // 7913
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787                                        // 7914
//                                                                                                             // 7915
// Support: Chrome, Safari                                                                                     // 7916
// focus(in | out) events fire after focus & blur events,                                                      // 7917
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order            // 7918
// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857                                 // 7919
if ( !support.focusin ) {                                                                                      // 7920
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {                                  // 7921
                                                                                                               // 7922
		// Attach a single capturing handler on the document while someone wants focusin/focusout                    // 7923
		var handler = function( event ) {                                                                            // 7924
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );                                      // 7925
		};                                                                                                           // 7926
                                                                                                               // 7927
		jQuery.event.special[ fix ] = {                                                                              // 7928
			setup: function() {                                                                                         // 7929
				var doc = this.ownerDocument || this,                                                                      // 7930
					attaches = dataPriv.access( doc, fix );                                                                   // 7931
                                                                                                               // 7932
				if ( !attaches ) {                                                                                         // 7933
					doc.addEventListener( orig, handler, true );                                                              // 7934
				}                                                                                                          // 7935
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );                                                        // 7936
			},                                                                                                          // 7937
			teardown: function() {                                                                                      // 7938
				var doc = this.ownerDocument || this,                                                                      // 7939
					attaches = dataPriv.access( doc, fix ) - 1;                                                               // 7940
                                                                                                               // 7941
				if ( !attaches ) {                                                                                         // 7942
					doc.removeEventListener( orig, handler, true );                                                           // 7943
					dataPriv.remove( doc, fix );                                                                              // 7944
                                                                                                               // 7945
				} else {                                                                                                   // 7946
					dataPriv.access( doc, fix, attaches );                                                                    // 7947
				}                                                                                                          // 7948
			}                                                                                                           // 7949
		};                                                                                                           // 7950
	} );                                                                                                          // 7951
}                                                                                                              // 7952
var location = window.location;                                                                                // 7953
                                                                                                               // 7954
var nonce = jQuery.now();                                                                                      // 7955
                                                                                                               // 7956
var rquery = ( /\?/ );                                                                                         // 7957
                                                                                                               // 7958
                                                                                                               // 7959
                                                                                                               // 7960
// Support: Android 2.3                                                                                        // 7961
// Workaround failure to string-cast null input                                                                // 7962
jQuery.parseJSON = function( data ) {                                                                          // 7963
	return JSON.parse( data + "" );                                                                               // 7964
};                                                                                                             // 7965
                                                                                                               // 7966
                                                                                                               // 7967
// Cross-browser xml parsing                                                                                   // 7968
jQuery.parseXML = function( data ) {                                                                           // 7969
	var xml;                                                                                                      // 7970
	if ( !data || typeof data !== "string" ) {                                                                    // 7971
		return null;                                                                                                 // 7972
	}                                                                                                             // 7973
                                                                                                               // 7974
	// Support: IE9                                                                                               // 7975
	try {                                                                                                         // 7976
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );                                        // 7977
	} catch ( e ) {                                                                                               // 7978
		xml = undefined;                                                                                             // 7979
	}                                                                                                             // 7980
                                                                                                               // 7981
	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {                                             // 7982
		jQuery.error( "Invalid XML: " + data );                                                                      // 7983
	}                                                                                                             // 7984
	return xml;                                                                                                   // 7985
};                                                                                                             // 7986
                                                                                                               // 7987
                                                                                                               // 7988
var                                                                                                            // 7989
	rhash = /#.*$/,                                                                                               // 7990
	rts = /([?&])_=[^&]*/,                                                                                        // 7991
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,                                                                      // 7992
                                                                                                               // 7993
	// #7653, #8125, #8152: local protocol detection                                                              // 7994
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,                                 // 7995
	rnoContent = /^(?:GET|HEAD)$/,                                                                                // 7996
	rprotocol = /^\/\//,                                                                                          // 7997
                                                                                                               // 7998
	/* Prefilters                                                                                                 // 7999
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)                        // 8000
	 * 2) These are called:                                                                                       // 8001
	 *    - BEFORE asking for a transport                                                                         // 8002
	 *    - AFTER param serialization (s.data is a string if s.processData is true)                               // 8003
	 * 3) key is the dataType                                                                                     // 8004
	 * 4) the catchall symbol "*" can be used                                                                     // 8005
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed                    // 8006
	 */                                                                                                           // 8007
	prefilters = {},                                                                                              // 8008
                                                                                                               // 8009
	/* Transports bindings                                                                                        // 8010
	 * 1) key is the dataType                                                                                     // 8011
	 * 2) the catchall symbol "*" can be used                                                                     // 8012
	 * 3) selection will start with transport dataType and THEN go to "*" if needed                               // 8013
	 */                                                                                                           // 8014
	transports = {},                                                                                              // 8015
                                                                                                               // 8016
	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression                       // 8017
	allTypes = "*/".concat( "*" ),                                                                                // 8018
                                                                                                               // 8019
	// Anchor tag for parsing the document origin                                                                 // 8020
	originAnchor = document.createElement( "a" );                                                                 // 8021
	originAnchor.href = location.href;                                                                            // 8022
                                                                                                               // 8023
// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport                                        // 8024
function addToPrefiltersOrTransports( structure ) {                                                            // 8025
                                                                                                               // 8026
	// dataTypeExpression is optional and defaults to "*"                                                         // 8027
	return function( dataTypeExpression, func ) {                                                                 // 8028
                                                                                                               // 8029
		if ( typeof dataTypeExpression !== "string" ) {                                                              // 8030
			func = dataTypeExpression;                                                                                  // 8031
			dataTypeExpression = "*";                                                                                   // 8032
		}                                                                                                            // 8033
                                                                                                               // 8034
		var dataType,                                                                                                // 8035
			i = 0,                                                                                                      // 8036
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];                                      // 8037
                                                                                                               // 8038
		if ( jQuery.isFunction( func ) ) {                                                                           // 8039
                                                                                                               // 8040
			// For each dataType in the dataTypeExpression                                                              // 8041
			while ( ( dataType = dataTypes[ i++ ] ) ) {                                                                 // 8042
                                                                                                               // 8043
				// Prepend if requested                                                                                    // 8044
				if ( dataType[ 0 ] === "+" ) {                                                                             // 8045
					dataType = dataType.slice( 1 ) || "*";                                                                    // 8046
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );                                  // 8047
                                                                                                               // 8048
				// Otherwise append                                                                                        // 8049
				} else {                                                                                                   // 8050
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );                                     // 8051
				}                                                                                                          // 8052
			}                                                                                                           // 8053
		}                                                                                                            // 8054
	};                                                                                                            // 8055
}                                                                                                              // 8056
                                                                                                               // 8057
// Base inspection function for prefilters and transports                                                      // 8058
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {                         // 8059
                                                                                                               // 8060
	var inspected = {},                                                                                           // 8061
		seekingTransport = ( structure === transports );                                                             // 8062
                                                                                                               // 8063
	function inspect( dataType ) {                                                                                // 8064
		var selected;                                                                                                // 8065
		inspected[ dataType ] = true;                                                                                // 8066
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {                                // 8067
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );                            // 8068
			if ( typeof dataTypeOrTransport === "string" &&                                                             // 8069
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {                                                 // 8070
                                                                                                               // 8071
				options.dataTypes.unshift( dataTypeOrTransport );                                                          // 8072
				inspect( dataTypeOrTransport );                                                                            // 8073
				return false;                                                                                              // 8074
			} else if ( seekingTransport ) {                                                                            // 8075
				return !( selected = dataTypeOrTransport );                                                                // 8076
			}                                                                                                           // 8077
		} );                                                                                                         // 8078
		return selected;                                                                                             // 8079
	}                                                                                                             // 8080
                                                                                                               // 8081
	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );                              // 8082
}                                                                                                              // 8083
                                                                                                               // 8084
// A special extend for ajax options                                                                           // 8085
// that takes "flat" options (not to be deep extended)                                                         // 8086
// Fixes #9887                                                                                                 // 8087
function ajaxExtend( target, src ) {                                                                           // 8088
	var key, deep,                                                                                                // 8089
		flatOptions = jQuery.ajaxSettings.flatOptions || {};                                                         // 8090
                                                                                                               // 8091
	for ( key in src ) {                                                                                          // 8092
		if ( src[ key ] !== undefined ) {                                                                            // 8093
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];                            // 8094
		}                                                                                                            // 8095
	}                                                                                                             // 8096
	if ( deep ) {                                                                                                 // 8097
		jQuery.extend( true, target, deep );                                                                         // 8098
	}                                                                                                             // 8099
                                                                                                               // 8100
	return target;                                                                                                // 8101
}                                                                                                              // 8102
                                                                                                               // 8103
/* Handles responses to an ajax request:                                                                       // 8104
 * - finds the right dataType (mediates between content-type and expected dataType)                            // 8105
 * - returns the corresponding response                                                                        // 8106
 */                                                                                                            // 8107
function ajaxHandleResponses( s, jqXHR, responses ) {                                                          // 8108
                                                                                                               // 8109
	var ct, type, finalDataType, firstDataType,                                                                   // 8110
		contents = s.contents,                                                                                       // 8111
		dataTypes = s.dataTypes;                                                                                     // 8112
                                                                                                               // 8113
	// Remove auto dataType and get content-type in the process                                                   // 8114
	while ( dataTypes[ 0 ] === "*" ) {                                                                            // 8115
		dataTypes.shift();                                                                                           // 8116
		if ( ct === undefined ) {                                                                                    // 8117
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );                                               // 8118
		}                                                                                                            // 8119
	}                                                                                                             // 8120
                                                                                                               // 8121
	// Check if we're dealing with a known content-type                                                           // 8122
	if ( ct ) {                                                                                                   // 8123
		for ( type in contents ) {                                                                                   // 8124
			if ( contents[ type ] && contents[ type ].test( ct ) ) {                                                    // 8125
				dataTypes.unshift( type );                                                                                 // 8126
				break;                                                                                                     // 8127
			}                                                                                                           // 8128
		}                                                                                                            // 8129
	}                                                                                                             // 8130
                                                                                                               // 8131
	// Check to see if we have a response for the expected dataType                                               // 8132
	if ( dataTypes[ 0 ] in responses ) {                                                                          // 8133
		finalDataType = dataTypes[ 0 ];                                                                              // 8134
	} else {                                                                                                      // 8135
                                                                                                               // 8136
		// Try convertible dataTypes                                                                                 // 8137
		for ( type in responses ) {                                                                                  // 8138
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {                                     // 8139
				finalDataType = type;                                                                                      // 8140
				break;                                                                                                     // 8141
			}                                                                                                           // 8142
			if ( !firstDataType ) {                                                                                     // 8143
				firstDataType = type;                                                                                      // 8144
			}                                                                                                           // 8145
		}                                                                                                            // 8146
                                                                                                               // 8147
		// Or just use first one                                                                                     // 8148
		finalDataType = finalDataType || firstDataType;                                                              // 8149
	}                                                                                                             // 8150
                                                                                                               // 8151
	// If we found a dataType                                                                                     // 8152
	// We add the dataType to the list if needed                                                                  // 8153
	// and return the corresponding response                                                                      // 8154
	if ( finalDataType ) {                                                                                        // 8155
		if ( finalDataType !== dataTypes[ 0 ] ) {                                                                    // 8156
			dataTypes.unshift( finalDataType );                                                                         // 8157
		}                                                                                                            // 8158
		return responses[ finalDataType ];                                                                           // 8159
	}                                                                                                             // 8160
}                                                                                                              // 8161
                                                                                                               // 8162
/* Chain conversions given the request and the original response                                               // 8163
 * Also sets the responseXXX fields on the jqXHR instance                                                      // 8164
 */                                                                                                            // 8165
function ajaxConvert( s, response, jqXHR, isSuccess ) {                                                        // 8166
	var conv2, current, conv, tmp, prev,                                                                          // 8167
		converters = {},                                                                                             // 8168
                                                                                                               // 8169
		// Work with a copy of dataTypes in case we need to modify it for conversion                                 // 8170
		dataTypes = s.dataTypes.slice();                                                                             // 8171
                                                                                                               // 8172
	// Create converters map with lowercased keys                                                                 // 8173
	if ( dataTypes[ 1 ] ) {                                                                                       // 8174
		for ( conv in s.converters ) {                                                                               // 8175
			converters[ conv.toLowerCase() ] = s.converters[ conv ];                                                    // 8176
		}                                                                                                            // 8177
	}                                                                                                             // 8178
                                                                                                               // 8179
	current = dataTypes.shift();                                                                                  // 8180
                                                                                                               // 8181
	// Convert to each sequential dataType                                                                        // 8182
	while ( current ) {                                                                                           // 8183
                                                                                                               // 8184
		if ( s.responseFields[ current ] ) {                                                                         // 8185
			jqXHR[ s.responseFields[ current ] ] = response;                                                            // 8186
		}                                                                                                            // 8187
                                                                                                               // 8188
		// Apply the dataFilter if provided                                                                          // 8189
		if ( !prev && isSuccess && s.dataFilter ) {                                                                  // 8190
			response = s.dataFilter( response, s.dataType );                                                            // 8191
		}                                                                                                            // 8192
                                                                                                               // 8193
		prev = current;                                                                                              // 8194
		current = dataTypes.shift();                                                                                 // 8195
                                                                                                               // 8196
		if ( current ) {                                                                                             // 8197
                                                                                                               // 8198
		// There's only work to do if current dataType is non-auto                                                   // 8199
			if ( current === "*" ) {                                                                                    // 8200
                                                                                                               // 8201
				current = prev;                                                                                            // 8202
                                                                                                               // 8203
			// Convert response if prev dataType is non-auto and differs from current                                   // 8204
			} else if ( prev !== "*" && prev !== current ) {                                                            // 8205
                                                                                                               // 8206
				// Seek a direct converter                                                                                 // 8207
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];                                 // 8208
                                                                                                               // 8209
				// If none found, seek a pair                                                                              // 8210
				if ( !conv ) {                                                                                             // 8211
					for ( conv2 in converters ) {                                                                             // 8212
                                                                                                               // 8213
						// If conv2 outputs current                                                                              // 8214
						tmp = conv2.split( " " );                                                                                // 8215
						if ( tmp[ 1 ] === current ) {                                                                            // 8216
                                                                                                               // 8217
							// If prev can be converted to accepted input                                                           // 8218
							conv = converters[ prev + " " + tmp[ 0 ] ] ||                                                           // 8219
								converters[ "* " + tmp[ 0 ] ];                                                                         // 8220
							if ( conv ) {                                                                                           // 8221
                                                                                                               // 8222
								// Condense equivalence converters                                                                     // 8223
								if ( conv === true ) {                                                                                 // 8224
									conv = converters[ conv2 ];                                                                           // 8225
                                                                                                               // 8226
								// Otherwise, insert the intermediate dataType                                                         // 8227
								} else if ( converters[ conv2 ] !== true ) {                                                           // 8228
									current = tmp[ 0 ];                                                                                   // 8229
									dataTypes.unshift( tmp[ 1 ] );                                                                        // 8230
								}                                                                                                      // 8231
								break;                                                                                                 // 8232
							}                                                                                                       // 8233
						}                                                                                                        // 8234
					}                                                                                                         // 8235
				}                                                                                                          // 8236
                                                                                                               // 8237
				// Apply converter (if not an equivalence)                                                                 // 8238
				if ( conv !== true ) {                                                                                     // 8239
                                                                                                               // 8240
					// Unless errors are allowed to bubble, catch and return them                                             // 8241
					if ( conv && s.throws ) {                                                                                 // 8242
						response = conv( response );                                                                             // 8243
					} else {                                                                                                  // 8244
						try {                                                                                                    // 8245
							response = conv( response );                                                                            // 8246
						} catch ( e ) {                                                                                          // 8247
							return {                                                                                                // 8248
								state: "parsererror",                                                                                  // 8249
								error: conv ? e : "No conversion from " + prev + " to " + current                                      // 8250
							};                                                                                                      // 8251
						}                                                                                                        // 8252
					}                                                                                                         // 8253
				}                                                                                                          // 8254
			}                                                                                                           // 8255
		}                                                                                                            // 8256
	}                                                                                                             // 8257
                                                                                                               // 8258
	return { state: "success", data: response };                                                                  // 8259
}                                                                                                              // 8260
                                                                                                               // 8261
jQuery.extend( {                                                                                               // 8262
                                                                                                               // 8263
	// Counter for holding the number of active queries                                                           // 8264
	active: 0,                                                                                                    // 8265
                                                                                                               // 8266
	// Last-Modified header cache for next request                                                                // 8267
	lastModified: {},                                                                                             // 8268
	etag: {},                                                                                                     // 8269
                                                                                                               // 8270
	ajaxSettings: {                                                                                               // 8271
		url: location.href,                                                                                          // 8272
		type: "GET",                                                                                                 // 8273
		isLocal: rlocalProtocol.test( location.protocol ),                                                           // 8274
		global: true,                                                                                                // 8275
		processData: true,                                                                                           // 8276
		async: true,                                                                                                 // 8277
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",                                             // 8278
		/*                                                                                                           // 8279
		timeout: 0,                                                                                                  // 8280
		data: null,                                                                                                  // 8281
		dataType: null,                                                                                              // 8282
		username: null,                                                                                              // 8283
		password: null,                                                                                              // 8284
		cache: null,                                                                                                 // 8285
		throws: false,                                                                                               // 8286
		traditional: false,                                                                                          // 8287
		headers: {},                                                                                                 // 8288
		*/                                                                                                           // 8289
                                                                                                               // 8290
		accepts: {                                                                                                   // 8291
			"*": allTypes,                                                                                              // 8292
			text: "text/plain",                                                                                         // 8293
			html: "text/html",                                                                                          // 8294
			xml: "application/xml, text/xml",                                                                           // 8295
			json: "application/json, text/javascript"                                                                   // 8296
		},                                                                                                           // 8297
                                                                                                               // 8298
		contents: {                                                                                                  // 8299
			xml: /\bxml\b/,                                                                                             // 8300
			html: /\bhtml/,                                                                                             // 8301
			json: /\bjson\b/                                                                                            // 8302
		},                                                                                                           // 8303
                                                                                                               // 8304
		responseFields: {                                                                                            // 8305
			xml: "responseXML",                                                                                         // 8306
			text: "responseText",                                                                                       // 8307
			json: "responseJSON"                                                                                        // 8308
		},                                                                                                           // 8309
                                                                                                               // 8310
		// Data converters                                                                                           // 8311
		// Keys separate source (or catchall "*") and destination types with a single space                          // 8312
		converters: {                                                                                                // 8313
                                                                                                               // 8314
			// Convert anything to text                                                                                 // 8315
			"* text": String,                                                                                           // 8316
                                                                                                               // 8317
			// Text to html (true = no transformation)                                                                  // 8318
			"text html": true,                                                                                          // 8319
                                                                                                               // 8320
			// Evaluate text as a json expression                                                                       // 8321
			"text json": jQuery.parseJSON,                                                                              // 8322
                                                                                                               // 8323
			// Parse text as xml                                                                                        // 8324
			"text xml": jQuery.parseXML                                                                                 // 8325
		},                                                                                                           // 8326
                                                                                                               // 8327
		// For options that shouldn't be deep extended:                                                              // 8328
		// you can add your own custom options here if                                                               // 8329
		// and when you create one that shouldn't be                                                                 // 8330
		// deep extended (see ajaxExtend)                                                                            // 8331
		flatOptions: {                                                                                               // 8332
			url: true,                                                                                                  // 8333
			context: true                                                                                               // 8334
		}                                                                                                            // 8335
	},                                                                                                            // 8336
                                                                                                               // 8337
	// Creates a full fledged settings object into target                                                         // 8338
	// with both ajaxSettings and settings fields.                                                                // 8339
	// If target is omitted, writes into ajaxSettings.                                                            // 8340
	ajaxSetup: function( target, settings ) {                                                                     // 8341
		return settings ?                                                                                            // 8342
                                                                                                               // 8343
			// Building a settings object                                                                               // 8344
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :                                         // 8345
                                                                                                               // 8346
			// Extending ajaxSettings                                                                                   // 8347
			ajaxExtend( jQuery.ajaxSettings, target );                                                                  // 8348
	},                                                                                                            // 8349
                                                                                                               // 8350
	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),                                                     // 8351
	ajaxTransport: addToPrefiltersOrTransports( transports ),                                                     // 8352
                                                                                                               // 8353
	// Main method                                                                                                // 8354
	ajax: function( url, options ) {                                                                              // 8355
                                                                                                               // 8356
		// If url is an object, simulate pre-1.5 signature                                                           // 8357
		if ( typeof url === "object" ) {                                                                             // 8358
			options = url;                                                                                              // 8359
			url = undefined;                                                                                            // 8360
		}                                                                                                            // 8361
                                                                                                               // 8362
		// Force options to be an object                                                                             // 8363
		options = options || {};                                                                                     // 8364
                                                                                                               // 8365
		var transport,                                                                                               // 8366
                                                                                                               // 8367
			// URL without anti-cache param                                                                             // 8368
			cacheURL,                                                                                                   // 8369
                                                                                                               // 8370
			// Response headers                                                                                         // 8371
			responseHeadersString,                                                                                      // 8372
			responseHeaders,                                                                                            // 8373
                                                                                                               // 8374
			// timeout handle                                                                                           // 8375
			timeoutTimer,                                                                                               // 8376
                                                                                                               // 8377
			// Url cleanup var                                                                                          // 8378
			urlAnchor,                                                                                                  // 8379
                                                                                                               // 8380
			// To know if global events are to be dispatched                                                            // 8381
			fireGlobals,                                                                                                // 8382
                                                                                                               // 8383
			// Loop variable                                                                                            // 8384
			i,                                                                                                          // 8385
                                                                                                               // 8386
			// Create the final options object                                                                          // 8387
			s = jQuery.ajaxSetup( {}, options ),                                                                        // 8388
                                                                                                               // 8389
			// Callbacks context                                                                                        // 8390
			callbackContext = s.context || s,                                                                           // 8391
                                                                                                               // 8392
			// Context for global events is callbackContext if it is a DOM node or jQuery collection                    // 8393
			globalEventContext = s.context &&                                                                           // 8394
				( callbackContext.nodeType || callbackContext.jquery ) ?                                                   // 8395
					jQuery( callbackContext ) :                                                                               // 8396
					jQuery.event,                                                                                             // 8397
                                                                                                               // 8398
			// Deferreds                                                                                                // 8399
			deferred = jQuery.Deferred(),                                                                               // 8400
			completeDeferred = jQuery.Callbacks( "once memory" ),                                                       // 8401
                                                                                                               // 8402
			// Status-dependent callbacks                                                                               // 8403
			statusCode = s.statusCode || {},                                                                            // 8404
                                                                                                               // 8405
			// Headers (they are sent all at once)                                                                      // 8406
			requestHeaders = {},                                                                                        // 8407
			requestHeadersNames = {},                                                                                   // 8408
                                                                                                               // 8409
			// The jqXHR state                                                                                          // 8410
			state = 0,                                                                                                  // 8411
                                                                                                               // 8412
			// Default abort message                                                                                    // 8413
			strAbort = "canceled",                                                                                      // 8414
                                                                                                               // 8415
			// Fake xhr                                                                                                 // 8416
			jqXHR = {                                                                                                   // 8417
				readyState: 0,                                                                                             // 8418
                                                                                                               // 8419
				// Builds headers hashtable if needed                                                                      // 8420
				getResponseHeader: function( key ) {                                                                       // 8421
					var match;                                                                                                // 8422
					if ( state === 2 ) {                                                                                      // 8423
						if ( !responseHeaders ) {                                                                                // 8424
							responseHeaders = {};                                                                                   // 8425
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {                                          // 8426
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];                                              // 8427
							}                                                                                                       // 8428
						}                                                                                                        // 8429
						match = responseHeaders[ key.toLowerCase() ];                                                            // 8430
					}                                                                                                         // 8431
					return match == null ? null : match;                                                                      // 8432
				},                                                                                                         // 8433
                                                                                                               // 8434
				// Raw string                                                                                              // 8435
				getAllResponseHeaders: function() {                                                                        // 8436
					return state === 2 ? responseHeadersString : null;                                                        // 8437
				},                                                                                                         // 8438
                                                                                                               // 8439
				// Caches the header                                                                                       // 8440
				setRequestHeader: function( name, value ) {                                                                // 8441
					var lname = name.toLowerCase();                                                                           // 8442
					if ( !state ) {                                                                                           // 8443
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;                              // 8444
						requestHeaders[ name ] = value;                                                                          // 8445
					}                                                                                                         // 8446
					return this;                                                                                              // 8447
				},                                                                                                         // 8448
                                                                                                               // 8449
				// Overrides response content-type header                                                                  // 8450
				overrideMimeType: function( type ) {                                                                       // 8451
					if ( !state ) {                                                                                           // 8452
						s.mimeType = type;                                                                                       // 8453
					}                                                                                                         // 8454
					return this;                                                                                              // 8455
				},                                                                                                         // 8456
                                                                                                               // 8457
				// Status-dependent callbacks                                                                              // 8458
				statusCode: function( map ) {                                                                              // 8459
					var code;                                                                                                 // 8460
					if ( map ) {                                                                                              // 8461
						if ( state < 2 ) {                                                                                       // 8462
							for ( code in map ) {                                                                                   // 8463
                                                                                                               // 8464
								// Lazy-add the new callback in a way that preserves old ones                                          // 8465
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];                                              // 8466
							}                                                                                                       // 8467
						} else {                                                                                                 // 8468
                                                                                                               // 8469
							// Execute the appropriate callbacks                                                                    // 8470
							jqXHR.always( map[ jqXHR.status ] );                                                                    // 8471
						}                                                                                                        // 8472
					}                                                                                                         // 8473
					return this;                                                                                              // 8474
				},                                                                                                         // 8475
                                                                                                               // 8476
				// Cancel the request                                                                                      // 8477
				abort: function( statusText ) {                                                                            // 8478
					var finalText = statusText || strAbort;                                                                   // 8479
					if ( transport ) {                                                                                        // 8480
						transport.abort( finalText );                                                                            // 8481
					}                                                                                                         // 8482
					done( 0, finalText );                                                                                     // 8483
					return this;                                                                                              // 8484
				}                                                                                                          // 8485
			};                                                                                                          // 8486
                                                                                                               // 8487
		// Attach deferreds                                                                                          // 8488
		deferred.promise( jqXHR ).complete = completeDeferred.add;                                                   // 8489
		jqXHR.success = jqXHR.done;                                                                                  // 8490
		jqXHR.error = jqXHR.fail;                                                                                    // 8491
                                                                                                               // 8492
		// Remove hash character (#7531: and string promotion)                                                       // 8493
		// Add protocol if not provided (prefilters might expect it)                                                 // 8494
		// Handle falsy url in the settings object (#10093: consistency with old signature)                          // 8495
		// We also use the url parameter if available                                                                // 8496
		s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )                                      // 8497
			.replace( rprotocol, location.protocol + "//" );                                                            // 8498
                                                                                                               // 8499
		// Alias method option to type as per ticket #12004                                                          // 8500
		s.type = options.method || options.type || s.method || s.type;                                               // 8501
                                                                                                               // 8502
		// Extract dataTypes list                                                                                    // 8503
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];                   // 8504
                                                                                                               // 8505
		// A cross-domain request is in order when the origin doesn't match the current origin.                      // 8506
		if ( s.crossDomain == null ) {                                                                               // 8507
			urlAnchor = document.createElement( "a" );                                                                  // 8508
                                                                                                               // 8509
			// Support: IE8-11+                                                                                         // 8510
			// IE throws exception if url is malformed, e.g. http://example.com:80x/                                    // 8511
			try {                                                                                                       // 8512
				urlAnchor.href = s.url;                                                                                    // 8513
                                                                                                               // 8514
				// Support: IE8-11+                                                                                        // 8515
				// Anchor's host property isn't correctly set when s.url is relative                                       // 8516
				urlAnchor.href = urlAnchor.href;                                                                           // 8517
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==                                       // 8518
					urlAnchor.protocol + "//" + urlAnchor.host;                                                               // 8519
			} catch ( e ) {                                                                                             // 8520
                                                                                                               // 8521
				// If there is an error parsing the URL, assume it is crossDomain,                                         // 8522
				// it can be rejected by the transport if it is invalid                                                    // 8523
				s.crossDomain = true;                                                                                      // 8524
			}                                                                                                           // 8525
		}                                                                                                            // 8526
                                                                                                               // 8527
		// Convert data if not already a string                                                                      // 8528
		if ( s.data && s.processData && typeof s.data !== "string" ) {                                               // 8529
			s.data = jQuery.param( s.data, s.traditional );                                                             // 8530
		}                                                                                                            // 8531
                                                                                                               // 8532
		// Apply prefilters                                                                                          // 8533
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );                                              // 8534
                                                                                                               // 8535
		// If request was aborted inside a prefilter, stop there                                                     // 8536
		if ( state === 2 ) {                                                                                         // 8537
			return jqXHR;                                                                                               // 8538
		}                                                                                                            // 8539
                                                                                                               // 8540
		// We can fire global events as of now if asked to                                                           // 8541
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)                          // 8542
		fireGlobals = jQuery.event && s.global;                                                                      // 8543
                                                                                                               // 8544
		// Watch for a new set of requests                                                                           // 8545
		if ( fireGlobals && jQuery.active++ === 0 ) {                                                                // 8546
			jQuery.event.trigger( "ajaxStart" );                                                                        // 8547
		}                                                                                                            // 8548
                                                                                                               // 8549
		// Uppercase the type                                                                                        // 8550
		s.type = s.type.toUpperCase();                                                                               // 8551
                                                                                                               // 8552
		// Determine if request has content                                                                          // 8553
		s.hasContent = !rnoContent.test( s.type );                                                                   // 8554
                                                                                                               // 8555
		// Save the URL in case we're toying with the If-Modified-Since                                              // 8556
		// and/or If-None-Match header later on                                                                      // 8557
		cacheURL = s.url;                                                                                            // 8558
                                                                                                               // 8559
		// More options handling for requests with no content                                                        // 8560
		if ( !s.hasContent ) {                                                                                       // 8561
                                                                                                               // 8562
			// If data is available, append data to url                                                                 // 8563
			if ( s.data ) {                                                                                             // 8564
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );                                  // 8565
                                                                                                               // 8566
				// #9682: remove data so that it's not used in an eventual retry                                           // 8567
				delete s.data;                                                                                             // 8568
			}                                                                                                           // 8569
                                                                                                               // 8570
			// Add anti-cache in url if needed                                                                          // 8571
			if ( s.cache === false ) {                                                                                  // 8572
				s.url = rts.test( cacheURL ) ?                                                                             // 8573
                                                                                                               // 8574
					// If there is already a '_' parameter, set its value                                                     // 8575
					cacheURL.replace( rts, "$1_=" + nonce++ ) :                                                               // 8576
                                                                                                               // 8577
					// Otherwise add one to the end                                                                           // 8578
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;                                      // 8579
			}                                                                                                           // 8580
		}                                                                                                            // 8581
                                                                                                               // 8582
		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.                             // 8583
		if ( s.ifModified ) {                                                                                        // 8584
			if ( jQuery.lastModified[ cacheURL ] ) {                                                                    // 8585
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );                            // 8586
			}                                                                                                           // 8587
			if ( jQuery.etag[ cacheURL ] ) {                                                                            // 8588
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );                                        // 8589
			}                                                                                                           // 8590
		}                                                                                                            // 8591
                                                                                                               // 8592
		// Set the correct header, if data is being sent                                                             // 8593
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {                            // 8594
			jqXHR.setRequestHeader( "Content-Type", s.contentType );                                                    // 8595
		}                                                                                                            // 8596
                                                                                                               // 8597
		// Set the Accepts header for the server, depending on the dataType                                          // 8598
		jqXHR.setRequestHeader(                                                                                      // 8599
			"Accept",                                                                                                   // 8600
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?                                                         // 8601
				s.accepts[ s.dataTypes[ 0 ] ] +                                                                            // 8602
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :                                        // 8603
				s.accepts[ "*" ]                                                                                           // 8604
		);                                                                                                           // 8605
                                                                                                               // 8606
		// Check for headers option                                                                                  // 8607
		for ( i in s.headers ) {                                                                                     // 8608
			jqXHR.setRequestHeader( i, s.headers[ i ] );                                                                // 8609
		}                                                                                                            // 8610
                                                                                                               // 8611
		// Allow custom headers/mimetypes and early abort                                                            // 8612
		if ( s.beforeSend &&                                                                                         // 8613
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {                             // 8614
                                                                                                               // 8615
			// Abort if not done already and return                                                                     // 8616
			return jqXHR.abort();                                                                                       // 8617
		}                                                                                                            // 8618
                                                                                                               // 8619
		// Aborting is no longer a cancellation                                                                      // 8620
		strAbort = "abort";                                                                                          // 8621
                                                                                                               // 8622
		// Install callbacks on deferreds                                                                            // 8623
		for ( i in { success: 1, error: 1, complete: 1 } ) {                                                         // 8624
			jqXHR[ i ]( s[ i ] );                                                                                       // 8625
		}                                                                                                            // 8626
                                                                                                               // 8627
		// Get transport                                                                                             // 8628
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );                                  // 8629
                                                                                                               // 8630
		// If no transport, we auto-abort                                                                            // 8631
		if ( !transport ) {                                                                                          // 8632
			done( -1, "No Transport" );                                                                                 // 8633
		} else {                                                                                                     // 8634
			jqXHR.readyState = 1;                                                                                       // 8635
                                                                                                               // 8636
			// Send global event                                                                                        // 8637
			if ( fireGlobals ) {                                                                                        // 8638
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );                                                    // 8639
			}                                                                                                           // 8640
                                                                                                               // 8641
			// If request was aborted inside ajaxSend, stop there                                                       // 8642
			if ( state === 2 ) {                                                                                        // 8643
				return jqXHR;                                                                                              // 8644
			}                                                                                                           // 8645
                                                                                                               // 8646
			// Timeout                                                                                                  // 8647
			if ( s.async && s.timeout > 0 ) {                                                                           // 8648
				timeoutTimer = window.setTimeout( function() {                                                             // 8649
					jqXHR.abort( "timeout" );                                                                                 // 8650
				}, s.timeout );                                                                                            // 8651
			}                                                                                                           // 8652
                                                                                                               // 8653
			try {                                                                                                       // 8654
				state = 1;                                                                                                 // 8655
				transport.send( requestHeaders, done );                                                                    // 8656
			} catch ( e ) {                                                                                             // 8657
                                                                                                               // 8658
				// Propagate exception as error if not done                                                                // 8659
				if ( state < 2 ) {                                                                                         // 8660
					done( -1, e );                                                                                            // 8661
                                                                                                               // 8662
				// Simply rethrow otherwise                                                                                // 8663
				} else {                                                                                                   // 8664
					throw e;                                                                                                  // 8665
				}                                                                                                          // 8666
			}                                                                                                           // 8667
		}                                                                                                            // 8668
                                                                                                               // 8669
		// Callback for when everything is done                                                                      // 8670
		function done( status, nativeStatusText, responses, headers ) {                                              // 8671
			var isSuccess, success, error, response, modified,                                                          // 8672
				statusText = nativeStatusText;                                                                             // 8673
                                                                                                               // 8674
			// Called once                                                                                              // 8675
			if ( state === 2 ) {                                                                                        // 8676
				return;                                                                                                    // 8677
			}                                                                                                           // 8678
                                                                                                               // 8679
			// State is "done" now                                                                                      // 8680
			state = 2;                                                                                                  // 8681
                                                                                                               // 8682
			// Clear timeout if it exists                                                                               // 8683
			if ( timeoutTimer ) {                                                                                       // 8684
				window.clearTimeout( timeoutTimer );                                                                       // 8685
			}                                                                                                           // 8686
                                                                                                               // 8687
			// Dereference transport for early garbage collection                                                       // 8688
			// (no matter how long the jqXHR object will be used)                                                       // 8689
			transport = undefined;                                                                                      // 8690
                                                                                                               // 8691
			// Cache response headers                                                                                   // 8692
			responseHeadersString = headers || "";                                                                      // 8693
                                                                                                               // 8694
			// Set readyState                                                                                           // 8695
			jqXHR.readyState = status > 0 ? 4 : 0;                                                                      // 8696
                                                                                                               // 8697
			// Determine if successful                                                                                  // 8698
			isSuccess = status >= 200 && status < 300 || status === 304;                                                // 8699
                                                                                                               // 8700
			// Get response data                                                                                        // 8701
			if ( responses ) {                                                                                          // 8702
				response = ajaxHandleResponses( s, jqXHR, responses );                                                     // 8703
			}                                                                                                           // 8704
                                                                                                               // 8705
			// Convert no matter what (that way responseXXX fields are always set)                                      // 8706
			response = ajaxConvert( s, response, jqXHR, isSuccess );                                                    // 8707
                                                                                                               // 8708
			// If successful, handle type chaining                                                                      // 8709
			if ( isSuccess ) {                                                                                          // 8710
                                                                                                               // 8711
				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.                           // 8712
				if ( s.ifModified ) {                                                                                      // 8713
					modified = jqXHR.getResponseHeader( "Last-Modified" );                                                    // 8714
					if ( modified ) {                                                                                         // 8715
						jQuery.lastModified[ cacheURL ] = modified;                                                              // 8716
					}                                                                                                         // 8717
					modified = jqXHR.getResponseHeader( "etag" );                                                             // 8718
					if ( modified ) {                                                                                         // 8719
						jQuery.etag[ cacheURL ] = modified;                                                                      // 8720
					}                                                                                                         // 8721
				}                                                                                                          // 8722
                                                                                                               // 8723
				// if no content                                                                                           // 8724
				if ( status === 204 || s.type === "HEAD" ) {                                                               // 8725
					statusText = "nocontent";                                                                                 // 8726
                                                                                                               // 8727
				// if not modified                                                                                         // 8728
				} else if ( status === 304 ) {                                                                             // 8729
					statusText = "notmodified";                                                                               // 8730
                                                                                                               // 8731
				// If we have data, let's convert it                                                                       // 8732
				} else {                                                                                                   // 8733
					statusText = response.state;                                                                              // 8734
					success = response.data;                                                                                  // 8735
					error = response.error;                                                                                   // 8736
					isSuccess = !error;                                                                                       // 8737
				}                                                                                                          // 8738
			} else {                                                                                                    // 8739
                                                                                                               // 8740
				// Extract error from statusText and normalize for non-aborts                                              // 8741
				error = statusText;                                                                                        // 8742
				if ( status || !statusText ) {                                                                             // 8743
					statusText = "error";                                                                                     // 8744
					if ( status < 0 ) {                                                                                       // 8745
						status = 0;                                                                                              // 8746
					}                                                                                                         // 8747
				}                                                                                                          // 8748
			}                                                                                                           // 8749
                                                                                                               // 8750
			// Set data for the fake xhr object                                                                         // 8751
			jqXHR.status = status;                                                                                      // 8752
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";                                                 // 8753
                                                                                                               // 8754
			// Success/Error                                                                                            // 8755
			if ( isSuccess ) {                                                                                          // 8756
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );                                   // 8757
			} else {                                                                                                    // 8758
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );                                      // 8759
			}                                                                                                           // 8760
                                                                                                               // 8761
			// Status-dependent callbacks                                                                               // 8762
			jqXHR.statusCode( statusCode );                                                                             // 8763
			statusCode = undefined;                                                                                     // 8764
                                                                                                               // 8765
			if ( fireGlobals ) {                                                                                        // 8766
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",                                       // 8767
					[ jqXHR, s, isSuccess ? success : error ] );                                                              // 8768
			}                                                                                                           // 8769
                                                                                                               // 8770
			// Complete                                                                                                 // 8771
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );                                        // 8772
                                                                                                               // 8773
			if ( fireGlobals ) {                                                                                        // 8774
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );                                                // 8775
                                                                                                               // 8776
				// Handle the global AJAX counter                                                                          // 8777
				if ( !( --jQuery.active ) ) {                                                                              // 8778
					jQuery.event.trigger( "ajaxStop" );                                                                       // 8779
				}                                                                                                          // 8780
			}                                                                                                           // 8781
		}                                                                                                            // 8782
                                                                                                               // 8783
		return jqXHR;                                                                                                // 8784
	},                                                                                                            // 8785
                                                                                                               // 8786
	getJSON: function( url, data, callback ) {                                                                    // 8787
		return jQuery.get( url, data, callback, "json" );                                                            // 8788
	},                                                                                                            // 8789
                                                                                                               // 8790
	getScript: function( url, callback ) {                                                                        // 8791
		return jQuery.get( url, undefined, callback, "script" );                                                     // 8792
	}                                                                                                             // 8793
} );                                                                                                           // 8794
                                                                                                               // 8795
jQuery.each( [ "get", "post" ], function( i, method ) {                                                        // 8796
	jQuery[ method ] = function( url, data, callback, type ) {                                                    // 8797
                                                                                                               // 8798
		// Shift arguments if data argument was omitted                                                              // 8799
		if ( jQuery.isFunction( data ) ) {                                                                           // 8800
			type = type || callback;                                                                                    // 8801
			callback = data;                                                                                            // 8802
			data = undefined;                                                                                           // 8803
		}                                                                                                            // 8804
                                                                                                               // 8805
		// The url can be an options object (which then must have .url)                                              // 8806
		return jQuery.ajax( jQuery.extend( {                                                                         // 8807
			url: url,                                                                                                   // 8808
			type: method,                                                                                               // 8809
			dataType: type,                                                                                             // 8810
			data: data,                                                                                                 // 8811
			success: callback                                                                                           // 8812
		}, jQuery.isPlainObject( url ) && url ) );                                                                   // 8813
	};                                                                                                            // 8814
} );                                                                                                           // 8815
                                                                                                               // 8816
                                                                                                               // 8817
jQuery._evalUrl = function( url ) {                                                                            // 8818
	return jQuery.ajax( {                                                                                         // 8819
		url: url,                                                                                                    // 8820
                                                                                                               // 8821
		// Make this explicit, since user can override this through ajaxSetup (#11264)                               // 8822
		type: "GET",                                                                                                 // 8823
		dataType: "script",                                                                                          // 8824
		async: false,                                                                                                // 8825
		global: false,                                                                                               // 8826
		"throws": true                                                                                               // 8827
	} );                                                                                                          // 8828
};                                                                                                             // 8829
                                                                                                               // 8830
                                                                                                               // 8831
jQuery.fn.extend( {                                                                                            // 8832
	wrapAll: function( html ) {                                                                                   // 8833
		var wrap;                                                                                                    // 8834
                                                                                                               // 8835
		if ( jQuery.isFunction( html ) ) {                                                                           // 8836
			return this.each( function( i ) {                                                                           // 8837
				jQuery( this ).wrapAll( html.call( this, i ) );                                                            // 8838
			} );                                                                                                        // 8839
		}                                                                                                            // 8840
                                                                                                               // 8841
		if ( this[ 0 ] ) {                                                                                           // 8842
                                                                                                               // 8843
			// The elements to wrap the target around                                                                   // 8844
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );                                       // 8845
                                                                                                               // 8846
			if ( this[ 0 ].parentNode ) {                                                                               // 8847
				wrap.insertBefore( this[ 0 ] );                                                                            // 8848
			}                                                                                                           // 8849
                                                                                                               // 8850
			wrap.map( function() {                                                                                      // 8851
				var elem = this;                                                                                           // 8852
                                                                                                               // 8853
				while ( elem.firstElementChild ) {                                                                         // 8854
					elem = elem.firstElementChild;                                                                            // 8855
				}                                                                                                          // 8856
                                                                                                               // 8857
				return elem;                                                                                               // 8858
			} ).append( this );                                                                                         // 8859
		}                                                                                                            // 8860
                                                                                                               // 8861
		return this;                                                                                                 // 8862
	},                                                                                                            // 8863
                                                                                                               // 8864
	wrapInner: function( html ) {                                                                                 // 8865
		if ( jQuery.isFunction( html ) ) {                                                                           // 8866
			return this.each( function( i ) {                                                                           // 8867
				jQuery( this ).wrapInner( html.call( this, i ) );                                                          // 8868
			} );                                                                                                        // 8869
		}                                                                                                            // 8870
                                                                                                               // 8871
		return this.each( function() {                                                                               // 8872
			var self = jQuery( this ),                                                                                  // 8873
				contents = self.contents();                                                                                // 8874
                                                                                                               // 8875
			if ( contents.length ) {                                                                                    // 8876
				contents.wrapAll( html );                                                                                  // 8877
                                                                                                               // 8878
			} else {                                                                                                    // 8879
				self.append( html );                                                                                       // 8880
			}                                                                                                           // 8881
		} );                                                                                                         // 8882
	},                                                                                                            // 8883
                                                                                                               // 8884
	wrap: function( html ) {                                                                                      // 8885
		var isFunction = jQuery.isFunction( html );                                                                  // 8886
                                                                                                               // 8887
		return this.each( function( i ) {                                                                            // 8888
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );                                         // 8889
		} );                                                                                                         // 8890
	},                                                                                                            // 8891
                                                                                                               // 8892
	unwrap: function() {                                                                                          // 8893
		return this.parent().each( function() {                                                                      // 8894
			if ( !jQuery.nodeName( this, "body" ) ) {                                                                   // 8895
				jQuery( this ).replaceWith( this.childNodes );                                                             // 8896
			}                                                                                                           // 8897
		} ).end();                                                                                                   // 8898
	}                                                                                                             // 8899
} );                                                                                                           // 8900
                                                                                                               // 8901
                                                                                                               // 8902
jQuery.expr.filters.hidden = function( elem ) {                                                                // 8903
	return !jQuery.expr.filters.visible( elem );                                                                  // 8904
};                                                                                                             // 8905
jQuery.expr.filters.visible = function( elem ) {                                                               // 8906
                                                                                                               // 8907
	// Support: Opera <= 12.12                                                                                    // 8908
	// Opera reports offsetWidths and offsetHeights less than zero on some elements                               // 8909
	// Use OR instead of AND as the element is not visible if either is true                                      // 8910
	// See tickets #10406 and #13132                                                                              // 8911
	return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;                     // 8912
};                                                                                                             // 8913
                                                                                                               // 8914
                                                                                                               // 8915
                                                                                                               // 8916
                                                                                                               // 8917
var r20 = /%20/g,                                                                                              // 8918
	rbracket = /\[\]$/,                                                                                           // 8919
	rCRLF = /\r?\n/g,                                                                                             // 8920
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,                                                    // 8921
	rsubmittable = /^(?:input|select|textarea|keygen)/i;                                                          // 8922
                                                                                                               // 8923
function buildParams( prefix, obj, traditional, add ) {                                                        // 8924
	var name;                                                                                                     // 8925
                                                                                                               // 8926
	if ( jQuery.isArray( obj ) ) {                                                                                // 8927
                                                                                                               // 8928
		// Serialize array item.                                                                                     // 8929
		jQuery.each( obj, function( i, v ) {                                                                         // 8930
			if ( traditional || rbracket.test( prefix ) ) {                                                             // 8931
                                                                                                               // 8932
				// Treat each array item as a scalar.                                                                      // 8933
				add( prefix, v );                                                                                          // 8934
                                                                                                               // 8935
			} else {                                                                                                    // 8936
                                                                                                               // 8937
				// Item is non-scalar (array or object), encode its numeric index.                                         // 8938
				buildParams(                                                                                               // 8939
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",                                     // 8940
					v,                                                                                                        // 8941
					traditional,                                                                                              // 8942
					add                                                                                                       // 8943
				);                                                                                                         // 8944
			}                                                                                                           // 8945
		} );                                                                                                         // 8946
                                                                                                               // 8947
	} else if ( !traditional && jQuery.type( obj ) === "object" ) {                                               // 8948
                                                                                                               // 8949
		// Serialize object item.                                                                                    // 8950
		for ( name in obj ) {                                                                                        // 8951
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );                                    // 8952
		}                                                                                                            // 8953
                                                                                                               // 8954
	} else {                                                                                                      // 8955
                                                                                                               // 8956
		// Serialize scalar item.                                                                                    // 8957
		add( prefix, obj );                                                                                          // 8958
	}                                                                                                             // 8959
}                                                                                                              // 8960
                                                                                                               // 8961
// Serialize an array of form elements or a set of                                                             // 8962
// key/values into a query string                                                                              // 8963
jQuery.param = function( a, traditional ) {                                                                    // 8964
	var prefix,                                                                                                   // 8965
		s = [],                                                                                                      // 8966
		add = function( key, value ) {                                                                               // 8967
                                                                                                               // 8968
			// If value is a function, invoke it and return its value                                                   // 8969
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );                              // 8970
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );                              // 8971
		};                                                                                                           // 8972
                                                                                                               // 8973
	// Set traditional to true for jQuery <= 1.3.2 behavior.                                                      // 8974
	if ( traditional === undefined ) {                                                                            // 8975
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;                                        // 8976
	}                                                                                                             // 8977
                                                                                                               // 8978
	// If an array was passed in, assume that it is an array of form elements.                                    // 8979
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {                                    // 8980
                                                                                                               // 8981
		// Serialize the form elements                                                                               // 8982
		jQuery.each( a, function() {                                                                                 // 8983
			add( this.name, this.value );                                                                               // 8984
		} );                                                                                                         // 8985
                                                                                                               // 8986
	} else {                                                                                                      // 8987
                                                                                                               // 8988
		// If traditional, encode the "old" way (the way 1.3.2 or older                                              // 8989
		// did it), otherwise encode params recursively.                                                             // 8990
		for ( prefix in a ) {                                                                                        // 8991
			buildParams( prefix, a[ prefix ], traditional, add );                                                       // 8992
		}                                                                                                            // 8993
	}                                                                                                             // 8994
                                                                                                               // 8995
	// Return the resulting serialization                                                                         // 8996
	return s.join( "&" ).replace( r20, "+" );                                                                     // 8997
};                                                                                                             // 8998
                                                                                                               // 8999
jQuery.fn.extend( {                                                                                            // 9000
	serialize: function() {                                                                                       // 9001
		return jQuery.param( this.serializeArray() );                                                                // 9002
	},                                                                                                            // 9003
	serializeArray: function() {                                                                                  // 9004
		return this.map( function() {                                                                                // 9005
                                                                                                               // 9006
			// Can add propHook for "elements" to filter or add form elements                                           // 9007
			var elements = jQuery.prop( this, "elements" );                                                             // 9008
			return elements ? jQuery.makeArray( elements ) : this;                                                      // 9009
		} )                                                                                                          // 9010
		.filter( function() {                                                                                        // 9011
			var type = this.type;                                                                                       // 9012
                                                                                                               // 9013
			// Use .is( ":disabled" ) so that fieldset[disabled] works                                                  // 9014
			return this.name && !jQuery( this ).is( ":disabled" ) &&                                                    // 9015
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&                                     // 9016
				( this.checked || !rcheckableType.test( type ) );                                                          // 9017
		} )                                                                                                          // 9018
		.map( function( i, elem ) {                                                                                  // 9019
			var val = jQuery( this ).val();                                                                             // 9020
                                                                                                               // 9021
			return val == null ?                                                                                        // 9022
				null :                                                                                                     // 9023
				jQuery.isArray( val ) ?                                                                                    // 9024
					jQuery.map( val, function( val ) {                                                                        // 9025
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };                                         // 9026
					} ) :                                                                                                     // 9027
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };                                                 // 9028
		} ).get();                                                                                                   // 9029
	}                                                                                                             // 9030
} );                                                                                                           // 9031
                                                                                                               // 9032
                                                                                                               // 9033
jQuery.ajaxSettings.xhr = function() {                                                                         // 9034
	try {                                                                                                         // 9035
		return new window.XMLHttpRequest();                                                                          // 9036
	} catch ( e ) {}                                                                                              // 9037
};                                                                                                             // 9038
                                                                                                               // 9039
var xhrSuccessStatus = {                                                                                       // 9040
                                                                                                               // 9041
		// File protocol always yields status code 0, assume 200                                                     // 9042
		0: 200,                                                                                                      // 9043
                                                                                                               // 9044
		// Support: IE9                                                                                              // 9045
		// #1450: sometimes IE returns 1223 when it should be 204                                                    // 9046
		1223: 204                                                                                                    // 9047
	},                                                                                                            // 9048
	xhrSupported = jQuery.ajaxSettings.xhr();                                                                     // 9049
                                                                                                               // 9050
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );                                        // 9051
support.ajax = xhrSupported = !!xhrSupported;                                                                  // 9052
                                                                                                               // 9053
jQuery.ajaxTransport( function( options ) {                                                                    // 9054
	var callback, errorCallback;                                                                                  // 9055
                                                                                                               // 9056
	// Cross domain only allowed if supported through XMLHttpRequest                                              // 9057
	if ( support.cors || xhrSupported && !options.crossDomain ) {                                                 // 9058
		return {                                                                                                     // 9059
			send: function( headers, complete ) {                                                                       // 9060
				var i,                                                                                                     // 9061
					xhr = options.xhr();                                                                                      // 9062
                                                                                                               // 9063
				xhr.open(                                                                                                  // 9064
					options.type,                                                                                             // 9065
					options.url,                                                                                              // 9066
					options.async,                                                                                            // 9067
					options.username,                                                                                         // 9068
					options.password                                                                                          // 9069
				);                                                                                                         // 9070
                                                                                                               // 9071
				// Apply custom fields if provided                                                                         // 9072
				if ( options.xhrFields ) {                                                                                 // 9073
					for ( i in options.xhrFields ) {                                                                          // 9074
						xhr[ i ] = options.xhrFields[ i ];                                                                       // 9075
					}                                                                                                         // 9076
				}                                                                                                          // 9077
                                                                                                               // 9078
				// Override mime type if needed                                                                            // 9079
				if ( options.mimeType && xhr.overrideMimeType ) {                                                          // 9080
					xhr.overrideMimeType( options.mimeType );                                                                 // 9081
				}                                                                                                          // 9082
                                                                                                               // 9083
				// X-Requested-With header                                                                                 // 9084
				// For cross-domain requests, seeing as conditions for a preflight are                                     // 9085
				// akin to a jigsaw puzzle, we simply never set it to be sure.                                             // 9086
				// (it can always be set on a per-request basis or even using ajaxSetup)                                   // 9087
				// For same-domain requests, won't change header if already provided.                                      // 9088
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {                                            // 9089
					headers[ "X-Requested-With" ] = "XMLHttpRequest";                                                         // 9090
				}                                                                                                          // 9091
                                                                                                               // 9092
				// Set headers                                                                                             // 9093
				for ( i in headers ) {                                                                                     // 9094
					xhr.setRequestHeader( i, headers[ i ] );                                                                  // 9095
				}                                                                                                          // 9096
                                                                                                               // 9097
				// Callback                                                                                                // 9098
				callback = function( type ) {                                                                              // 9099
					return function() {                                                                                       // 9100
						if ( callback ) {                                                                                        // 9101
							callback = errorCallback = xhr.onload =                                                                 // 9102
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;                                             // 9103
                                                                                                               // 9104
							if ( type === "abort" ) {                                                                               // 9105
								xhr.abort();                                                                                           // 9106
							} else if ( type === "error" ) {                                                                        // 9107
                                                                                                               // 9108
								// Support: IE9                                                                                        // 9109
								// On a manual native abort, IE9 throws                                                                // 9110
								// errors on any property access that is not readyState                                                // 9111
								if ( typeof xhr.status !== "number" ) {                                                                // 9112
									complete( 0, "error" );                                                                               // 9113
								} else {                                                                                               // 9114
									complete(                                                                                             // 9115
                                                                                                               // 9116
										// File: protocol always yields status 0; see #8605, #14207                                          // 9117
										xhr.status,                                                                                          // 9118
										xhr.statusText                                                                                       // 9119
									);                                                                                                    // 9120
								}                                                                                                      // 9121
							} else {                                                                                                // 9122
								complete(                                                                                              // 9123
									xhrSuccessStatus[ xhr.status ] || xhr.status,                                                         // 9124
									xhr.statusText,                                                                                       // 9125
                                                                                                               // 9126
									// Support: IE9 only                                                                                  // 9127
									// IE9 has no XHR2 but throws on binary (trac-11426)                                                  // 9128
									// For XHR2 non-text, let the caller handle it (gh-2498)                                              // 9129
									( xhr.responseType || "text" ) !== "text"  ||                                                         // 9130
									typeof xhr.responseText !== "string" ?                                                                // 9131
										{ binary: xhr.response } :                                                                           // 9132
										{ text: xhr.responseText },                                                                          // 9133
									xhr.getAllResponseHeaders()                                                                           // 9134
								);                                                                                                     // 9135
							}                                                                                                       // 9136
						}                                                                                                        // 9137
					};                                                                                                        // 9138
				};                                                                                                         // 9139
                                                                                                               // 9140
				// Listen to events                                                                                        // 9141
				xhr.onload = callback();                                                                                   // 9142
				errorCallback = xhr.onerror = callback( "error" );                                                         // 9143
                                                                                                               // 9144
				// Support: IE9                                                                                            // 9145
				// Use onreadystatechange to replace onabort                                                               // 9146
				// to handle uncaught aborts                                                                               // 9147
				if ( xhr.onabort !== undefined ) {                                                                         // 9148
					xhr.onabort = errorCallback;                                                                              // 9149
				} else {                                                                                                   // 9150
					xhr.onreadystatechange = function() {                                                                     // 9151
                                                                                                               // 9152
						// Check readyState before timeout as it changes                                                         // 9153
						if ( xhr.readyState === 4 ) {                                                                            // 9154
                                                                                                               // 9155
							// Allow onerror to be called first,                                                                    // 9156
							// but that will not handle a native abort                                                              // 9157
							// Also, save errorCallback to a variable                                                               // 9158
							// as xhr.onerror cannot be accessed                                                                    // 9159
							window.setTimeout( function() {                                                                         // 9160
								if ( callback ) {                                                                                      // 9161
									errorCallback();                                                                                      // 9162
								}                                                                                                      // 9163
							} );                                                                                                    // 9164
						}                                                                                                        // 9165
					};                                                                                                        // 9166
				}                                                                                                          // 9167
                                                                                                               // 9168
				// Create the abort callback                                                                               // 9169
				callback = callback( "abort" );                                                                            // 9170
                                                                                                               // 9171
				try {                                                                                                      // 9172
                                                                                                               // 9173
					// Do send the request (this may raise an exception)                                                      // 9174
					xhr.send( options.hasContent && options.data || null );                                                   // 9175
				} catch ( e ) {                                                                                            // 9176
                                                                                                               // 9177
					// #14683: Only rethrow if this hasn't been notified as an error yet                                      // 9178
					if ( callback ) {                                                                                         // 9179
						throw e;                                                                                                 // 9180
					}                                                                                                         // 9181
				}                                                                                                          // 9182
			},                                                                                                          // 9183
                                                                                                               // 9184
			abort: function() {                                                                                         // 9185
				if ( callback ) {                                                                                          // 9186
					callback();                                                                                               // 9187
				}                                                                                                          // 9188
			}                                                                                                           // 9189
		};                                                                                                           // 9190
	}                                                                                                             // 9191
} );                                                                                                           // 9192
                                                                                                               // 9193
                                                                                                               // 9194
                                                                                                               // 9195
                                                                                                               // 9196
// Install script dataType                                                                                     // 9197
jQuery.ajaxSetup( {                                                                                            // 9198
	accepts: {                                                                                                    // 9199
		script: "text/javascript, application/javascript, " +                                                        // 9200
			"application/ecmascript, application/x-ecmascript"                                                          // 9201
	},                                                                                                            // 9202
	contents: {                                                                                                   // 9203
		script: /\b(?:java|ecma)script\b/                                                                            // 9204
	},                                                                                                            // 9205
	converters: {                                                                                                 // 9206
		"text script": function( text ) {                                                                            // 9207
			jQuery.globalEval( text );                                                                                  // 9208
			return text;                                                                                                // 9209
		}                                                                                                            // 9210
	}                                                                                                             // 9211
} );                                                                                                           // 9212
                                                                                                               // 9213
// Handle cache's special case and crossDomain                                                                 // 9214
jQuery.ajaxPrefilter( "script", function( s ) {                                                                // 9215
	if ( s.cache === undefined ) {                                                                                // 9216
		s.cache = false;                                                                                             // 9217
	}                                                                                                             // 9218
	if ( s.crossDomain ) {                                                                                        // 9219
		s.type = "GET";                                                                                              // 9220
	}                                                                                                             // 9221
} );                                                                                                           // 9222
                                                                                                               // 9223
// Bind script tag hack transport                                                                              // 9224
jQuery.ajaxTransport( "script", function( s ) {                                                                // 9225
                                                                                                               // 9226
	// This transport only deals with cross domain requests                                                       // 9227
	if ( s.crossDomain ) {                                                                                        // 9228
		var script, callback;                                                                                        // 9229
		return {                                                                                                     // 9230
			send: function( _, complete ) {                                                                             // 9231
				script = jQuery( "<script>" ).prop( {                                                                      // 9232
					charset: s.scriptCharset,                                                                                 // 9233
					src: s.url                                                                                                // 9234
				} ).on(                                                                                                    // 9235
					"load error",                                                                                             // 9236
					callback = function( evt ) {                                                                              // 9237
						script.remove();                                                                                         // 9238
						callback = null;                                                                                         // 9239
						if ( evt ) {                                                                                             // 9240
							complete( evt.type === "error" ? 404 : 200, evt.type );                                                 // 9241
						}                                                                                                        // 9242
					}                                                                                                         // 9243
				);                                                                                                         // 9244
                                                                                                               // 9245
				// Use native DOM manipulation to avoid our domManip AJAX trickery                                         // 9246
				document.head.appendChild( script[ 0 ] );                                                                  // 9247
			},                                                                                                          // 9248
			abort: function() {                                                                                         // 9249
				if ( callback ) {                                                                                          // 9250
					callback();                                                                                               // 9251
				}                                                                                                          // 9252
			}                                                                                                           // 9253
		};                                                                                                           // 9254
	}                                                                                                             // 9255
} );                                                                                                           // 9256
                                                                                                               // 9257
                                                                                                               // 9258
                                                                                                               // 9259
                                                                                                               // 9260
var oldCallbacks = [],                                                                                         // 9261
	rjsonp = /(=)\?(?=&|$)|\?\?/;                                                                                 // 9262
                                                                                                               // 9263
// Default jsonp settings                                                                                      // 9264
jQuery.ajaxSetup( {                                                                                            // 9265
	jsonp: "callback",                                                                                            // 9266
	jsonpCallback: function() {                                                                                   // 9267
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );                                 // 9268
		this[ callback ] = true;                                                                                     // 9269
		return callback;                                                                                             // 9270
	}                                                                                                             // 9271
} );                                                                                                           // 9272
                                                                                                               // 9273
// Detect, normalize options and install callbacks for jsonp requests                                          // 9274
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {                                   // 9275
                                                                                                               // 9276
	var callbackName, overwritten, responseContainer,                                                             // 9277
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?                                                     // 9278
			"url" :                                                                                                     // 9279
			typeof s.data === "string" &&                                                                               // 9280
				( s.contentType || "" )                                                                                    // 9281
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&                                                  // 9282
				rjsonp.test( s.data ) && "data"                                                                            // 9283
		);                                                                                                           // 9284
                                                                                                               // 9285
	// Handle iff the expected data type is "jsonp" or we have a parameter to set                                 // 9286
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {                                                             // 9287
                                                                                                               // 9288
		// Get callback name, remembering preexisting value associated with it                                       // 9289
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?                                      // 9290
			s.jsonpCallback() :                                                                                         // 9291
			s.jsonpCallback;                                                                                            // 9292
                                                                                                               // 9293
		// Insert callback into url or form data                                                                     // 9294
		if ( jsonProp ) {                                                                                            // 9295
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );                                       // 9296
		} else if ( s.jsonp !== false ) {                                                                            // 9297
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;                               // 9298
		}                                                                                                            // 9299
                                                                                                               // 9300
		// Use data converter to retrieve json after script execution                                                // 9301
		s.converters[ "script json" ] = function() {                                                                 // 9302
			if ( !responseContainer ) {                                                                                 // 9303
				jQuery.error( callbackName + " was not called" );                                                          // 9304
			}                                                                                                           // 9305
			return responseContainer[ 0 ];                                                                              // 9306
		};                                                                                                           // 9307
                                                                                                               // 9308
		// Force json dataType                                                                                       // 9309
		s.dataTypes[ 0 ] = "json";                                                                                   // 9310
                                                                                                               // 9311
		// Install callback                                                                                          // 9312
		overwritten = window[ callbackName ];                                                                        // 9313
		window[ callbackName ] = function() {                                                                        // 9314
			responseContainer = arguments;                                                                              // 9315
		};                                                                                                           // 9316
                                                                                                               // 9317
		// Clean-up function (fires after converters)                                                                // 9318
		jqXHR.always( function() {                                                                                   // 9319
                                                                                                               // 9320
			// If previous value didn't exist - remove it                                                               // 9321
			if ( overwritten === undefined ) {                                                                          // 9322
				jQuery( window ).removeProp( callbackName );                                                               // 9323
                                                                                                               // 9324
			// Otherwise restore preexisting value                                                                      // 9325
			} else {                                                                                                    // 9326
				window[ callbackName ] = overwritten;                                                                      // 9327
			}                                                                                                           // 9328
                                                                                                               // 9329
			// Save back as free                                                                                        // 9330
			if ( s[ callbackName ] ) {                                                                                  // 9331
                                                                                                               // 9332
				// Make sure that re-using the options doesn't screw things around                                         // 9333
				s.jsonpCallback = originalSettings.jsonpCallback;                                                          // 9334
                                                                                                               // 9335
				// Save the callback name for future use                                                                   // 9336
				oldCallbacks.push( callbackName );                                                                         // 9337
			}                                                                                                           // 9338
                                                                                                               // 9339
			// Call if it was a function and we have a response                                                         // 9340
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {                                              // 9341
				overwritten( responseContainer[ 0 ] );                                                                     // 9342
			}                                                                                                           // 9343
                                                                                                               // 9344
			responseContainer = overwritten = undefined;                                                                // 9345
		} );                                                                                                         // 9346
                                                                                                               // 9347
		// Delegate to script                                                                                        // 9348
		return "script";                                                                                             // 9349
	}                                                                                                             // 9350
} );                                                                                                           // 9351
                                                                                                               // 9352
                                                                                                               // 9353
                                                                                                               // 9354
                                                                                                               // 9355
// Argument "data" should be string of html                                                                    // 9356
// context (optional): If specified, the fragment will be created in this context,                             // 9357
// defaults to document                                                                                        // 9358
// keepScripts (optional): If true, will include scripts passed in the html string                             // 9359
jQuery.parseHTML = function( data, context, keepScripts ) {                                                    // 9360
	if ( !data || typeof data !== "string" ) {                                                                    // 9361
		return null;                                                                                                 // 9362
	}                                                                                                             // 9363
	if ( typeof context === "boolean" ) {                                                                         // 9364
		keepScripts = context;                                                                                       // 9365
		context = false;                                                                                             // 9366
	}                                                                                                             // 9367
	context = context || document;                                                                                // 9368
                                                                                                               // 9369
	var parsed = rsingleTag.exec( data ),                                                                         // 9370
		scripts = !keepScripts && [];                                                                                // 9371
                                                                                                               // 9372
	// Single tag                                                                                                 // 9373
	if ( parsed ) {                                                                                               // 9374
		return [ context.createElement( parsed[ 1 ] ) ];                                                             // 9375
	}                                                                                                             // 9376
                                                                                                               // 9377
	parsed = buildFragment( [ data ], context, scripts );                                                         // 9378
                                                                                                               // 9379
	if ( scripts && scripts.length ) {                                                                            // 9380
		jQuery( scripts ).remove();                                                                                  // 9381
	}                                                                                                             // 9382
                                                                                                               // 9383
	return jQuery.merge( [], parsed.childNodes );                                                                 // 9384
};                                                                                                             // 9385
                                                                                                               // 9386
                                                                                                               // 9387
// Keep a copy of the old load method                                                                          // 9388
var _load = jQuery.fn.load;                                                                                    // 9389
                                                                                                               // 9390
/**                                                                                                            // 9391
 * Load a url into a page                                                                                      // 9392
 */                                                                                                            // 9393
jQuery.fn.load = function( url, params, callback ) {                                                           // 9394
	if ( typeof url !== "string" && _load ) {                                                                     // 9395
		return _load.apply( this, arguments );                                                                       // 9396
	}                                                                                                             // 9397
                                                                                                               // 9398
	var selector, type, response,                                                                                 // 9399
		self = this,                                                                                                 // 9400
		off = url.indexOf( " " );                                                                                    // 9401
                                                                                                               // 9402
	if ( off > -1 ) {                                                                                             // 9403
		selector = jQuery.trim( url.slice( off ) );                                                                  // 9404
		url = url.slice( 0, off );                                                                                   // 9405
	}                                                                                                             // 9406
                                                                                                               // 9407
	// If it's a function                                                                                         // 9408
	if ( jQuery.isFunction( params ) ) {                                                                          // 9409
                                                                                                               // 9410
		// We assume that it's the callback                                                                          // 9411
		callback = params;                                                                                           // 9412
		params = undefined;                                                                                          // 9413
                                                                                                               // 9414
	// Otherwise, build a param string                                                                            // 9415
	} else if ( params && typeof params === "object" ) {                                                          // 9416
		type = "POST";                                                                                               // 9417
	}                                                                                                             // 9418
                                                                                                               // 9419
	// If we have elements to modify, make the request                                                            // 9420
	if ( self.length > 0 ) {                                                                                      // 9421
		jQuery.ajax( {                                                                                               // 9422
			url: url,                                                                                                   // 9423
                                                                                                               // 9424
			// If "type" variable is undefined, then "GET" method will be used.                                         // 9425
			// Make value of this field explicit since                                                                  // 9426
			// user can override it through ajaxSetup method                                                            // 9427
			type: type || "GET",                                                                                        // 9428
			dataType: "html",                                                                                           // 9429
			data: params                                                                                                // 9430
		} ).done( function( responseText ) {                                                                         // 9431
                                                                                                               // 9432
			// Save response for use in complete callback                                                               // 9433
			response = arguments;                                                                                       // 9434
                                                                                                               // 9435
			self.html( selector ?                                                                                       // 9436
                                                                                                               // 9437
				// If a selector was specified, locate the right elements in a dummy div                                   // 9438
				// Exclude scripts to avoid IE 'Permission Denied' errors                                                  // 9439
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :                            // 9440
                                                                                                               // 9441
				// Otherwise use the full result                                                                           // 9442
				responseText );                                                                                            // 9443
                                                                                                               // 9444
		// If the request succeeds, this function gets "data", "status", "jqXHR"                                     // 9445
		// but they are ignored because response was set above.                                                      // 9446
		// If it fails, this function gets "jqXHR", "status", "error"                                                // 9447
		} ).always( callback && function( jqXHR, status ) {                                                          // 9448
			self.each( function() {                                                                                     // 9449
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );                                 // 9450
			} );                                                                                                        // 9451
		} );                                                                                                         // 9452
	}                                                                                                             // 9453
                                                                                                               // 9454
	return this;                                                                                                  // 9455
};                                                                                                             // 9456
                                                                                                               // 9457
                                                                                                               // 9458
                                                                                                               // 9459
                                                                                                               // 9460
// Attach a bunch of functions for handling common AJAX events                                                 // 9461
jQuery.each( [                                                                                                 // 9462
	"ajaxStart",                                                                                                  // 9463
	"ajaxStop",                                                                                                   // 9464
	"ajaxComplete",                                                                                               // 9465
	"ajaxError",                                                                                                  // 9466
	"ajaxSuccess",                                                                                                // 9467
	"ajaxSend"                                                                                                    // 9468
], function( i, type ) {                                                                                       // 9469
	jQuery.fn[ type ] = function( fn ) {                                                                          // 9470
		return this.on( type, fn );                                                                                  // 9471
	};                                                                                                            // 9472
} );                                                                                                           // 9473
                                                                                                               // 9474
                                                                                                               // 9475
                                                                                                               // 9476
                                                                                                               // 9477
jQuery.expr.filters.animated = function( elem ) {                                                              // 9478
	return jQuery.grep( jQuery.timers, function( fn ) {                                                           // 9479
		return elem === fn.elem;                                                                                     // 9480
	} ).length;                                                                                                   // 9481
};                                                                                                             // 9482
                                                                                                               // 9483
                                                                                                               // 9484
                                                                                                               // 9485
                                                                                                               // 9486
/**                                                                                                            // 9487
 * Gets a window from an element                                                                               // 9488
 */                                                                                                            // 9489
function getWindow( elem ) {                                                                                   // 9490
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;                              // 9491
}                                                                                                              // 9492
                                                                                                               // 9493
jQuery.offset = {                                                                                              // 9494
	setOffset: function( elem, options, i ) {                                                                     // 9495
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,                       // 9496
			position = jQuery.css( elem, "position" ),                                                                  // 9497
			curElem = jQuery( elem ),                                                                                   // 9498
			props = {};                                                                                                 // 9499
                                                                                                               // 9500
		// Set position first, in-case top/left are set even on static elem                                          // 9501
		if ( position === "static" ) {                                                                               // 9502
			elem.style.position = "relative";                                                                           // 9503
		}                                                                                                            // 9504
                                                                                                               // 9505
		curOffset = curElem.offset();                                                                                // 9506
		curCSSTop = jQuery.css( elem, "top" );                                                                       // 9507
		curCSSLeft = jQuery.css( elem, "left" );                                                                     // 9508
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&                                   // 9509
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;                                                          // 9510
                                                                                                               // 9511
		// Need to be able to calculate position if either                                                           // 9512
		// top or left is auto and position is either absolute or fixed                                              // 9513
		if ( calculatePosition ) {                                                                                   // 9514
			curPosition = curElem.position();                                                                           // 9515
			curTop = curPosition.top;                                                                                   // 9516
			curLeft = curPosition.left;                                                                                 // 9517
                                                                                                               // 9518
		} else {                                                                                                     // 9519
			curTop = parseFloat( curCSSTop ) || 0;                                                                      // 9520
			curLeft = parseFloat( curCSSLeft ) || 0;                                                                    // 9521
		}                                                                                                            // 9522
                                                                                                               // 9523
		if ( jQuery.isFunction( options ) ) {                                                                        // 9524
                                                                                                               // 9525
			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)                           // 9526
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );                                          // 9527
		}                                                                                                            // 9528
                                                                                                               // 9529
		if ( options.top != null ) {                                                                                 // 9530
			props.top = ( options.top - curOffset.top ) + curTop;                                                       // 9531
		}                                                                                                            // 9532
		if ( options.left != null ) {                                                                                // 9533
			props.left = ( options.left - curOffset.left ) + curLeft;                                                   // 9534
		}                                                                                                            // 9535
                                                                                                               // 9536
		if ( "using" in options ) {                                                                                  // 9537
			options.using.call( elem, props );                                                                          // 9538
                                                                                                               // 9539
		} else {                                                                                                     // 9540
			curElem.css( props );                                                                                       // 9541
		}                                                                                                            // 9542
	}                                                                                                             // 9543
};                                                                                                             // 9544
                                                                                                               // 9545
jQuery.fn.extend( {                                                                                            // 9546
	offset: function( options ) {                                                                                 // 9547
		if ( arguments.length ) {                                                                                    // 9548
			return options === undefined ?                                                                              // 9549
				this :                                                                                                     // 9550
				this.each( function( i ) {                                                                                 // 9551
					jQuery.offset.setOffset( this, options, i );                                                              // 9552
				} );                                                                                                       // 9553
		}                                                                                                            // 9554
                                                                                                               // 9555
		var docElem, win,                                                                                            // 9556
			elem = this[ 0 ],                                                                                           // 9557
			box = { top: 0, left: 0 },                                                                                  // 9558
			doc = elem && elem.ownerDocument;                                                                           // 9559
                                                                                                               // 9560
		if ( !doc ) {                                                                                                // 9561
			return;                                                                                                     // 9562
		}                                                                                                            // 9563
                                                                                                               // 9564
		docElem = doc.documentElement;                                                                               // 9565
                                                                                                               // 9566
		// Make sure it's not a disconnected DOM node                                                                // 9567
		if ( !jQuery.contains( docElem, elem ) ) {                                                                   // 9568
			return box;                                                                                                 // 9569
		}                                                                                                            // 9570
                                                                                                               // 9571
		box = elem.getBoundingClientRect();                                                                          // 9572
		win = getWindow( doc );                                                                                      // 9573
		return {                                                                                                     // 9574
			top: box.top + win.pageYOffset - docElem.clientTop,                                                         // 9575
			left: box.left + win.pageXOffset - docElem.clientLeft                                                       // 9576
		};                                                                                                           // 9577
	},                                                                                                            // 9578
                                                                                                               // 9579
	position: function() {                                                                                        // 9580
		if ( !this[ 0 ] ) {                                                                                          // 9581
			return;                                                                                                     // 9582
		}                                                                                                            // 9583
                                                                                                               // 9584
		var offsetParent, offset,                                                                                    // 9585
			elem = this[ 0 ],                                                                                           // 9586
			parentOffset = { top: 0, left: 0 };                                                                         // 9587
                                                                                                               // 9588
		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},                                   // 9589
		// because it is its only offset parent                                                                      // 9590
		if ( jQuery.css( elem, "position" ) === "fixed" ) {                                                          // 9591
                                                                                                               // 9592
			// Assume getBoundingClientRect is there when computed position is fixed                                    // 9593
			offset = elem.getBoundingClientRect();                                                                      // 9594
                                                                                                               // 9595
		} else {                                                                                                     // 9596
                                                                                                               // 9597
			// Get *real* offsetParent                                                                                  // 9598
			offsetParent = this.offsetParent();                                                                         // 9599
                                                                                                               // 9600
			// Get correct offsets                                                                                      // 9601
			offset = this.offset();                                                                                     // 9602
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {                                                      // 9603
				parentOffset = offsetParent.offset();                                                                      // 9604
			}                                                                                                           // 9605
                                                                                                               // 9606
			// Add offsetParent borders                                                                                 // 9607
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );                                // 9608
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );                              // 9609
		}                                                                                                            // 9610
                                                                                                               // 9611
		// Subtract parent offsets and element margins                                                               // 9612
		return {                                                                                                     // 9613
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),                                 // 9614
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )                              // 9615
		};                                                                                                           // 9616
	},                                                                                                            // 9617
                                                                                                               // 9618
	// This method will return documentElement in the following cases:                                            // 9619
	// 1) For the element inside the iframe without offsetParent, this method will return                         // 9620
	//    documentElement of the parent window                                                                    // 9621
	// 2) For the hidden or detached element                                                                      // 9622
	// 3) For body or html element, i.e. in case of the html node - it will return itself                         // 9623
	//                                                                                                            // 9624
	// but those exceptions were never presented as a real life use-cases                                         // 9625
	// and might be considered as more preferable results.                                                        // 9626
	//                                                                                                            // 9627
	// This logic, however, is not guaranteed and can change at any point in the future                           // 9628
	offsetParent: function() {                                                                                    // 9629
		return this.map( function() {                                                                                // 9630
			var offsetParent = this.offsetParent;                                                                       // 9631
                                                                                                               // 9632
			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {                             // 9633
				offsetParent = offsetParent.offsetParent;                                                                  // 9634
			}                                                                                                           // 9635
                                                                                                               // 9636
			return offsetParent || documentElement;                                                                     // 9637
		} );                                                                                                         // 9638
	}                                                                                                             // 9639
} );                                                                                                           // 9640
                                                                                                               // 9641
// Create scrollLeft and scrollTop methods                                                                     // 9642
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {               // 9643
	var top = "pageYOffset" === prop;                                                                             // 9644
                                                                                                               // 9645
	jQuery.fn[ method ] = function( val ) {                                                                       // 9646
		return access( this, function( elem, method, val ) {                                                         // 9647
			var win = getWindow( elem );                                                                                // 9648
                                                                                                               // 9649
			if ( val === undefined ) {                                                                                  // 9650
				return win ? win[ prop ] : elem[ method ];                                                                 // 9651
			}                                                                                                           // 9652
                                                                                                               // 9653
			if ( win ) {                                                                                                // 9654
				win.scrollTo(                                                                                              // 9655
					!top ? val : win.pageXOffset,                                                                             // 9656
					top ? val : win.pageYOffset                                                                               // 9657
				);                                                                                                         // 9658
                                                                                                               // 9659
			} else {                                                                                                    // 9660
				elem[ method ] = val;                                                                                      // 9661
			}                                                                                                           // 9662
		}, method, val, arguments.length );                                                                          // 9663
	};                                                                                                            // 9664
} );                                                                                                           // 9665
                                                                                                               // 9666
// Support: Safari<7-8+, Chrome<37-44+                                                                         // 9667
// Add the top/left cssHooks using jQuery.fn.position                                                          // 9668
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084                                                   // 9669
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280                                       // 9670
// getComputedStyle returns percent when specified for top/left/bottom/right;                                  // 9671
// rather than make the css module depend on the offset module, just check for it here                         // 9672
jQuery.each( [ "top", "left" ], function( i, prop ) {                                                          // 9673
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,                                                // 9674
		function( elem, computed ) {                                                                                 // 9675
			if ( computed ) {                                                                                           // 9676
				computed = curCSS( elem, prop );                                                                           // 9677
                                                                                                               // 9678
				// If curCSS returns percentage, fallback to offset                                                        // 9679
				return rnumnonpx.test( computed ) ?                                                                        // 9680
					jQuery( elem ).position()[ prop ] + "px" :                                                                // 9681
					computed;                                                                                                 // 9682
			}                                                                                                           // 9683
		}                                                                                                            // 9684
	);                                                                                                            // 9685
} );                                                                                                           // 9686
                                                                                                               // 9687
                                                                                                               // 9688
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods                           // 9689
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {                                    // 9690
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },                                  // 9691
		function( defaultExtra, funcName ) {                                                                         // 9692
                                                                                                               // 9693
		// Margin is only for outerHeight, outerWidth                                                                // 9694
		jQuery.fn[ funcName ] = function( margin, value ) {                                                          // 9695
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),                        // 9696
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );                       // 9697
                                                                                                               // 9698
			return access( this, function( elem, type, value ) {                                                        // 9699
				var doc;                                                                                                   // 9700
                                                                                                               // 9701
				if ( jQuery.isWindow( elem ) ) {                                                                           // 9702
                                                                                                               // 9703
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there                          // 9704
					// isn't a whole lot we can do. See pull request at this URL for discussion:                              // 9705
					// https://github.com/jquery/jquery/pull/764                                                              // 9706
					return elem.document.documentElement[ "client" + name ];                                                  // 9707
				}                                                                                                          // 9708
                                                                                                               // 9709
				// Get document width or height                                                                            // 9710
				if ( elem.nodeType === 9 ) {                                                                               // 9711
					doc = elem.documentElement;                                                                               // 9712
                                                                                                               // 9713
					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],                           // 9714
					// whichever is greatest                                                                                  // 9715
					return Math.max(                                                                                          // 9716
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],                                                    // 9717
						elem.body[ "offset" + name ], doc[ "offset" + name ],                                                    // 9718
						doc[ "client" + name ]                                                                                   // 9719
					);                                                                                                        // 9720
				}                                                                                                          // 9721
                                                                                                               // 9722
				return value === undefined ?                                                                               // 9723
                                                                                                               // 9724
					// Get width or height on the element, requesting but not forcing parseFloat                              // 9725
					jQuery.css( elem, type, extra ) :                                                                         // 9726
                                                                                                               // 9727
					// Set width or height on the element                                                                     // 9728
					jQuery.style( elem, type, value, extra );                                                                 // 9729
			}, type, chainable ? margin : undefined, chainable, null );                                                 // 9730
		};                                                                                                           // 9731
	} );                                                                                                          // 9732
} );                                                                                                           // 9733
                                                                                                               // 9734
                                                                                                               // 9735
jQuery.fn.extend( {                                                                                            // 9736
                                                                                                               // 9737
	bind: function( types, data, fn ) {                                                                           // 9738
		return this.on( types, null, data, fn );                                                                     // 9739
	},                                                                                                            // 9740
	unbind: function( types, fn ) {                                                                               // 9741
		return this.off( types, null, fn );                                                                          // 9742
	},                                                                                                            // 9743
                                                                                                               // 9744
	delegate: function( selector, types, data, fn ) {                                                             // 9745
		return this.on( types, selector, data, fn );                                                                 // 9746
	},                                                                                                            // 9747
	undelegate: function( selector, types, fn ) {                                                                 // 9748
                                                                                                               // 9749
		// ( namespace ) or ( selector, types [, fn] )                                                               // 9750
		return arguments.length === 1 ?                                                                              // 9751
			this.off( selector, "**" ) :                                                                                // 9752
			this.off( types, selector || "**", fn );                                                                    // 9753
	},                                                                                                            // 9754
	size: function() {                                                                                            // 9755
		return this.length;                                                                                          // 9756
	}                                                                                                             // 9757
} );                                                                                                           // 9758
                                                                                                               // 9759
jQuery.fn.andSelf = jQuery.fn.addBack;                                                                         // 9760
                                                                                                               // 9761
                                                                                                               // 9762
                                                                                                               // 9763
                                                                                                               // 9764
// Register as a named AMD module, since jQuery can be concatenated with other                                 // 9765
// files that may use define, but not via a proper concatenation script that                                   // 9766
// understands anonymous AMD modules. A named AMD is safest and most robust                                    // 9767
// way to register. Lowercase jquery is used because AMD module names are                                      // 9768
// derived from file names, and jQuery is normally delivered in a lowercase                                    // 9769
// file name. Do this after creating the global so that if an AMD module wants                                 // 9770
// to call noConflict to hide this version of jQuery, it will work.                                            // 9771
                                                                                                               // 9772
// Note that for maximum portability, libraries that are not jQuery should                                     // 9773
// declare themselves as anonymous modules, and avoid setting a global if an                                   // 9774
// AMD loader is present. jQuery is a special case. For more information, see                                  // 9775
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon                             // 9776
                                                                                                               // 9777
if ( typeof define === "function" && define.amd ) {                                                            // 9778
	define( "jquery", [], function() {                                                                            // 9779
		return jQuery;                                                                                               // 9780
	} );                                                                                                          // 9781
}                                                                                                              // 9782
                                                                                                               // 9783
                                                                                                               // 9784
                                                                                                               // 9785
var                                                                                                            // 9786
                                                                                                               // 9787
	// Map over jQuery in case of overwrite                                                                       // 9788
	_jQuery = window.jQuery,                                                                                      // 9789
                                                                                                               // 9790
	// Map over the $ in case of overwrite                                                                        // 9791
	_$ = window.$;                                                                                                // 9792
                                                                                                               // 9793
jQuery.noConflict = function( deep ) {                                                                         // 9794
	if ( window.$ === jQuery ) {                                                                                  // 9795
		window.$ = _$;                                                                                               // 9796
	}                                                                                                             // 9797
                                                                                                               // 9798
	if ( deep && window.jQuery === jQuery ) {                                                                     // 9799
		window.jQuery = _jQuery;                                                                                     // 9800
	}                                                                                                             // 9801
                                                                                                               // 9802
	return jQuery;                                                                                                // 9803
};                                                                                                             // 9804
                                                                                                               // 9805
// Expose jQuery and $ identifiers, even in AMD                                                                // 9806
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)                                               // 9807
// and CommonJS for browser emulators (#13566)                                                                 // 9808
if ( !noGlobal ) {                                                                                             // 9809
	window.jQuery = window.$ = jQuery;                                                                            // 9810
}                                                                                                              // 9811
                                                                                                               // 9812
return jQuery;                                                                                                 // 9813
}));                                                                                                           // 9814
                                                                                                               // 9815
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"meteor-node-stubs":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/package.json                                                                 //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
exports.name = "meteor-node-stubs";                                                                            // 1
exports.version = "0.2.3";                                                                                     // 2
exports.main = "index.js";                                                                                     // 3
                                                                                                               // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":["./map.json",function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/index.js                                                                     //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
var map = require("./map.json");                                                                               // 1
var meteorAliases = {};                                                                                        // 2
                                                                                                               // 3
Object.keys(map).forEach(function (id) {                                                                       // 4
  if (typeof map[id] === "string") {                                                                           // 5
    try {                                                                                                      // 6
      exports[id] = meteorAliases[id + ".js"] =                                                                // 7
        require.resolve(map[id]);                                                                              // 8
    } catch (e) {                                                                                              // 9
      // Resolution can fail at runtime if the stub was not included in the                                    // 10
      // bundle because nothing depended on it.                                                                // 11
    }                                                                                                          // 12
  } else {                                                                                                     // 13
    exports[id] = map[id];                                                                                     // 14
    meteorAliases[id + ".js"] = function(){};                                                                  // 15
  }                                                                                                            // 16
});                                                                                                            // 17
                                                                                                               // 18
if (typeof meteorInstall === "function") {                                                                     // 19
  meteorInstall({                                                                                              // 20
    // Install the aliases into a node_modules directory one level up from                                     // 21
    // the root directory, so that they do not clutter the namespace                                           // 22
    // available to apps and packages.                                                                         // 23
    "..": {                                                                                                    // 24
      node_modules: meteorAliases                                                                              // 25
    }                                                                                                          // 26
  });                                                                                                          // 27
}                                                                                                              // 28
                                                                                                               // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"map.json":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/map.json                                                                     //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
module.exports = {                                                                                             // 1
  "assert": "assert/",                                                                                         // 2
  "buffer": "buffer/",                                                                                         // 3
  "child_process": null,                                                                                       // 4
  "cluster": null,                                                                                             // 5
  "console": "console-browserify",                                                                             // 6
  "constants": "constants-browserify",                                                                         // 7
  "crypto": "crypto-browserify",                                                                               // 8
  "dgram": null,                                                                                               // 9
  "dns": null,                                                                                                 // 10
  "domain": "domain-browser",                                                                                  // 11
  "events": "events/",                                                                                         // 12
  "fs": null,                                                                                                  // 13
  "http": "http-browserify",                                                                                   // 14
  "https": "https-browserify",                                                                                 // 15
  "module": null,                                                                                              // 16
  "net": null,                                                                                                 // 17
  "os": "os-browserify/browser.js",                                                                            // 18
  "path": "path-browserify",                                                                                   // 19
  "process": "process/browser.js",                                                                             // 20
  "punycode": "punycode/",                                                                                     // 21
  "querystring": "querystring-es3/",                                                                           // 22
  "readline": null,                                                                                            // 23
  "repl": null,                                                                                                // 24
  "stream": "stream-browserify",                                                                               // 25
  "_stream_duplex": "readable-stream/duplex.js",                                                               // 26
  "_stream_passthrough": "readable-stream/passthrough.js",                                                     // 27
  "_stream_readable": "readable-stream/readable.js",                                                           // 28
  "_stream_transform": "readable-stream/transform.js",                                                         // 29
  "_stream_writable": "readable-stream/writable.js",                                                           // 30
  "string_decoder": "string_decoder/",                                                                         // 31
  "sys": "util/util.js",                                                                                       // 32
  "timers": "timers-browserify",                                                                               // 33
  "tls": null,                                                                                                 // 34
  "tty": "tty-browserify",                                                                                     // 35
  "url": "url/",                                                                                               // 36
  "util": "util/util.js",                                                                                      // 37
  "vm": "vm-browserify",                                                                                       // 38
  "zlib": "browserify-zlib"                                                                                    // 39
};                                                                                                             // 40
                                                                                                               // 41
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deps":{"buffer.js":["buffer/",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/deps/buffer.js                                                               //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
require("buffer/");                                                                                            // 1
                                                                                                               // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"process.js":["process/browser.js",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/deps/process.js                                                              //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
require("process/browser.js");                                                                                 // 1
                                                                                                               // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"domain.js":["domain-browser",function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/deps/domain.js                                                               //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
require("domain-browser");                                                                                     // 1
                                                                                                               // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"node_modules":{"buffer":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/node_modules/buffer/package.json                                             //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
exports.name = "buffer";                                                                                       // 1
exports.version = "4.5.1";                                                                                     // 2
exports.main = "index.js";                                                                                     // 3
                                                                                                               // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":["base64-js","ieee754","isarray",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/node_modules/buffer/index.js                                                 //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
/*!                                                                                                            // 1
 * The buffer module from node.js, for the browser.                                                            // 2
 *                                                                                                             // 3
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>                                       // 4
 * @license  MIT                                                                                               // 5
 */                                                                                                            // 6
/* eslint-disable no-proto */                                                                                  // 7
                                                                                                               // 8
'use strict'                                                                                                   // 9
                                                                                                               // 10
var base64 = require('base64-js')                                                                              // 11
var ieee754 = require('ieee754')                                                                               // 12
var isArray = require('isarray')                                                                               // 13
                                                                                                               // 14
exports.Buffer = Buffer                                                                                        // 15
exports.SlowBuffer = SlowBuffer                                                                                // 16
exports.INSPECT_MAX_BYTES = 50                                                                                 // 17
Buffer.poolSize = 8192 // not used by this implementation                                                      // 18
                                                                                                               // 19
var rootParent = {}                                                                                            // 20
                                                                                                               // 21
/**                                                                                                            // 22
 * If `Buffer.TYPED_ARRAY_SUPPORT`:                                                                            // 23
 *   === true    Use Uint8Array implementation (fastest)                                                       // 24
 *   === false   Use Object implementation (most compatible, even IE6)                                         // 25
 *                                                                                                             // 26
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,                          // 27
 * Opera 11.6+, iOS 4.2+.                                                                                      // 28
 *                                                                                                             // 29
 * Due to various browser bugs, sometimes the Object implementation will be used even                          // 30
 * when the browser supports typed arrays.                                                                     // 31
 *                                                                                                             // 32
 * Note:                                                                                                       // 33
 *                                                                                                             // 34
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,                         // 35
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.                                               // 36
 *                                                                                                             // 37
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.                                    // 38
 *                                                                                                             // 39
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of                      // 40
 *     incorrect length in some situations.                                                                    // 41
                                                                                                               // 42
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they                      // 43
 * get the Object implementation, which is slower but behaves correctly.                                       // 44
 */                                                                                                            // 45
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined                                          // 46
  ? global.TYPED_ARRAY_SUPPORT                                                                                 // 47
  : typedArraySupport()                                                                                        // 48
                                                                                                               // 49
function typedArraySupport () {                                                                                // 50
  try {                                                                                                        // 51
    var arr = new Uint8Array(1)                                                                                // 52
    arr.foo = function () { return 42 }                                                                        // 53
    return arr.foo() === 42 && // typed array instances can be augmented                                       // 54
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`                                   // 55
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`                                      // 56
  } catch (e) {                                                                                                // 57
    return false                                                                                               // 58
  }                                                                                                            // 59
}                                                                                                              // 60
                                                                                                               // 61
function kMaxLength () {                                                                                       // 62
  return Buffer.TYPED_ARRAY_SUPPORT                                                                            // 63
    ? 0x7fffffff                                                                                               // 64
    : 0x3fffffff                                                                                               // 65
}                                                                                                              // 66
                                                                                                               // 67
/**                                                                                                            // 68
 * The Buffer constructor returns instances of `Uint8Array` that have their                                    // 69
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of                             // 70
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods                             // 71
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it                               // 72
 * returns a single octet.                                                                                     // 73
 *                                                                                                             // 74
 * The `Uint8Array` prototype remains unmodified.                                                              // 75
 */                                                                                                            // 76
function Buffer (arg) {                                                                                        // 77
  if (!(this instanceof Buffer)) {                                                                             // 78
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.                                   // 79
    if (arguments.length > 1) return new Buffer(arg, arguments[1])                                             // 80
    return new Buffer(arg)                                                                                     // 81
  }                                                                                                            // 82
                                                                                                               // 83
  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                           // 84
    this.length = 0                                                                                            // 85
    this.parent = undefined                                                                                    // 86
  }                                                                                                            // 87
                                                                                                               // 88
  // Common case.                                                                                              // 89
  if (typeof arg === 'number') {                                                                               // 90
    return fromNumber(this, arg)                                                                               // 91
  }                                                                                                            // 92
                                                                                                               // 93
  // Slightly less common case.                                                                                // 94
  if (typeof arg === 'string') {                                                                               // 95
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')                                 // 96
  }                                                                                                            // 97
                                                                                                               // 98
  // Unusual.                                                                                                  // 99
  return fromObject(this, arg)                                                                                 // 100
}                                                                                                              // 101
                                                                                                               // 102
// TODO: Legacy, not needed anymore. Remove in next major version.                                             // 103
Buffer._augment = function (arr) {                                                                             // 104
  arr.__proto__ = Buffer.prototype                                                                             // 105
  return arr                                                                                                   // 106
}                                                                                                              // 107
                                                                                                               // 108
function fromNumber (that, length) {                                                                           // 109
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)                                                  // 110
  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                           // 111
    for (var i = 0; i < length; i++) {                                                                         // 112
      that[i] = 0                                                                                              // 113
    }                                                                                                          // 114
  }                                                                                                            // 115
  return that                                                                                                  // 116
}                                                                                                              // 117
                                                                                                               // 118
function fromString (that, string, encoding) {                                                                 // 119
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'                                       // 120
                                                                                                               // 121
  // Assumption: byteLength() return value is always < kMaxLength.                                             // 122
  var length = byteLength(string, encoding) | 0                                                                // 123
  that = allocate(that, length)                                                                                // 124
                                                                                                               // 125
  that.write(string, encoding)                                                                                 // 126
  return that                                                                                                  // 127
}                                                                                                              // 128
                                                                                                               // 129
function fromObject (that, object) {                                                                           // 130
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)                                                 // 131
                                                                                                               // 132
  if (isArray(object)) return fromArray(that, object)                                                          // 133
                                                                                                               // 134
  if (object == null) {                                                                                        // 135
    throw new TypeError('must start with number, buffer, array or string')                                     // 136
  }                                                                                                            // 137
                                                                                                               // 138
  if (typeof ArrayBuffer !== 'undefined') {                                                                    // 139
    if (object.buffer instanceof ArrayBuffer) {                                                                // 140
      return fromTypedArray(that, object)                                                                      // 141
    }                                                                                                          // 142
    if (object instanceof ArrayBuffer) {                                                                       // 143
      return fromArrayBuffer(that, object)                                                                     // 144
    }                                                                                                          // 145
  }                                                                                                            // 146
                                                                                                               // 147
  if (object.length) return fromArrayLike(that, object)                                                        // 148
                                                                                                               // 149
  return fromJsonObject(that, object)                                                                          // 150
}                                                                                                              // 151
                                                                                                               // 152
function fromBuffer (that, buffer) {                                                                           // 153
  var length = checked(buffer.length) | 0                                                                      // 154
  that = allocate(that, length)                                                                                // 155
  buffer.copy(that, 0, 0, length)                                                                              // 156
  return that                                                                                                  // 157
}                                                                                                              // 158
                                                                                                               // 159
function fromArray (that, array) {                                                                             // 160
  var length = checked(array.length) | 0                                                                       // 161
  that = allocate(that, length)                                                                                // 162
  for (var i = 0; i < length; i += 1) {                                                                        // 163
    that[i] = array[i] & 255                                                                                   // 164
  }                                                                                                            // 165
  return that                                                                                                  // 166
}                                                                                                              // 167
                                                                                                               // 168
// Duplicate of fromArray() to keep fromArray() monomorphic.                                                   // 169
function fromTypedArray (that, array) {                                                                        // 170
  var length = checked(array.length) | 0                                                                       // 171
  that = allocate(that, length)                                                                                // 172
  // Truncating the elements is probably not what people expect from typed                                     // 173
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior                                   // 174
  // of the old Buffer constructor.                                                                            // 175
  for (var i = 0; i < length; i += 1) {                                                                        // 176
    that[i] = array[i] & 255                                                                                   // 177
  }                                                                                                            // 178
  return that                                                                                                  // 179
}                                                                                                              // 180
                                                                                                               // 181
function fromArrayBuffer (that, array) {                                                                       // 182
  array.byteLength // this throws if `array` is not a valid ArrayBuffer                                        // 183
                                                                                                               // 184
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                            // 185
    // Return an augmented `Uint8Array` instance, for best performance                                         // 186
    that = new Uint8Array(array)                                                                               // 187
    that.__proto__ = Buffer.prototype                                                                          // 188
  } else {                                                                                                     // 189
    // Fallback: Return an object instance of the Buffer class                                                 // 190
    that = fromTypedArray(that, new Uint8Array(array))                                                         // 191
  }                                                                                                            // 192
  return that                                                                                                  // 193
}                                                                                                              // 194
                                                                                                               // 195
function fromArrayLike (that, array) {                                                                         // 196
  var length = checked(array.length) | 0                                                                       // 197
  that = allocate(that, length)                                                                                // 198
  for (var i = 0; i < length; i += 1) {                                                                        // 199
    that[i] = array[i] & 255                                                                                   // 200
  }                                                                                                            // 201
  return that                                                                                                  // 202
}                                                                                                              // 203
                                                                                                               // 204
// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.                                     // 205
// Returns a zero-length buffer for inputs that don't conform to the spec.                                     // 206
function fromJsonObject (that, object) {                                                                       // 207
  var array                                                                                                    // 208
  var length = 0                                                                                               // 209
                                                                                                               // 210
  if (object.type === 'Buffer' && isArray(object.data)) {                                                      // 211
    array = object.data                                                                                        // 212
    length = checked(array.length) | 0                                                                         // 213
  }                                                                                                            // 214
  that = allocate(that, length)                                                                                // 215
                                                                                                               // 216
  for (var i = 0; i < length; i += 1) {                                                                        // 217
    that[i] = array[i] & 255                                                                                   // 218
  }                                                                                                            // 219
  return that                                                                                                  // 220
}                                                                                                              // 221
                                                                                                               // 222
if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                              // 223
  Buffer.prototype.__proto__ = Uint8Array.prototype                                                            // 224
  Buffer.__proto__ = Uint8Array                                                                                // 225
  if (typeof Symbol !== 'undefined' && Symbol.species &&                                                       // 226
      Buffer[Symbol.species] === Buffer) {                                                                     // 227
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97                                 // 228
    Object.defineProperty(Buffer, Symbol.species, {                                                            // 229
      value: null,                                                                                             // 230
      configurable: true                                                                                       // 231
    })                                                                                                         // 232
  }                                                                                                            // 233
} else {                                                                                                       // 234
  // pre-set for values that may exist in the future                                                           // 235
  Buffer.prototype.length = undefined                                                                          // 236
  Buffer.prototype.parent = undefined                                                                          // 237
}                                                                                                              // 238
                                                                                                               // 239
function allocate (that, length) {                                                                             // 240
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                            // 241
    // Return an augmented `Uint8Array` instance, for best performance                                         // 242
    that = new Uint8Array(length)                                                                              // 243
    that.__proto__ = Buffer.prototype                                                                          // 244
  } else {                                                                                                     // 245
    // Fallback: Return an object instance of the Buffer class                                                 // 246
    that.length = length                                                                                       // 247
  }                                                                                                            // 248
                                                                                                               // 249
  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1                                               // 250
  if (fromPool) that.parent = rootParent                                                                       // 251
                                                                                                               // 252
  return that                                                                                                  // 253
}                                                                                                              // 254
                                                                                                               // 255
function checked (length) {                                                                                    // 256
  // Note: cannot use `length < kMaxLength` here because that fails when                                       // 257
  // length is NaN (which is otherwise coerced to zero.)                                                       // 258
  if (length >= kMaxLength()) {                                                                                // 259
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +                                   // 260
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')                                    // 261
  }                                                                                                            // 262
  return length | 0                                                                                            // 263
}                                                                                                              // 264
                                                                                                               // 265
function SlowBuffer (subject, encoding) {                                                                      // 266
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)                                  // 267
                                                                                                               // 268
  var buf = new Buffer(subject, encoding)                                                                      // 269
  delete buf.parent                                                                                            // 270
  return buf                                                                                                   // 271
}                                                                                                              // 272
                                                                                                               // 273
Buffer.isBuffer = function isBuffer (b) {                                                                      // 274
  return !!(b != null && b._isBuffer)                                                                          // 275
}                                                                                                              // 276
                                                                                                               // 277
Buffer.compare = function compare (a, b) {                                                                     // 278
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {                                                            // 279
    throw new TypeError('Arguments must be Buffers')                                                           // 280
  }                                                                                                            // 281
                                                                                                               // 282
  if (a === b) return 0                                                                                        // 283
                                                                                                               // 284
  var x = a.length                                                                                             // 285
  var y = b.length                                                                                             // 286
                                                                                                               // 287
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {                                                        // 288
    if (a[i] !== b[i]) {                                                                                       // 289
      x = a[i]                                                                                                 // 290
      y = b[i]                                                                                                 // 291
      break                                                                                                    // 292
    }                                                                                                          // 293
  }                                                                                                            // 294
                                                                                                               // 295
  if (x < y) return -1                                                                                         // 296
  if (y < x) return 1                                                                                          // 297
  return 0                                                                                                     // 298
}                                                                                                              // 299
                                                                                                               // 300
Buffer.isEncoding = function isEncoding (encoding) {                                                           // 301
  switch (String(encoding).toLowerCase()) {                                                                    // 302
    case 'hex':                                                                                                // 303
    case 'utf8':                                                                                               // 304
    case 'utf-8':                                                                                              // 305
    case 'ascii':                                                                                              // 306
    case 'binary':                                                                                             // 307
    case 'base64':                                                                                             // 308
    case 'raw':                                                                                                // 309
    case 'ucs2':                                                                                               // 310
    case 'ucs-2':                                                                                              // 311
    case 'utf16le':                                                                                            // 312
    case 'utf-16le':                                                                                           // 313
      return true                                                                                              // 314
    default:                                                                                                   // 315
      return false                                                                                             // 316
  }                                                                                                            // 317
}                                                                                                              // 318
                                                                                                               // 319
Buffer.concat = function concat (list, length) {                                                               // 320
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')                        // 321
                                                                                                               // 322
  if (list.length === 0) {                                                                                     // 323
    return new Buffer(0)                                                                                       // 324
  }                                                                                                            // 325
                                                                                                               // 326
  var i                                                                                                        // 327
  if (length === undefined) {                                                                                  // 328
    length = 0                                                                                                 // 329
    for (i = 0; i < list.length; i++) {                                                                        // 330
      length += list[i].length                                                                                 // 331
    }                                                                                                          // 332
  }                                                                                                            // 333
                                                                                                               // 334
  var buf = new Buffer(length)                                                                                 // 335
  var pos = 0                                                                                                  // 336
  for (i = 0; i < list.length; i++) {                                                                          // 337
    var item = list[i]                                                                                         // 338
    item.copy(buf, pos)                                                                                        // 339
    pos += item.length                                                                                         // 340
  }                                                                                                            // 341
  return buf                                                                                                   // 342
}                                                                                                              // 343
                                                                                                               // 344
function byteLength (string, encoding) {                                                                       // 345
  if (typeof string !== 'string') string = '' + string                                                         // 346
                                                                                                               // 347
  var len = string.length                                                                                      // 348
  if (len === 0) return 0                                                                                      // 349
                                                                                                               // 350
  // Use a for loop to avoid recursion                                                                         // 351
  var loweredCase = false                                                                                      // 352
  for (;;) {                                                                                                   // 353
    switch (encoding) {                                                                                        // 354
      case 'ascii':                                                                                            // 355
      case 'binary':                                                                                           // 356
      // Deprecated                                                                                            // 357
      case 'raw':                                                                                              // 358
      case 'raws':                                                                                             // 359
        return len                                                                                             // 360
      case 'utf8':                                                                                             // 361
      case 'utf-8':                                                                                            // 362
        return utf8ToBytes(string).length                                                                      // 363
      case 'ucs2':                                                                                             // 364
      case 'ucs-2':                                                                                            // 365
      case 'utf16le':                                                                                          // 366
      case 'utf-16le':                                                                                         // 367
        return len * 2                                                                                         // 368
      case 'hex':                                                                                              // 369
        return len >>> 1                                                                                       // 370
      case 'base64':                                                                                           // 371
        return base64ToBytes(string).length                                                                    // 372
      default:                                                                                                 // 373
        if (loweredCase) return utf8ToBytes(string).length // assume utf8                                      // 374
        encoding = ('' + encoding).toLowerCase()                                                               // 375
        loweredCase = true                                                                                     // 376
    }                                                                                                          // 377
  }                                                                                                            // 378
}                                                                                                              // 379
Buffer.byteLength = byteLength                                                                                 // 380
                                                                                                               // 381
function slowToString (encoding, start, end) {                                                                 // 382
  var loweredCase = false                                                                                      // 383
                                                                                                               // 384
  start = start | 0                                                                                            // 385
  end = end === undefined || end === Infinity ? this.length : end | 0                                          // 386
                                                                                                               // 387
  if (!encoding) encoding = 'utf8'                                                                             // 388
  if (start < 0) start = 0                                                                                     // 389
  if (end > this.length) end = this.length                                                                     // 390
  if (end <= start) return ''                                                                                  // 391
                                                                                                               // 392
  while (true) {                                                                                               // 393
    switch (encoding) {                                                                                        // 394
      case 'hex':                                                                                              // 395
        return hexSlice(this, start, end)                                                                      // 396
                                                                                                               // 397
      case 'utf8':                                                                                             // 398
      case 'utf-8':                                                                                            // 399
        return utf8Slice(this, start, end)                                                                     // 400
                                                                                                               // 401
      case 'ascii':                                                                                            // 402
        return asciiSlice(this, start, end)                                                                    // 403
                                                                                                               // 404
      case 'binary':                                                                                           // 405
        return binarySlice(this, start, end)                                                                   // 406
                                                                                                               // 407
      case 'base64':                                                                                           // 408
        return base64Slice(this, start, end)                                                                   // 409
                                                                                                               // 410
      case 'ucs2':                                                                                             // 411
      case 'ucs-2':                                                                                            // 412
      case 'utf16le':                                                                                          // 413
      case 'utf-16le':                                                                                         // 414
        return utf16leSlice(this, start, end)                                                                  // 415
                                                                                                               // 416
      default:                                                                                                 // 417
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                  // 418
        encoding = (encoding + '').toLowerCase()                                                               // 419
        loweredCase = true                                                                                     // 420
    }                                                                                                          // 421
  }                                                                                                            // 422
}                                                                                                              // 423
                                                                                                               // 424
// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect                         // 425
// Buffer instances.                                                                                           // 426
Buffer.prototype._isBuffer = true                                                                              // 427
                                                                                                               // 428
Buffer.prototype.toString = function toString () {                                                             // 429
  var length = this.length | 0                                                                                 // 430
  if (length === 0) return ''                                                                                  // 431
  if (arguments.length === 0) return utf8Slice(this, 0, length)                                                // 432
  return slowToString.apply(this, arguments)                                                                   // 433
}                                                                                                              // 434
                                                                                                               // 435
Buffer.prototype.equals = function equals (b) {                                                                // 436
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                    // 437
  if (this === b) return true                                                                                  // 438
  return Buffer.compare(this, b) === 0                                                                         // 439
}                                                                                                              // 440
                                                                                                               // 441
Buffer.prototype.inspect = function inspect () {                                                               // 442
  var str = ''                                                                                                 // 443
  var max = exports.INSPECT_MAX_BYTES                                                                          // 444
  if (this.length > 0) {                                                                                       // 445
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')                                                // 446
    if (this.length > max) str += ' ... '                                                                      // 447
  }                                                                                                            // 448
  return '<Buffer ' + str + '>'                                                                                // 449
}                                                                                                              // 450
                                                                                                               // 451
Buffer.prototype.compare = function compare (b) {                                                              // 452
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                    // 453
  return Buffer.compare(this, b)                                                                               // 454
}                                                                                                              // 455
                                                                                                               // 456
Buffer.prototype.indexOf = function indexOf (val, byteOffset) {                                                // 457
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff                                                         // 458
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000                                                  // 459
  byteOffset >>= 0                                                                                             // 460
                                                                                                               // 461
  if (this.length === 0) return -1                                                                             // 462
  if (byteOffset >= this.length) return -1                                                                     // 463
                                                                                                               // 464
  // Negative offsets start from the end of the buffer                                                         // 465
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)                                       // 466
                                                                                                               // 467
  if (typeof val === 'string') {                                                                               // 468
    if (val.length === 0) return -1 // special case: looking for empty string always fails                     // 469
    return String.prototype.indexOf.call(this, val, byteOffset)                                                // 470
  }                                                                                                            // 471
  if (Buffer.isBuffer(val)) {                                                                                  // 472
    return arrayIndexOf(this, val, byteOffset)                                                                 // 473
  }                                                                                                            // 474
  if (typeof val === 'number') {                                                                               // 475
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {                           // 476
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)                                          // 477
    }                                                                                                          // 478
    return arrayIndexOf(this, [ val ], byteOffset)                                                             // 479
  }                                                                                                            // 480
                                                                                                               // 481
  function arrayIndexOf (arr, val, byteOffset) {                                                               // 482
    var foundIndex = -1                                                                                        // 483
    for (var i = 0; byteOffset + i < arr.length; i++) {                                                        // 484
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {                               // 485
        if (foundIndex === -1) foundIndex = i                                                                  // 486
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex                                  // 487
      } else {                                                                                                 // 488
        foundIndex = -1                                                                                        // 489
      }                                                                                                        // 490
    }                                                                                                          // 491
    return -1                                                                                                  // 492
  }                                                                                                            // 493
                                                                                                               // 494
  throw new TypeError('val must be string, number or Buffer')                                                  // 495
}                                                                                                              // 496
                                                                                                               // 497
function hexWrite (buf, string, offset, length) {                                                              // 498
  offset = Number(offset) || 0                                                                                 // 499
  var remaining = buf.length - offset                                                                          // 500
  if (!length) {                                                                                               // 501
    length = remaining                                                                                         // 502
  } else {                                                                                                     // 503
    length = Number(length)                                                                                    // 504
    if (length > remaining) {                                                                                  // 505
      length = remaining                                                                                       // 506
    }                                                                                                          // 507
  }                                                                                                            // 508
                                                                                                               // 509
  // must be an even number of digits                                                                          // 510
  var strLen = string.length                                                                                   // 511
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')                                                  // 512
                                                                                                               // 513
  if (length > strLen / 2) {                                                                                   // 514
    length = strLen / 2                                                                                        // 515
  }                                                                                                            // 516
  for (var i = 0; i < length; i++) {                                                                           // 517
    var parsed = parseInt(string.substr(i * 2, 2), 16)                                                         // 518
    if (isNaN(parsed)) throw new Error('Invalid hex string')                                                   // 519
    buf[offset + i] = parsed                                                                                   // 520
  }                                                                                                            // 521
  return i                                                                                                     // 522
}                                                                                                              // 523
                                                                                                               // 524
function utf8Write (buf, string, offset, length) {                                                             // 525
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)                             // 526
}                                                                                                              // 527
                                                                                                               // 528
function asciiWrite (buf, string, offset, length) {                                                            // 529
  return blitBuffer(asciiToBytes(string), buf, offset, length)                                                 // 530
}                                                                                                              // 531
                                                                                                               // 532
function binaryWrite (buf, string, offset, length) {                                                           // 533
  return asciiWrite(buf, string, offset, length)                                                               // 534
}                                                                                                              // 535
                                                                                                               // 536
function base64Write (buf, string, offset, length) {                                                           // 537
  return blitBuffer(base64ToBytes(string), buf, offset, length)                                                // 538
}                                                                                                              // 539
                                                                                                               // 540
function ucs2Write (buf, string, offset, length) {                                                             // 541
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)                          // 542
}                                                                                                              // 543
                                                                                                               // 544
Buffer.prototype.write = function write (string, offset, length, encoding) {                                   // 545
  // Buffer#write(string)                                                                                      // 546
  if (offset === undefined) {                                                                                  // 547
    encoding = 'utf8'                                                                                          // 548
    length = this.length                                                                                       // 549
    offset = 0                                                                                                 // 550
  // Buffer#write(string, encoding)                                                                            // 551
  } else if (length === undefined && typeof offset === 'string') {                                             // 552
    encoding = offset                                                                                          // 553
    length = this.length                                                                                       // 554
    offset = 0                                                                                                 // 555
  // Buffer#write(string, offset[, length][, encoding])                                                        // 556
  } else if (isFinite(offset)) {                                                                               // 557
    offset = offset | 0                                                                                        // 558
    if (isFinite(length)) {                                                                                    // 559
      length = length | 0                                                                                      // 560
      if (encoding === undefined) encoding = 'utf8'                                                            // 561
    } else {                                                                                                   // 562
      encoding = length                                                                                        // 563
      length = undefined                                                                                       // 564
    }                                                                                                          // 565
  // legacy write(string, encoding, offset, length) - remove in v0.13                                          // 566
  } else {                                                                                                     // 567
    var swap = encoding                                                                                        // 568
    encoding = offset                                                                                          // 569
    offset = length | 0                                                                                        // 570
    length = swap                                                                                              // 571
  }                                                                                                            // 572
                                                                                                               // 573
  var remaining = this.length - offset                                                                         // 574
  if (length === undefined || length > remaining) length = remaining                                           // 575
                                                                                                               // 576
  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {                             // 577
    throw new RangeError('attempt to write outside buffer bounds')                                             // 578
  }                                                                                                            // 579
                                                                                                               // 580
  if (!encoding) encoding = 'utf8'                                                                             // 581
                                                                                                               // 582
  var loweredCase = false                                                                                      // 583
  for (;;) {                                                                                                   // 584
    switch (encoding) {                                                                                        // 585
      case 'hex':                                                                                              // 586
        return hexWrite(this, string, offset, length)                                                          // 587
                                                                                                               // 588
      case 'utf8':                                                                                             // 589
      case 'utf-8':                                                                                            // 590
        return utf8Write(this, string, offset, length)                                                         // 591
                                                                                                               // 592
      case 'ascii':                                                                                            // 593
        return asciiWrite(this, string, offset, length)                                                        // 594
                                                                                                               // 595
      case 'binary':                                                                                           // 596
        return binaryWrite(this, string, offset, length)                                                       // 597
                                                                                                               // 598
      case 'base64':                                                                                           // 599
        // Warning: maxLength not taken into account in base64Write                                            // 600
        return base64Write(this, string, offset, length)                                                       // 601
                                                                                                               // 602
      case 'ucs2':                                                                                             // 603
      case 'ucs-2':                                                                                            // 604
      case 'utf16le':                                                                                          // 605
      case 'utf-16le':                                                                                         // 606
        return ucs2Write(this, string, offset, length)                                                         // 607
                                                                                                               // 608
      default:                                                                                                 // 609
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                  // 610
        encoding = ('' + encoding).toLowerCase()                                                               // 611
        loweredCase = true                                                                                     // 612
    }                                                                                                          // 613
  }                                                                                                            // 614
}                                                                                                              // 615
                                                                                                               // 616
Buffer.prototype.toJSON = function toJSON () {                                                                 // 617
  return {                                                                                                     // 618
    type: 'Buffer',                                                                                            // 619
    data: Array.prototype.slice.call(this._arr || this, 0)                                                     // 620
  }                                                                                                            // 621
}                                                                                                              // 622
                                                                                                               // 623
function base64Slice (buf, start, end) {                                                                       // 624
  if (start === 0 && end === buf.length) {                                                                     // 625
    return base64.fromByteArray(buf)                                                                           // 626
  } else {                                                                                                     // 627
    return base64.fromByteArray(buf.slice(start, end))                                                         // 628
  }                                                                                                            // 629
}                                                                                                              // 630
                                                                                                               // 631
function utf8Slice (buf, start, end) {                                                                         // 632
  end = Math.min(buf.length, end)                                                                              // 633
  var res = []                                                                                                 // 634
                                                                                                               // 635
  var i = start                                                                                                // 636
  while (i < end) {                                                                                            // 637
    var firstByte = buf[i]                                                                                     // 638
    var codePoint = null                                                                                       // 639
    var bytesPerSequence = (firstByte > 0xEF) ? 4                                                              // 640
      : (firstByte > 0xDF) ? 3                                                                                 // 641
      : (firstByte > 0xBF) ? 2                                                                                 // 642
      : 1                                                                                                      // 643
                                                                                                               // 644
    if (i + bytesPerSequence <= end) {                                                                         // 645
      var secondByte, thirdByte, fourthByte, tempCodePoint                                                     // 646
                                                                                                               // 647
      switch (bytesPerSequence) {                                                                              // 648
        case 1:                                                                                                // 649
          if (firstByte < 0x80) {                                                                              // 650
            codePoint = firstByte                                                                              // 651
          }                                                                                                    // 652
          break                                                                                                // 653
        case 2:                                                                                                // 654
          secondByte = buf[i + 1]                                                                              // 655
          if ((secondByte & 0xC0) === 0x80) {                                                                  // 656
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)                                    // 657
            if (tempCodePoint > 0x7F) {                                                                        // 658
              codePoint = tempCodePoint                                                                        // 659
            }                                                                                                  // 660
          }                                                                                                    // 661
          break                                                                                                // 662
        case 3:                                                                                                // 663
          secondByte = buf[i + 1]                                                                              // 664
          thirdByte = buf[i + 2]                                                                               // 665
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {                                   // 666
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)         // 667
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {                 // 668
              codePoint = tempCodePoint                                                                        // 669
            }                                                                                                  // 670
          }                                                                                                    // 671
          break                                                                                                // 672
        case 4:                                                                                                // 673
          secondByte = buf[i + 1]                                                                              // 674
          thirdByte = buf[i + 2]                                                                               // 675
          fourthByte = buf[i + 3]                                                                              // 676
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {   // 677
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {                                          // 679
              codePoint = tempCodePoint                                                                        // 680
            }                                                                                                  // 681
          }                                                                                                    // 682
      }                                                                                                        // 683
    }                                                                                                          // 684
                                                                                                               // 685
    if (codePoint === null) {                                                                                  // 686
      // we did not generate a valid codePoint so insert a                                                     // 687
      // replacement char (U+FFFD) and advance only 1 byte                                                     // 688
      codePoint = 0xFFFD                                                                                       // 689
      bytesPerSequence = 1                                                                                     // 690
    } else if (codePoint > 0xFFFF) {                                                                           // 691
      // encode to utf16 (surrogate pair dance)                                                                // 692
      codePoint -= 0x10000                                                                                     // 693
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)                                                              // 694
      codePoint = 0xDC00 | codePoint & 0x3FF                                                                   // 695
    }                                                                                                          // 696
                                                                                                               // 697
    res.push(codePoint)                                                                                        // 698
    i += bytesPerSequence                                                                                      // 699
  }                                                                                                            // 700
                                                                                                               // 701
  return decodeCodePointsArray(res)                                                                            // 702
}                                                                                                              // 703
                                                                                                               // 704
// Based on http://stackoverflow.com/a/22747272/680742, the browser with                                       // 705
// the lowest limit is Chrome, with 0x10000 args.                                                              // 706
// We go 1 magnitude less, for safety                                                                          // 707
var MAX_ARGUMENTS_LENGTH = 0x1000                                                                              // 708
                                                                                                               // 709
function decodeCodePointsArray (codePoints) {                                                                  // 710
  var len = codePoints.length                                                                                  // 711
  if (len <= MAX_ARGUMENTS_LENGTH) {                                                                           // 712
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()                                // 713
  }                                                                                                            // 714
                                                                                                               // 715
  // Decode in chunks to avoid "call stack size exceeded".                                                     // 716
  var res = ''                                                                                                 // 717
  var i = 0                                                                                                    // 718
  while (i < len) {                                                                                            // 719
    res += String.fromCharCode.apply(                                                                          // 720
      String,                                                                                                  // 721
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)                                                           // 722
    )                                                                                                          // 723
  }                                                                                                            // 724
  return res                                                                                                   // 725
}                                                                                                              // 726
                                                                                                               // 727
function asciiSlice (buf, start, end) {                                                                        // 728
  var ret = ''                                                                                                 // 729
  end = Math.min(buf.length, end)                                                                              // 730
                                                                                                               // 731
  for (var i = start; i < end; i++) {                                                                          // 732
    ret += String.fromCharCode(buf[i] & 0x7F)                                                                  // 733
  }                                                                                                            // 734
  return ret                                                                                                   // 735
}                                                                                                              // 736
                                                                                                               // 737
function binarySlice (buf, start, end) {                                                                       // 738
  var ret = ''                                                                                                 // 739
  end = Math.min(buf.length, end)                                                                              // 740
                                                                                                               // 741
  for (var i = start; i < end; i++) {                                                                          // 742
    ret += String.fromCharCode(buf[i])                                                                         // 743
  }                                                                                                            // 744
  return ret                                                                                                   // 745
}                                                                                                              // 746
                                                                                                               // 747
function hexSlice (buf, start, end) {                                                                          // 748
  var len = buf.length                                                                                         // 749
                                                                                                               // 750
  if (!start || start < 0) start = 0                                                                           // 751
  if (!end || end < 0 || end > len) end = len                                                                  // 752
                                                                                                               // 753
  var out = ''                                                                                                 // 754
  for (var i = start; i < end; i++) {                                                                          // 755
    out += toHex(buf[i])                                                                                       // 756
  }                                                                                                            // 757
  return out                                                                                                   // 758
}                                                                                                              // 759
                                                                                                               // 760
function utf16leSlice (buf, start, end) {                                                                      // 761
  var bytes = buf.slice(start, end)                                                                            // 762
  var res = ''                                                                                                 // 763
  for (var i = 0; i < bytes.length; i += 2) {                                                                  // 764
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)                                                  // 765
  }                                                                                                            // 766
  return res                                                                                                   // 767
}                                                                                                              // 768
                                                                                                               // 769
Buffer.prototype.slice = function slice (start, end) {                                                         // 770
  var len = this.length                                                                                        // 771
  start = ~~start                                                                                              // 772
  end = end === undefined ? len : ~~end                                                                        // 773
                                                                                                               // 774
  if (start < 0) {                                                                                             // 775
    start += len                                                                                               // 776
    if (start < 0) start = 0                                                                                   // 777
  } else if (start > len) {                                                                                    // 778
    start = len                                                                                                // 779
  }                                                                                                            // 780
                                                                                                               // 781
  if (end < 0) {                                                                                               // 782
    end += len                                                                                                 // 783
    if (end < 0) end = 0                                                                                       // 784
  } else if (end > len) {                                                                                      // 785
    end = len                                                                                                  // 786
  }                                                                                                            // 787
                                                                                                               // 788
  if (end < start) end = start                                                                                 // 789
                                                                                                               // 790
  var newBuf                                                                                                   // 791
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                            // 792
    newBuf = this.subarray(start, end)                                                                         // 793
    newBuf.__proto__ = Buffer.prototype                                                                        // 794
  } else {                                                                                                     // 795
    var sliceLen = end - start                                                                                 // 796
    newBuf = new Buffer(sliceLen, undefined)                                                                   // 797
    for (var i = 0; i < sliceLen; i++) {                                                                       // 798
      newBuf[i] = this[i + start]                                                                              // 799
    }                                                                                                          // 800
  }                                                                                                            // 801
                                                                                                               // 802
  if (newBuf.length) newBuf.parent = this.parent || this                                                       // 803
                                                                                                               // 804
  return newBuf                                                                                                // 805
}                                                                                                              // 806
                                                                                                               // 807
/*                                                                                                             // 808
 * Need to make sure that buffer isn't trying to write out of bounds.                                          // 809
 */                                                                                                            // 810
function checkOffset (offset, ext, length) {                                                                   // 811
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')                             // 812
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')                     // 813
}                                                                                                              // 814
                                                                                                               // 815
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {                             // 816
  offset = offset | 0                                                                                          // 817
  byteLength = byteLength | 0                                                                                  // 818
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                  // 819
                                                                                                               // 820
  var val = this[offset]                                                                                       // 821
  var mul = 1                                                                                                  // 822
  var i = 0                                                                                                    // 823
  while (++i < byteLength && (mul *= 0x100)) {                                                                 // 824
    val += this[offset + i] * mul                                                                              // 825
  }                                                                                                            // 826
                                                                                                               // 827
  return val                                                                                                   // 828
}                                                                                                              // 829
                                                                                                               // 830
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {                             // 831
  offset = offset | 0                                                                                          // 832
  byteLength = byteLength | 0                                                                                  // 833
  if (!noAssert) {                                                                                             // 834
    checkOffset(offset, byteLength, this.length)                                                               // 835
  }                                                                                                            // 836
                                                                                                               // 837
  var val = this[offset + --byteLength]                                                                        // 838
  var mul = 1                                                                                                  // 839
  while (byteLength > 0 && (mul *= 0x100)) {                                                                   // 840
    val += this[offset + --byteLength] * mul                                                                   // 841
  }                                                                                                            // 842
                                                                                                               // 843
  return val                                                                                                   // 844
}                                                                                                              // 845
                                                                                                               // 846
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {                                           // 847
  if (!noAssert) checkOffset(offset, 1, this.length)                                                           // 848
  return this[offset]                                                                                          // 849
}                                                                                                              // 850
                                                                                                               // 851
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {                                     // 852
  if (!noAssert) checkOffset(offset, 2, this.length)                                                           // 853
  return this[offset] | (this[offset + 1] << 8)                                                                // 854
}                                                                                                              // 855
                                                                                                               // 856
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {                                     // 857
  if (!noAssert) checkOffset(offset, 2, this.length)                                                           // 858
  return (this[offset] << 8) | this[offset + 1]                                                                // 859
}                                                                                                              // 860
                                                                                                               // 861
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {                                     // 862
  if (!noAssert) checkOffset(offset, 4, this.length)                                                           // 863
                                                                                                               // 864
  return ((this[offset]) |                                                                                     // 865
      (this[offset + 1] << 8) |                                                                                // 866
      (this[offset + 2] << 16)) +                                                                              // 867
      (this[offset + 3] * 0x1000000)                                                                           // 868
}                                                                                                              // 869
                                                                                                               // 870
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {                                     // 871
  if (!noAssert) checkOffset(offset, 4, this.length)                                                           // 872
                                                                                                               // 873
  return (this[offset] * 0x1000000) +                                                                          // 874
    ((this[offset + 1] << 16) |                                                                                // 875
    (this[offset + 2] << 8) |                                                                                  // 876
    this[offset + 3])                                                                                          // 877
}                                                                                                              // 878
                                                                                                               // 879
Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {                               // 880
  offset = offset | 0                                                                                          // 881
  byteLength = byteLength | 0                                                                                  // 882
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                  // 883
                                                                                                               // 884
  var val = this[offset]                                                                                       // 885
  var mul = 1                                                                                                  // 886
  var i = 0                                                                                                    // 887
  while (++i < byteLength && (mul *= 0x100)) {                                                                 // 888
    val += this[offset + i] * mul                                                                              // 889
  }                                                                                                            // 890
  mul *= 0x80                                                                                                  // 891
                                                                                                               // 892
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                           // 893
                                                                                                               // 894
  return val                                                                                                   // 895
}                                                                                                              // 896
                                                                                                               // 897
Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {                               // 898
  offset = offset | 0                                                                                          // 899
  byteLength = byteLength | 0                                                                                  // 900
  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                  // 901
                                                                                                               // 902
  var i = byteLength                                                                                           // 903
  var mul = 1                                                                                                  // 904
  var val = this[offset + --i]                                                                                 // 905
  while (i > 0 && (mul *= 0x100)) {                                                                            // 906
    val += this[offset + --i] * mul                                                                            // 907
  }                                                                                                            // 908
  mul *= 0x80                                                                                                  // 909
                                                                                                               // 910
  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                           // 911
                                                                                                               // 912
  return val                                                                                                   // 913
}                                                                                                              // 914
                                                                                                               // 915
Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {                                             // 916
  if (!noAssert) checkOffset(offset, 1, this.length)                                                           // 917
  if (!(this[offset] & 0x80)) return (this[offset])                                                            // 918
  return ((0xff - this[offset] + 1) * -1)                                                                      // 919
}                                                                                                              // 920
                                                                                                               // 921
Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {                                       // 922
  if (!noAssert) checkOffset(offset, 2, this.length)                                                           // 923
  var val = this[offset] | (this[offset + 1] << 8)                                                             // 924
  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                               // 925
}                                                                                                              // 926
                                                                                                               // 927
Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {                                       // 928
  if (!noAssert) checkOffset(offset, 2, this.length)                                                           // 929
  var val = this[offset + 1] | (this[offset] << 8)                                                             // 930
  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                               // 931
}                                                                                                              // 932
                                                                                                               // 933
Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {                                       // 934
  if (!noAssert) checkOffset(offset, 4, this.length)                                                           // 935
                                                                                                               // 936
  return (this[offset]) |                                                                                      // 937
    (this[offset + 1] << 8) |                                                                                  // 938
    (this[offset + 2] << 16) |                                                                                 // 939
    (this[offset + 3] << 24)                                                                                   // 940
}                                                                                                              // 941
                                                                                                               // 942
Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {                                       // 943
  if (!noAssert) checkOffset(offset, 4, this.length)                                                           // 944
                                                                                                               // 945
  return (this[offset] << 24) |                                                                                // 946
    (this[offset + 1] << 16) |                                                                                 // 947
    (this[offset + 2] << 8) |                                                                                  // 948
    (this[offset + 3])                                                                                         // 949
}                                                                                                              // 950
                                                                                                               // 951
Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {                                       // 952
  if (!noAssert) checkOffset(offset, 4, this.length)                                                           // 953
  return ieee754.read(this, offset, true, 23, 4)                                                               // 954
}                                                                                                              // 955
                                                                                                               // 956
Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {                                       // 957
  if (!noAssert) checkOffset(offset, 4, this.length)                                                           // 958
  return ieee754.read(this, offset, false, 23, 4)                                                              // 959
}                                                                                                              // 960
                                                                                                               // 961
Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {                                     // 962
  if (!noAssert) checkOffset(offset, 8, this.length)                                                           // 963
  return ieee754.read(this, offset, true, 52, 8)                                                               // 964
}                                                                                                              // 965
                                                                                                               // 966
Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {                                     // 967
  if (!noAssert) checkOffset(offset, 8, this.length)                                                           // 968
  return ieee754.read(this, offset, false, 52, 8)                                                              // 969
}                                                                                                              // 970
                                                                                                               // 971
function checkInt (buf, value, offset, ext, max, min) {                                                        // 972
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')                           // 973
  if (value > max || value < min) throw new RangeError('value is out of bounds')                               // 974
  if (offset + ext > buf.length) throw new RangeError('index out of range')                                    // 975
}                                                                                                              // 976
                                                                                                               // 977
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {                    // 978
  value = +value                                                                                               // 979
  offset = offset | 0                                                                                          // 980
  byteLength = byteLength | 0                                                                                  // 981
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                     // 982
                                                                                                               // 983
  var mul = 1                                                                                                  // 984
  var i = 0                                                                                                    // 985
  this[offset] = value & 0xFF                                                                                  // 986
  while (++i < byteLength && (mul *= 0x100)) {                                                                 // 987
    this[offset + i] = (value / mul) & 0xFF                                                                    // 988
  }                                                                                                            // 989
                                                                                                               // 990
  return offset + byteLength                                                                                   // 991
}                                                                                                              // 992
                                                                                                               // 993
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {                    // 994
  value = +value                                                                                               // 995
  offset = offset | 0                                                                                          // 996
  byteLength = byteLength | 0                                                                                  // 997
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                     // 998
                                                                                                               // 999
  var i = byteLength - 1                                                                                       // 1000
  var mul = 1                                                                                                  // 1001
  this[offset + i] = value & 0xFF                                                                              // 1002
  while (--i >= 0 && (mul *= 0x100)) {                                                                         // 1003
    this[offset + i] = (value / mul) & 0xFF                                                                    // 1004
  }                                                                                                            // 1005
                                                                                                               // 1006
  return offset + byteLength                                                                                   // 1007
}                                                                                                              // 1008
                                                                                                               // 1009
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {                                  // 1010
  value = +value                                                                                               // 1011
  offset = offset | 0                                                                                          // 1012
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)                                                     // 1013
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                   // 1014
  this[offset] = (value & 0xff)                                                                                // 1015
  return offset + 1                                                                                            // 1016
}                                                                                                              // 1017
                                                                                                               // 1018
function objectWriteUInt16 (buf, value, offset, littleEndian) {                                                // 1019
  if (value < 0) value = 0xffff + value + 1                                                                    // 1020
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {                                          // 1021
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                                 // 1022
      (littleEndian ? i : 1 - i) * 8                                                                           // 1023
  }                                                                                                            // 1024
}                                                                                                              // 1025
                                                                                                               // 1026
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {                            // 1027
  value = +value                                                                                               // 1028
  offset = offset | 0                                                                                          // 1029
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                   // 1030
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                            // 1031
    this[offset] = (value & 0xff)                                                                              // 1032
    this[offset + 1] = (value >>> 8)                                                                           // 1033
  } else {                                                                                                     // 1034
    objectWriteUInt16(this, value, offset, true)                                                               // 1035
  }                                                                                                            // 1036
  return offset + 2                                                                                            // 1037
}                                                                                                              // 1038
                                                                                                               // 1039
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {                            // 1040
  value = +value                                                                                               // 1041
  offset = offset | 0                                                                                          // 1042
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                   // 1043
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                            // 1044
    this[offset] = (value >>> 8)                                                                               // 1045
    this[offset + 1] = (value & 0xff)                                                                          // 1046
  } else {                                                                                                     // 1047
    objectWriteUInt16(this, value, offset, false)                                                              // 1048
  }                                                                                                            // 1049
  return offset + 2                                                                                            // 1050
}                                                                                                              // 1051
                                                                                                               // 1052
function objectWriteUInt32 (buf, value, offset, littleEndian) {                                                // 1053
  if (value < 0) value = 0xffffffff + value + 1                                                                // 1054
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {                                          // 1055
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                        // 1056
  }                                                                                                            // 1057
}                                                                                                              // 1058
                                                                                                               // 1059
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {                            // 1060
  value = +value                                                                                               // 1061
  offset = offset | 0                                                                                          // 1062
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                               // 1063
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                            // 1064
    this[offset + 3] = (value >>> 24)                                                                          // 1065
    this[offset + 2] = (value >>> 16)                                                                          // 1066
    this[offset + 1] = (value >>> 8)                                                                           // 1067
    this[offset] = (value & 0xff)                                                                              // 1068
  } else {                                                                                                     // 1069
    objectWriteUInt32(this, value, offset, true)                                                               // 1070
  }                                                                                                            // 1071
  return offset + 4                                                                                            // 1072
}                                                                                                              // 1073
                                                                                                               // 1074
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {                            // 1075
  value = +value                                                                                               // 1076
  offset = offset | 0                                                                                          // 1077
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                               // 1078
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                            // 1079
    this[offset] = (value >>> 24)                                                                              // 1080
    this[offset + 1] = (value >>> 16)                                                                          // 1081
    this[offset + 2] = (value >>> 8)                                                                           // 1082
    this[offset + 3] = (value & 0xff)                                                                          // 1083
  } else {                                                                                                     // 1084
    objectWriteUInt32(this, value, offset, false)                                                              // 1085
  }                                                                                                            // 1086
  return offset + 4                                                                                            // 1087
}                                                                                                              // 1088
                                                                                                               // 1089
Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {                      // 1090
  value = +value                                                                                               // 1091
  offset = offset | 0                                                                                          // 1092
  if (!noAssert) {                                                                                             // 1093
    var limit = Math.pow(2, 8 * byteLength - 1)                                                                // 1094
                                                                                                               // 1095
    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                               // 1096
  }                                                                                                            // 1097
                                                                                                               // 1098
  var i = 0                                                                                                    // 1099
  var mul = 1                                                                                                  // 1100
  var sub = value < 0 ? 1 : 0                                                                                  // 1101
  this[offset] = value & 0xFF                                                                                  // 1102
  while (++i < byteLength && (mul *= 0x100)) {                                                                 // 1103
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                       // 1104
  }                                                                                                            // 1105
                                                                                                               // 1106
  return offset + byteLength                                                                                   // 1107
}                                                                                                              // 1108
                                                                                                               // 1109
Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {                      // 1110
  value = +value                                                                                               // 1111
  offset = offset | 0                                                                                          // 1112
  if (!noAssert) {                                                                                             // 1113
    var limit = Math.pow(2, 8 * byteLength - 1)                                                                // 1114
                                                                                                               // 1115
    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                               // 1116
  }                                                                                                            // 1117
                                                                                                               // 1118
  var i = byteLength - 1                                                                                       // 1119
  var mul = 1                                                                                                  // 1120
  var sub = value < 0 ? 1 : 0                                                                                  // 1121
  this[offset + i] = value & 0xFF                                                                              // 1122
  while (--i >= 0 && (mul *= 0x100)) {                                                                         // 1123
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                       // 1124
  }                                                                                                            // 1125
                                                                                                               // 1126
  return offset + byteLength                                                                                   // 1127
}                                                                                                              // 1128
                                                                                                               // 1129
Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {                                    // 1130
  value = +value                                                                                               // 1131
  offset = offset | 0                                                                                          // 1132
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)                                                 // 1133
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                   // 1134
  if (value < 0) value = 0xff + value + 1                                                                      // 1135
  this[offset] = (value & 0xff)                                                                                // 1136
  return offset + 1                                                                                            // 1137
}                                                                                                              // 1138
                                                                                                               // 1139
Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {                              // 1140
  value = +value                                                                                               // 1141
  offset = offset | 0                                                                                          // 1142
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                             // 1143
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                            // 1144
    this[offset] = (value & 0xff)                                                                              // 1145
    this[offset + 1] = (value >>> 8)                                                                           // 1146
  } else {                                                                                                     // 1147
    objectWriteUInt16(this, value, offset, true)                                                               // 1148
  }                                                                                                            // 1149
  return offset + 2                                                                                            // 1150
}                                                                                                              // 1151
                                                                                                               // 1152
Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {                              // 1153
  value = +value                                                                                               // 1154
  offset = offset | 0                                                                                          // 1155
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                             // 1156
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                            // 1157
    this[offset] = (value >>> 8)                                                                               // 1158
    this[offset + 1] = (value & 0xff)                                                                          // 1159
  } else {                                                                                                     // 1160
    objectWriteUInt16(this, value, offset, false)                                                              // 1161
  }                                                                                                            // 1162
  return offset + 2                                                                                            // 1163
}                                                                                                              // 1164
                                                                                                               // 1165
Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {                              // 1166
  value = +value                                                                                               // 1167
  offset = offset | 0                                                                                          // 1168
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                     // 1169
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                            // 1170
    this[offset] = (value & 0xff)                                                                              // 1171
    this[offset + 1] = (value >>> 8)                                                                           // 1172
    this[offset + 2] = (value >>> 16)                                                                          // 1173
    this[offset + 3] = (value >>> 24)                                                                          // 1174
  } else {                                                                                                     // 1175
    objectWriteUInt32(this, value, offset, true)                                                               // 1176
  }                                                                                                            // 1177
  return offset + 4                                                                                            // 1178
}                                                                                                              // 1179
                                                                                                               // 1180
Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {                              // 1181
  value = +value                                                                                               // 1182
  offset = offset | 0                                                                                          // 1183
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                     // 1184
  if (value < 0) value = 0xffffffff + value + 1                                                                // 1185
  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                            // 1186
    this[offset] = (value >>> 24)                                                                              // 1187
    this[offset + 1] = (value >>> 16)                                                                          // 1188
    this[offset + 2] = (value >>> 8)                                                                           // 1189
    this[offset + 3] = (value & 0xff)                                                                          // 1190
  } else {                                                                                                     // 1191
    objectWriteUInt32(this, value, offset, false)                                                              // 1192
  }                                                                                                            // 1193
  return offset + 4                                                                                            // 1194
}                                                                                                              // 1195
                                                                                                               // 1196
function checkIEEE754 (buf, value, offset, ext, max, min) {                                                    // 1197
  if (offset + ext > buf.length) throw new RangeError('index out of range')                                    // 1198
  if (offset < 0) throw new RangeError('index out of range')                                                   // 1199
}                                                                                                              // 1200
                                                                                                               // 1201
function writeFloat (buf, value, offset, littleEndian, noAssert) {                                             // 1202
  if (!noAssert) {                                                                                             // 1203
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)                       // 1204
  }                                                                                                            // 1205
  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                       // 1206
  return offset + 4                                                                                            // 1207
}                                                                                                              // 1208
                                                                                                               // 1209
Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {                              // 1210
  return writeFloat(this, value, offset, true, noAssert)                                                       // 1211
}                                                                                                              // 1212
                                                                                                               // 1213
Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {                              // 1214
  return writeFloat(this, value, offset, false, noAssert)                                                      // 1215
}                                                                                                              // 1216
                                                                                                               // 1217
function writeDouble (buf, value, offset, littleEndian, noAssert) {                                            // 1218
  if (!noAssert) {                                                                                             // 1219
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)                     // 1220
  }                                                                                                            // 1221
  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                       // 1222
  return offset + 8                                                                                            // 1223
}                                                                                                              // 1224
                                                                                                               // 1225
Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {                            // 1226
  return writeDouble(this, value, offset, true, noAssert)                                                      // 1227
}                                                                                                              // 1228
                                                                                                               // 1229
Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {                            // 1230
  return writeDouble(this, value, offset, false, noAssert)                                                     // 1231
}                                                                                                              // 1232
                                                                                                               // 1233
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)                                   // 1234
Buffer.prototype.copy = function copy (target, targetStart, start, end) {                                      // 1235
  if (!start) start = 0                                                                                        // 1236
  if (!end && end !== 0) end = this.length                                                                     // 1237
  if (targetStart >= target.length) targetStart = target.length                                                // 1238
  if (!targetStart) targetStart = 0                                                                            // 1239
  if (end > 0 && end < start) end = start                                                                      // 1240
                                                                                                               // 1241
  // Copy 0 bytes; we're done                                                                                  // 1242
  if (end === start) return 0                                                                                  // 1243
  if (target.length === 0 || this.length === 0) return 0                                                       // 1244
                                                                                                               // 1245
  // Fatal error conditions                                                                                    // 1246
  if (targetStart < 0) {                                                                                       // 1247
    throw new RangeError('targetStart out of bounds')                                                          // 1248
  }                                                                                                            // 1249
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')                     // 1250
  if (end < 0) throw new RangeError('sourceEnd out of bounds')                                                 // 1251
                                                                                                               // 1252
  // Are we oob?                                                                                               // 1253
  if (end > this.length) end = this.length                                                                     // 1254
  if (target.length - targetStart < end - start) {                                                             // 1255
    end = target.length - targetStart + start                                                                  // 1256
  }                                                                                                            // 1257
                                                                                                               // 1258
  var len = end - start                                                                                        // 1259
  var i                                                                                                        // 1260
                                                                                                               // 1261
  if (this === target && start < targetStart && targetStart < end) {                                           // 1262
    // descending copy from end                                                                                // 1263
    for (i = len - 1; i >= 0; i--) {                                                                           // 1264
      target[i + targetStart] = this[i + start]                                                                // 1265
    }                                                                                                          // 1266
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {                                                      // 1267
    // ascending copy from start                                                                               // 1268
    for (i = 0; i < len; i++) {                                                                                // 1269
      target[i + targetStart] = this[i + start]                                                                // 1270
    }                                                                                                          // 1271
  } else {                                                                                                     // 1272
    Uint8Array.prototype.set.call(                                                                             // 1273
      target,                                                                                                  // 1274
      this.subarray(start, start + len),                                                                       // 1275
      targetStart                                                                                              // 1276
    )                                                                                                          // 1277
  }                                                                                                            // 1278
                                                                                                               // 1279
  return len                                                                                                   // 1280
}                                                                                                              // 1281
                                                                                                               // 1282
// fill(value, start=0, end=buffer.length)                                                                     // 1283
Buffer.prototype.fill = function fill (value, start, end) {                                                    // 1284
  if (!value) value = 0                                                                                        // 1285
  if (!start) start = 0                                                                                        // 1286
  if (!end) end = this.length                                                                                  // 1287
                                                                                                               // 1288
  if (end < start) throw new RangeError('end < start')                                                         // 1289
                                                                                                               // 1290
  // Fill 0 bytes; we're done                                                                                  // 1291
  if (end === start) return                                                                                    // 1292
  if (this.length === 0) return                                                                                // 1293
                                                                                                               // 1294
  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')                           // 1295
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')                                  // 1296
                                                                                                               // 1297
  var i                                                                                                        // 1298
  if (typeof value === 'number') {                                                                             // 1299
    for (i = start; i < end; i++) {                                                                            // 1300
      this[i] = value                                                                                          // 1301
    }                                                                                                          // 1302
  } else {                                                                                                     // 1303
    var bytes = utf8ToBytes(value.toString())                                                                  // 1304
    var len = bytes.length                                                                                     // 1305
    for (i = start; i < end; i++) {                                                                            // 1306
      this[i] = bytes[i % len]                                                                                 // 1307
    }                                                                                                          // 1308
  }                                                                                                            // 1309
                                                                                                               // 1310
  return this                                                                                                  // 1311
}                                                                                                              // 1312
                                                                                                               // 1313
// HELPER FUNCTIONS                                                                                            // 1314
// ================                                                                                            // 1315
                                                                                                               // 1316
var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g                                                                   // 1317
                                                                                                               // 1318
function base64clean (str) {                                                                                   // 1319
  // Node strips out invalid characters like \n and \t from the string, base64-js does not                     // 1320
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')                                                         // 1321
  // Node converts strings with length < 2 to ''                                                               // 1322
  if (str.length < 2) return ''                                                                                // 1323
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not                      // 1324
  while (str.length % 4 !== 0) {                                                                               // 1325
    str = str + '='                                                                                            // 1326
  }                                                                                                            // 1327
  return str                                                                                                   // 1328
}                                                                                                              // 1329
                                                                                                               // 1330
function stringtrim (str) {                                                                                    // 1331
  if (str.trim) return str.trim()                                                                              // 1332
  return str.replace(/^\s+|\s+$/g, '')                                                                         // 1333
}                                                                                                              // 1334
                                                                                                               // 1335
function toHex (n) {                                                                                           // 1336
  if (n < 16) return '0' + n.toString(16)                                                                      // 1337
  return n.toString(16)                                                                                        // 1338
}                                                                                                              // 1339
                                                                                                               // 1340
function utf8ToBytes (string, units) {                                                                         // 1341
  units = units || Infinity                                                                                    // 1342
  var codePoint                                                                                                // 1343
  var length = string.length                                                                                   // 1344
  var leadSurrogate = null                                                                                     // 1345
  var bytes = []                                                                                               // 1346
                                                                                                               // 1347
  for (var i = 0; i < length; i++) {                                                                           // 1348
    codePoint = string.charCodeAt(i)                                                                           // 1349
                                                                                                               // 1350
    // is surrogate component                                                                                  // 1351
    if (codePoint > 0xD7FF && codePoint < 0xE000) {                                                            // 1352
      // last char was a lead                                                                                  // 1353
      if (!leadSurrogate) {                                                                                    // 1354
        // no lead yet                                                                                         // 1355
        if (codePoint > 0xDBFF) {                                                                              // 1356
          // unexpected trail                                                                                  // 1357
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                  // 1358
          continue                                                                                             // 1359
        } else if (i + 1 === length) {                                                                         // 1360
          // unpaired lead                                                                                     // 1361
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                  // 1362
          continue                                                                                             // 1363
        }                                                                                                      // 1364
                                                                                                               // 1365
        // valid lead                                                                                          // 1366
        leadSurrogate = codePoint                                                                              // 1367
                                                                                                               // 1368
        continue                                                                                               // 1369
      }                                                                                                        // 1370
                                                                                                               // 1371
      // 2 leads in a row                                                                                      // 1372
      if (codePoint < 0xDC00) {                                                                                // 1373
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                    // 1374
        leadSurrogate = codePoint                                                                              // 1375
        continue                                                                                               // 1376
      }                                                                                                        // 1377
                                                                                                               // 1378
      // valid surrogate pair                                                                                  // 1379
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000                                // 1380
    } else if (leadSurrogate) {                                                                                // 1381
      // valid bmp char, but last char was a lead                                                              // 1382
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                      // 1383
    }                                                                                                          // 1384
                                                                                                               // 1385
    leadSurrogate = null                                                                                       // 1386
                                                                                                               // 1387
    // encode utf8                                                                                             // 1388
    if (codePoint < 0x80) {                                                                                    // 1389
      if ((units -= 1) < 0) break                                                                              // 1390
      bytes.push(codePoint)                                                                                    // 1391
    } else if (codePoint < 0x800) {                                                                            // 1392
      if ((units -= 2) < 0) break                                                                              // 1393
      bytes.push(                                                                                              // 1394
        codePoint >> 0x6 | 0xC0,                                                                               // 1395
        codePoint & 0x3F | 0x80                                                                                // 1396
      )                                                                                                        // 1397
    } else if (codePoint < 0x10000) {                                                                          // 1398
      if ((units -= 3) < 0) break                                                                              // 1399
      bytes.push(                                                                                              // 1400
        codePoint >> 0xC | 0xE0,                                                                               // 1401
        codePoint >> 0x6 & 0x3F | 0x80,                                                                        // 1402
        codePoint & 0x3F | 0x80                                                                                // 1403
      )                                                                                                        // 1404
    } else if (codePoint < 0x110000) {                                                                         // 1405
      if ((units -= 4) < 0) break                                                                              // 1406
      bytes.push(                                                                                              // 1407
        codePoint >> 0x12 | 0xF0,                                                                              // 1408
        codePoint >> 0xC & 0x3F | 0x80,                                                                        // 1409
        codePoint >> 0x6 & 0x3F | 0x80,                                                                        // 1410
        codePoint & 0x3F | 0x80                                                                                // 1411
      )                                                                                                        // 1412
    } else {                                                                                                   // 1413
      throw new Error('Invalid code point')                                                                    // 1414
    }                                                                                                          // 1415
  }                                                                                                            // 1416
                                                                                                               // 1417
  return bytes                                                                                                 // 1418
}                                                                                                              // 1419
                                                                                                               // 1420
function asciiToBytes (str) {                                                                                  // 1421
  var byteArray = []                                                                                           // 1422
  for (var i = 0; i < str.length; i++) {                                                                       // 1423
    // Node's code seems to be doing this and not & 0x7F..                                                     // 1424
    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                   // 1425
  }                                                                                                            // 1426
  return byteArray                                                                                             // 1427
}                                                                                                              // 1428
                                                                                                               // 1429
function utf16leToBytes (str, units) {                                                                         // 1430
  var c, hi, lo                                                                                                // 1431
  var byteArray = []                                                                                           // 1432
  for (var i = 0; i < str.length; i++) {                                                                       // 1433
    if ((units -= 2) < 0) break                                                                                // 1434
                                                                                                               // 1435
    c = str.charCodeAt(i)                                                                                      // 1436
    hi = c >> 8                                                                                                // 1437
    lo = c % 256                                                                                               // 1438
    byteArray.push(lo)                                                                                         // 1439
    byteArray.push(hi)                                                                                         // 1440
  }                                                                                                            // 1441
                                                                                                               // 1442
  return byteArray                                                                                             // 1443
}                                                                                                              // 1444
                                                                                                               // 1445
function base64ToBytes (str) {                                                                                 // 1446
  return base64.toByteArray(base64clean(str))                                                                  // 1447
}                                                                                                              // 1448
                                                                                                               // 1449
function blitBuffer (src, dst, offset, length) {                                                               // 1450
  for (var i = 0; i < length; i++) {                                                                           // 1451
    if ((i + offset >= dst.length) || (i >= src.length)) break                                                 // 1452
    dst[i + offset] = src[i]                                                                                   // 1453
  }                                                                                                            // 1454
  return i                                                                                                     // 1455
}                                                                                                              // 1456
                                                                                                               // 1457
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"node_modules":{"base64-js":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/package.json                      //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
exports.name = "base64-js";                                                                                    // 1
exports.version = "1.1.2";                                                                                     // 2
exports.main = "lib/b64.js";                                                                                   // 3
                                                                                                               // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"b64.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/lib/b64.js                        //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
'use strict'                                                                                                   // 1
                                                                                                               // 2
exports.toByteArray = toByteArray                                                                              // 3
exports.fromByteArray = fromByteArray                                                                          // 4
                                                                                                               // 5
var lookup = []                                                                                                // 6
var revLookup = []                                                                                             // 7
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array                                               // 8
                                                                                                               // 9
function init () {                                                                                             // 10
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'                                // 11
  for (var i = 0, len = code.length; i < len; ++i) {                                                           // 12
    lookup[i] = code[i]                                                                                        // 13
    revLookup[code.charCodeAt(i)] = i                                                                          // 14
  }                                                                                                            // 15
                                                                                                               // 16
  revLookup['-'.charCodeAt(0)] = 62                                                                            // 17
  revLookup['_'.charCodeAt(0)] = 63                                                                            // 18
}                                                                                                              // 19
                                                                                                               // 20
init()                                                                                                         // 21
                                                                                                               // 22
function toByteArray (b64) {                                                                                   // 23
  var i, j, l, tmp, placeHolders, arr                                                                          // 24
  var len = b64.length                                                                                         // 25
                                                                                                               // 26
  if (len % 4 > 0) {                                                                                           // 27
    throw new Error('Invalid string. Length must be a multiple of 4')                                          // 28
  }                                                                                                            // 29
                                                                                                               // 30
  // the number of equal signs (place holders)                                                                 // 31
  // if there are two placeholders, than the two characters before it                                          // 32
  // represent one byte                                                                                        // 33
  // if there is only one, then the three characters before it represent 2 bytes                               // 34
  // this is just a cheap hack to not do indexOf twice                                                         // 35
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0                                       // 36
                                                                                                               // 37
  // base64 is 4/3 + up to two characters of the original data                                                 // 38
  arr = new Arr(len * 3 / 4 - placeHolders)                                                                    // 39
                                                                                                               // 40
  // if there are placeholders, only get up to the last complete 4 chars                                       // 41
  l = placeHolders > 0 ? len - 4 : len                                                                         // 42
                                                                                                               // 43
  var L = 0                                                                                                    // 44
                                                                                                               // 45
  for (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                  // 46
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF                                                                              // 48
    arr[L++] = (tmp >> 8) & 0xFF                                                                               // 49
    arr[L++] = tmp & 0xFF                                                                                      // 50
  }                                                                                                            // 51
                                                                                                               // 52
  if (placeHolders === 2) {                                                                                    // 53
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)                        // 54
    arr[L++] = tmp & 0xFF                                                                                      // 55
  } else if (placeHolders === 1) {                                                                             // 56
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF                                                                               // 58
    arr[L++] = tmp & 0xFF                                                                                      // 59
  }                                                                                                            // 60
                                                                                                               // 61
  return arr                                                                                                   // 62
}                                                                                                              // 63
                                                                                                               // 64
function tripletToBase64 (num) {                                                                               // 65
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]    // 66
}                                                                                                              // 67
                                                                                                               // 68
function encodeChunk (uint8, start, end) {                                                                     // 69
  var tmp                                                                                                      // 70
  var output = []                                                                                              // 71
  for (var i = start; i < end; i += 3) {                                                                       // 72
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                              // 73
    output.push(tripletToBase64(tmp))                                                                          // 74
  }                                                                                                            // 75
  return output.join('')                                                                                       // 76
}                                                                                                              // 77
                                                                                                               // 78
function fromByteArray (uint8) {                                                                               // 79
  var tmp                                                                                                      // 80
  var len = uint8.length                                                                                       // 81
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes                                              // 82
  var output = ''                                                                                              // 83
  var parts = []                                                                                               // 84
  var maxChunkLength = 16383 // must be multiple of 3                                                          // 85
                                                                                                               // 86
  // go through the array every three bytes, we'll deal with trailing stuff later                              // 87
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {                                    // 88
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))               // 89
  }                                                                                                            // 90
                                                                                                               // 91
  // pad the end with zeros, but make sure to not forget the extra bytes                                       // 92
  if (extraBytes === 1) {                                                                                      // 93
    tmp = uint8[len - 1]                                                                                       // 94
    output += lookup[tmp >> 2]                                                                                 // 95
    output += lookup[(tmp << 4) & 0x3F]                                                                        // 96
    output += '=='                                                                                             // 97
  } else if (extraBytes === 2) {                                                                               // 98
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])                                                             // 99
    output += lookup[tmp >> 10]                                                                                // 100
    output += lookup[(tmp >> 4) & 0x3F]                                                                        // 101
    output += lookup[(tmp << 2) & 0x3F]                                                                        // 102
    output += '='                                                                                              // 103
  }                                                                                                            // 104
                                                                                                               // 105
  parts.push(output)                                                                                           // 106
                                                                                                               // 107
  return parts.join('')                                                                                        // 108
}                                                                                                              // 109
                                                                                                               // 110
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"ieee754":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/package.json                        //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
exports.name = "ieee754";                                                                                      // 1
exports.version = "1.1.6";                                                                                     // 2
exports.main = "index.js";                                                                                     // 3
                                                                                                               // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/index.js                            //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
exports.read = function (buffer, offset, isLE, mLen, nBytes) {                                                 // 1
  var e, m                                                                                                     // 2
  var eLen = nBytes * 8 - mLen - 1                                                                             // 3
  var eMax = (1 << eLen) - 1                                                                                   // 4
  var eBias = eMax >> 1                                                                                        // 5
  var nBits = -7                                                                                               // 6
  var i = isLE ? (nBytes - 1) : 0                                                                              // 7
  var d = isLE ? -1 : 1                                                                                        // 8
  var s = buffer[offset + i]                                                                                   // 9
                                                                                                               // 10
  i += d                                                                                                       // 11
                                                                                                               // 12
  e = s & ((1 << (-nBits)) - 1)                                                                                // 13
  s >>= (-nBits)                                                                                               // 14
  nBits += eLen                                                                                                // 15
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                   // 16
                                                                                                               // 17
  m = e & ((1 << (-nBits)) - 1)                                                                                // 18
  e >>= (-nBits)                                                                                               // 19
  nBits += mLen                                                                                                // 20
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                   // 21
                                                                                                               // 22
  if (e === 0) {                                                                                               // 23
    e = 1 - eBias                                                                                              // 24
  } else if (e === eMax) {                                                                                     // 25
    return m ? NaN : ((s ? -1 : 1) * Infinity)                                                                 // 26
  } else {                                                                                                     // 27
    m = m + Math.pow(2, mLen)                                                                                  // 28
    e = e - eBias                                                                                              // 29
  }                                                                                                            // 30
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)                                                              // 31
}                                                                                                              // 32
                                                                                                               // 33
exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {                                         // 34
  var e, m, c                                                                                                  // 35
  var eLen = nBytes * 8 - mLen - 1                                                                             // 36
  var eMax = (1 << eLen) - 1                                                                                   // 37
  var eBias = eMax >> 1                                                                                        // 38
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)                                             // 39
  var i = isLE ? 0 : (nBytes - 1)                                                                              // 40
  var d = isLE ? 1 : -1                                                                                        // 41
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0                                                  // 42
                                                                                                               // 43
  value = Math.abs(value)                                                                                      // 44
                                                                                                               // 45
  if (isNaN(value) || value === Infinity) {                                                                    // 46
    m = isNaN(value) ? 1 : 0                                                                                   // 47
    e = eMax                                                                                                   // 48
  } else {                                                                                                     // 49
    e = Math.floor(Math.log(value) / Math.LN2)                                                                 // 50
    if (value * (c = Math.pow(2, -e)) < 1) {                                                                   // 51
      e--                                                                                                      // 52
      c *= 2                                                                                                   // 53
    }                                                                                                          // 54
    if (e + eBias >= 1) {                                                                                      // 55
      value += rt / c                                                                                          // 56
    } else {                                                                                                   // 57
      value += rt * Math.pow(2, 1 - eBias)                                                                     // 58
    }                                                                                                          // 59
    if (value * c >= 2) {                                                                                      // 60
      e++                                                                                                      // 61
      c /= 2                                                                                                   // 62
    }                                                                                                          // 63
                                                                                                               // 64
    if (e + eBias >= eMax) {                                                                                   // 65
      m = 0                                                                                                    // 66
      e = eMax                                                                                                 // 67
    } else if (e + eBias >= 1) {                                                                               // 68
      m = (value * c - 1) * Math.pow(2, mLen)                                                                  // 69
      e = e + eBias                                                                                            // 70
    } else {                                                                                                   // 71
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)                                                   // 72
      e = 0                                                                                                    // 73
    }                                                                                                          // 74
  }                                                                                                            // 75
                                                                                                               // 76
  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}                             // 77
                                                                                                               // 78
  e = (e << mLen) | m                                                                                          // 79
  eLen += mLen                                                                                                 // 80
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}                              // 81
                                                                                                               // 82
  buffer[offset + i - d] |= s * 128                                                                            // 83
}                                                                                                              // 84
                                                                                                               // 85
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"isarray":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/package.json                        //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
exports.name = "isarray";                                                                                      // 1
exports.version = "1.0.0";                                                                                     // 2
exports.main = "index.js";                                                                                     // 3
                                                                                                               // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/index.js                            //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
var toString = {}.toString;                                                                                    // 1
                                                                                                               // 2
module.exports = Array.isArray || function (arr) {                                                             // 3
  return toString.call(arr) == '[object Array]';                                                               // 4
};                                                                                                             // 5
                                                                                                               // 6
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"process":{"browser.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/node_modules/process/browser.js                                              //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
// shim for using process in browser                                                                           // 1
                                                                                                               // 2
var process = module.exports = {};                                                                             // 3
var queue = [];                                                                                                // 4
var draining = false;                                                                                          // 5
var currentQueue;                                                                                              // 6
var queueIndex = -1;                                                                                           // 7
                                                                                                               // 8
function cleanUpNextTick() {                                                                                   // 9
    draining = false;                                                                                          // 10
    if (currentQueue.length) {                                                                                 // 11
        queue = currentQueue.concat(queue);                                                                    // 12
    } else {                                                                                                   // 13
        queueIndex = -1;                                                                                       // 14
    }                                                                                                          // 15
    if (queue.length) {                                                                                        // 16
        drainQueue();                                                                                          // 17
    }                                                                                                          // 18
}                                                                                                              // 19
                                                                                                               // 20
function drainQueue() {                                                                                        // 21
    if (draining) {                                                                                            // 22
        return;                                                                                                // 23
    }                                                                                                          // 24
    var timeout = setTimeout(cleanUpNextTick);                                                                 // 25
    draining = true;                                                                                           // 26
                                                                                                               // 27
    var len = queue.length;                                                                                    // 28
    while(len) {                                                                                               // 29
        currentQueue = queue;                                                                                  // 30
        queue = [];                                                                                            // 31
        while (++queueIndex < len) {                                                                           // 32
            if (currentQueue) {                                                                                // 33
                currentQueue[queueIndex].run();                                                                // 34
            }                                                                                                  // 35
        }                                                                                                      // 36
        queueIndex = -1;                                                                                       // 37
        len = queue.length;                                                                                    // 38
    }                                                                                                          // 39
    currentQueue = null;                                                                                       // 40
    draining = false;                                                                                          // 41
    clearTimeout(timeout);                                                                                     // 42
}                                                                                                              // 43
                                                                                                               // 44
process.nextTick = function (fun) {                                                                            // 45
    var args = new Array(arguments.length - 1);                                                                // 46
    if (arguments.length > 1) {                                                                                // 47
        for (var i = 1; i < arguments.length; i++) {                                                           // 48
            args[i - 1] = arguments[i];                                                                        // 49
        }                                                                                                      // 50
    }                                                                                                          // 51
    queue.push(new Item(fun, args));                                                                           // 52
    if (queue.length === 1 && !draining) {                                                                     // 53
        setTimeout(drainQueue, 0);                                                                             // 54
    }                                                                                                          // 55
};                                                                                                             // 56
                                                                                                               // 57
// v8 likes predictible objects                                                                                // 58
function Item(fun, array) {                                                                                    // 59
    this.fun = fun;                                                                                            // 60
    this.array = array;                                                                                        // 61
}                                                                                                              // 62
Item.prototype.run = function () {                                                                             // 63
    this.fun.apply(null, this.array);                                                                          // 64
};                                                                                                             // 65
process.title = 'browser';                                                                                     // 66
process.browser = true;                                                                                        // 67
process.env = {};                                                                                              // 68
process.argv = [];                                                                                             // 69
process.version = ''; // empty string to avoid regexp issues                                                   // 70
process.versions = {};                                                                                         // 71
                                                                                                               // 72
function noop() {}                                                                                             // 73
                                                                                                               // 74
process.on = noop;                                                                                             // 75
process.addListener = noop;                                                                                    // 76
process.once = noop;                                                                                           // 77
process.off = noop;                                                                                            // 78
process.removeListener = noop;                                                                                 // 79
process.removeAllListeners = noop;                                                                             // 80
process.emit = noop;                                                                                           // 81
                                                                                                               // 82
process.binding = function (name) {                                                                            // 83
    throw new Error('process.binding is not supported');                                                       // 84
};                                                                                                             // 85
                                                                                                               // 86
process.cwd = function () { return '/' };                                                                      // 87
process.chdir = function (dir) {                                                                               // 88
    throw new Error('process.chdir is not supported');                                                         // 89
};                                                                                                             // 90
process.umask = function() { return 0; };                                                                      // 91
                                                                                                               // 92
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"domain-browser":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/node_modules/domain-browser/package.json                                     //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
exports.name = "domain-browser";                                                                               // 1
exports.version = "1.1.7";                                                                                     // 2
exports.main = "./index.js";                                                                                   // 3
                                                                                                               // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":["events",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/node_modules/domain-browser/index.js                                         //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
// This file should be ES5 compatible                                                                          // 1
/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */                                   // 2
'use strict'                                                                                                   // 3
module.exports = (function () {                                                                                // 4
	// Import Events                                                                                              // 5
	var events = require('events')                                                                                // 6
                                                                                                               // 7
	// Export Domain                                                                                              // 8
	var domain = {}                                                                                               // 9
	domain.createDomain = domain.create = function () {                                                           // 10
		var d = new events.EventEmitter()                                                                            // 11
                                                                                                               // 12
		function emitError (e) {                                                                                     // 13
			d.emit('error', e)                                                                                          // 14
		}                                                                                                            // 15
                                                                                                               // 16
		d.add = function (emitter) {                                                                                 // 17
			emitter.on('error', emitError)                                                                              // 18
		}                                                                                                            // 19
		d.remove = function (emitter) {                                                                              // 20
			emitter.removeListener('error', emitError)                                                                  // 21
		}                                                                                                            // 22
		d.bind = function (fn) {                                                                                     // 23
			return function () {                                                                                        // 24
				var args = Array.prototype.slice.call(arguments)                                                           // 25
				try {                                                                                                      // 26
					fn.apply(null, args)                                                                                      // 27
				}                                                                                                          // 28
				catch (err) {                                                                                              // 29
					emitError(err)                                                                                            // 30
				}                                                                                                          // 31
			}                                                                                                           // 32
		}                                                                                                            // 33
		d.intercept = function (fn) {                                                                                // 34
			return function (err) {                                                                                     // 35
				if ( err ) {                                                                                               // 36
					emitError(err)                                                                                            // 37
				}                                                                                                          // 38
				else {                                                                                                     // 39
					var args = Array.prototype.slice.call(arguments, 1)                                                       // 40
					try {                                                                                                     // 41
						fn.apply(null, args)                                                                                     // 42
					}                                                                                                         // 43
					catch (err) {                                                                                             // 44
						emitError(err)                                                                                           // 45
					}                                                                                                         // 46
				}                                                                                                          // 47
			}                                                                                                           // 48
		}                                                                                                            // 49
		d.run = function (fn) {                                                                                      // 50
			try {                                                                                                       // 51
				fn()                                                                                                       // 52
			}                                                                                                           // 53
			catch (err) {                                                                                               // 54
				emitError(err)                                                                                             // 55
			}                                                                                                           // 56
			return this                                                                                                 // 57
		}                                                                                                            // 58
		d.dispose = function () {                                                                                    // 59
			this.removeAllListeners()                                                                                   // 60
			return this                                                                                                 // 61
		}                                                                                                            // 62
		d.enter = d.exit = function () {                                                                             // 63
			return this                                                                                                 // 64
		}                                                                                                            // 65
		return d                                                                                                     // 66
	}                                                                                                             // 67
	return domain                                                                                                 // 68
}).call(this)                                                                                                  // 69
                                                                                                               // 70
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]},"events":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/node_modules/events/package.json                                             //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
exports.name = "events";                                                                                       // 1
exports.version = "1.1.0";                                                                                     // 2
exports.main = "./events.js";                                                                                  // 3
                                                                                                               // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"events.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                             //
// node_modules/meteor-node-stubs/node_modules/events/events.js                                                //
//                                                                                                             //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                               //
// Copyright Joyent, Inc. and other Node contributors.                                                         // 1
//                                                                                                             // 2
// Permission is hereby granted, free of charge, to any person obtaining a                                     // 3
// copy of this software and associated documentation files (the                                               // 4
// "Software"), to deal in the Software without restriction, including                                         // 5
// without limitation the rights to use, copy, modify, merge, publish,                                         // 6
// distribute, sublicense, and/or sell copies of the Software, and to permit                                   // 7
// persons to whom the Software is furnished to do so, subject to the                                          // 8
// following conditions:                                                                                       // 9
//                                                                                                             // 10
// The above copyright notice and this permission notice shall be included                                     // 11
// in all copies or substantial portions of the Software.                                                      // 12
//                                                                                                             // 13
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                     // 14
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                  // 15
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                   // 16
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                    // 17
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                       // 18
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                   // 19
// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                      // 20
                                                                                                               // 21
function EventEmitter() {                                                                                      // 22
  this._events = this._events || {};                                                                           // 23
  this._maxListeners = this._maxListeners || undefined;                                                        // 24
}                                                                                                              // 25
module.exports = EventEmitter;                                                                                 // 26
                                                                                                               // 27
// Backwards-compat with node 0.10.x                                                                           // 28
EventEmitter.EventEmitter = EventEmitter;                                                                      // 29
                                                                                                               // 30
EventEmitter.prototype._events = undefined;                                                                    // 31
EventEmitter.prototype._maxListeners = undefined;                                                              // 32
                                                                                                               // 33
// By default EventEmitters will print a warning if more than 10 listeners are                                 // 34
// added to it. This is a useful default which helps finding memory leaks.                                     // 35
EventEmitter.defaultMaxListeners = 10;                                                                         // 36
                                                                                                               // 37
// Obviously not all Emitters should be limited to 10. This function allows                                    // 38
// that to be increased. Set to zero for unlimited.                                                            // 39
EventEmitter.prototype.setMaxListeners = function(n) {                                                         // 40
  if (!isNumber(n) || n < 0 || isNaN(n))                                                                       // 41
    throw TypeError('n must be a positive number');                                                            // 42
  this._maxListeners = n;                                                                                      // 43
  return this;                                                                                                 // 44
};                                                                                                             // 45
                                                                                                               // 46
EventEmitter.prototype.emit = function(type) {                                                                 // 47
  var er, handler, len, args, i, listeners;                                                                    // 48
                                                                                                               // 49
  if (!this._events)                                                                                           // 50
    this._events = {};                                                                                         // 51
                                                                                                               // 52
  // If there is no 'error' event listener then throw.                                                         // 53
  if (type === 'error') {                                                                                      // 54
    if (!this._events.error ||                                                                                 // 55
        (isObject(this._events.error) && !this._events.error.length)) {                                        // 56
      er = arguments[1];                                                                                       // 57
      if (er instanceof Error) {                                                                               // 58
        throw er; // Unhandled 'error' event                                                                   // 59
      }                                                                                                        // 60
      throw TypeError('Uncaught, unspecified "error" event.');                                                 // 61
    }                                                                                                          // 62
  }                                                                                                            // 63
                                                                                                               // 64
  handler = this._events[type];                                                                                // 65
                                                                                                               // 66
  if (isUndefined(handler))                                                                                    // 67
    return false;                                                                                              // 68
                                                                                                               // 69
  if (isFunction(handler)) {                                                                                   // 70
    switch (arguments.length) {                                                                                // 71
      // fast cases                                                                                            // 72
      case 1:                                                                                                  // 73
        handler.call(this);                                                                                    // 74
        break;                                                                                                 // 75
      case 2:                                                                                                  // 76
        handler.call(this, arguments[1]);                                                                      // 77
        break;                                                                                                 // 78
      case 3:                                                                                                  // 79
        handler.call(this, arguments[1], arguments[2]);                                                        // 80
        break;                                                                                                 // 81
      // slower                                                                                                // 82
      default:                                                                                                 // 83
        args = Array.prototype.slice.call(arguments, 1);                                                       // 84
        handler.apply(this, args);                                                                             // 85
    }                                                                                                          // 86
  } else if (isObject(handler)) {                                                                              // 87
    args = Array.prototype.slice.call(arguments, 1);                                                           // 88
    listeners = handler.slice();                                                                               // 89
    len = listeners.length;                                                                                    // 90
    for (i = 0; i < len; i++)                                                                                  // 91
      listeners[i].apply(this, args);                                                                          // 92
  }                                                                                                            // 93
                                                                                                               // 94
  return true;                                                                                                 // 95
};                                                                                                             // 96
                                                                                                               // 97
EventEmitter.prototype.addListener = function(type, listener) {                                                // 98
  var m;                                                                                                       // 99
                                                                                                               // 100
  if (!isFunction(listener))                                                                                   // 101
    throw TypeError('listener must be a function');                                                            // 102
                                                                                                               // 103
  if (!this._events)                                                                                           // 104
    this._events = {};                                                                                         // 105
                                                                                                               // 106
  // To avoid recursion in the case that type === "newListener"! Before                                        // 107
  // adding it to the listeners, first emit "newListener".                                                     // 108
  if (this._events.newListener)                                                                                // 109
    this.emit('newListener', type,                                                                             // 110
              isFunction(listener.listener) ?                                                                  // 111
              listener.listener : listener);                                                                   // 112
                                                                                                               // 113
  if (!this._events[type])                                                                                     // 114
    // Optimize the case of one listener. Don't need the extra array object.                                   // 115
    this._events[type] = listener;                                                                             // 116
  else if (isObject(this._events[type]))                                                                       // 117
    // If we've already got an array, just append.                                                             // 118
    this._events[type].push(listener);                                                                         // 119
  else                                                                                                         // 120
    // Adding the second element, need to change to array.                                                     // 121
    this._events[type] = [this._events[type], listener];                                                       // 122
                                                                                                               // 123
  // Check for listener leak                                                                                   // 124
  if (isObject(this._events[type]) && !this._events[type].warned) {                                            // 125
    if (!isUndefined(this._maxListeners)) {                                                                    // 126
      m = this._maxListeners;                                                                                  // 127
    } else {                                                                                                   // 128
      m = EventEmitter.defaultMaxListeners;                                                                    // 129
    }                                                                                                          // 130
                                                                                                               // 131
    if (m && m > 0 && this._events[type].length > m) {                                                         // 132
      this._events[type].warned = true;                                                                        // 133
      console.error('(node) warning: possible EventEmitter memory ' +                                          // 134
                    'leak detected. %d listeners added. ' +                                                    // 135
                    'Use emitter.setMaxListeners() to increase limit.',                                        // 136
                    this._events[type].length);                                                                // 137
      if (typeof console.trace === 'function') {                                                               // 138
        // not supported in IE 10                                                                              // 139
        console.trace();                                                                                       // 140
      }                                                                                                        // 141
    }                                                                                                          // 142
  }                                                                                                            // 143
                                                                                                               // 144
  return this;                                                                                                 // 145
};                                                                                                             // 146
                                                                                                               // 147
EventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                // 148
                                                                                                               // 149
EventEmitter.prototype.once = function(type, listener) {                                                       // 150
  if (!isFunction(listener))                                                                                   // 151
    throw TypeError('listener must be a function');                                                            // 152
                                                                                                               // 153
  var fired = false;                                                                                           // 154
                                                                                                               // 155
  function g() {                                                                                               // 156
    this.removeListener(type, g);                                                                              // 157
                                                                                                               // 158
    if (!fired) {                                                                                              // 159
      fired = true;                                                                                            // 160
      listener.apply(this, arguments);                                                                         // 161
    }                                                                                                          // 162
  }                                                                                                            // 163
                                                                                                               // 164
  g.listener = listener;                                                                                       // 165
  this.on(type, g);                                                                                            // 166
                                                                                                               // 167
  return this;                                                                                                 // 168
};                                                                                                             // 169
                                                                                                               // 170
// emits a 'removeListener' event iff the listener was removed                                                 // 171
EventEmitter.prototype.removeListener = function(type, listener) {                                             // 172
  var list, position, length, i;                                                                               // 173
                                                                                                               // 174
  if (!isFunction(listener))                                                                                   // 175
    throw TypeError('listener must be a function');                                                            // 176
                                                                                                               // 177
  if (!this._events || !this._events[type])                                                                    // 178
    return this;                                                                                               // 179
                                                                                                               // 180
  list = this._events[type];                                                                                   // 181
  length = list.length;                                                                                        // 182
  position = -1;                                                                                               // 183
                                                                                                               // 184
  if (list === listener ||                                                                                     // 185
      (isFunction(list.listener) && list.listener === listener)) {                                             // 186
    delete this._events[type];                                                                                 // 187
    if (this._events.removeListener)                                                                           // 188
      this.emit('removeListener', type, listener);                                                             // 189
                                                                                                               // 190
  } else if (isObject(list)) {                                                                                 // 191
    for (i = length; i-- > 0;) {                                                                               // 192
      if (list[i] === listener ||                                                                              // 193
          (list[i].listener && list[i].listener === listener)) {                                               // 194
        position = i;                                                                                          // 195
        break;                                                                                                 // 196
      }                                                                                                        // 197
    }                                                                                                          // 198
                                                                                                               // 199
    if (position < 0)                                                                                          // 200
      return this;                                                                                             // 201
                                                                                                               // 202
    if (list.length === 1) {                                                                                   // 203
      list.length = 0;                                                                                         // 204
      delete this._events[type];                                                                               // 205
    } else {                                                                                                   // 206
      list.splice(position, 1);                                                                                // 207
    }                                                                                                          // 208
                                                                                                               // 209
    if (this._events.removeListener)                                                                           // 210
      this.emit('removeListener', type, listener);                                                             // 211
  }                                                                                                            // 212
                                                                                                               // 213
  return this;                                                                                                 // 214
};                                                                                                             // 215
                                                                                                               // 216
EventEmitter.prototype.removeAllListeners = function(type) {                                                   // 217
  var key, listeners;                                                                                          // 218
                                                                                                               // 219
  if (!this._events)                                                                                           // 220
    return this;                                                                                               // 221
                                                                                                               // 222
  // not listening for removeListener, no need to emit                                                         // 223
  if (!this._events.removeListener) {                                                                          // 224
    if (arguments.length === 0)                                                                                // 225
      this._events = {};                                                                                       // 226
    else if (this._events[type])                                                                               // 227
      delete this._events[type];                                                                               // 228
    return this;                                                                                               // 229
  }                                                                                                            // 230
                                                                                                               // 231
  // emit removeListener for all listeners on all events                                                       // 232
  if (arguments.length === 0) {                                                                                // 233
    for (key in this._events) {                                                                                // 234
      if (key === 'removeListener') continue;                                                                  // 235
      this.removeAllListeners(key);                                                                            // 236
    }                                                                                                          // 237
    this.removeAllListeners('removeListener');                                                                 // 238
    this._events = {};                                                                                         // 239
    return this;                                                                                               // 240
  }                                                                                                            // 241
                                                                                                               // 242
  listeners = this._events[type];                                                                              // 243
                                                                                                               // 244
  if (isFunction(listeners)) {                                                                                 // 245
    this.removeListener(type, listeners);                                                                      // 246
  } else if (listeners) {                                                                                      // 247
    // LIFO order                                                                                              // 248
    while (listeners.length)                                                                                   // 249
      this.removeListener(type, listeners[listeners.length - 1]);                                              // 250
  }                                                                                                            // 251
  delete this._events[type];                                                                                   // 252
                                                                                                               // 253
  return this;                                                                                                 // 254
};                                                                                                             // 255
                                                                                                               // 256
EventEmitter.prototype.listeners = function(type) {                                                            // 257
  var ret;                                                                                                     // 258
  if (!this._events || !this._events[type])                                                                    // 259
    ret = [];                                                                                                  // 260
  else if (isFunction(this._events[type]))                                                                     // 261
    ret = [this._events[type]];                                                                                // 262
  else                                                                                                         // 263
    ret = this._events[type].slice();                                                                          // 264
  return ret;                                                                                                  // 265
};                                                                                                             // 266
                                                                                                               // 267
EventEmitter.prototype.listenerCount = function(type) {                                                        // 268
  if (this._events) {                                                                                          // 269
    var evlistener = this._events[type];                                                                       // 270
                                                                                                               // 271
    if (isFunction(evlistener))                                                                                // 272
      return 1;                                                                                                // 273
    else if (evlistener)                                                                                       // 274
      return evlistener.length;                                                                                // 275
  }                                                                                                            // 276
  return 0;                                                                                                    // 277
};                                                                                                             // 278
                                                                                                               // 279
EventEmitter.listenerCount = function(emitter, type) {                                                         // 280
  return emitter.listenerCount(type);                                                                          // 281
};                                                                                                             // 282
                                                                                                               // 283
function isFunction(arg) {                                                                                     // 284
  return typeof arg === 'function';                                                                            // 285
}                                                                                                              // 286
                                                                                                               // 287
function isNumber(arg) {                                                                                       // 288
  return typeof arg === 'number';                                                                              // 289
}                                                                                                              // 290
                                                                                                               // 291
function isObject(arg) {                                                                                       // 292
  return typeof arg === 'object' && arg !== null;                                                              // 293
}                                                                                                              // 294
                                                                                                               // 295
function isUndefined(arg) {                                                                                    // 296
  return arg === void 0;                                                                                       // 297
}                                                                                                              // 298
                                                                                                               // 299
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}}},{"extensions":[".js",".json"]});
var exports = require("./node_modules/meteor/modules/client.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.modules = exports, {
  meteorInstall: meteorInstall,
  Buffer: Buffer,
  process: process
});

})();
